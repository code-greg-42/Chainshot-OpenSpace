// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"dAPVv":[function(require,module,exports) {
var Refresh = require("react-refresh/runtime");
var ErrorOverlay = require("react-error-overlay");
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};
ErrorOverlay.setEditorHandler(function editorHandler(errorLocation) {
    let file = `${errorLocation.fileName}:${errorLocation.lineNumber || 1}:${errorLocation.colNumber || 1}`;
    fetch(`/__parcel_launch_editor?file=${encodeURIComponent(file)}`);
});
ErrorOverlay.startReportingRuntimeErrors({
    onError: function() {}
});
window.addEventListener("parcelhmraccept", ()=>{
    ErrorOverlay.dismissRuntimeErrors();
});

},{"react-refresh/runtime":"8QnHs","react-error-overlay":"egPDC"}],"8QnHs":[function(require,module,exports) {
"use strict";
module.exports = require("./cjs/react-refresh-runtime.development.js");

},{"./cjs/react-refresh-runtime.development.js":"10Glq"}],"10Glq":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    "use strict";
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    var REACT_FRAGMENT_TYPE = 0xeacb;
    var REACT_STRICT_MODE_TYPE = 0xeacc;
    var REACT_PROFILER_TYPE = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    var REACT_SUSPENSE_TYPE = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_SCOPE_TYPE = 0xead7;
    var REACT_OPAQUE_ID_TYPE = 0xeae0;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_OFFSCREEN_TYPE = 0xeae2;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;
    if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
        REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
        REACT_PROFILER_TYPE = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
        REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
        REACT_SCOPE_TYPE = symbolFor("react.scope");
        REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
    }
    var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === "function" ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== "function") {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += "\n---\n" + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== "function" && typeof type !== "object") return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === "object" && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + "$render");
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + "$type");
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {},
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {},
                onCommitFiberUnmount: function() {}
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === "function" && typeof injected.setRefreshHandler === "function") // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === "function" && typeof injected.setRefreshHandler === "function") // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {};
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = "needsSignature";
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case "needsSignature":
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === "function";
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = "needsCustomHooks";
                    }
                    break;
                case "needsCustomHooks":
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = "resolved";
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case "function":
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== "constructor") // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === "string" && /^[A-Z]/.test(name);
            case "object":
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"egPDC":[function(require,module,exports) {
var process = require("process");
!function(e, t) {
    module.exports = t();
}(window, function() {
    return function(e1) {
        var t1 = {};
        function r(n) {
            if (t1[n]) return t1[n].exports;
            var o = t1[n] = {
                i: n,
                l: !1,
                exports: {}
            };
            return e1[n].call(o.exports, o, o.exports, r), o.l = !0, o.exports;
        }
        return r.m = e1, r.c = t1, r.d = function(e, t, n) {
            r.o(e, t) || Object.defineProperty(e, t, {
                enumerable: !0,
                get: n
            });
        }, r.r = function(e) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(e, "__esModule", {
                value: !0
            });
        }, r.t = function(e, t2) {
            if (1 & t2 && (e = r(e)), 8 & t2) return e;
            if (4 & t2 && "object" == typeof e && e && e.__esModule) return e;
            var n = Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", {
                enumerable: !0,
                value: e
            }), 2 & t2 && "string" != typeof e) for(var o in e)r.d(n, o, (function(t) {
                return e[t];
            }).bind(null, o));
            return n;
        }, r.n = function(e) {
            var t = e && e.__esModule ? function() {
                return e.default;
            } : function() {
                return e;
            };
            return r.d(t, "a", t), t;
        }, r.o = function(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
        }, r.p = "", r(r.s = 15);
    }([
        function(e, t, r) {
            e.exports = r(8);
        },
        function(e2, t3) {
            t3.getArg = function(e, t, r) {
                if (t in e) return e[t];
                if (3 === arguments.length) return r;
                throw new Error('"' + t + '" is a required argument.');
            };
            var r1 = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/, n1 = /^data:.+\,.+$/;
            function o(e) {
                var t = e.match(r1);
                return t ? {
                    scheme: t[1],
                    auth: t[2],
                    host: t[3],
                    port: t[4],
                    path: t[5]
                } : null;
            }
            function a(e) {
                var t = "";
                return e.scheme && (t += e.scheme + ":"), t += "//", e.auth && (t += e.auth + "@"), e.host && (t += e.host), e.port && (t += ":" + e.port), e.path && (t += e.path), t;
            }
            function i1(e) {
                var r = e, n = o(e);
                if (n) {
                    if (!n.path) return e;
                    r = n.path;
                }
                for(var i, l = t3.isAbsolute(r), u = r.split(/\/+/), c = 0, s = u.length - 1; s >= 0; s--)"." === (i = u[s]) ? u.splice(s, 1) : ".." === i ? c++ : c > 0 && ("" === i ? (u.splice(s + 1, c), c = 0) : (u.splice(s, 2), c--));
                return "" === (r = u.join("/")) && (r = l ? "/" : "."), n ? (n.path = r, a(n)) : r;
            }
            t3.urlParse = o, t3.urlGenerate = a, t3.normalize = i1, t3.join = function(e, t) {
                "" === e && (e = "."), "" === t && (t = ".");
                var r = o(t), l = o(e);
                if (l && (e = l.path || "/"), r && !r.scheme) return l && (r.scheme = l.scheme), a(r);
                if (r || t.match(n1)) return t;
                if (l && !l.host && !l.path) return l.host = t, a(l);
                var u = "/" === t.charAt(0) ? t : i1(e.replace(/\/+$/, "") + "/" + t);
                return l ? (l.path = u, a(l)) : u;
            }, t3.isAbsolute = function(e) {
                return "/" === e.charAt(0) || !!e.match(r1);
            }, t3.relative = function(e, t) {
                "" === e && (e = "."), e = e.replace(/\/$/, "");
                for(var r = 0; 0 !== t.indexOf(e + "/");){
                    var n = e.lastIndexOf("/");
                    if (n < 0) return t;
                    if ((e = e.slice(0, n)).match(/^([^\/]+:\/)?\/*$/)) return t;
                    ++r;
                }
                return Array(r + 1).join("../") + t.substr(e.length + 1);
            };
            var l1 = !("__proto__" in Object.create(null));
            function u1(e) {
                return e;
            }
            function c1(e) {
                if (!e) return !1;
                var t = e.length;
                if (t < 9) return !1;
                if (95 !== e.charCodeAt(t - 1) || 95 !== e.charCodeAt(t - 2) || 111 !== e.charCodeAt(t - 3) || 116 !== e.charCodeAt(t - 4) || 111 !== e.charCodeAt(t - 5) || 114 !== e.charCodeAt(t - 6) || 112 !== e.charCodeAt(t - 7) || 95 !== e.charCodeAt(t - 8) || 95 !== e.charCodeAt(t - 9)) return !1;
                for(var r = t - 10; r >= 0; r--)if (36 !== e.charCodeAt(r)) return !1;
                return !0;
            }
            function s1(e, t) {
                return e === t ? 0 : e > t ? 1 : -1;
            }
            t3.toSetString = l1 ? u1 : function(e) {
                return c1(e) ? "$" + e : e;
            }, t3.fromSetString = l1 ? u1 : function(e) {
                return c1(e) ? e.slice(1) : e;
            }, t3.compareByOriginalPositions = function(e, t, r) {
                var n = e.source - t.source;
                return 0 !== n ? n : 0 !== (n = e.originalLine - t.originalLine) ? n : 0 !== (n = e.originalColumn - t.originalColumn) || r ? n : 0 !== (n = e.generatedColumn - t.generatedColumn) ? n : 0 !== (n = e.generatedLine - t.generatedLine) ? n : e.name - t.name;
            }, t3.compareByGeneratedPositionsDeflated = function(e, t, r) {
                var n = e.generatedLine - t.generatedLine;
                return 0 !== n ? n : 0 !== (n = e.generatedColumn - t.generatedColumn) || r ? n : 0 !== (n = e.source - t.source) ? n : 0 !== (n = e.originalLine - t.originalLine) ? n : 0 !== (n = e.originalColumn - t.originalColumn) ? n : e.name - t.name;
            }, t3.compareByGeneratedPositionsInflated = function(e, t) {
                var r = e.generatedLine - t.generatedLine;
                return 0 !== r ? r : 0 !== (r = e.generatedColumn - t.generatedColumn) ? r : 0 !== (r = s1(e.source, t.source)) ? r : 0 !== (r = e.originalLine - t.originalLine) ? r : 0 !== (r = e.originalColumn - t.originalColumn) ? r : s1(e.name, t.name);
            };
        },
        function(e3, t4) {
            function r2(e, t) {
                for(var r = 0, n = e.length - 1; n >= 0; n--){
                    var o = e[n];
                    "." === o ? e.splice(n, 1) : ".." === o ? (e.splice(n, 1), r++) : r && (e.splice(n, 1), r--);
                }
                if (t) for(; r--; r)e.unshift("..");
                return e;
            }
            function n2(e, t) {
                if (e.filter) return e.filter(t);
                for(var r = [], n = 0; n < e.length; n++)t(e[n], n, e) && r.push(e[n]);
                return r;
            }
            t4.resolve = function() {
                for(var e4 = "", t = !1, o = arguments.length - 1; o >= -1 && !t; o--){
                    var a = o >= 0 ? arguments[o] : process.cwd();
                    if ("string" != typeof a) throw new TypeError("Arguments to path.resolve must be strings");
                    a && (e4 = a + "/" + e4, t = "/" === a.charAt(0));
                }
                return (t ? "/" : "") + (e4 = r2(n2(e4.split("/"), function(e) {
                    return !!e;
                }), !t).join("/")) || ".";
            }, t4.normalize = function(e5) {
                var a = t4.isAbsolute(e5), i = "/" === o1(e5, -1);
                return (e5 = r2(n2(e5.split("/"), function(e) {
                    return !!e;
                }), !a).join("/")) || a || (e5 = "."), e5 && i && (e5 += "/"), (a ? "/" : "") + e5;
            }, t4.isAbsolute = function(e) {
                return "/" === e.charAt(0);
            }, t4.join = function() {
                var e6 = Array.prototype.slice.call(arguments, 0);
                return t4.normalize(n2(e6, function(e, t) {
                    if ("string" != typeof e) throw new TypeError("Arguments to path.join must be strings");
                    return e;
                }).join("/"));
            }, t4.relative = function(e7, r3) {
                function n(e) {
                    for(var t = 0; t < e.length && "" === e[t]; t++);
                    for(var r = e.length - 1; r >= 0 && "" === e[r]; r--);
                    return t > r ? [] : e.slice(t, r - t + 1);
                }
                e7 = t4.resolve(e7).substr(1), r3 = t4.resolve(r3).substr(1);
                for(var o = n(e7.split("/")), a = n(r3.split("/")), i = Math.min(o.length, a.length), l = i, u = 0; u < i; u++)if (o[u] !== a[u]) {
                    l = u;
                    break;
                }
                var c = [];
                for(u = l; u < o.length; u++)c.push("..");
                return (c = c.concat(a.slice(l))).join("/");
            }, t4.sep = "/", t4.delimiter = ":", t4.dirname = function(e) {
                if ("string" != typeof e && (e += ""), 0 === e.length) return ".";
                for(var t = e.charCodeAt(0), r = 47 === t, n = -1, o = !0, a = e.length - 1; a >= 1; --a)if (47 === (t = e.charCodeAt(a))) {
                    if (!o) {
                        n = a;
                        break;
                    }
                } else o = !1;
                return -1 === n ? r ? "/" : "." : r && 1 === n ? "/" : e.slice(0, n);
            }, t4.basename = function(e8, t5) {
                var r4 = function(e) {
                    "string" != typeof e && (e += "");
                    var t, r = 0, n = -1, o = !0;
                    for(t = e.length - 1; t >= 0; --t)if (47 === e.charCodeAt(t)) {
                        if (!o) {
                            r = t + 1;
                            break;
                        }
                    } else -1 === n && (o = !1, n = t + 1);
                    return -1 === n ? "" : e.slice(r, n);
                }(e8);
                return t5 && r4.substr(-1 * t5.length) === t5 && (r4 = r4.substr(0, r4.length - t5.length)), r4;
            }, t4.extname = function(e) {
                "string" != typeof e && (e += "");
                for(var t = -1, r = 0, n = -1, o = !0, a = 0, i = e.length - 1; i >= 0; --i){
                    var l = e.charCodeAt(i);
                    if (47 !== l) -1 === n && (o = !1, n = i + 1), 46 === l ? -1 === t ? t = i : 1 !== a && (a = 1) : -1 !== t && (a = -1);
                    else if (!o) {
                        r = i + 1;
                        break;
                    }
                }
                return -1 === t || -1 === n || 0 === a || 1 === a && t === n - 1 && t === r + 1 ? "" : e.slice(t, n);
            };
            var o1 = "b" === "ab".substr(-1) ? function(e, t, r) {
                return e.substr(t, r);
            } : function(e, t, r) {
                return t < 0 && (t = e.length + t), e.substr(t, r);
            };
        },
        function(e, t, r) {
            t.SourceMapGenerator = r(4).SourceMapGenerator, t.SourceMapConsumer = r(11).SourceMapConsumer, t.SourceNode = r(14).SourceNode;
        },
        function(e9, t6, r5) {
            var n3 = r5(5), o = r5(1), a1 = r5(6).ArraySet, i2 = r5(10).MappingList;
            function l2(e) {
                e || (e = {}), this._file = o.getArg(e, "file", null), this._sourceRoot = o.getArg(e, "sourceRoot", null), this._skipValidation = o.getArg(e, "skipValidation", !1), this._sources = new a1, this._names = new a1, this._mappings = new i2, this._sourcesContents = null;
            }
            l2.prototype._version = 3, l2.fromSourceMap = function(e10) {
                var t7 = e10.sourceRoot, r = new l2({
                    file: e10.file,
                    sourceRoot: t7
                });
                return e10.eachMapping(function(e) {
                    var n = {
                        generated: {
                            line: e.generatedLine,
                            column: e.generatedColumn
                        }
                    };
                    null != e.source && (n.source = e.source, null != t7 && (n.source = o.relative(t7, n.source)), n.original = {
                        line: e.originalLine,
                        column: e.originalColumn
                    }, null != e.name && (n.name = e.name)), r.addMapping(n);
                }), e10.sources.forEach(function(t) {
                    var n = e10.sourceContentFor(t);
                    null != n && r.setSourceContent(t, n);
                }), r;
            }, l2.prototype.addMapping = function(e) {
                var t = o.getArg(e, "generated"), r = o.getArg(e, "original", null), n = o.getArg(e, "source", null), a = o.getArg(e, "name", null);
                this._skipValidation || this._validateMapping(t, r, n, a), null != n && (n = String(n), this._sources.has(n) || this._sources.add(n)), null != a && (a = String(a), this._names.has(a) || this._names.add(a)), this._mappings.add({
                    generatedLine: t.line,
                    generatedColumn: t.column,
                    originalLine: null != r && r.line,
                    originalColumn: null != r && r.column,
                    source: n,
                    name: a
                });
            }, l2.prototype.setSourceContent = function(e, t) {
                var r = e;
                null != this._sourceRoot && (r = o.relative(this._sourceRoot, r)), null != t ? (this._sourcesContents || (this._sourcesContents = Object.create(null)), this._sourcesContents[o.toSetString(r)] = t) : this._sourcesContents && (delete this._sourcesContents[o.toSetString(r)], 0 === Object.keys(this._sourcesContents).length && (this._sourcesContents = null));
            }, l2.prototype.applySourceMap = function(e, t8, r) {
                var n4 = t8;
                if (null == t8) {
                    if (null == e.file) throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');
                    n4 = e.file;
                }
                var i = this._sourceRoot;
                null != i && (n4 = o.relative(i, n4));
                var l = new a1, u = new a1;
                this._mappings.unsortedForEach(function(t) {
                    if (t.source === n4 && null != t.originalLine) {
                        var a = e.originalPositionFor({
                            line: t.originalLine,
                            column: t.originalColumn
                        });
                        null != a.source && (t.source = a.source, null != r && (t.source = o.join(r, t.source)), null != i && (t.source = o.relative(i, t.source)), t.originalLine = a.line, t.originalColumn = a.column, null != a.name && (t.name = a.name));
                    }
                    var c = t.source;
                    null == c || l.has(c) || l.add(c);
                    var s = t.name;
                    null == s || u.has(s) || u.add(s);
                }, this), this._sources = l, this._names = u, e.sources.forEach(function(t) {
                    var n = e.sourceContentFor(t);
                    null != n && (null != r && (t = o.join(r, t)), null != i && (t = o.relative(i, t)), this.setSourceContent(t, n));
                }, this);
            }, l2.prototype._validateMapping = function(e, t, r, n) {
                if (t && "number" != typeof t.line && "number" != typeof t.column) throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
                if ((!(e && "line" in e && "column" in e && e.line > 0 && e.column >= 0) || t || r || n) && !(e && "line" in e && "column" in e && t && "line" in t && "column" in t && e.line > 0 && e.column >= 0 && t.line > 0 && t.column >= 0 && r)) throw new Error("Invalid mapping: " + JSON.stringify({
                    generated: e,
                    source: r,
                    original: t,
                    name: n
                }));
            }, l2.prototype._serializeMappings = function() {
                for(var e, t, r, a, i = 0, l = 1, u = 0, c = 0, s = 0, f = 0, d = "", p = this._mappings.toArray(), h = 0, g = p.length; h < g; h++){
                    if (e = "", (t = p[h]).generatedLine !== l) for(i = 0; t.generatedLine !== l;)e += ";", l++;
                    else if (h > 0) {
                        if (!o.compareByGeneratedPositionsInflated(t, p[h - 1])) continue;
                        e += ",";
                    }
                    e += n3.encode(t.generatedColumn - i), i = t.generatedColumn, null != t.source && (a = this._sources.indexOf(t.source), e += n3.encode(a - f), f = a, e += n3.encode(t.originalLine - 1 - c), c = t.originalLine - 1, e += n3.encode(t.originalColumn - u), u = t.originalColumn, null != t.name && (r = this._names.indexOf(t.name), e += n3.encode(r - s), s = r)), d += e;
                }
                return d;
            }, l2.prototype._generateSourcesContent = function(e11, t) {
                return e11.map(function(e) {
                    if (!this._sourcesContents) return null;
                    null != t && (e = o.relative(t, e));
                    var r = o.toSetString(e);
                    return Object.prototype.hasOwnProperty.call(this._sourcesContents, r) ? this._sourcesContents[r] : null;
                }, this);
            }, l2.prototype.toJSON = function() {
                var e = {
                    version: this._version,
                    sources: this._sources.toArray(),
                    names: this._names.toArray(),
                    mappings: this._serializeMappings()
                };
                return null != this._file && (e.file = this._file), null != this._sourceRoot && (e.sourceRoot = this._sourceRoot), this._sourcesContents && (e.sourcesContent = this._generateSourcesContent(e.sources, e.sourceRoot)), e;
            }, l2.prototype.toString = function() {
                return JSON.stringify(this.toJSON());
            }, t6.SourceMapGenerator = l2;
        },
        function(e12, t9, r6) {
            var n = r6(9);
            t9.encode = function(e13) {
                var t, r = "", o = function(e) {
                    return e < 0 ? 1 + (-e << 1) : 0 + (e << 1);
                }(e13);
                do t = 31 & o, (o >>>= 5) > 0 && (t |= 32), r += n.encode(t);
                while (o > 0);
                return r;
            }, t9.decode = function(e, t, r) {
                var o, a, i, l, u = e.length, c = 0, s = 0;
                do {
                    if (t >= u) throw new Error("Expected more digits in base 64 VLQ value.");
                    if (-1 === (a = n.decode(e.charCodeAt(t++)))) throw new Error("Invalid base64 digit: " + e.charAt(t - 1));
                    o = !!(32 & a), c += (a &= 31) << s, s += 5;
                }while (o);
                r.value = (l = (i = c) >> 1, 1 == (1 & i) ? -l : l), r.rest = t;
            };
        },
        function(e14, t10, r7) {
            var n5 = r7(1), o2 = Object.prototype.hasOwnProperty, a = "undefined" != typeof Map;
            function i3() {
                this._array = [], this._set = a ? new Map : Object.create(null);
            }
            i3.fromArray = function(e, t) {
                for(var r = new i3, n = 0, o = e.length; n < o; n++)r.add(e[n], t);
                return r;
            }, i3.prototype.size = function() {
                return a ? this._set.size : Object.getOwnPropertyNames(this._set).length;
            }, i3.prototype.add = function(e, t) {
                var r = a ? e : n5.toSetString(e), i = a ? this.has(e) : o2.call(this._set, r), l = this._array.length;
                i && !t || this._array.push(e), i || (a ? this._set.set(e, l) : this._set[r] = l);
            }, i3.prototype.has = function(e) {
                if (a) return this._set.has(e);
                var t = n5.toSetString(e);
                return o2.call(this._set, t);
            }, i3.prototype.indexOf = function(e) {
                if (a) {
                    var t = this._set.get(e);
                    if (t >= 0) return t;
                } else {
                    var r = n5.toSetString(e);
                    if (o2.call(this._set, r)) return this._set[r];
                }
                throw new Error('"' + e + '" is not in the set.');
            }, i3.prototype.at = function(e) {
                if (e >= 0 && e < this._array.length) return this._array[e];
                throw new Error("No element indexed by " + e);
            }, i3.prototype.toArray = function() {
                return this._array.slice();
            }, t10.ArraySet = i3;
        },
        function(e15, t, r) {
            "use strict";
            function n(e16) {
                return Array.isArray(e16) || (e16 = [
                    e16
                ]), Promise.all(e16.map(function(e17) {
                    return e17.then(function(e) {
                        return {
                            isFulfilled: !0,
                            isRejected: !1,
                            value: e
                        };
                    }).catch(function(e) {
                        return {
                            isFulfilled: !1,
                            isRejected: !0,
                            reason: e
                        };
                    });
                }));
            }
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.settle = n, t.default = n;
        },
        function(e18, t11, r8) {
            var n6 = function(e19) {
                "use strict";
                var t12, r9 = Object.prototype, n7 = r9.hasOwnProperty, o3 = "function" == typeof Symbol ? Symbol : {}, a2 = o3.iterator || "@@iterator", i4 = o3.asyncIterator || "@@asyncIterator", l3 = o3.toStringTag || "@@toStringTag";
                function u2(e, t, r) {
                    return Object.defineProperty(e, t, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }), e[t];
                }
                try {
                    u2({}, "");
                } catch (e20) {
                    u2 = function(e, t, r) {
                        return e[t] = r;
                    };
                }
                function c2(e21, t13, r10, n8) {
                    var o4 = t13 && t13.prototype instanceof m ? t13 : m, a3 = Object.create(o4.prototype), i5 = new T(n8 || []);
                    return a3._invoke = function(e, t, r) {
                        var n = f1;
                        return function(o, a) {
                            if (n === p) throw new Error("Generator is already running");
                            if (n === h) {
                                if ("throw" === o) throw a;
                                return L();
                            }
                            for(r.method = o, r.arg = a;;){
                                var i = r.delegate;
                                if (i) {
                                    var l = _(i, r);
                                    if (l) {
                                        if (l === g) continue;
                                        return l;
                                    }
                                }
                                if ("next" === r.method) r.sent = r._sent = r.arg;
                                else if ("throw" === r.method) {
                                    if (n === f1) throw n = h, r.arg;
                                    r.dispatchException(r.arg);
                                } else "return" === r.method && r.abrupt("return", r.arg);
                                n = p;
                                var u = s(e, t, r);
                                if ("normal" === u.type) {
                                    if (n = r.done ? h : d, u.arg === g) continue;
                                    return {
                                        value: u.arg,
                                        done: r.done
                                    };
                                }
                                "throw" === u.type && (n = h, r.method = "throw", r.arg = u.arg);
                            }
                        };
                    }(e21, r10, i5), a3;
                }
                function s(e, t, r) {
                    try {
                        return {
                            type: "normal",
                            arg: e.call(t, r)
                        };
                    } catch (e22) {
                        return {
                            type: "throw",
                            arg: e22
                        };
                    }
                }
                e19.wrap = c2;
                var f1 = "suspendedStart", d = "suspendedYield", p = "executing", h = "completed", g = {};
                function m() {}
                function v() {}
                function y() {}
                var b = {};
                b[a2] = function() {
                    return this;
                };
                var w = Object.getPrototypeOf, k = w && w(w(P([])));
                k && k !== r9 && n7.call(k, a2) && (b = k);
                var E = y.prototype = m.prototype = Object.create(b);
                function S(e23) {
                    [
                        "next",
                        "throw",
                        "return"
                    ].forEach(function(t) {
                        u2(e23, t, function(e) {
                            return this._invoke(t, e);
                        });
                    });
                }
                function x(e24, t) {
                    var r11;
                    this._invoke = function(o5, a4) {
                        function i6() {
                            return new t(function(r12, i7) {
                                !function r(o, a, i, l) {
                                    var u = s(e24[o], e24, a);
                                    if ("throw" !== u.type) {
                                        var c = u.arg, f = c.value;
                                        return f && "object" == typeof f && n7.call(f, "__await") ? t.resolve(f.__await).then(function(e) {
                                            r("next", e, i, l);
                                        }, function(e) {
                                            r("throw", e, i, l);
                                        }) : t.resolve(f).then(function(e) {
                                            c.value = e, i(c);
                                        }, function(e) {
                                            return r("throw", e, i, l);
                                        });
                                    }
                                    l(u.arg);
                                }(o5, a4, r12, i7);
                            });
                        }
                        return r11 = r11 ? r11.then(i6, i6) : i6();
                    };
                }
                function _(e, r) {
                    var n = e.iterator[r.method];
                    if (n === t12) {
                        if (r.delegate = null, "throw" === r.method) {
                            if (e.iterator.return && (r.method = "return", r.arg = t12, _(e, r), "throw" === r.method)) return g;
                            r.method = "throw", r.arg = new TypeError("The iterator does not provide a 'throw' method");
                        }
                        return g;
                    }
                    var o = s(n, e.iterator, r.arg);
                    if ("throw" === o.type) return r.method = "throw", r.arg = o.arg, r.delegate = null, g;
                    var a = o.arg;
                    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t12), r.delegate = null, g) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, g);
                }
                function C(e) {
                    var t = {
                        tryLoc: e[0]
                    };
                    1 in e && (t.catchLoc = e[1]), 2 in e && (t.finallyLoc = e[2], t.afterLoc = e[3]), this.tryEntries.push(t);
                }
                function O(e) {
                    var t = e.completion || {};
                    t.type = "normal", delete t.arg, e.completion = t;
                }
                function T(e) {
                    this.tryEntries = [
                        {
                            tryLoc: "root"
                        }
                    ], e.forEach(C, this), this.reset(!0);
                }
                function P(e) {
                    if (e) {
                        var r13 = e[a2];
                        if (r13) return r13.call(e);
                        if ("function" == typeof e.next) return e;
                        if (!isNaN(e.length)) {
                            var o = -1, i = function r() {
                                for(; ++o < e.length;)if (n7.call(e, o)) return r.value = e[o], r.done = !1, r;
                                return r.value = t12, r.done = !0, r;
                            };
                            return i.next = i;
                        }
                    }
                    return {
                        next: L
                    };
                }
                function L() {
                    return {
                        value: t12,
                        done: !0
                    };
                }
                return v.prototype = E.constructor = y, y.constructor = v, v.displayName = u2(y, l3, "GeneratorFunction"), e19.isGeneratorFunction = function(e) {
                    var t = "function" == typeof e && e.constructor;
                    return !!t && (t === v || "GeneratorFunction" === (t.displayName || t.name));
                }, e19.mark = function(e) {
                    return Object.setPrototypeOf ? Object.setPrototypeOf(e, y) : (e.__proto__ = y, u2(e, l3, "GeneratorFunction")), e.prototype = Object.create(E), e;
                }, e19.awrap = function(e) {
                    return {
                        __await: e
                    };
                }, S(x.prototype), x.prototype[i4] = function() {
                    return this;
                }, e19.AsyncIterator = x, e19.async = function(t, r, n, o, a) {
                    void 0 === a && (a = Promise);
                    var i = new x(c2(t, r, n, o), a);
                    return e19.isGeneratorFunction(r) ? i : i.next().then(function(e) {
                        return e.done ? e.value : i.next();
                    });
                }, S(E), u2(E, l3, "Generator"), E[a2] = function() {
                    return this;
                }, E.toString = function() {
                    return "[object Generator]";
                }, e19.keys = function(e) {
                    var t = [];
                    for(var r15 in e)t.push(r15);
                    return t.reverse(), function r() {
                        for(; t.length;){
                            var n = t.pop();
                            if (n in e) return r.value = n, r.done = !1, r;
                        }
                        return r.done = !0, r;
                    };
                }, e19.values = P, T.prototype = {
                    constructor: T,
                    reset: function(e) {
                        if (this.prev = 0, this.next = 0, this.sent = this._sent = t12, this.done = !1, this.delegate = null, this.method = "next", this.arg = t12, this.tryEntries.forEach(O), !e) for(var r in this)"t" === r.charAt(0) && n7.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t12);
                    },
                    stop: function() {
                        this.done = !0;
                        var e = this.tryEntries[0].completion;
                        if ("throw" === e.type) throw e.arg;
                        return this.rval;
                    },
                    dispatchException: function(e) {
                        if (this.done) throw e;
                        var r = this;
                        function o6(n, o) {
                            return l.type = "throw", l.arg = e, r.next = n, o && (r.method = "next", r.arg = t12), !!o;
                        }
                        for(var a = this.tryEntries.length - 1; a >= 0; --a){
                            var i = this.tryEntries[a], l = i.completion;
                            if ("root" === i.tryLoc) return o6("end");
                            if (i.tryLoc <= this.prev) {
                                var u = n7.call(i, "catchLoc"), c = n7.call(i, "finallyLoc");
                                if (u && c) {
                                    if (this.prev < i.catchLoc) return o6(i.catchLoc, !0);
                                    if (this.prev < i.finallyLoc) return o6(i.finallyLoc);
                                } else if (u) {
                                    if (this.prev < i.catchLoc) return o6(i.catchLoc, !0);
                                } else {
                                    if (!c) throw new Error("try statement without catch or finally");
                                    if (this.prev < i.finallyLoc) return o6(i.finallyLoc);
                                }
                            }
                        }
                    },
                    abrupt: function(e, t) {
                        for(var r = this.tryEntries.length - 1; r >= 0; --r){
                            var o = this.tryEntries[r];
                            if (o.tryLoc <= this.prev && n7.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
                                var a = o;
                                break;
                            }
                        }
                        a && ("break" === e || "continue" === e) && a.tryLoc <= t && t <= a.finallyLoc && (a = null);
                        var i = a ? a.completion : {};
                        return i.type = e, i.arg = t, a ? (this.method = "next", this.next = a.finallyLoc, g) : this.complete(i);
                    },
                    complete: function(e, t) {
                        if ("throw" === e.type) throw e.arg;
                        return "break" === e.type || "continue" === e.type ? this.next = e.arg : "return" === e.type ? (this.rval = this.arg = e.arg, this.method = "return", this.next = "end") : "normal" === e.type && t && (this.next = t), g;
                    },
                    finish: function(e) {
                        for(var t = this.tryEntries.length - 1; t >= 0; --t){
                            var r = this.tryEntries[t];
                            if (r.finallyLoc === e) return this.complete(r.completion, r.afterLoc), O(r), g;
                        }
                    },
                    catch: function(e) {
                        for(var t = this.tryEntries.length - 1; t >= 0; --t){
                            var r = this.tryEntries[t];
                            if (r.tryLoc === e) {
                                var n = r.completion;
                                if ("throw" === n.type) {
                                    var o = n.arg;
                                    O(r);
                                }
                                return o;
                            }
                        }
                        throw new Error("illegal catch attempt");
                    },
                    delegateYield: function(e, r, n) {
                        return this.delegate = {
                            iterator: P(e),
                            resultName: r,
                            nextLoc: n
                        }, "next" === this.method && (this.arg = t12), g;
                    }
                }, e19;
            }(e18.exports);
            try {
                regeneratorRuntime = n6;
            } catch (e) {
                Function("r", "regeneratorRuntime = r")(n6);
            }
        },
        function(e25, t) {
            var r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
            t.encode = function(e) {
                if (0 <= e && e < r.length) return r[e];
                throw new TypeError("Must be between 0 and 63: " + e);
            }, t.decode = function(e) {
                return 65 <= e && e <= 90 ? e - 65 : 97 <= e && e <= 122 ? e - 97 + 26 : 48 <= e && e <= 57 ? e - 48 + 52 : 43 == e ? 62 : 47 == e ? 63 : -1;
            };
        },
        function(e26, t14, r16) {
            var n = r16(1);
            function o7() {
                this._array = [], this._sorted = !0, this._last = {
                    generatedLine: -1,
                    generatedColumn: 0
                };
            }
            o7.prototype.unsortedForEach = function(e, t) {
                this._array.forEach(e, t);
            }, o7.prototype.add = function(e) {
                var t, r, o, a, i, l;
                t = this._last, r = e, o = t.generatedLine, a = r.generatedLine, i = t.generatedColumn, l = r.generatedColumn, a > o || a == o && l >= i || n.compareByGeneratedPositionsInflated(t, r) <= 0 ? (this._last = e, this._array.push(e)) : (this._sorted = !1, this._array.push(e));
            }, o7.prototype.toArray = function() {
                return this._sorted || (this._array.sort(n.compareByGeneratedPositionsInflated), this._sorted = !0), this._array;
            }, t14.MappingList = o7;
        },
        function(e27, t15, r17) {
            var n9 = r17(1), o8 = r17(12), a5 = r17(6).ArraySet, i8 = r17(5), l4 = r17(13).quickSort;
            function u3(e) {
                var t = e;
                return "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, ""))), null != t.sections ? new f2(t) : new c3(t);
            }
            function c3(e28) {
                var t = e28;
                "string" == typeof e28 && (t = JSON.parse(e28.replace(/^\)\]\}'/, "")));
                var r = n9.getArg(t, "version"), o = n9.getArg(t, "sources"), i = n9.getArg(t, "names", []), l = n9.getArg(t, "sourceRoot", null), u = n9.getArg(t, "sourcesContent", null), c = n9.getArg(t, "mappings"), s = n9.getArg(t, "file", null);
                if (r != this._version) throw new Error("Unsupported version: " + r);
                o = o.map(String).map(n9.normalize).map(function(e) {
                    return l && n9.isAbsolute(l) && n9.isAbsolute(e) ? n9.relative(l, e) : e;
                }), this._names = a5.fromArray(i.map(String), !0), this._sources = a5.fromArray(o, !0), this.sourceRoot = l, this.sourcesContent = u, this._mappings = c, this.file = s;
            }
            function s2() {
                this.generatedLine = 0, this.generatedColumn = 0, this.source = null, this.originalLine = null, this.originalColumn = null, this.name = null;
            }
            function f2(e29) {
                var t16 = e29;
                "string" == typeof e29 && (t16 = JSON.parse(e29.replace(/^\)\]\}'/, "")));
                var r18 = n9.getArg(t16, "version"), o9 = n9.getArg(t16, "sections");
                if (r18 != this._version) throw new Error("Unsupported version: " + r18);
                this._sources = new a5, this._names = new a5;
                var i = {
                    line: -1,
                    column: 0
                };
                this._sections = o9.map(function(e) {
                    if (e.url) throw new Error("Support for url field in sections not implemented.");
                    var t = n9.getArg(e, "offset"), r = n9.getArg(t, "line"), o = n9.getArg(t, "column");
                    if (r < i.line || r === i.line && o < i.column) throw new Error("Section offsets must be ordered and non-overlapping.");
                    return i = t, {
                        generatedOffset: {
                            generatedLine: r + 1,
                            generatedColumn: o + 1
                        },
                        consumer: new u3(n9.getArg(e, "map"))
                    };
                });
            }
            u3.fromSourceMap = function(e) {
                return c3.fromSourceMap(e);
            }, u3.prototype._version = 3, u3.prototype.__generatedMappings = null, Object.defineProperty(u3.prototype, "_generatedMappings", {
                get: function() {
                    return this.__generatedMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__generatedMappings;
                }
            }), u3.prototype.__originalMappings = null, Object.defineProperty(u3.prototype, "_originalMappings", {
                get: function() {
                    return this.__originalMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__originalMappings;
                }
            }), u3.prototype._charIsMappingSeparator = function(e, t) {
                var r = e.charAt(t);
                return ";" === r || "," === r;
            }, u3.prototype._parseMappings = function(e, t) {
                throw new Error("Subclasses must implement _parseMappings");
            }, u3.GENERATED_ORDER = 1, u3.ORIGINAL_ORDER = 2, u3.GREATEST_LOWER_BOUND = 1, u3.LEAST_UPPER_BOUND = 2, u3.prototype.eachMapping = function(e30, t17, r) {
                var o, a = t17 || null;
                switch(r || u3.GENERATED_ORDER){
                    case u3.GENERATED_ORDER:
                        o = this._generatedMappings;
                        break;
                    case u3.ORIGINAL_ORDER:
                        o = this._originalMappings;
                        break;
                    default:
                        throw new Error("Unknown order of iteration.");
                }
                var i = this.sourceRoot;
                o.map(function(e) {
                    var t = null === e.source ? null : this._sources.at(e.source);
                    return null != t && null != i && (t = n9.join(i, t)), {
                        source: t,
                        generatedLine: e.generatedLine,
                        generatedColumn: e.generatedColumn,
                        originalLine: e.originalLine,
                        originalColumn: e.originalColumn,
                        name: null === e.name ? null : this._names.at(e.name)
                    };
                }, this).forEach(e30, a);
            }, u3.prototype.allGeneratedPositionsFor = function(e) {
                var t = n9.getArg(e, "line"), r = {
                    source: n9.getArg(e, "source"),
                    originalLine: t,
                    originalColumn: n9.getArg(e, "column", 0)
                };
                if (null != this.sourceRoot && (r.source = n9.relative(this.sourceRoot, r.source)), !this._sources.has(r.source)) return [];
                r.source = this._sources.indexOf(r.source);
                var a = [], i = this._findMapping(r, this._originalMappings, "originalLine", "originalColumn", n9.compareByOriginalPositions, o8.LEAST_UPPER_BOUND);
                if (i >= 0) {
                    var l = this._originalMappings[i];
                    if (void 0 === e.column) for(var u = l.originalLine; l && l.originalLine === u;)a.push({
                        line: n9.getArg(l, "generatedLine", null),
                        column: n9.getArg(l, "generatedColumn", null),
                        lastColumn: n9.getArg(l, "lastGeneratedColumn", null)
                    }), l = this._originalMappings[++i];
                    else for(var c = l.originalColumn; l && l.originalLine === t && l.originalColumn == c;)a.push({
                        line: n9.getArg(l, "generatedLine", null),
                        column: n9.getArg(l, "generatedColumn", null),
                        lastColumn: n9.getArg(l, "lastGeneratedColumn", null)
                    }), l = this._originalMappings[++i];
                }
                return a;
            }, t15.SourceMapConsumer = u3, c3.prototype = Object.create(u3.prototype), c3.prototype.consumer = u3, c3.fromSourceMap = function(e) {
                var t = Object.create(c3.prototype), r = t._names = a5.fromArray(e._names.toArray(), !0), o = t._sources = a5.fromArray(e._sources.toArray(), !0);
                t.sourceRoot = e._sourceRoot, t.sourcesContent = e._generateSourcesContent(t._sources.toArray(), t.sourceRoot), t.file = e._file;
                for(var i = e._mappings.toArray().slice(), u = t.__generatedMappings = [], f = t.__originalMappings = [], d = 0, p = i.length; d < p; d++){
                    var h = i[d], g = new s2;
                    g.generatedLine = h.generatedLine, g.generatedColumn = h.generatedColumn, h.source && (g.source = o.indexOf(h.source), g.originalLine = h.originalLine, g.originalColumn = h.originalColumn, h.name && (g.name = r.indexOf(h.name)), f.push(g)), u.push(g);
                }
                return l4(t.__originalMappings, n9.compareByOriginalPositions), t;
            }, c3.prototype._version = 3, Object.defineProperty(c3.prototype, "sources", {
                get: function() {
                    return this._sources.toArray().map(function(e) {
                        return null != this.sourceRoot ? n9.join(this.sourceRoot, e) : e;
                    }, this);
                }
            }), c3.prototype._parseMappings = function(e, t) {
                for(var r, o, a, u, c, f = 1, d = 0, p = 0, h = 0, g = 0, m = 0, v = e.length, y = 0, b = {}, w = {}, k = [], E = []; y < v;)if (";" === e.charAt(y)) f++, y++, d = 0;
                else if ("," === e.charAt(y)) y++;
                else {
                    for((r = new s2).generatedLine = f, u = y; u < v && !this._charIsMappingSeparator(e, u); u++);
                    if (a = b[o = e.slice(y, u)]) y += o.length;
                    else {
                        for(a = []; y < u;)i8.decode(e, y, w), c = w.value, y = w.rest, a.push(c);
                        if (2 === a.length) throw new Error("Found a source, but no line and column");
                        if (3 === a.length) throw new Error("Found a source and line, but no column");
                        b[o] = a;
                    }
                    r.generatedColumn = d + a[0], d = r.generatedColumn, a.length > 1 && (r.source = g + a[1], g += a[1], r.originalLine = p + a[2], p = r.originalLine, r.originalLine += 1, r.originalColumn = h + a[3], h = r.originalColumn, a.length > 4 && (r.name = m + a[4], m += a[4])), E.push(r), "number" == typeof r.originalLine && k.push(r);
                }
                l4(E, n9.compareByGeneratedPositionsDeflated), this.__generatedMappings = E, l4(k, n9.compareByOriginalPositions), this.__originalMappings = k;
            }, c3.prototype._findMapping = function(e, t, r, n, a, i) {
                if (e[r] <= 0) throw new TypeError("Line must be greater than or equal to 1, got " + e[r]);
                if (e[n] < 0) throw new TypeError("Column must be greater than or equal to 0, got " + e[n]);
                return o8.search(e, t, a, i);
            }, c3.prototype.computeColumnSpans = function() {
                for(var e = 0; e < this._generatedMappings.length; ++e){
                    var t = this._generatedMappings[e];
                    if (e + 1 < this._generatedMappings.length) {
                        var r = this._generatedMappings[e + 1];
                        if (t.generatedLine === r.generatedLine) {
                            t.lastGeneratedColumn = r.generatedColumn - 1;
                            continue;
                        }
                    }
                    t.lastGeneratedColumn = 1 / 0;
                }
            }, c3.prototype.originalPositionFor = function(e) {
                var t = {
                    generatedLine: n9.getArg(e, "line"),
                    generatedColumn: n9.getArg(e, "column")
                }, r = this._findMapping(t, this._generatedMappings, "generatedLine", "generatedColumn", n9.compareByGeneratedPositionsDeflated, n9.getArg(e, "bias", u3.GREATEST_LOWER_BOUND));
                if (r >= 0) {
                    var o = this._generatedMappings[r];
                    if (o.generatedLine === t.generatedLine) {
                        var a = n9.getArg(o, "source", null);
                        null !== a && (a = this._sources.at(a), null != this.sourceRoot && (a = n9.join(this.sourceRoot, a)));
                        var i = n9.getArg(o, "name", null);
                        return null !== i && (i = this._names.at(i)), {
                            source: a,
                            line: n9.getArg(o, "originalLine", null),
                            column: n9.getArg(o, "originalColumn", null),
                            name: i
                        };
                    }
                }
                return {
                    source: null,
                    line: null,
                    column: null,
                    name: null
                };
            }, c3.prototype.hasContentsOfAllSources = function() {
                return !!this.sourcesContent && this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(e) {
                    return null == e;
                });
            }, c3.prototype.sourceContentFor = function(e, t) {
                if (!this.sourcesContent) return null;
                if (null != this.sourceRoot && (e = n9.relative(this.sourceRoot, e)), this._sources.has(e)) return this.sourcesContent[this._sources.indexOf(e)];
                var r;
                if (null != this.sourceRoot && (r = n9.urlParse(this.sourceRoot))) {
                    var o = e.replace(/^file:\/\//, "");
                    if ("file" == r.scheme && this._sources.has(o)) return this.sourcesContent[this._sources.indexOf(o)];
                    if ((!r.path || "/" == r.path) && this._sources.has("/" + e)) return this.sourcesContent[this._sources.indexOf("/" + e)];
                }
                if (t) return null;
                throw new Error('"' + e + '" is not in the SourceMap.');
            }, c3.prototype.generatedPositionFor = function(e) {
                var t = n9.getArg(e, "source");
                if (null != this.sourceRoot && (t = n9.relative(this.sourceRoot, t)), !this._sources.has(t)) return {
                    line: null,
                    column: null,
                    lastColumn: null
                };
                var r = {
                    source: t = this._sources.indexOf(t),
                    originalLine: n9.getArg(e, "line"),
                    originalColumn: n9.getArg(e, "column")
                }, o = this._findMapping(r, this._originalMappings, "originalLine", "originalColumn", n9.compareByOriginalPositions, n9.getArg(e, "bias", u3.GREATEST_LOWER_BOUND));
                if (o >= 0) {
                    var a = this._originalMappings[o];
                    if (a.source === r.source) return {
                        line: n9.getArg(a, "generatedLine", null),
                        column: n9.getArg(a, "generatedColumn", null),
                        lastColumn: n9.getArg(a, "lastGeneratedColumn", null)
                    };
                }
                return {
                    line: null,
                    column: null,
                    lastColumn: null
                };
            }, t15.BasicSourceMapConsumer = c3, f2.prototype = Object.create(u3.prototype), f2.prototype.constructor = u3, f2.prototype._version = 3, Object.defineProperty(f2.prototype, "sources", {
                get: function() {
                    for(var e = [], t = 0; t < this._sections.length; t++)for(var r = 0; r < this._sections[t].consumer.sources.length; r++)e.push(this._sections[t].consumer.sources[r]);
                    return e;
                }
            }), f2.prototype.originalPositionFor = function(e31) {
                var t18 = {
                    generatedLine: n9.getArg(e31, "line"),
                    generatedColumn: n9.getArg(e31, "column")
                }, r19 = o8.search(t18, this._sections, function(e, t) {
                    var r = e.generatedLine - t.generatedOffset.generatedLine;
                    return r || e.generatedColumn - t.generatedOffset.generatedColumn;
                }), a = this._sections[r19];
                return a ? a.consumer.originalPositionFor({
                    line: t18.generatedLine - (a.generatedOffset.generatedLine - 1),
                    column: t18.generatedColumn - (a.generatedOffset.generatedLine === t18.generatedLine ? a.generatedOffset.generatedColumn - 1 : 0),
                    bias: e31.bias
                }) : {
                    source: null,
                    line: null,
                    column: null,
                    name: null
                };
            }, f2.prototype.hasContentsOfAllSources = function() {
                return this._sections.every(function(e) {
                    return e.consumer.hasContentsOfAllSources();
                });
            }, f2.prototype.sourceContentFor = function(e, t) {
                for(var r = 0; r < this._sections.length; r++){
                    var n = this._sections[r].consumer.sourceContentFor(e, !0);
                    if (n) return n;
                }
                if (t) return null;
                throw new Error('"' + e + '" is not in the SourceMap.');
            }, f2.prototype.generatedPositionFor = function(e) {
                for(var t = 0; t < this._sections.length; t++){
                    var r = this._sections[t];
                    if (-1 !== r.consumer.sources.indexOf(n9.getArg(e, "source"))) {
                        var o = r.consumer.generatedPositionFor(e);
                        if (o) return {
                            line: o.line + (r.generatedOffset.generatedLine - 1),
                            column: o.column + (r.generatedOffset.generatedLine === o.line ? r.generatedOffset.generatedColumn - 1 : 0)
                        };
                    }
                }
                return {
                    line: null,
                    column: null
                };
            }, f2.prototype._parseMappings = function(e, t) {
                this.__generatedMappings = [], this.__originalMappings = [];
                for(var r = 0; r < this._sections.length; r++)for(var o = this._sections[r], a = o.consumer._generatedMappings, i = 0; i < a.length; i++){
                    var u = a[i], c = o.consumer._sources.at(u.source);
                    null !== o.consumer.sourceRoot && (c = n9.join(o.consumer.sourceRoot, c)), this._sources.add(c), c = this._sources.indexOf(c);
                    var s = o.consumer._names.at(u.name);
                    this._names.add(s), s = this._names.indexOf(s);
                    var f = {
                        source: c,
                        generatedLine: u.generatedLine + (o.generatedOffset.generatedLine - 1),
                        generatedColumn: u.generatedColumn + (o.generatedOffset.generatedLine === u.generatedLine ? o.generatedOffset.generatedColumn - 1 : 0),
                        originalLine: u.originalLine,
                        originalColumn: u.originalColumn,
                        name: s
                    };
                    this.__generatedMappings.push(f), "number" == typeof f.originalLine && this.__originalMappings.push(f);
                }
                l4(this.__generatedMappings, n9.compareByGeneratedPositionsDeflated), l4(this.__originalMappings, n9.compareByOriginalPositions);
            }, t15.IndexedSourceMapConsumer = f2;
        },
        function(e32, t) {
            t.GREATEST_LOWER_BOUND = 1, t.LEAST_UPPER_BOUND = 2, t.search = function(e33, r20, n10, o10) {
                if (0 === r20.length) return -1;
                var a6 = function e(r, n, o, a, i, l) {
                    var u = Math.floor((n - r) / 2) + r, c = i(o, a[u], !0);
                    return 0 === c ? u : c > 0 ? n - u > 1 ? e(u, n, o, a, i, l) : l == t.LEAST_UPPER_BOUND ? n < a.length ? n : -1 : u : u - r > 1 ? e(r, u, o, a, i, l) : l == t.LEAST_UPPER_BOUND ? u : r < 0 ? -1 : r;
                }(-1, r20.length, e33, r20, n10, o10 || t.GREATEST_LOWER_BOUND);
                if (a6 < 0) return -1;
                for(; a6 - 1 >= 0 && 0 === n10(r20[a6], r20[a6 - 1], !0);)--a6;
                return a6;
            };
        },
        function(e34, t19) {
            function r21(e, t, r) {
                var n = e[t];
                e[t] = e[r], e[r] = n;
            }
            function n11(e, t, o, a) {
                if (o < a) {
                    var i = o - 1;
                    r21(e, (s = o, f = a, Math.round(s + Math.random() * (f - s))), a);
                    for(var l = e[a], u = o; u < a; u++)t(e[u], l) <= 0 && r21(e, i += 1, u);
                    r21(e, i + 1, u);
                    var c = i + 1;
                    n11(e, t, o, c - 1), n11(e, t, c + 1, a);
                }
                var s, f;
            }
            t19.quickSort = function(e, t) {
                n11(e, t, 0, e.length - 1);
            };
        },
        function(e35, t20, r22) {
            var n12 = r22(4).SourceMapGenerator, o11 = r22(1), a7 = /(\r?\n)/, i9 = "$$$isSourceNode$$$";
            function l5(e, t, r, n, o) {
                this.children = [], this.sourceContents = {}, this.line = null == e ? null : e, this.column = null == t ? null : t, this.source = null == r ? null : r, this.name = null == o ? null : o, this[i9] = !0, null != n && this.add(n);
            }
            l5.fromStringWithSourceMap = function(e36, t21, r23) {
                var n = new l5, i = e36.split(a7), u = 0, c = function() {
                    return e() + (e() || "");
                    function e() {
                        return u < i.length ? i[u++] : void 0;
                    }
                }, s = 1, f = 0, d = null;
                return t21.eachMapping(function(e) {
                    if (null !== d) {
                        if (!(s < e.generatedLine)) {
                            var t = (r = i[u]).substr(0, e.generatedColumn - f);
                            return i[u] = r.substr(e.generatedColumn - f), f = e.generatedColumn, p(d, t), void (d = e);
                        }
                        p(d, c()), s++, f = 0;
                    }
                    for(; s < e.generatedLine;)n.add(c()), s++;
                    if (f < e.generatedColumn) {
                        var r = i[u];
                        n.add(r.substr(0, e.generatedColumn)), i[u] = r.substr(e.generatedColumn), f = e.generatedColumn;
                    }
                    d = e;
                }, this), u < i.length && (d && p(d, c()), n.add(i.splice(u).join(""))), t21.sources.forEach(function(e) {
                    var a = t21.sourceContentFor(e);
                    null != a && (null != r23 && (e = o11.join(r23, e)), n.setSourceContent(e, a));
                }), n;
                function p(e, t) {
                    if (null === e || void 0 === e.source) n.add(t);
                    else {
                        var a = r23 ? o11.join(r23, e.source) : e.source;
                        n.add(new l5(e.originalLine, e.originalColumn, a, t, e.name));
                    }
                }
            }, l5.prototype.add = function(e37) {
                if (Array.isArray(e37)) e37.forEach(function(e) {
                    this.add(e);
                }, this);
                else {
                    if (!e37[i9] && "string" != typeof e37) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e37);
                    e37 && this.children.push(e37);
                }
                return this;
            }, l5.prototype.prepend = function(e) {
                if (Array.isArray(e)) for(var t = e.length - 1; t >= 0; t--)this.prepend(e[t]);
                else {
                    if (!e[i9] && "string" != typeof e) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e);
                    this.children.unshift(e);
                }
                return this;
            }, l5.prototype.walk = function(e) {
                for(var t, r = 0, n = this.children.length; r < n; r++)(t = this.children[r])[i9] ? t.walk(e) : "" !== t && e(t, {
                    source: this.source,
                    line: this.line,
                    column: this.column,
                    name: this.name
                });
            }, l5.prototype.join = function(e) {
                var t, r, n = this.children.length;
                if (n > 0) {
                    for(t = [], r = 0; r < n - 1; r++)t.push(this.children[r]), t.push(e);
                    t.push(this.children[r]), this.children = t;
                }
                return this;
            }, l5.prototype.replaceRight = function(e, t) {
                var r = this.children[this.children.length - 1];
                return r[i9] ? r.replaceRight(e, t) : "string" == typeof r ? this.children[this.children.length - 1] = r.replace(e, t) : this.children.push("".replace(e, t)), this;
            }, l5.prototype.setSourceContent = function(e, t) {
                this.sourceContents[o11.toSetString(e)] = t;
            }, l5.prototype.walkSourceContents = function(e) {
                for(var t = 0, r = this.children.length; t < r; t++)this.children[t][i9] && this.children[t].walkSourceContents(e);
                var n = Object.keys(this.sourceContents);
                for(t = 0, r = n.length; t < r; t++)e(o11.fromSetString(n[t]), this.sourceContents[n[t]]);
            }, l5.prototype.toString = function() {
                var e = "";
                return this.walk(function(t) {
                    e += t;
                }), e;
            }, l5.prototype.toStringWithSourceMap = function(e38) {
                var t22 = {
                    code: "",
                    line: 1,
                    column: 0
                }, r = new n12(e38), o = !1, a = null, i = null, l = null, u = null;
                return this.walk(function(e, n) {
                    t22.code += e, null !== n.source && null !== n.line && null !== n.column ? (a === n.source && i === n.line && l === n.column && u === n.name || r.addMapping({
                        source: n.source,
                        original: {
                            line: n.line,
                            column: n.column
                        },
                        generated: {
                            line: t22.line,
                            column: t22.column
                        },
                        name: n.name
                    }), a = n.source, i = n.line, l = n.column, u = n.name, o = !0) : o && (r.addMapping({
                        generated: {
                            line: t22.line,
                            column: t22.column
                        }
                    }), a = null, o = !1);
                    for(var c = 0, s = e.length; c < s; c++)10 === e.charCodeAt(c) ? (t22.line++, t22.column = 0, c + 1 === s ? (a = null, o = !1) : o && r.addMapping({
                        source: n.source,
                        original: {
                            line: n.line,
                            column: n.column
                        },
                        generated: {
                            line: t22.line,
                            column: t22.column
                        },
                        name: n.name
                    })) : t22.column++;
                }), this.walkSourceContents(function(e, t) {
                    r.setSourceContent(e, t);
                }), {
                    code: t22.code,
                    map: r
                };
            }, t20.SourceNode = l5;
        },
        function(e39, t23, r24) {
            "use strict";
            r24.r(t23), r24.d(t23, "setEditorHandler", function() {
                return ue;
            }), r24.d(t23, "reportBuildError", function() {
                return ce;
            }), r24.d(t23, "reportRuntimeError", function() {
                return se;
            }), r24.d(t23, "dismissBuildError", function() {
                return fe;
            }), r24.d(t23, "startReportingRuntimeErrors", function() {
                return de;
            }), r24.d(t23, "dismissRuntimeErrors", function() {
                return he;
            }), r24.d(t23, "stopReportingRuntimeErrors", function() {
                return ge;
            });
            var n13 = null;
            function o12(e, t) {
                if (t.error) {
                    var r = t.error;
                    r instanceof Error ? e(r) : e(new Error(r));
                }
            }
            function a8(e, t) {
                null === n13 && (n13 = o12.bind(void 0, t), e.addEventListener("error", n13));
            }
            var i10 = null;
            function l6(e, t) {
                if (null == t || null == t.reason) return e(new Error("Unknown"));
                var r = t.reason;
                return r instanceof Error ? e(r) : e(new Error(r));
            }
            function u4(e, t) {
                null === i10 && (i10 = l6.bind(void 0, t), e.addEventListener("unhandledrejection", i10));
            }
            var c4 = !1, s3 = 10, f3 = 50;
            var d1 = [], p1 = function() {
                "undefined" != typeof console && (console.reactStack = function(e) {
                    return d1.push(e);
                }, console.reactStackEnd = function(e) {
                    return d1.pop();
                });
            }, h1 = function() {
                "undefined" != typeof console && (console.reactStack = void 0, console.reactStackEnd = void 0);
            }, g1 = function(e40, t) {
                if ("undefined" != typeof console) {
                    var r = console[e40];
                    "function" == typeof r && (console[e40] = function() {
                        try {
                            var e = arguments[0];
                            "string" == typeof e && d1.length > 0 && t(e, d1[d1.length - 1]);
                        } catch (e) {
                            setTimeout(function() {
                                throw e;
                            });
                        }
                        return r.apply(this, arguments);
                    });
                }
            };
            function m(e41, t24) {
                return (m = Object.setPrototypeOf || function(e, t) {
                    return e.__proto__ = t, e;
                })(e41, t24);
            }
            function v(e42, t25, r25) {
                return (v = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function() {})), !0;
                    } catch (e) {
                        return !1;
                    }
                }() ? Reflect.construct : function(e, t, r) {
                    var n = [
                        null
                    ];
                    n.push.apply(n, t);
                    var o = new (Function.bind.apply(e, n));
                    return r && m(o, r.prototype), o;
                }).apply(null, arguments);
            }
            function y(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for(var r = 0, n = new Array(t); r < t; r++)n[r] = e[r];
                return n;
            }
            function b(e43) {
                return function(e) {
                    if (Array.isArray(e)) return y(e);
                }(e43) || function(e) {
                    if ("undefined" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e);
                }(e43) || function(e, t) {
                    if (e) {
                        if ("string" == typeof e) return y(e, t);
                        var r = Object.prototype.toString.call(e).slice(8, -1);
                        return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? y(e, t) : void 0;
                    }
                }(e43) || function() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }();
            }
            function w(e, t) {
                for(var r = 0; r < t.length; r++){
                    var n = t[r];
                    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
                }
            }
            function k(e, t, r) {
                return t && w(e.prototype, t), r && w(e, r), e;
            }
            function E(e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }
            var S = function e(t, r) {
                var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                E(this, e), this.lineNumber = t, this.content = r, this.highlight = n;
            }, x = function() {
                function e44() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, i = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, u = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, c = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, s = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : null;
                    E(this, e44), t && 0 === t.indexOf("Object.") && (t = t.slice(7)), "friendlySyntaxErrorLabel" !== t && "exports.__esModule" !== t && "<anonymous>" !== t && t || (t = null), this.functionName = t, this.fileName = r, this.lineNumber = n, this.columnNumber = o, this._originalFunctionName = i, this._originalFileName = l, this._originalLineNumber = u, this._originalColumnNumber = c, this._scriptCode = a, this._originalScriptCode = s;
                }
                return k(e44, [
                    {
                        key: "getFunctionName",
                        value: function() {
                            return this.functionName || "(anonymous function)";
                        }
                    },
                    {
                        key: "getSource",
                        value: function() {
                            var e = "";
                            return null != this.fileName && (e += this.fileName + ":"), null != this.lineNumber && (e += this.lineNumber + ":"), null != this.columnNumber && (e += this.columnNumber + ":"), e.slice(0, -1);
                        }
                    },
                    {
                        key: "toString",
                        value: function() {
                            var e = this.getFunctionName(), t = this.getSource();
                            return "".concat(e).concat(t ? " (".concat(t, ")") : "");
                        }
                    }
                ]), e44;
            }(), _ = /\(?(.+?)(?::(\d+))?(?::(\d+))?\)?$/;
            function C(e45) {
                return _.exec(e45).slice(1).map(function(e) {
                    var t = Number(e);
                    return isNaN(t) ? e : t;
                });
            }
            var O = /^\s*(at|in)\s.+(:\d+)/, T = /(^|@)\S+:\d+|.+line\s+\d+\s+>\s+(eval|Function).+/;
            function P(e46) {
                return e46.filter(function(e) {
                    return O.test(e) || T.test(e);
                }).map(function(e) {
                    if (T.test(e)) {
                        var t = !1;
                        / > (eval|Function)/.test(e) && (e = e.replace(/ line (\d+)(?: > eval line \d+)* > (eval|Function):\d+:\d+/g, ":$1"), t = !0);
                        var r = e.split(/[@]/g), n = r.pop();
                        return v(x, [
                            r.join("@") || (t ? "eval" : null)
                        ].concat(b(C(n))));
                    }
                    -1 !== e.indexOf("(eval ") && (e = e.replace(/(\(eval at [^()]*)|(\),.*$)/g, "")), -1 !== e.indexOf("(at ") && (e = e.replace(/\(at /, "("));
                    var o = e.trim().split(/\s+/g).slice(1), a = o.pop();
                    return v(x, [
                        o.join(" ") || null
                    ].concat(b(C(a))));
                });
            }
            function L(e) {
                if (null == e) throw new Error("You cannot pass a null object.");
                if ("string" == typeof e) return P(e.split("\n"));
                if (Array.isArray(e)) return P(e);
                if ("string" == typeof e.stack) return P(e.stack.split("\n"));
                throw new Error("The error you provided does not contain a stack trace.");
            }
            var R = r24(0), A = r24.n(R);
            function N(e, t, r, n, o, a, i) {
                try {
                    var l = e[a](i), u = l.value;
                } catch (e47) {
                    return void r(e47);
                }
                l.done ? t(u) : Promise.resolve(u).then(n, o);
            }
            function j(e48) {
                return function() {
                    var t = this, r = arguments;
                    return new Promise(function(n, o) {
                        var a = e48.apply(t, r);
                        function i(e) {
                            N(a, n, o, i, l, "next", e);
                        }
                        function l(e) {
                            N(a, n, o, i, l, "throw", e);
                        }
                        i(void 0);
                    });
                };
            }
            var M = r24(3), I = function() {
                function e49(t) {
                    E(this, e49), this.__source_map = t;
                }
                return k(e49, [
                    {
                        key: "getOriginalPosition",
                        value: function(e, t) {
                            var r = this.__source_map.originalPositionFor({
                                line: e,
                                column: t
                            });
                            return {
                                line: r.line,
                                column: r.column,
                                source: r.source
                            };
                        }
                    },
                    {
                        key: "getGeneratedPosition",
                        value: function(e, t, r) {
                            var n = this.__source_map.generatedPositionFor({
                                source: e,
                                line: t,
                                column: r
                            });
                            return {
                                line: n.line,
                                column: n.column
                            };
                        }
                    },
                    {
                        key: "getSource",
                        value: function(e) {
                            return this.__source_map.sourceContentFor(e);
                        }
                    },
                    {
                        key: "getSources",
                        value: function() {
                            return this.__source_map.sources;
                        }
                    }
                ]), e49;
            }();
            function D(e, t) {
                for(var r = /\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/gm, n = null;;){
                    var o = r.exec(t);
                    if (null == o) break;
                    n = o;
                }
                return n && n[1] ? Promise.resolve(n[1].toString()) : Promise.reject("Cannot find a source map directive for ".concat(e, "."));
            }
            function z(e, t) {
                return q.apply(this, arguments);
            }
            function q() {
                return (q = j(A.a.mark(function e50(t, r) {
                    var n, o, a, i, l, u;
                    return A.a.wrap(function(e51) {
                        for(;;)switch(e51.prev = e51.next){
                            case 0:
                                return e51.next = 2, D(t, r);
                            case 2:
                                if (0 !== (n = e51.sent).indexOf("data:")) {
                                    e51.next = 14;
                                    break;
                                }
                                if (o = /^data:application\/json;([\w=:"-]+;)*base64,/, a = n.match(o)) {
                                    e51.next = 8;
                                    break;
                                }
                                throw new Error("Sorry, non-base64 inline source-map encoding is not supported.");
                            case 8:
                                return n = n.substring(a[0].length), n = window.atob(n), n = JSON.parse(n), e51.abrupt("return", new I(new M.SourceMapConsumer(n)));
                            case 14:
                                return i = t.lastIndexOf("/"), l = t.substring(0, i + 1) + n, e51.next = 18, fetch(l).then(function(e) {
                                    return e.json();
                                });
                            case 18:
                                return u = e51.sent, e51.abrupt("return", new I(new M.SourceMapConsumer(u)));
                            case 20:
                            case "end":
                                return e51.stop();
                        }
                    }, e50);
                }))).apply(this, arguments);
            }
            function F(e, t, r) {
                "string" == typeof r && (r = r.split("\n"));
                for(var n = [], o = Math.max(0, e - 1 - t); o <= Math.min(r.length - 1, e - 1 + t); ++o)n.push(new S(o + 1, r[o], o === e - 1));
                return n;
            }
            var U = r24(7);
            function B(e) {
                return H.apply(this, arguments);
            }
            function H() {
                return (H = j(A.a.mark(function e52(t26) {
                    var r26, n, o13, a9 = arguments;
                    return A.a.wrap(function(e53) {
                        for(;;)switch(e53.prev = e53.next){
                            case 0:
                                return r26 = a9.length > 1 && void 0 !== a9[1] ? a9[1] : 3, n = {}, o13 = [], t26.forEach(function(e) {
                                    var t = e.fileName;
                                    null != t && -1 === o13.indexOf(t) && o13.push(t);
                                }), e53.next = 6, Object(U.settle)(o13.map(function() {
                                    var e54 = j(A.a.mark(function e55(t) {
                                        var r, o, a;
                                        return A.a.wrap(function(e56) {
                                            for(;;)switch(e56.prev = e56.next){
                                                case 0:
                                                    return r = 0 === t.indexOf("webpack-internal:") ? "/__get-internal-source?fileName=".concat(encodeURIComponent(t)) : t, e56.next = 3, fetch(r).then(function(e) {
                                                        return e.text();
                                                    });
                                                case 3:
                                                    return o = e56.sent, e56.next = 6, z(t, o);
                                                case 6:
                                                    a = e56.sent, n[t] = {
                                                        fileSource: o,
                                                        map: a
                                                    };
                                                case 8:
                                                case "end":
                                                    return e56.stop();
                                            }
                                        }, e55);
                                    }));
                                    return function(t) {
                                        return e54.apply(this, arguments);
                                    };
                                }()));
                            case 6:
                                return e53.abrupt("return", t26.map(function(e) {
                                    var t = e.functionName, o = e.fileName, a = e.lineNumber, i = e.columnNumber, l = n[o] || {}, u = l.map, c = l.fileSource;
                                    if (null == u || null == a) return e;
                                    var s = u.getOriginalPosition(a, i), f = s.source, d = s.line, p = s.column, h = null == f ? [] : u.getSource(f);
                                    return new x(t, o, a, i, F(a, r26, c), t, f, d, p, F(d, r26, h));
                                }));
                            case 7:
                            case "end":
                                return e53.stop();
                        }
                    }, e52);
                }))).apply(this, arguments);
            }
            var $ = r24(2), V = r24.n($);
            function W(e, t) {
                var r = -1, n = -1;
                do ++r, n = t.indexOf(e, n + 1);
                while (-1 !== n);
                return r;
            }
            function G(e, t) {
                return Q.apply(this, arguments);
            }
            function Q() {
                return (Q = j(A.a.mark(function e57(t27, r27) {
                    var n, o, a, i, l7 = arguments;
                    return A.a.wrap(function(e58) {
                        for(;;)switch(e58.prev = e58.next){
                            case 0:
                                if (n = l7.length > 2 && void 0 !== l7[2] ? l7[2] : 3, o = "object" == typeof t27 ? t27.contents : null, a = "object" == typeof t27 ? t27.uri : t27, null != o) {
                                    e58.next = 7;
                                    break;
                                }
                                return e58.next = 6, fetch(a).then(function(e) {
                                    return e.text();
                                });
                            case 6:
                                o = e58.sent;
                            case 7:
                                return e58.next = 9, z(a, o);
                            case 9:
                                return i = e58.sent, e58.abrupt("return", r27.map(function(e59) {
                                    var t28 = e59.functionName, r28 = e59.lineNumber, l = e59.columnNumber;
                                    if (null != e59._originalLineNumber) return e59;
                                    var u = e59.fileName;
                                    if (u && (u = V.a.normalize(u.replace(/[\\]+/g, "/"))), null == u) return e59;
                                    var c = u, s = i.getSources().map(function(e) {
                                        return e.replace(/[\\]+/g, "/");
                                    }).filter(function(e) {
                                        var t = (e = V.a.normalize(e)).lastIndexOf(c);
                                        return -1 !== t && t === e.length - c.length;
                                    }).map(function(e) {
                                        return {
                                            token: e,
                                            seps: W(V.a.sep, V.a.normalize(e)),
                                            penalties: W("node_modules", e) + W("~", e)
                                        };
                                    }).sort(function(e, t) {
                                        var r = Math.sign(e.seps - t.seps);
                                        return 0 !== r ? r : Math.sign(e.penalties - t.penalties);
                                    });
                                    if (s.length < 1 || null == r28) return new x(null, null, null, null, null, t28, c, r28, l, null);
                                    var f = s[0].token, d = i.getGeneratedPosition(f, r28, l), p = d.line, h = d.column, g = i.getSource(f);
                                    return new x(t28, a, p, h || null, F(p, n, o || []), t28, c, r28, l, F(r28, n, g));
                                }));
                            case 11:
                            case "end":
                                return e58.stop();
                        }
                    }, e57);
                }))).apply(this, arguments);
            }
            var Y = function(e60) {
                arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                var t29 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 3, r = L(e60);
                return (e60.__unmap_source ? G(e60.__unmap_source, r, t29) : B(r, t29)).then(function(e61) {
                    return 0 === e61.map(function(e) {
                        return e._originalFileName;
                    }).filter(function(e) {
                        return null != e && -1 === e.indexOf("node_modules");
                    }).length ? null : e61.filter(function(e) {
                        var t = e.functionName;
                        return null == t || -1 === t.indexOf("__stack_frame_overlay_proxy_console__");
                    });
                });
            }, X = function(e62) {
                return function(t) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    Y(t, r, 3).then(function(n) {
                        null != n && e62({
                            error: t,
                            unhandledRejection: r,
                            contextSize: 3,
                            stackFrames: n
                        });
                    }).catch(function(e) {
                        console.log("Could not get the stack frames of error:", e);
                    });
                };
            };
            function K(e63) {
                var t30 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "/static/js/bundle.js", r29 = X(e63);
                return a8(window, function(e) {
                    return r29(e, !1);
                }), u4(window, function(e) {
                    return r29(e, !0);
                }), function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f3;
                    if (!c4) try {
                        s3 = Error.stackTraceLimit, Error.stackTraceLimit = e, c4 = !0;
                    } catch (e64) {}
                }(), p1(), g1("error", function(e65, n14) {
                    var o14 = function(e66, t) {
                        for(var r, n, o = function(e67) {
                            return e67.split("\n").filter(function(e) {
                                return !e.match(/^\s*in/);
                            }).join("\n");
                        }(e66), a = "", i = 0; i < t.length; ++i){
                            var l = t[i], u = l.fileName, c = l.lineNumber;
                            if (null != u && null != c && !(u === r && "number" == typeof c && "number" == typeof n && Math.abs(c - n) < 3)) {
                                r = u, n = c;
                                var s = t[i].name;
                                a += "in ".concat(s = s || "(anonymous function)", " (at ").concat(u, ":").concat(c, ")\n");
                            }
                        }
                        return {
                            message: o,
                            stack: a
                        };
                    }(e65, n14);
                    r29({
                        message: o14.message,
                        stack: o14.stack,
                        __unmap_source: t30
                    }, !1);
                }), function() {
                    var e68;
                    !function() {
                        if (c4) try {
                            Error.stackTraceLimit = s3, c4 = !1;
                        } catch (e) {}
                    }(), e68 = window, null !== i10 && (e68.removeEventListener("unhandledrejection", i10), i10 = null), function(e) {
                        null !== n13 && (e.removeEventListener("error", n13), n13 = null);
                    }(window), h1();
                };
            }
            var J = {
                position: "fixed",
                top: "0",
                left: "0",
                width: "100%",
                height: "100%",
                border: "none",
                "z-index": 2147483647
            };
            var Z = '/*! For license information please see iframe-bundle.js.LICENSE.txt */\n!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=208)}([function(e,t,r){"use strict";e.exports=r(183)},function(e,t,r){var n=r(8),o=r(35).f,a=r(18),i=r(21),l=r(38),u=r(60),c=r(64);e.exports=function(e,t){var r,s,f,d,p,h=e.target,g=e.global,v=e.stat;if(r=g?n:v?n[h]||l(h,{}):(n[h]||{}).prototype)for(s in t){if(d=t[s],f=e.noTargetGet?(p=o(r,s))&&p.value:r[s],!c(g?s:h+(v?".":"#")+s,e.forced)&&void 0!==f){if(typeof d===typeof f)continue;u(d,f)}(e.sham||f&&f.sham)&&a(d,"sham",!0),i(r,s,d,e)}}},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t){e.exports=!1},function(e,t,r){var n=r(2),o=r(66),a=r(26),i=r(7),l=r(45),u=r(69),c=function(e,t){this.stopped=e,this.result=t};e.exports=function(e,t,r){var s,f,d,p,h,g,v,m=r&&r.that,y=!(!r||!r.AS_ENTRIES),b=!(!r||!r.IS_ITERATOR),w=!(!r||!r.INTERRUPTED),k=i(t,m,1+y+w),E=function(e){return s&&u(s),new c(!0,e)},x=function(e){return y?(n(e),w?k(e[0],e[1],E):k(e[0],e[1])):w?k(e,E):k(e)};if(b)s=e;else{if("function"!=typeof(f=l(e)))throw TypeError("Target is not iterable");if(o(f)){for(d=0,p=a(e.length);p>d;d++)if((h=x(e[d]))&&h instanceof c)return h;return new c(!1)}s=f.call(e)}for(g=s.next;!(v=g.call(s)).done;){try{h=x(v.value)}catch(e){throw u(s),e}if("object"==typeof h&&h&&h instanceof c)return h}return new c(!1)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,r){var n=r(8),o=r(40),a=r(11),i=r(31),l=r(44),u=r(67),c=o("wks"),s=n.Symbol,f=u?s:s&&s.withoutSetter||i;e.exports=function(e){return a(c,e)||(l&&a(s,e)?c[e]=s[e]:c[e]=f("Symbol."+e)),c[e]}},function(e,t,r){var n=r(5);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 0:return function(){return e.call(t)};case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,r){(function(t){var r=function(e){return e&&e.Math==Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof t&&t)||function(){return this}()||Function("return this")()}).call(this,r(34))},function(e,t,r){var n=r(61),o=r(11),a=r(82),i=r(14).f;e.exports=function(e){var t=n.Symbol||(n.Symbol={});o(t,e)||i(t,e,{value:a.f(e)})}},function(e,t,r){var n=r(61),o=r(8),a=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?a(n[e])||a(o[e]):n[e]&&n[e][t]||o[e]&&o[e][t]}},function(e,t){var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"===typeof e?null!==e:"function"===typeof e}},function(e,t,r){var n=r(16),o=r(57),a=r(2),i=r(29),l=Object.defineProperty;t.f=n?l:function(e,t,r){if(a(e),t=i(t,!0),a(r),o)try{return l(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},function(e,t,r){var n=r(3),o=r(48);e.exports=n?o:function(e){return Map.prototype.entries.call(e)}},function(e,t,r){var n=r(12);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t,r){var n=r(2),o=r(5),a=r(6)("species");e.exports=function(e,t){var r,i=n(e).constructor;return void 0===i||void 0==(r=n(i)[a])?t:o(r)}},function(e,t,r){var n=r(16),o=r(14),a=r(23);e.exports=n?function(e,t,r){return o.f(e,t,a(1,r))}:function(e,t,r){return e[t]=r,e}},function(e,t,r){var n=r(3),o=r(48);e.exports=n?o:function(e){return Set.prototype.values.call(e)}},function(e,t,r){var n=r(56),o=r(37);e.exports=function(e){return n(o(e))}},function(e,t,r){var n=r(8),o=r(18),a=r(11),i=r(38),l=r(59),u=r(24),c=u.get,s=u.enforce,f=String(String).split("String");(e.exports=function(e,t,r,l){var u,c=!!l&&!!l.unsafe,d=!!l&&!!l.enumerable,p=!!l&&!!l.noTargetGet;"function"==typeof r&&("string"!=typeof t||a(r,"name")||o(r,"name",t),(u=s(r)).source||(u.source=f.join("string"==typeof t?t:""))),e!==n?(c?!p&&e[t]&&(d=!0):delete e[t],d?e[t]=r:o(e,t,r)):d?e[t]=r:i(t,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||l(this)}))},function(e,t,r){var n=r(14).f,o=r(11),a=r(6)("toStringTag");e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,a)&&n(e,a,{configurable:!0,value:t})}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,r){var n,o,a,i=r(92),l=r(8),u=r(13),c=r(18),s=r(11),f=r(39),d=r(30),p=r(25),h=l.WeakMap;if(i){var g=f.state||(f.state=new h),v=g.get,m=g.has,y=g.set;n=function(e,t){return t.facade=e,y.call(g,e,t),t},o=function(e){return v.call(g,e)||{}},a=function(e){return m.call(g,e)}}else{var b=d("state");p[b]=!0,n=function(e,t){return t.facade=e,c(e,b,t),t},o=function(e){return s(e,b)?e[b]:{}},a=function(e){return s(e,b)}}e.exports={set:n,get:o,has:a,enforce:function(e){return a(e)?o(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!u(t)||(r=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return r}}}},function(e,t){e.exports={}},function(e,t,r){var n=r(42),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},function(e,t){e.exports={}},function(e,t,r){var n=r(37);e.exports=function(e){return Object(n(e))}},function(e,t,r){var n=r(13);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can\'t convert object to primitive value")}},function(e,t,r){var n=r(40),o=r(31),a=n("keys");e.exports=function(e){return a[e]||(a[e]=o(e))}},function(e,t){var r=0,n=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++r+n).toString(36)}},function(e,t,r){var n,o=r(2),a=r(99),i=r(43),l=r(25),u=r(100),c=r(58),s=r(30),f=s("IE_PROTO"),d=function(){},p=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=n?function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t}(n):((t=c("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F);for(var r=i.length;r--;)delete h.prototype[i[r]];return h()};l[f]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(d.prototype=o(e),r=new d,d.prototype=null,r[f]=e):r=h(),void 0===t?r:a(r,t)}},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var o=[[{color:"0, 0, 0",class:"ansi-black"},{color:"187, 0, 0",class:"ansi-red"},{color:"0, 187, 0",class:"ansi-green"},{color:"187, 187, 0",class:"ansi-yellow"},{color:"0, 0, 187",class:"ansi-blue"},{color:"187, 0, 187",class:"ansi-magenta"},{color:"0, 187, 187",class:"ansi-cyan"},{color:"255,255,255",class:"ansi-white"}],[{color:"85, 85, 85",class:"ansi-bright-black"},{color:"255, 85, 85",class:"ansi-bright-red"},{color:"0, 255, 0",class:"ansi-bright-green"},{color:"255, 255, 85",class:"ansi-bright-yellow"},{color:"85, 85, 255",class:"ansi-bright-blue"},{color:"255, 85, 255",class:"ansi-bright-magenta"},{color:"85, 255, 255",class:"ansi-bright-cyan"},{color:"255, 255, 255",class:"ansi-bright-white"}]],a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.fg=this.bg=this.fg_truecolor=this.bg_truecolor=null,this.bright=0}return n(e,null,[{key:"escapeForHtml",value:function(t){return(new e).escapeForHtml(t)}},{key:"linkify",value:function(t){return(new e).linkify(t)}},{key:"ansiToHtml",value:function(t,r){return(new e).ansiToHtml(t,r)}},{key:"ansiToJson",value:function(t,r){return(new e).ansiToJson(t,r)}},{key:"ansiToText",value:function(t){return(new e).ansiToText(t)}}]),n(e,[{key:"setupPalette",value:function(){this.PALETTE_COLORS=[];for(var e=0;e<2;++e)for(var t=0;t<8;++t)this.PALETTE_COLORS.push(o[e][t].color);for(var r=[0,95,135,175,215,255],n=function(e,t,n){return r[e]+", "+r[t]+", "+r[n]},a=0;a<6;++a)for(var i=0;i<6;++i)for(var l=0;l<6;++l)this.PALETTE_COLORS.push(n(a,i,l));for(var u=8,c=0;c<24;++c,u+=10)this.PALETTE_COLORS.push(n(u,u,u))}},{key:"escapeForHtml",value:function(e){return e.replace(/[&<>]/gm,(function(e){return"&"==e?"&amp;":"<"==e?"&lt;":">"==e?"&gt;":""}))}},{key:"linkify",value:function(e){return e.replace(/(https?:\\/\\/[^\\s]+)/gm,(function(e){return\'<a href="\'+e+\'">\'+e+"</a>"}))}},{key:"ansiToHtml",value:function(e,t){return this.process(e,t,!0)}},{key:"ansiToJson",value:function(e,t){return(t=t||{}).json=!0,t.clearLine=!1,this.process(e,t,!0)}},{key:"ansiToText",value:function(e){return this.process(e,{},!1)}},{key:"process",value:function(e,t,r){var n=this,o=e.split(/\\033\\[/),a=o.shift();void 0!==t&&null!==t||(t={}),t.clearLine=/\\r/.test(e);var i=o.map((function(e){return n.processChunk(e,t,r)}));if(t&&t.json){var l=this.processChunkJson("");return l.content=a,l.clearLine=t.clearLine,i.unshift(l),t.remove_empty&&(i=i.filter((function(e){return!e.isEmpty()}))),i}return i.unshift(a),i.join("")}},{key:"processChunkJson",value:function(e,t,r){var n=(t="undefined"==typeof t?{}:t).use_classes="undefined"!=typeof t.use_classes&&t.use_classes,a=t.key=n?"class":"color",i={content:e,fg:null,bg:null,fg_truecolor:null,bg_truecolor:null,clearLine:t.clearLine,decoration:null,was_processed:!1,isEmpty:function(){return!i.content}},l=e.match(/^([!\\x3c-\\x3f]*)([\\d;]*)([\\x20-\\x2c]*[\\x40-\\x7e])([\\s\\S]*)/m);if(!l)return i;i.content=l[4];var u=l[2].split(";");if(""!==l[1]||"m"!==l[3])return i;if(!r)return i;var c=this;for(c.decoration=null;u.length>0;){var s=u.shift(),f=parseInt(s);if(isNaN(f)||0===f)c.fg=c.bg=c.decoration=null;else if(1===f)c.decoration="bold";else if(2===f)c.decoration="dim";else if(3==f)c.decoration="italic";else if(4==f)c.decoration="underline";else if(5==f)c.decoration="blink";else if(7===f)c.decoration="reverse";else if(8===f)c.decoration="hidden";else if(9===f)c.decoration="strikethrough";else if(39==f)c.fg=null;else if(49==f)c.bg=null;else if(f>=30&&f<38)c.fg=o[0][f%10][a];else if(f>=90&&f<98)c.fg=o[1][f%10][a];else if(f>=40&&f<48)c.bg=o[0][f%10][a];else if(f>=100&&f<108)c.bg=o[1][f%10][a];else if(38===f||48===f){var d=38===f;if(u.length>=1){var p=u.shift();if("5"===p&&u.length>=1){var h=parseInt(u.shift());if(h>=0&&h<=255)if(n){var g=h>=16?"ansi-palette-"+h:o[h>7?1:0][h%8].class;d?c.fg=g:c.bg=g}else this.PALETTE_COLORS||c.setupPalette(),d?c.fg=this.PALETTE_COLORS[h]:c.bg=this.PALETTE_COLORS[h]}else if("2"===p&&u.length>=3){var v=parseInt(u.shift()),m=parseInt(u.shift()),y=parseInt(u.shift());if(v>=0&&v<=255&&m>=0&&m<=255&&y>=0&&y<=255){var b=v+", "+m+", "+y;n?d?(c.fg="ansi-truecolor",c.fg_truecolor=b):(c.bg="ansi-truecolor",c.bg_truecolor=b):d?c.fg=b:c.bg=b}}}}}if(null===c.fg&&null===c.bg&&null===c.decoration)return i;return i.fg=c.fg,i.bg=c.bg,i.fg_truecolor=c.fg_truecolor,i.bg_truecolor=c.bg_truecolor,i.decoration=c.decoration,i.was_processed=!0,i}},{key:"processChunk",value:function(e,t,r){var n=this;t=t||{};var o=this.processChunkJson(e,t,r);if(t.json)return o;if(o.isEmpty())return"";if(!o.was_processed)return o.content;var a=t.use_classes,i=[],l=[],u={},c=function(e){var t=[],r=void 0;for(r in e)e.hasOwnProperty(r)&&t.push("data-"+r+\'="\'+n.escapeForHtml(e[r])+\'"\');return t.length>0?" "+t.join(" "):""};return o.fg&&(a?(l.push(o.fg+"-fg"),null!==o.fg_truecolor&&(u["ansi-truecolor-fg"]=o.fg_truecolor,o.fg_truecolor=null)):i.push("color:rgb("+o.fg+")")),o.bg&&(a?(l.push(o.bg+"-bg"),null!==o.bg_truecolor&&(u["ansi-truecolor-bg"]=o.bg_truecolor,o.bg_truecolor=null)):i.push("background-color:rgb("+o.bg+")")),o.decoration&&(a?l.push("ansi-"+o.decoration):"bold"===o.decoration?i.push("font-weight:bold"):"dim"===o.decoration?i.push("opacity:0.5"):"italic"===o.decoration?i.push("font-style:italic"):"reverse"===o.decoration?i.push("filter:invert(100%)"):"hidden"===o.decoration?i.push("visibility:hidden"):"strikethrough"===o.decoration?i.push("text-decoration:line-through"):i.push("text-decoration:"+o.decoration)),a?\'<span class="\'+l.join(" ")+\'"\'+c(u)+">"+o.content+"</span>":\'<span style="\'+i.join(";")+\'"\'+c(u)+">"+o.content+"</span>"}}]),e}();e.exports=a},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"===typeof window&&(r=window)}e.exports=r},function(e,t,r){var n=r(16),o=r(55),a=r(23),i=r(20),l=r(29),u=r(11),c=r(57),s=Object.getOwnPropertyDescriptor;t.f=n?s:function(e,t){if(e=i(e),t=l(t,!0),c)try{return s(e,t)}catch(e){}if(u(e,t))return a(!o.f.call(e,t),e[t])}},function(e,t){var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can\'t call method on "+e);return e}},function(e,t,r){var n=r(8),o=r(18);e.exports=function(e,t){try{o(n,e,t)}catch(r){n[e]=t}return t}},function(e,t,r){var n=r(8),o=r(38),a="__core-js_shared__",i=n[a]||o(a,{});e.exports=i},function(e,t,r){var n=r(3),o=r(39);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.8.3",mode:n?"pure":"global",copyright:"\xa9 2021 Denis Pushkarev (zloirock.ru)"})},function(e,t,r){var n=r(62),o=r(43).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},function(e,t){var r=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:r)(e)}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,r){var n=r(12);e.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(e,t,r){var n=r(68),o=r(27),a=r(6)("iterator");e.exports=function(e){if(void 0!=e)return e[a]||e["@@iterator"]||o[n(e)]}},function(e,t,r){var n={};n[r(6)("toStringTag")]="z",e.exports="[object z]"===String(n)},function(e,t,r){"use strict";var n=r(1),o=r(102),a=r(76),i=r(72),l=r(22),u=r(18),c=r(21),s=r(6),f=r(3),d=r(27),p=r(75),h=p.IteratorPrototype,g=p.BUGGY_SAFARI_ITERATORS,v=s("iterator"),m="keys",y="values",b="entries",w=function(){return this};e.exports=function(e,t,r,s,p,k,E){o(r,t,s);var x,S,_,T=function(e){if(e===p&&N)return N;if(!g&&e in P)return P[e];switch(e){case m:case y:case b:return function(){return new r(this,e)}}return function(){return new r(this)}},C=t+" Iterator",O=!1,P=e.prototype,R=P[v]||P["@@iterator"]||p&&P[p],N=!g&&R||T(p),L="Array"==t&&P.entries||R;if(L&&(x=a(L.call(new e)),h!==Object.prototype&&x.next&&(f||a(x)===h||(i?i(x,h):"function"!=typeof x[v]&&u(x,v,w)),l(x,C,!0,!0),f&&(d[C]=w))),p==y&&R&&R.name!==y&&(O=!0,N=function(){return R.call(this)}),f&&!E||P[v]===N||u(P,v,N),d[t]=N,p)if(S={values:T(y),keys:k?N:T(m),entries:T(b)},E)for(_ in S)(g||O||!(_ in P))&&c(P,_,S[_]);else n({target:t,proto:!0,forced:g||O},S);return S}},function(e,t,r){var n=r(2),o=r(45);e.exports=function(e){var t=o(e);if("function"!=typeof t)throw TypeError(String(e)+" is not iterable");return n(t.call(e))}},function(e,t,r){var n=r(36);e.exports=Array.isArray||function(e){return"Array"==n(e)}},function(e,t,r){"use strict";var n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,l,u=i(e),c=1;c<arguments.length;c++){for(var s in r=Object(arguments[c]))o.call(r,s)&&(u[s]=r[s]);if(n){l=n(r);for(var f=0;f<l.length;f++)a.call(r,l[f])&&(u[l[f]]=r[l[f]])}}return u}},function(e,t){var r,n,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"===typeof setTimeout?setTimeout:a}catch(e){r=a}try{n="function"===typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var u,c=[],s=!1,f=-1;function d(){s&&u&&(s=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=l(d);s=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,s=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function g(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new h(e,t)),1!==c.length||s||l(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){var n=r(191);e.exports=function(e,t){var r;if("undefined"===typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=n(e))||t&&e&&"number"===typeof e.length){r&&(e=r);var o=0,a=function(){};return{s:a,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,u=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return l=e.done,e},e:function(e){u=!0,i=e},f:function(){try{l||null==r.return||r.return()}finally{if(u)throw i}}}}},function(e,t,r){"use strict";!function e(){if("undefined"!==typeof{}&&"function"===typeof{}.checkDCE)try{({}).checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(184)},function(e,t,r){"use strict";var n=r(1),o=r(8),a=r(64),i=r(21),l=r(65),u=r(4),c=r(70),s=r(13),f=r(12),d=r(71),p=r(22),h=r(97);e.exports=function(e,t,r){var g=-1!==e.indexOf("Map"),v=-1!==e.indexOf("Weak"),m=g?"set":"add",y=o[e],b=y&&y.prototype,w=y,k={},E=function(e){var t=b[e];i(b,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return!(v&&!s(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return v&&!s(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return!(v&&!s(e))&&t.call(this,0===e?0:e)}:function(e,r){return t.call(this,0===e?0:e,r),this})};if(a(e,"function"!=typeof y||!(v||b.forEach&&!f((function(){(new y).entries().next()})))))w=r.getConstructor(t,e,g,m),l.REQUIRED=!0;else if(a(e,!0)){var x=new w,S=x[m](v?{}:-0,1)!=x,_=f((function(){x.has(1)})),T=d((function(e){new y(e)})),C=!v&&f((function(){for(var e=new y,t=5;t--;)e[m](t,t);return!e.has(-0)}));T||((w=t((function(t,r){c(t,w,e);var n=h(new y,t,w);return void 0!=r&&u(r,n[m],{that:n,AS_ENTRIES:g}),n}))).prototype=b,b.constructor=w),(_||C)&&(E("delete"),E("has"),g&&E("get")),(C||S)&&E(m),v&&b.clear&&delete b.clear}return k[e]=w,n({global:!0,forced:w!=y},k),p(w,e),v||r.setStrong(w,e,g),w}},function(e,t,r){"use strict";var n={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,a=o&&!n.call({1:2},1);t.f=a?function(e){var t=o(this,e);return!!t&&t.enumerable}:n},function(e,t,r){var n=r(12),o=r(36),a="".split;e.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?a.call(e,""):Object(e)}:Object},function(e,t,r){var n=r(16),o=r(12),a=r(58);e.exports=!n&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(e,t,r){var n=r(8),o=r(13),a=n.document,i=o(a)&&o(a.createElement);e.exports=function(e){return i?a.createElement(e):{}}},function(e,t,r){var n=r(39),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(e){return o.call(e)}),e.exports=n.inspectSource},function(e,t,r){var n=r(11),o=r(93),a=r(35),i=r(14);e.exports=function(e,t){for(var r=o(t),l=i.f,u=a.f,c=0;c<r.length;c++){var s=r[c];n(e,s)||l(e,s,u(t,s))}}},function(e,t,r){var n=r(8);e.exports=n},function(e,t,r){var n=r(11),o=r(20),a=r(94).indexOf,i=r(25);e.exports=function(e,t){var r,l=o(e),u=0,c=[];for(r in l)!n(i,r)&&n(l,r)&&c.push(r);for(;t.length>u;)n(l,r=t[u++])&&(~a(c,r)||c.push(r));return c}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,r){var n=r(12),o=/#|\\.prototype\\./,a=function(e,t){var r=l[i(e)];return r==c||r!=u&&("function"==typeof t?n(t):!!t)},i=a.normalize=function(e){return String(e).replace(o,".").toLowerCase()},l=a.data={},u=a.NATIVE="N",c=a.POLYFILL="P";e.exports=a},function(e,t,r){var n=r(25),o=r(13),a=r(11),i=r(14).f,l=r(31),u=r(96),c=l("meta"),s=0,f=Object.isExtensible||function(){return!0},d=function(e){i(e,c,{value:{objectID:"O"+ ++s,weakData:{}}})},p=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,c)){if(!f(e))return"F";if(!t)return"E";d(e)}return e[c].objectID},getWeakData:function(e,t){if(!a(e,c)){if(!f(e))return!0;if(!t)return!1;d(e)}return e[c].weakData},onFreeze:function(e){return u&&p.REQUIRED&&f(e)&&!a(e,c)&&d(e),e}};n[c]=!0},function(e,t,r){var n=r(6),o=r(27),a=n("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||i[a]===e)}},function(e,t,r){var n=r(44);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,r){var n=r(46),o=r(36),a=r(6)("toStringTag"),i="Arguments"==o(function(){return arguments}());e.exports=n?o:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),a))?r:i?o(t):"Object"==(n=o(t))&&"function"==typeof t.callee?"Arguments":n}},function(e,t,r){var n=r(2);e.exports=function(e){var t=e.return;if(void 0!==t)return n(t.call(e)).value}},function(e,t){e.exports=function(e,t,r){if(!(e instanceof t))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return e}},function(e,t,r){var n=r(6)("iterator"),o=!1;try{var a=0,i={next:function(){return{done:!!a++}},return:function(){o=!0}};i[n]=function(){return this},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var a={};a[n]=function(){return{next:function(){return{done:r=!0}}}},e(a)}catch(e){}return r}},function(e,t,r){var n=r(2),o=r(98);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),t=r instanceof Array}catch(e){}return function(r,a){return n(r),o(a),t?e.call(r,a):r.__proto__=a,r}}():void 0)},function(e,t,r){"use strict";var n=r(14).f,o=r(32),a=r(101),i=r(7),l=r(70),u=r(4),c=r(47),s=r(104),f=r(16),d=r(65).fastKey,p=r(24),h=p.set,g=p.getterFor;e.exports={getConstructor:function(e,t,r,c){var s=e((function(e,n){l(e,s,t),h(e,{type:t,index:o(null),first:void 0,last:void 0,size:0}),f||(e.size=0),void 0!=n&&u(n,e[c],{that:e,AS_ENTRIES:r})})),p=g(t),v=function(e,t,r){var n,o,a=p(e),i=m(e,t);return i?i.value=r:(a.last=i={index:o=d(t,!0),key:t,value:r,previous:n=a.last,next:void 0,removed:!1},a.first||(a.first=i),n&&(n.next=i),f?a.size++:e.size++,"F"!==o&&(a.index[o]=i)),e},m=function(e,t){var r,n=p(e),o=d(t);if("F"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key==t)return r};return a(s.prototype,{clear:function(){for(var e=p(this),t=e.index,r=e.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete t[r.index],r=r.next;e.first=e.last=void 0,f?e.size=0:this.size=0},delete:function(e){var t=this,r=p(t),n=m(t,e);if(n){var o=n.next,a=n.previous;delete r.index[n.index],n.removed=!0,a&&(a.next=o),o&&(o.previous=a),r.first==n&&(r.first=o),r.last==n&&(r.last=a),f?r.size--:t.size--}return!!n},forEach:function(e){for(var t,r=p(this),n=i(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:r.first;)for(n(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!m(this,e)}}),a(s.prototype,r?{get:function(e){var t=m(this,e);return t&&t.value},set:function(e,t){return v(this,0===e?0:e,t)}}:{add:function(e){return v(this,e=0===e?0:e,e)}}),f&&n(s.prototype,"size",{get:function(){return p(this).size}}),s},setStrong:function(e,t,r){var n=t+" Iterator",o=g(t),a=g(n);c(e,t,(function(e,t){h(this,{type:n,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=a(this),t=e.kind,r=e.last;r&&r.removed;)r=r.previous;return e.target&&(e.last=r=r?r.next:e.state.first)?"keys"==t?{value:r.key,done:!1}:"values"==t?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),s(t)}}},function(e,t,r){var n=r(62),o=r(43);e.exports=Object.keys||function(e){return n(e,o)}},function(e,t,r){"use strict";var n,o,a,i=r(12),l=r(76),u=r(18),c=r(11),s=r(6),f=r(3),d=s("iterator"),p=!1;[].keys&&("next"in(a=[].keys())?(o=l(l(a)))!==Object.prototype&&(n=o):p=!0);var h=void 0==n||i((function(){var e={};return n[d].call(e)!==e}));h&&(n={}),f&&!h||c(n,d)||u(n,d,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p}},function(e,t,r){var n=r(11),o=r(28),a=r(30),i=r(103),l=a("IE_PROTO"),u=Object.prototype;e.exports=i?Object.getPrototypeOf:function(e){return e=o(e),n(e,l)?e[l]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?u:null}},function(e,t,r){var n=r(46),o=r(21),a=r(105);n||o(Object.prototype,"toString",a,{unsafe:!0})},function(e,t,r){"use strict";var n=r(107).charAt,o=r(24),a=r(47),i="String Iterator",l=o.set,u=o.getterFor(i);a(String,"String",(function(e){l(this,{type:i,string:String(e),index:0})}),(function(){var e,t=u(this),r=t.string,o=t.index;return o>=r.length?{value:void 0,done:!0}:(e=n(r,o),t.index+=e.length,{value:e,done:!1})}))},function(e,t,r){"use strict";var n=r(2),o=r(5);e.exports=function(){for(var e,t=n(this),r=o(t.delete),a=!0,i=0,l=arguments.length;i<l;i++)e=r.call(t,arguments[i]),a=a&&e;return!!a}},function(e,t,r){"use strict";var n=r(5),o=r(7),a=r(4);e.exports=function(e){var t,r,i,l,u=arguments.length,c=u>1?arguments[1]:void 0;return n(this),(t=void 0!==c)&&n(c),void 0==e?new this:(r=[],t?(i=0,l=o(c,u>2?arguments[2]:void 0,2),a(e,(function(e){r.push(l(e,i++))}))):a(e,r.push,{that:r}),new this(r))}},function(e,t,r){"use strict";e.exports=function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}},function(e,t,r){var n=r(6);t.f=n},function(e,t,r){var n=r(13),o=r(49),a=r(6)("species");e.exports=function(e,t){var r;return o(e)&&("function"!=typeof(r=e.constructor)||r!==Array&&!o(r.prototype)?n(r)&&null===(r=r[a])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===t?0:t)}},function(e,t,r){"use strict";var n=r(29),o=r(14),a=r(23);e.exports=function(e,t,r){var i=n(t);i in e?o.f(e,i,a(0,r)):e[i]=r}},function(e,t,r){var n,o,a=r(8),i=r(168),l=a.process,u=l&&l.versions,c=u&&u.v8;c?o=(n=c.split("."))[0]+n[1]:i&&(!(n=i.match(/Edge\\/(\\d+)/))||n[1]>=74)&&(n=i.match(/Chrome\\/(\\d+)/))&&(o=n[1]),e.exports=o&&+o},function(e,t,r){"use strict";var n=r(178);function o(){}var a=null,i={};function l(e){if("object"!==typeof this)throw new TypeError("Promises must be constructed via new");if("function"!==typeof e)throw new TypeError("Promise constructor\'s argument is not a function");this._U=0,this._V=0,this._W=null,this._X=null,e!==o&&p(e,this)}function u(e,t){for(;3===e._V;)e=e._W;if(l._Y&&l._Y(e),0===e._V)return 0===e._U?(e._U=1,void(e._X=t)):1===e._U?(e._U=2,void(e._X=[e._X,t])):void e._X.push(t);!function(e,t){n((function(){var r=1===e._V?t.onFulfilled:t.onRejected;if(null!==r){var n=function(e,t){try{return e(t)}catch(e){return a=e,i}}(r,e._W);n===i?s(t.promise,a):c(t.promise,n)}else 1===e._V?c(t.promise,e._W):s(t.promise,e._W)}))}(e,t)}function c(e,t){if(t===e)return s(e,new TypeError("A promise cannot be resolved with itself."));if(t&&("object"===typeof t||"function"===typeof t)){var r=function(e){try{return e.then}catch(e){return a=e,i}}(t);if(r===i)return s(e,a);if(r===e.then&&t instanceof l)return e._V=3,e._W=t,void f(e);if("function"===typeof r)return void p(r.bind(t),e)}e._V=1,e._W=t,f(e)}function s(e,t){e._V=2,e._W=t,l._Z&&l._Z(e,t),f(e)}function f(e){if(1===e._U&&(u(e,e._X),e._X=null),2===e._U){for(var t=0;t<e._X.length;t++)u(e,e._X[t]);e._X=null}}function d(e,t,r){this.onFulfilled="function"===typeof e?e:null,this.onRejected="function"===typeof t?t:null,this.promise=r}function p(e,t){var r=!1,n=function(e,t,r){try{e(t,r)}catch(e){return a=e,i}}(e,(function(e){r||(r=!0,c(t,e))}),(function(e){r||(r=!0,s(t,e))}));r||n!==i||(r=!0,s(t,a))}e.exports=l,l._Y=null,l._Z=null,l._0=o,l.prototype.then=function(e,t){if(this.constructor!==l)return function(e,t,r){return new e.constructor((function(n,a){var i=new l(o);i.then(n,a),u(e,new d(t,r,i))}))}(this,e,t);var r=new l(o);return u(this,new d(e,t,r)),r}},function(e,t,r){var n=r(204),o={};for(var a in n)n.hasOwnProperty(a)&&(o[n[a]]=a);var i=e.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var l in i)if(i.hasOwnProperty(l)){if(!("channels"in i[l]))throw new Error("missing channels property: "+l);if(!("labels"in i[l]))throw new Error("missing channel labels property: "+l);if(i[l].labels.length!==i[l].channels)throw new Error("channel and label counts mismatch: "+l);var u=i[l].channels,c=i[l].labels;delete i[l].channels,delete i[l].labels,Object.defineProperty(i[l],"channels",{value:u}),Object.defineProperty(i[l],"labels",{value:c})}i.rgb.hsl=function(e){var t,r,n=e[0]/255,o=e[1]/255,a=e[2]/255,i=Math.min(n,o,a),l=Math.max(n,o,a),u=l-i;return l===i?t=0:n===l?t=(o-a)/u:o===l?t=2+(a-n)/u:a===l&&(t=4+(n-o)/u),(t=Math.min(60*t,360))<0&&(t+=360),r=(i+l)/2,[t,100*(l===i?0:r<=.5?u/(l+i):u/(2-l-i)),100*r]},i.rgb.hsv=function(e){var t,r,n,o,a,i=e[0]/255,l=e[1]/255,u=e[2]/255,c=Math.max(i,l,u),s=c-Math.min(i,l,u),f=function(e){return(c-e)/6/s+.5};return 0===s?o=a=0:(a=s/c,t=f(i),r=f(l),n=f(u),i===c?o=n-r:l===c?o=1/3+t-n:u===c&&(o=2/3+r-t),o<0?o+=1:o>1&&(o-=1)),[360*o,100*a,100*c]},i.rgb.hwb=function(e){var t=e[0],r=e[1],n=e[2];return[i.rgb.hsl(e)[0],100*(1/255*Math.min(t,Math.min(r,n))),100*(n=1-1/255*Math.max(t,Math.max(r,n)))]},i.rgb.cmyk=function(e){var t,r=e[0]/255,n=e[1]/255,o=e[2]/255;return[100*((1-r-(t=Math.min(1-r,1-n,1-o)))/(1-t)||0),100*((1-n-t)/(1-t)||0),100*((1-o-t)/(1-t)||0),100*t]},i.rgb.keyword=function(e){var t=o[e];if(t)return t;var r,a,i,l=1/0;for(var u in n)if(n.hasOwnProperty(u)){var c=n[u],s=(a=e,i=c,Math.pow(a[0]-i[0],2)+Math.pow(a[1]-i[1],2)+Math.pow(a[2]-i[2],2));s<l&&(l=s,r=u)}return r},i.keyword.rgb=function(e){return n[e]},i.rgb.xyz=function(e){var t=e[0]/255,r=e[1]/255,n=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)+.1805*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)),100*(.2126*t+.7152*r+.0722*n),100*(.0193*t+.1192*r+.9505*n)]},i.rgb.lab=function(e){var t=i.rgb.xyz(e),r=t[0],n=t[1],o=t[2];return n/=100,o/=108.883,r=(r/=95.047)>.008856?Math.pow(r,1/3):7.787*r+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(r-n),200*(n-(o=o>.008856?Math.pow(o,1/3):7.787*o+16/116))]},i.hsl.rgb=function(e){var t,r,n,o,a,i=e[0]/360,l=e[1]/100,u=e[2]/100;if(0===l)return[a=255*u,a,a];t=2*u-(r=u<.5?u*(1+l):u+l-u*l),o=[0,0,0];for(var c=0;c<3;c++)(n=i+1/3*-(c-1))<0&&n++,n>1&&n--,a=6*n<1?t+6*(r-t)*n:2*n<1?r:3*n<2?t+(r-t)*(2/3-n)*6:t,o[c]=255*a;return o},i.hsl.hsv=function(e){var t=e[0],r=e[1]/100,n=e[2]/100,o=r,a=Math.max(n,.01);return r*=(n*=2)<=1?n:2-n,o*=a<=1?a:2-a,[t,100*(0===n?2*o/(a+o):2*r/(n+r)),100*((n+r)/2)]},i.hsv.rgb=function(e){var t=e[0]/60,r=e[1]/100,n=e[2]/100,o=Math.floor(t)%6,a=t-Math.floor(t),i=255*n*(1-r),l=255*n*(1-r*a),u=255*n*(1-r*(1-a));switch(n*=255,o){case 0:return[n,u,i];case 1:return[l,n,i];case 2:return[i,n,u];case 3:return[i,l,n];case 4:return[u,i,n];case 5:return[n,i,l]}},i.hsv.hsl=function(e){var t,r,n,o=e[0],a=e[1]/100,i=e[2]/100,l=Math.max(i,.01);return n=(2-a)*i,r=a*l,[o,100*(r=(r/=(t=(2-a)*l)<=1?t:2-t)||0),100*(n/=2)]},i.hwb.rgb=function(e){var t,r,n,o,a,i,l,u=e[0]/360,c=e[1]/100,s=e[2]/100,f=c+s;switch(f>1&&(c/=f,s/=f),n=6*u-(t=Math.floor(6*u)),0!==(1&t)&&(n=1-n),o=c+n*((r=1-s)-c),t){default:case 6:case 0:a=r,i=o,l=c;break;case 1:a=o,i=r,l=c;break;case 2:a=c,i=r,l=o;break;case 3:a=c,i=o,l=r;break;case 4:a=o,i=c,l=r;break;case 5:a=r,i=c,l=o}return[255*a,255*i,255*l]},i.cmyk.rgb=function(e){var t=e[0]/100,r=e[1]/100,n=e[2]/100,o=e[3]/100;return[255*(1-Math.min(1,t*(1-o)+o)),255*(1-Math.min(1,r*(1-o)+o)),255*(1-Math.min(1,n*(1-o)+o))]},i.xyz.rgb=function(e){var t,r,n,o=e[0]/100,a=e[1]/100,i=e[2]/100;return r=-.9689*o+1.8758*a+.0415*i,n=.0557*o+-.204*a+1.057*i,t=(t=3.2406*o+-1.5372*a+-.4986*i)>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,[255*(t=Math.min(Math.max(0,t),1)),255*(r=Math.min(Math.max(0,r),1)),255*(n=Math.min(Math.max(0,n),1))]},i.xyz.lab=function(e){var t=e[0],r=e[1],n=e[2];return r/=100,n/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(t-r),200*(r-(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116))]},i.lab.xyz=function(e){var t,r,n,o=e[0];t=e[1]/500+(r=(o+16)/116),n=r-e[2]/200;var a=Math.pow(r,3),i=Math.pow(t,3),l=Math.pow(n,3);return r=a>.008856?a:(r-16/116)/7.787,t=i>.008856?i:(t-16/116)/7.787,n=l>.008856?l:(n-16/116)/7.787,[t*=95.047,r*=100,n*=108.883]},i.lab.lch=function(e){var t,r=e[0],n=e[1],o=e[2];return(t=360*Math.atan2(o,n)/2/Math.PI)<0&&(t+=360),[r,Math.sqrt(n*n+o*o),t]},i.lch.lab=function(e){var t,r=e[0],n=e[1];return t=e[2]/360*2*Math.PI,[r,n*Math.cos(t),n*Math.sin(t)]},i.rgb.ansi16=function(e){var t=e[0],r=e[1],n=e[2],o=1 in arguments?arguments[1]:i.rgb.hsv(e)[2];if(0===(o=Math.round(o/50)))return 30;var a=30+(Math.round(n/255)<<2|Math.round(r/255)<<1|Math.round(t/255));return 2===o&&(a+=60),a},i.hsv.ansi16=function(e){return i.rgb.ansi16(i.hsv.rgb(e),e[2])},i.rgb.ansi256=function(e){var t=e[0],r=e[1],n=e[2];return t===r&&r===n?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(r/255*5)+Math.round(n/255*5)},i.ansi16.rgb=function(e){var t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),[t=t/10.5*255,t,t];var r=.5*(1+~~(e>50));return[(1&t)*r*255,(t>>1&1)*r*255,(t>>2&1)*r*255]},i.ansi256.rgb=function(e){if(e>=232){var t=10*(e-232)+8;return[t,t,t]}var r;return e-=16,[Math.floor(e/36)/5*255,Math.floor((r=e%36)/6)/5*255,r%6/5*255]},i.rgb.hex=function(e){var t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},i.hex.rgb=function(e){var t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];var r=t[0];3===t[0].length&&(r=r.split("").map((function(e){return e+e})).join(""));var n=parseInt(r,16);return[n>>16&255,n>>8&255,255&n]},i.rgb.hcg=function(e){var t,r=e[0]/255,n=e[1]/255,o=e[2]/255,a=Math.max(Math.max(r,n),o),i=Math.min(Math.min(r,n),o),l=a-i;return t=l<=0?0:a===r?(n-o)/l%6:a===n?2+(o-r)/l:4+(r-n)/l+4,t/=6,[360*(t%=1),100*l,100*(l<1?i/(1-l):0)]},i.hsl.hcg=function(e){var t=e[1]/100,r=e[2]/100,n=1,o=0;return(n=r<.5?2*t*r:2*t*(1-r))<1&&(o=(r-.5*n)/(1-n)),[e[0],100*n,100*o]},i.hsv.hcg=function(e){var t=e[1]/100,r=e[2]/100,n=t*r,o=0;return n<1&&(o=(r-n)/(1-n)),[e[0],100*n,100*o]},i.hcg.rgb=function(e){var t=e[0]/360,r=e[1]/100,n=e[2]/100;if(0===r)return[255*n,255*n,255*n];var o,a=[0,0,0],i=t%1*6,l=i%1,u=1-l;switch(Math.floor(i)){case 0:a[0]=1,a[1]=l,a[2]=0;break;case 1:a[0]=u,a[1]=1,a[2]=0;break;case 2:a[0]=0,a[1]=1,a[2]=l;break;case 3:a[0]=0,a[1]=u,a[2]=1;break;case 4:a[0]=l,a[1]=0,a[2]=1;break;default:a[0]=1,a[1]=0,a[2]=u}return o=(1-r)*n,[255*(r*a[0]+o),255*(r*a[1]+o),255*(r*a[2]+o)]},i.hcg.hsv=function(e){var t=e[1]/100,r=t+e[2]/100*(1-t),n=0;return r>0&&(n=t/r),[e[0],100*n,100*r]},i.hcg.hsl=function(e){var t=e[1]/100,r=e[2]/100*(1-t)+.5*t,n=0;return r>0&&r<.5?n=t/(2*r):r>=.5&&r<1&&(n=t/(2*(1-r))),[e[0],100*n,100*r]},i.hcg.hwb=function(e){var t=e[1]/100,r=t+e[2]/100*(1-t);return[e[0],100*(r-t),100*(1-r)]},i.hwb.hcg=function(e){var t=e[1]/100,r=1-e[2]/100,n=r-t,o=0;return n<1&&(o=(r-n)/(1-n)),[e[0],100*n,100*o]},i.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},i.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},i.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},i.gray.hsl=i.gray.hsv=function(e){return[0,0,e[0]]},i.gray.hwb=function(e){return[0,100,e[0]]},i.gray.cmyk=function(e){return[0,0,0,e[0]]},i.gray.lab=function(e){return[e[0],0,0]},i.gray.hex=function(e){var t=255&Math.round(e[0]/100*255),r=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(r.length)+r},i.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(187);t.XmlEntities=n.XmlEntities;var o=r(188);t.Html4Entities=o.Html4Entities;var a=r(189);t.Html5Entities=a.Html5Entities,t.AllHtmlEntities=a.Html5Entities},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.codeFrameColumns=c,t.default=function(t,r,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(!a){a=!0;var i="Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";if(e.emitWarning)e.emitWarning(i,"DeprecationWarning");else{var l=new Error(i);l.name="DeprecationWarning",console.warn(new Error(i))}}var u={start:{column:n=Math.max(n,0),line:r}};return c(t,u,o)};var n=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==typeof e&&"function"!==typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var i=n?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(r,a,i):r[a]=e[a]}r.default=e,t&&t.set(e,r);return r}(r(190));function o(){if("function"!==typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}var a=!1;function i(e){return{gutter:e.grey,marker:e.red.bold,message:e.red.bold}}var l=/\\r\\n|[\\n\\r\\u2028\\u2029]/;function u(e,t,r){var n=Object.assign({column:0,line:-1},e.start),o=Object.assign({},n,e.end),a=r||{},i=a.linesAbove,l=void 0===i?2:i,u=a.linesBelow,c=void 0===u?3:u,s=n.line,f=n.column,d=o.line,p=o.column,h=Math.max(s-(l+1),0),g=Math.min(t.length,d+c);-1===s&&(h=0),-1===d&&(g=t.length);var v=d-s,m={};if(v)for(var y=0;y<=v;y++){var b=y+s;if(f)if(0===y){var w=t[b-1].length;m[b]=[f,w-f+1]}else if(y===v)m[b]=[0,p];else{var k=t[b-y].length;m[b]=[0,k]}else m[b]=!0}else m[s]=f===p?!f||[f,0]:[f,p-f];return{start:h,end:g,markerLines:m}}function c(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=(r.highlightCode||r.forceColor)&&(0,n.shouldHighlight)(r),a=(0,n.getChalk)(r),c=i(a),s=function(e,t){return o?e(t):t},f=e.split(l),d=u(t,f,r),p=d.start,h=d.end,g=d.markerLines,v=t.start&&"number"===typeof t.start.column,m=String(h).length,y=o?(0,n.default)(e,r):e,b=y.split(l).slice(p,h).map((function(e,t){var n=p+1+t,o=" ".concat(n).slice(-m),a=" ".concat(o," | "),i=g[n],l=!g[n+1];if(i){var u="";if(Array.isArray(i)){var f=e.slice(0,Math.max(i[0]-1,0)).replace(/[^\\t]/g," "),d=i[1]||1;u=["\\n ",s(c.gutter,a.replace(/\\d/g," ")),f,s(c.marker,"^").repeat(d)].join(""),l&&r.message&&(u+=" "+s(c.message,r.message))}return[s(c.marker,">"),s(c.gutter,a),e,u].join("")}return" ".concat(s(c.gutter,a)).concat(e)})).join("\\n");return r.message&&!v&&(b="".concat(" ".repeat(m+1)).concat(r.message,"\\n").concat(b)),o?a.reset(b):b}}).call(this,r(51))},function(e,t,r){"use strict";r(91),r(77),r(106),r(78),r(108),r(109),r(110),r(111),r(112),r(113),r(114),r(115),r(117),r(118),r(119),r(120),r(121),r(122),r(123),r(124),r(125),r(126),r(128),r(129),r(130),r(131),r(132),r(133),r(134),r(135),r(136),r(137),r(138),r(139),r(140),r(141),r(142),r(143),r(144),r(145),r(149),r(181).polyfill()},function(e,t,r){"use strict";var n=r(54),o=r(73);e.exports=n("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),o)},function(e,t,r){var n=r(8),o=r(59),a=n.WeakMap;e.exports="function"===typeof a&&/native code/.test(o(a))},function(e,t,r){var n=r(10),o=r(41),a=r(63),i=r(2);e.exports=n("Reflect","ownKeys")||function(e){var t=o.f(i(e)),r=a.f;return r?t.concat(r(e)):t}},function(e,t,r){var n=r(20),o=r(26),a=r(95),i=function(e){return function(t,r,i){var l,u=n(t),c=o(u.length),s=a(i,c);if(e&&r!=r){for(;c>s;)if((l=u[s++])!=l)return!0}else for(;c>s;s++)if((e||s in u)&&u[s]===r)return e||s||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},function(e,t,r){var n=r(42),o=Math.max,a=Math.min;e.exports=function(e,t){var r=n(e);return r<0?o(r+t,0):a(r,t)}},function(e,t,r){var n=r(12);e.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(e,t,r){var n=r(13),o=r(72);e.exports=function(e,t,r){var a,i;return o&&"function"==typeof(a=t.constructor)&&a!==r&&n(i=a.prototype)&&i!==r.prototype&&o(e,i),e}},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e)&&null!==e)throw TypeError("Can\'t set "+String(e)+" as a prototype");return e}},function(e,t,r){var n=r(16),o=r(14),a=r(2),i=r(74);e.exports=n?Object.defineProperties:function(e,t){a(e);for(var r,n=i(t),l=n.length,u=0;l>u;)o.f(e,r=n[u++],t[r]);return e}},function(e,t,r){var n=r(10);e.exports=n("document","documentElement")},function(e,t,r){var n=r(21);e.exports=function(e,t,r){for(var o in t)n(e,o,t[o],r);return e}},function(e,t,r){"use strict";var n=r(75).IteratorPrototype,o=r(32),a=r(23),i=r(22),l=r(27),u=function(){return this};e.exports=function(e,t,r){var c=t+" Iterator";return e.prototype=o(n,{next:a(1,r)}),i(e,c,!1,!0),l[c]=u,e}},function(e,t,r){var n=r(12);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,t,r){"use strict";var n=r(10),o=r(14),a=r(6),i=r(16),l=a("species");e.exports=function(e){var t=n(e),r=o.f;i&&t&&!t[l]&&r(t,l,{configurable:!0,get:function(){return this}})}},function(e,t,r){"use strict";var n=r(46),o=r(68);e.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},function(e,t,r){"use strict";var n=r(54),o=r(73);e.exports=n("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),o)},function(e,t,r){var n=r(42),o=r(37),a=function(e){return function(t,r){var a,i,l=String(o(t)),u=n(r),c=l.length;return u<0||u>=c?e?"":void 0:(a=l.charCodeAt(u))<55296||a>56319||u+1===c||(i=l.charCodeAt(u+1))<56320||i>57343?e?l.charAt(u):a:e?l.slice(u,u+2):i-56320+(a-55296<<10)+65536}};e.exports={codeAt:a(!1),charAt:a(!0)}},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(79);n({target:"Map",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{every:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return!u(r,(function(e,r,o){if(!n(r,e,t))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{filter:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){n(r,e,t)&&d.call(o,e,r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{find:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o(r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{findKey:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o(e)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){r(1)({target:"Map",stat:!0},{from:r(80)})},function(e,t,r){"use strict";var n=r(1),o=r(4),a=r(5);n({target:"Map",stat:!0},{groupBy:function(e,t){var r=new this;a(t);var n=a(r.has),i=a(r.get),l=a(r.set);return o(e,(function(e){var o=t(e);n.call(r,o)?i.call(r,o).push(e):l.call(r,o,[e])})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(15),l=r(116),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{includes:function(e){return u(i(a(this)),(function(t,r,n){if(l(r,e))return n()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,r){"use strict";var n=r(1),o=r(4),a=r(5);n({target:"Map",stat:!0},{keyBy:function(e,t){var r=new this;a(t);var n=a(r.set);return o(e,(function(e){n.call(r,t(e),e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(15),l=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{keyOf:function(e){return l(i(a(this)),(function(t,r,n){if(r===e)return n(t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{mapKeys:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){d.call(o,n(r,e,t),r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{mapValues:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){d.call(o,e,n(r,e,t))}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{merge:function(e){for(var t=a(this),r=i(t.set),n=0;n<arguments.length;)l(arguments[n++],r,{that:t,AS_ENTRIES:!0});return t}})},function(e,t,r){r(1)({target:"Map",stat:!0},{of:r(81)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{reduce:function(e){var t=a(this),r=l(t),n=arguments.length<2,o=n?void 0:arguments[1];if(i(e),u(r,(function(r,a){n?(n=!1,o=a):o=e(o,a,r,t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),n)throw TypeError("Reduce of empty map with no initial value");return o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{some:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5);n({target:"Map",proto:!0,real:!0,forced:o},{update:function(e,t){var r=a(this),n=arguments.length;i(t);var o=r.has(e);if(!o&&n<3)throw TypeError("Updating absent value");var l=o?r.get(e):i(n>2?arguments[2]:void 0)(e,r);return r.set(e,t(l,e,r)),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(127);n({target:"Set",proto:!0,real:!0,forced:o},{addAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(2),o=r(5);e.exports=function(){for(var e=n(this),t=o(e.add),r=0,a=arguments.length;r<a;r++)t.call(e,arguments[r]);return e}},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(79);n({target:"Set",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{difference:function(e){var t=i(this),r=new(u(t,a("Set")))(t),n=l(r.delete);return c(e,(function(e){n.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{every:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return!u(r,(function(e,r){if(!n(e,e,t))return r()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(19),f=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{filter:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Set"))),d=l(o.add);return f(r,(function(e){n(e,e,t)&&d.call(o,e)}),{IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{find:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r){if(n(e,e,t))return r(e)}),{IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){r(1)({target:"Set",stat:!0},{from:r(80)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{intersection:function(e){var t=i(this),r=new(u(t,a("Set"))),n=l(t.has),o=l(r.add);return c(e,(function(e){n.call(t,e)&&o.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isDisjointFrom:function(e){var t=a(this),r=i(t.has);return!l(e,(function(e,n){if(!0===r.call(t,e))return n()}),{INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(48),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isSubsetOf:function(e){var t=u(this),r=i(e),n=r.has;return"function"!=typeof n&&(r=new(a("Set"))(e),n=l(r.has)),!c(t,(function(e,t){if(!1===n.call(r,e))return t()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isSupersetOf:function(e){var t=a(this),r=i(t.has);return!l(e,(function(e,n){if(!1===r.call(t,e))return n()}),{INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(19),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{join:function(e){var t=a(this),r=i(t),n=void 0===e?",":String(e),o=[];return l(r,o.push,{that:o,IS_ITERATOR:!0}),o.join(n)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(19),f=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{map:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Set"))),d=l(o.add);return f(r,(function(e){d.call(o,n(e,e,t))}),{IS_ITERATOR:!0}),o}})},function(e,t,r){r(1)({target:"Set",stat:!0},{of:r(81)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{reduce:function(e){var t=a(this),r=l(t),n=arguments.length<2,o=n?void 0:arguments[1];if(i(e),u(r,(function(r){n?(n=!1,o=r):o=e(o,r,r,t)}),{IS_ITERATOR:!0}),n)throw TypeError("Reduce of empty set with no initial value");return o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{some:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r){if(n(e,e,t))return r()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{symmetricDifference:function(e){var t=i(this),r=new(u(t,a("Set")))(t),n=l(r.delete),o=l(r.add);return c(e,(function(e){n.call(r,e)||o.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{union:function(e){var t=i(this),r=new(u(t,a("Set")))(t);return c(e,l(r.add),{that:r}),r}})},function(e,t,r){var n=r(8),o=r(146),a=r(147),i=r(18),l=r(6),u=l("iterator"),c=l("toStringTag"),s=a.values;for(var f in o){var d=n[f],p=d&&d.prototype;if(p){if(p[u]!==s)try{i(p,u,s)}catch(e){p[u]=s}if(p[c]||i(p,c,f),o[f])for(var h in a)if(p[h]!==a[h])try{i(p,h,a[h])}catch(e){p[h]=a[h]}}}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,r){"use strict";var n=r(20),o=r(148),a=r(27),i=r(24),l=r(47),u="Array Iterator",c=i.set,s=i.getterFor(u);e.exports=l(Array,"Array",(function(e,t){c(this,{type:u,target:n(e),index:0,kind:t})}),(function(){var e=s(this),t=e.target,r=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}),"values"),a.Arguments=a.Array,o("keys"),o("values"),o("entries")},function(e,t,r){var n=r(6),o=r(32),a=r(14),i=n("unscopables"),l=Array.prototype;void 0==l[i]&&a.f(l,i,{configurable:!0,value:o(null)}),e.exports=function(e){l[i][e]=!0}},function(e,t,r){"use strict";r(150),r(153),r(154),r(155),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(169),r(172),r(173),r(77),r(78),r(174),r(175),r(176),"undefined"===typeof Promise&&(r(177).enable(),self.Promise=r(179)),"undefined"!==typeof window&&r(180),Object.assign=r(50)},function(e,t,r){"use strict";var n=r(1),o=r(8),a=r(10),i=r(3),l=r(16),u=r(44),c=r(67),s=r(12),f=r(11),d=r(49),p=r(13),h=r(2),g=r(28),v=r(20),m=r(29),y=r(23),b=r(32),w=r(74),k=r(41),E=r(151),x=r(63),S=r(35),_=r(14),T=r(55),C=r(18),O=r(21),P=r(40),R=r(30),N=r(25),L=r(31),A=r(6),I=r(82),j=r(9),M=r(22),D=r(24),q=r(152).forEach,z=R("hidden"),U="Symbol",F=A("toPrimitive"),B=D.set,V=D.getterFor(U),H=Object.prototype,W=o.Symbol,$=a("JSON","stringify"),G=S.f,Q=_.f,Y=E.f,K=T.f,X=P("symbols"),J=P("op-symbols"),Z=P("string-to-symbol-registry"),ee=P("symbol-to-string-registry"),te=P("wks"),re=o.QObject,ne=!re||!re.prototype||!re.prototype.findChild,oe=l&&s((function(){return 7!=b(Q({},"a",{get:function(){return Q(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=G(H,t);n&&delete H[t],Q(e,t,r),n&&e!==H&&Q(H,t,n)}:Q,ae=function(e,t){var r=X[e]=b(W.prototype);return B(r,{type:U,tag:e,description:t}),l||(r.description=t),r},ie=c?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof W},le=function(e,t,r){e===H&&le(J,t,r),h(e);var n=m(t,!0);return h(r),f(X,n)?(r.enumerable?(f(e,z)&&e[z][n]&&(e[z][n]=!1),r=b(r,{enumerable:y(0,!1)})):(f(e,z)||Q(e,z,y(1,{})),e[z][n]=!0),oe(e,n,r)):Q(e,n,r)},ue=function(e,t){h(e);var r=v(t),n=w(r).concat(de(r));return q(n,(function(t){l&&!ce.call(r,t)||le(e,t,r[t])})),e},ce=function(e){var t=m(e,!0),r=K.call(this,t);return!(this===H&&f(X,t)&&!f(J,t))&&(!(r||!f(this,t)||!f(X,t)||f(this,z)&&this[z][t])||r)},se=function(e,t){var r=v(e),n=m(t,!0);if(r!==H||!f(X,n)||f(J,n)){var o=G(r,n);return!o||!f(X,n)||f(r,z)&&r[z][n]||(o.enumerable=!0),o}},fe=function(e){var t=Y(v(e)),r=[];return q(t,(function(e){f(X,e)||f(N,e)||r.push(e)})),r},de=function(e){var t=e===H,r=Y(t?J:v(e)),n=[];return q(r,(function(e){!f(X,e)||t&&!f(H,e)||n.push(X[e])})),n};(u||(O((W=function(){if(this instanceof W)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=L(e),r=function e(r){this===H&&e.call(J,r),f(this,z)&&f(this[z],t)&&(this[z][t]=!1),oe(this,t,y(1,r))};return l&&ne&&oe(H,t,{configurable:!0,set:r}),ae(t,e)}).prototype,"toString",(function(){return V(this).tag})),O(W,"withoutSetter",(function(e){return ae(L(e),e)})),T.f=ce,_.f=le,S.f=se,k.f=E.f=fe,x.f=de,I.f=function(e){return ae(A(e),e)},l&&(Q(W.prototype,"description",{configurable:!0,get:function(){return V(this).description}}),i||O(H,"propertyIsEnumerable",ce,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:W}),q(w(te),(function(e){j(e)})),n({target:U,stat:!0,forced:!u},{for:function(e){var t=String(e);if(f(Z,t))return Z[t];var r=W(t);return Z[t]=r,ee[r]=t,r},keyFor:function(e){if(!ie(e))throw TypeError(e+" is not a symbol");if(f(ee,e))return ee[e]},useSetter:function(){ne=!0},useSimple:function(){ne=!1}}),n({target:"Object",stat:!0,forced:!u,sham:!l},{create:function(e,t){return void 0===t?b(e):ue(b(e),t)},defineProperty:le,defineProperties:ue,getOwnPropertyDescriptor:se}),n({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:fe,getOwnPropertySymbols:de}),n({target:"Object",stat:!0,forced:s((function(){x.f(1)}))},{getOwnPropertySymbols:function(e){return x.f(g(e))}}),$)&&n({target:"JSON",stat:!0,forced:!u||s((function(){var e=W();return"[null]"!=$([e])||"{}"!=$({a:e})||"{}"!=$(Object(e))}))},{stringify:function(e,t,r){for(var n,o=[e],a=1;arguments.length>a;)o.push(arguments[a++]);if(n=t,(p(t)||void 0!==e)&&!ie(e))return d(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!ie(t))return t}),o[1]=t,$.apply(null,o)}});W.prototype[F]||C(W.prototype,F,W.prototype.valueOf),M(W,U),N[z]=!0},function(e,t,r){var n=r(20),o=r(41).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==a.call(e)?function(e){try{return o(e)}catch(e){return i.slice()}}(e):o(n(e))}},function(e,t,r){var n=r(7),o=r(56),a=r(28),i=r(26),l=r(83),u=[].push,c=function(e){var t=1==e,r=2==e,c=3==e,s=4==e,f=6==e,d=7==e,p=5==e||f;return function(h,g,v,m){for(var y,b,w=a(h),k=o(w),E=n(g,v,3),x=i(k.length),S=0,_=m||l,T=t?_(h,x):r||d?_(h,0):void 0;x>S;S++)if((p||S in k)&&(b=E(y=k[S],S,w),e))if(t)T[S]=b;else if(b)switch(e){case 3:return!0;case 5:return y;case 6:return S;case 2:u.call(T,y)}else switch(e){case 4:return!1;case 7:u.call(T,y)}return f?-1:c||s?s:T}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},function(e,t,r){"use strict";var n=r(1),o=r(16),a=r(8),i=r(11),l=r(13),u=r(14).f,c=r(60),s=a.Symbol;if(o&&"function"==typeof s&&(!("description"in s.prototype)||void 0!==s().description)){var f={},d=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof d?new s(e):void 0===e?s():s(e);return""===e&&(f[t]=!0),t};c(d,s);var p=d.prototype=s.prototype;p.constructor=d;var h=p.toString,g="Symbol(test)"==String(s("test")),v=/^Symbol\\((.*)\\)[^)]+$/;u(p,"description",{configurable:!0,get:function(){var e=l(this)?this.valueOf():this,t=h.call(e);if(i(f,e))return"";var r=g?t.slice(7,-1):t.replace(v,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:d})}},function(e,t,r){r(9)("asyncIterator")},function(e,t,r){r(9)("hasInstance")},function(e,t,r){r(9)("isConcatSpreadable")},function(e,t,r){r(9)("iterator")},function(e,t,r){r(9)("match")},function(e,t,r){r(9)("replace")},function(e,t,r){r(9)("search")},function(e,t,r){r(9)("species")},function(e,t,r){r(9)("split")},function(e,t,r){r(9)("toPrimitive")},function(e,t,r){r(9)("toStringTag")},function(e,t,r){r(9)("unscopables")},function(e,t,r){"use strict";var n=r(1),o=r(12),a=r(49),i=r(13),l=r(28),u=r(26),c=r(84),s=r(83),f=r(167),d=r(6),p=r(85),h=d("isConcatSpreadable"),g=9007199254740991,v="Maximum allowed index exceeded",m=p>=51||!o((function(){var e=[];return e[h]=!1,e.concat()[0]!==e})),y=f("concat"),b=function(e){if(!i(e))return!1;var t=e[h];return void 0!==t?!!t:a(e)};n({target:"Array",proto:!0,forced:!m||!y},{concat:function(e){var t,r,n,o,a,i=l(this),f=s(i,0),d=0;for(t=-1,n=arguments.length;t<n;t++)if(b(a=-1===t?i:arguments[t])){if(d+(o=u(a.length))>g)throw TypeError(v);for(r=0;r<o;r++,d++)r in a&&c(f,d,a[r])}else{if(d>=g)throw TypeError(v);c(f,d++,a)}return f.length=d,f}})},function(e,t,r){var n=r(12),o=r(6),a=r(85),i=o("species");e.exports=function(e){return a>=51||!n((function(){var t=[];return(t.constructor={})[i]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},function(e,t,r){var n=r(10);e.exports=n("navigator","userAgent")||""},function(e,t,r){var n=r(1),o=r(170);n({target:"Array",stat:!0,forced:!r(71)((function(e){Array.from(e)}))},{from:o})},function(e,t,r){"use strict";var n=r(7),o=r(28),a=r(171),i=r(66),l=r(26),u=r(84),c=r(45);e.exports=function(e){var t,r,s,f,d,p,h=o(e),g="function"==typeof this?this:Array,v=arguments.length,m=v>1?arguments[1]:void 0,y=void 0!==m,b=c(h),w=0;if(y&&(m=n(m,v>2?arguments[2]:void 0,2)),void 0==b||g==Array&&i(b))for(r=new g(t=l(h.length));t>w;w++)p=y?m(h[w],w):h[w],u(r,w,p);else for(d=(f=b.call(h)).next,r=new g;!(s=d.call(f)).done;w++)p=y?a(f,m,[s.value,w],!0):s.value,u(r,w,p);return r.length=w,r}},function(e,t,r){var n=r(2),o=r(69);e.exports=function(e,t,r,a){try{return a?t(n(r)[0],r[1]):t(r)}catch(t){throw o(e),t}}},function(e,t,r){var n=r(8);r(22)(n.JSON,"JSON",!0)},function(e,t,r){r(22)(Math,"Math",!0)},function(e,t,r){r(9)("dispose")},function(e,t,r){r(9)("observable")},function(e,t,r){r(9)("patternMatch")},function(e,t,r){"use strict";var n=r(86),o=[ReferenceError,TypeError,RangeError],a=!1;function i(){a=!1,n._Y=null,n._Z=null}function l(e,t){return t.some((function(t){return e instanceof t}))}t.disable=i,t.enable=function(e){e=e||{},a&&i();a=!0;var t=0,r=0,u={};function c(t){(e.allRejections||l(u[t].error,e.whitelist||o))&&(u[t].displayId=r++,e.onUnhandled?(u[t].logged=!0,e.onUnhandled(u[t].displayId,u[t].error)):(u[t].logged=!0,function(e,t){console.warn("Possible Unhandled Promise Rejection (id: "+e+"):"),((t&&(t.stack||t))+"").split("\\n").forEach((function(e){console.warn("  "+e)}))}(u[t].displayId,u[t].error)))}n._Y=function(t){2===t._V&&u[t._1]&&(u[t._1].logged?function(t){u[t].logged&&(e.onHandled?e.onHandled(u[t].displayId,u[t].error):u[t].onUnhandled||(console.warn("Promise Rejection Handled (id: "+u[t].displayId+"):"),console.warn(\'  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id \'+u[t].displayId+".")))}(t._1):clearTimeout(u[t._1].timeout),delete u[t._1])},n._Z=function(e,r){0===e._U&&(e._1=t++,u[e._1]={displayId:null,error:r,timeout:setTimeout(c.bind(null,e._1),l(r,o)?100:2e3),logged:!1})}}},function(e,t,r){"use strict";(function(t){function r(e){o.length||(n(),!0),o[o.length]=e}e.exports=r;var n,o=[],a=0;function i(){for(;a<o.length;){var e=a;if(a+=1,o[e].call(),a>1024){for(var t=0,r=o.length-a;t<r;t++)o[t]=o[t+a];o.length-=a,a=0}}o.length=0,a=0,!1}var l,u,c,s="undefined"!==typeof t?t:self,f=s.MutationObserver||s.WebKitMutationObserver;function d(e){return function(){var t=setTimeout(n,0),r=setInterval(n,50);function n(){clearTimeout(t),clearInterval(r),e()}}}"function"===typeof f?(l=1,u=new f(i),c=document.createTextNode(""),u.observe(c,{characterData:!0}),n=function(){l=-l,c.data=l}):n=d(i),r.requestFlush=n,r.makeRequestCallFromTimer=d}).call(this,r(34))},function(e,t,r){"use strict";var n=r(86);e.exports=n;var o=s(!0),a=s(!1),i=s(null),l=s(void 0),u=s(0),c=s("");function s(e){var t=new n(n._0);return t._V=1,t._W=e,t}n.resolve=function(e){if(e instanceof n)return e;if(null===e)return i;if(void 0===e)return l;if(!0===e)return o;if(!1===e)return a;if(0===e)return u;if(""===e)return c;if("object"===typeof e||"function"===typeof e)try{var t=e.then;if("function"===typeof t)return new n(t.bind(e))}catch(e){return new n((function(t,r){r(e)}))}return s(e)};var f=function(e){return"function"===typeof Array.from?(f=Array.from,Array.from(e)):(f=function(e){return Array.prototype.slice.call(e)},Array.prototype.slice.call(e))};n.all=function(e){var t=f(e);return new n((function(e,r){if(0===t.length)return e([]);var o=t.length;function a(i,l){if(l&&("object"===typeof l||"function"===typeof l)){if(l instanceof n&&l.then===n.prototype.then){for(;3===l._V;)l=l._W;return 1===l._V?a(i,l._W):(2===l._V&&r(l._W),void l.then((function(e){a(i,e)}),r))}var u=l.then;if("function"===typeof u)return void new n(u.bind(l)).then((function(e){a(i,e)}),r)}t[i]=l,0===--o&&e(t)}for(var i=0;i<t.length;i++)a(i,t[i])}))},n.reject=function(e){return new n((function(t,r){r(e)}))},n.race=function(e){return new n((function(t,r){f(e).forEach((function(e){n.resolve(e).then(t,r)}))}))},n.prototype.catch=function(e){return this.then(null,e)}},function(e,t,r){"use strict";r.r(t),r.d(t,"Headers",(function(){return h})),r.d(t,"Request",(function(){return k})),r.d(t,"Response",(function(){return x})),r.d(t,"DOMException",(function(){return _})),r.d(t,"fetch",(function(){return T}));var n="undefined"!==typeof globalThis&&globalThis||"undefined"!==typeof self&&self||"undefined"!==typeof n&&n,o="URLSearchParams"in n,a="Symbol"in n&&"iterator"in Symbol,i="FileReader"in n&&"Blob"in n&&function(){try{return new Blob,!0}catch(e){return!1}}(),l="FormData"in n,u="ArrayBuffer"in n;if(u)var c=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],s=ArrayBuffer.isView||function(e){return e&&c.indexOf(Object.prototype.toString.call(e))>-1};function f(e){if("string"!==typeof e&&(e=String(e)),/[^a-z0-9\\-#$%&\'*+.^_`|~!]/i.test(e)||""===e)throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function d(e){return"string"!==typeof e&&(e=String(e)),e}function p(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return a&&(t[Symbol.iterator]=function(){return t}),t}function h(e){this.map={},e instanceof h?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function g(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function v(e){return new Promise((function(t,r){e.onload=function(){t(e.result)},e.onerror=function(){r(e.error)}}))}function m(e){var t=new FileReader,r=v(t);return t.readAsArrayBuffer(e),r}function y(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function b(){return this.bodyUsed=!1,this._initBody=function(e){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=e,e?"string"===typeof e?this._bodyText=e:i&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:l&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:o&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():u&&i&&((t=e)&&DataView.prototype.isPrototypeOf(t))?(this._bodyArrayBuffer=y(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):u&&(ArrayBuffer.prototype.isPrototypeOf(e)||s(e))?this._bodyArrayBuffer=y(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"===typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):o&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},i&&(this.blob=function(){var e=g(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){if(this._bodyArrayBuffer){var e=g(this);return e||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}return this.blob().then(m)}),this.text=function(){var e,t,r,n=g(this);if(n)return n;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,r=v(t),t.readAsText(e),r;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},l&&(this.formData=function(){return this.text().then(E)}),this.json=function(){return this.text().then(JSON.parse)},this}h.prototype.append=function(e,t){e=f(e),t=d(t);var r=this.map[e];this.map[e]=r?r+", "+t:t},h.prototype.delete=function(e){delete this.map[f(e)]},h.prototype.get=function(e){return e=f(e),this.has(e)?this.map[e]:null},h.prototype.has=function(e){return this.map.hasOwnProperty(f(e))},h.prototype.set=function(e,t){this.map[f(e)]=d(t)},h.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this)},h.prototype.keys=function(){var e=[];return this.forEach((function(t,r){e.push(r)})),p(e)},h.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),p(e)},h.prototype.entries=function(){var e=[];return this.forEach((function(t,r){e.push([r,t])})),p(e)},a&&(h.prototype[Symbol.iterator]=h.prototype.entries);var w=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function k(e,t){if(!(this instanceof k))throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\');var r,n,o=(t=t||{}).body;if(e instanceof k){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new h(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new h(t.headers)),this.method=(r=t.method||this.method||"GET",n=r.toUpperCase(),w.indexOf(n)>-1?n:r),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),("GET"===this.method||"HEAD"===this.method)&&("no-store"===t.cache||"no-cache"===t.cache)){var a=/([?&])_=[^&]*/;if(a.test(this.url))this.url=this.url.replace(a,"$1_="+(new Date).getTime());else{this.url+=(/\\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}}function E(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var r=e.split("="),n=r.shift().replace(/\\+/g," "),o=r.join("=").replace(/\\+/g," ");t.append(decodeURIComponent(n),decodeURIComponent(o))}})),t}function x(e,t){if(!(this instanceof x))throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\');t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"",this.headers=new h(t.headers),this.url=t.url||"",this._initBody(e)}k.prototype.clone=function(){return new k(this,{body:this._bodyInit})},b.call(k.prototype),b.call(x.prototype),x.prototype.clone=function(){return new x(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new h(this.headers),url:this.url})},x.error=function(){var e=new x(null,{status:0,statusText:""});return e.type="error",e};var S=[301,302,303,307,308];x.redirect=function(e,t){if(-1===S.indexOf(t))throw new RangeError("Invalid status code");return new x(null,{status:t,headers:{location:e}})};var _=n.DOMException;try{new _}catch(e){(_=function(e,t){this.message=e,this.name=t;var r=Error(e);this.stack=r.stack}).prototype=Object.create(Error.prototype),_.prototype.constructor=_}function T(e,t){return new Promise((function(r,o){var a=new k(e,t);if(a.signal&&a.signal.aborted)return o(new _("Aborted","AbortError"));var l=new XMLHttpRequest;function c(){l.abort()}l.onload=function(){var e,t,n={status:l.status,statusText:l.statusText,headers:(e=l.getAllResponseHeaders()||"",t=new h,e.replace(/\\r?\\n[\\t ]+/g," ").split("\\r").map((function(e){return 0===e.indexOf("\\n")?e.substr(1,e.length):e})).forEach((function(e){var r=e.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();t.append(n,o)}})),t)};n.url="responseURL"in l?l.responseURL:n.headers.get("X-Request-URL");var o="response"in l?l.response:l.responseText;setTimeout((function(){r(new x(o,n))}),0)},l.onerror=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},l.ontimeout=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},l.onabort=function(){setTimeout((function(){o(new _("Aborted","AbortError"))}),0)},l.open(a.method,function(e){try{return""===e&&n.location.href?n.location.href:e}catch(t){return e}}(a.url),!0),"include"===a.credentials?l.withCredentials=!0:"omit"===a.credentials&&(l.withCredentials=!1),"responseType"in l&&(i?l.responseType="blob":u&&a.headers.get("Content-Type")&&-1!==a.headers.get("Content-Type").indexOf("application/octet-stream")&&(l.responseType="arraybuffer")),!t||"object"!==typeof t.headers||t.headers instanceof h?a.headers.forEach((function(e,t){l.setRequestHeader(t,e)})):Object.getOwnPropertyNames(t.headers).forEach((function(e){l.setRequestHeader(e,d(t.headers[e]))})),a.signal&&(a.signal.addEventListener("abort",c),l.onreadystatechange=function(){4===l.readyState&&a.signal.removeEventListener("abort",c)}),l.send("undefined"===typeof a._bodyInit?null:a._bodyInit)}))}T.polyfill=!0,n.fetch||(n.fetch=T,n.Headers=h,n.Request=k,n.Response=x)},function(e,t,r){(function(t){for(var n=r(182),o="undefined"===typeof window?t:window,a=["moz","webkit"],i="AnimationFrame",l=o["request"+i],u=o["cancel"+i]||o["cancelRequest"+i],c=0;!l&&c<a.length;c++)l=o[a[c]+"Request"+i],u=o[a[c]+"Cancel"+i]||o[a[c]+"CancelRequest"+i];if(!l||!u){var s=0,f=0,d=[];l=function(e){if(0===d.length){var t=n(),r=Math.max(0,16.666666666666668-(t-s));s=r+t,setTimeout((function(){var e=d.slice(0);d.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(s)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(r))}return d.push({handle:++f,callback:e,cancelled:!1}),f},u=function(e){for(var t=0;t<d.length;t++)d[t].handle===e&&(d[t].cancelled=!0)}}e.exports=function(e){return l.call(o,e)},e.exports.cancel=function(){u.apply(o,arguments)},e.exports.polyfill=function(e){e||(e=o),e.requestAnimationFrame=l,e.cancelAnimationFrame=u}}).call(this,r(34))},function(e,t,r){(function(t){(function(){var r,n,o,a,i,l;"undefined"!==typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!==typeof t&&null!==t&&t.hrtime?(e.exports=function(){return(r()-i)/1e6},n=t.hrtime,a=(r=function(){var e;return 1e9*(e=n())[0]+e[1]})(),l=1e9*t.uptime(),i=a-l):Date.now?(e.exports=function(){return Date.now()-o},o=Date.now()):(e.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(this,r(51))},function(e,t,r){"use strict";var n=r(50),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var c=60115,s=60116;if("function"===typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var d="function"===typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function v(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||h}function m(){}function y(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!==typeof e&&"function"!==typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},m.prototype=v.prototype;var b=y.prototype=new m;b.constructor=y,n(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,r){var n,a={},i=null,l=null;if(null!=t)for(n in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,n)&&!E.hasOwnProperty(n)&&(a[n]=t[n]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(n in u=e.defaultProps)void 0===a[n]&&(a[n]=u[n]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function S(e){return"object"===typeof e&&null!==e&&e.$$typeof===o}var _=/\\/+/g;function T(e,t){return"object"===typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,r,n,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===n?"."+T(u,0):n,Array.isArray(i)?(r="",null!=e&&(r=e.replace(_,"$&/")+"/"),C(i,t,r,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,r+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(_,"$&/")+"/")+e)),t.push(i)),1;if(u=0,n=""===n?".":n+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=n+T(l=e[c],c);u+=C(l,t,r,s,i)}else if("function"===typeof(s=function(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),c=0;!(l=e.next()).done;)u+=C(l=l.value,t,r,s=n+T(l,c++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function O(e,t,r){if(null==e)return e;var n=[],o=0;return C(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var R={current:null};function N(){var e=R.current;if(null===e)throw Error(p(321));return e}var L={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:O,forEach:function(e,t,r){O(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,r){if(null===e||void 0===e)throw Error(p(267,e));var a=n({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)k.call(t,s)&&!E.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return N().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,r){return N().useReducer(e,t,r)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.1"},function(e,t,r){"use strict";var n=r(0),o=r(50),a=r(185);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!n)throw Error(i(227));var l=new Set,u={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),d=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},g={};function v(e,t,r,n,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,r,n){var o=m.hasOwnProperty(t)?m[t]:null;(null!==o?0===o.type:!n&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,r,n){if(null===t||"undefined"===typeof t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,o,n)&&(r=null),n||null===o?function(e){return!!p.call(g,e)||!p.call(h,e)&&(d.test(e)?g[e]=!0:(h[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):o.mustUseProperty?e[o.propertyName]=null===r?3!==o.type&&"":r:(t=o.attributeName,n=o.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(o=o.type)||4===o&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,x=60106,S=60107,_=60108,T=60114,C=60109,O=60110,P=60112,R=60113,N=60120,L=60115,A=60116,I=60121,j=60128,M=60129,D=60130,q=60131;if("function"===typeof Symbol&&Symbol.for){var z=Symbol.for;E=z("react.element"),x=z("react.portal"),S=z("react.fragment"),_=z("react.strict_mode"),T=z("react.profiler"),C=z("react.provider"),O=z("react.context"),P=z("react.forward_ref"),R=z("react.suspense"),N=z("react.suspense_list"),L=z("react.memo"),A=z("react.lazy"),I=z("react.block"),z("react.scope"),j=z("react.opaque.id"),M=z("react.debug_trace_mode"),D=z("react.offscreen"),q=z("react.legacy_hidden")}var U,F="function"===typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=F&&e[F]||e["@@iterator"])?e:null}function V(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\\n( *(at )?)/);U=t&&t[1]||""}return"\\n"+U+e}var H=!1;function W(e,t){if(!e||H)return"";H=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}else{try{throw Error()}catch(e){n=e}e()}}catch(e){if(e&&n&&"string"===typeof e.stack){for(var o=e.stack.split("\\n"),a=n.stack.split("\\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?V(e):""}function $(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return e=W(e.type,!1);case 11:return e=W(e.type.render,!1);case 22:return e=W(e.type._render,!1);case 1:return e=W(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"===typeof e)return e.displayName||e.name||null;if("string"===typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case T:return"Profiler";case _:return"StrictMode";case R:return"Suspense";case N:return"SuspenseList"}if("object"===typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case L:return G(e.type);case I:return G(e._render);case A:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&"undefined"!==typeof r&&"function"===typeof r.get&&"function"===typeof r.set){var o=r.get,a=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){n=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=Y(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function J(e){if("undefined"===typeof(e=e||("undefined"!==typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var r=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function ee(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=Q(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function re(e,t){te(e,t);var r=Q(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,r):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function ne(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function oe(e,t,r){"number"===t&&J(e.ownerDocument)===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return n.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,r,n){if(e=e.options,t){t={};for(var o=0;o<r.length;o++)t["$"+r[o]]=!0;for(r=0;r<e.length;r++)o=t.hasOwnProperty("$"+e[r].value),e[r].selected!==o&&(e[r].selected=o),o&&n&&(e[r].defaultSelected=!0)}else{for(r=""+Q(r),t=null,o=0;o<e.length;o++){if(e[o].value===r)return e[o].selected=!0,void(n&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(i(92));if(Array.isArray(r)){if(!(1>=r.length))throw Error(i(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:Q(r)}}function ce(e,t){var r=Q(t.value),n=Q(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ge,ve,me=(ve=function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((ge=ge||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ge.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,r,n){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ye(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},we=["Webkit","ms","Moz","O"];function ke(e,t,r){return null==t||"boolean"===typeof t||""===t?"":r||"number"!==typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),o=ke(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,o):e[r]=o}}Object.keys(be).forEach((function(e){we.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var xe=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!==typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!==typeof t.style)throw Error(i(62))}}function _e(e,t){if(-1===e.indexOf("-"))return"string"===typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Te(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Oe=null,Pe=null;function Re(e){if(e=eo(e)){if("function"!==typeof Ce)throw Error(i(280));var t=e.stateNode;t&&(t=ro(t),Ce(e.stateNode,e.type,t))}}function Ne(e){Oe?Pe?Pe.push(e):Pe=[e]:Oe=e}function Le(){if(Oe){var e=Oe,t=Pe;if(Pe=Oe=null,Re(e),t)for(e=0;e<t.length;e++)Re(t[e])}}function Ae(e,t){return e(t)}function Ie(e,t,r,n,o){return e(t,r,n,o)}function je(){}var Me=Ae,De=!1,qe=!1;function ze(){null===Oe&&null===Pe||(je(),Le())}function Ue(e,t){var r=e.stateNode;if(null===r)return null;var n=ro(r);if(null===n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!==typeof r)throw Error(i(231,t,typeof r));return r}var Fe=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ve){Fe=!1}function Ve(e,t,r,n,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(r,c)}catch(e){this.onError(e)}}var He=!1,We=null,$e=!1,Ge=null,Qe={onError:function(e){He=!0,We=e}};function Ye(e,t,r,n,o,a,i,l,u){He=!1,We=null,Ve.apply(Qe,arguments)}function Ke(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!==(1026&(t=e).flags)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Je(e){if(Ke(e)!==e)throw Error(i(188))}function Ze(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(i(188));return t!==e?null:e}for(var r=e,n=t;;){var o=r.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(n=o.return)){r=n;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===r)return Je(o),e;if(a===n)return Je(o),t;a=a.sibling}throw Error(i(188))}if(r.return!==n.return)r=o,n=a;else{for(var l=!1,u=o.child;u;){if(u===r){l=!0,r=o,n=a;break}if(u===n){l=!0,n=o,r=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===r){l=!0,r=a,n=o;break}if(u===n){l=!0,n=a,r=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(r.alternate!==n)throw Error(i(190))}if(3!==r.tag)throw Error(i(188));return r.stateNode.current===r?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function et(e,t){for(var r=e.alternate;null!==t;){if(t===e||t===r)return!0;t=t.return}return!1}var tt,rt,nt,ot,at=!1,it=[],lt=null,ut=null,ct=null,st=new Map,ft=new Map,dt=[],pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,r,n,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|r,nativeEvent:o,targetContainers:[n]}}function gt(e,t){switch(e){case"focusin":case"focusout":lt=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":ct=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ft.delete(t.pointerId)}}function vt(e,t,r,n,o,a){return null===e||e.nativeEvent!==a?(e=ht(t,r,n,o,a),null!==t&&(null!==(t=eo(t))&&rt(t)),e):(e.eventSystemFlags|=n,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=Zn(e.target);if(null!==t){var r=Ke(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=Xe(r)))return e.blockedOn=t,void ot(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(r)}))}))}else if(3===t&&r.stateNode.hydrate)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var r=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r)return null!==(t=eo(r))&&rt(t),e.blockedOn=r,!1;t.shift()}return!0}function bt(e,t,r){yt(e)&&r.delete(t)}function wt(){for(at=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=eo(e.blockedOn))&&tt(e);break}for(var t=e.targetContainers;0<t.length;){var r=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r){e.blockedOn=r;break}t.shift()}null===e.blockedOn&&it.shift()}null!==lt&&yt(lt)&&(lt=null),null!==ut&&yt(ut)&&(ut=null),null!==ct&&yt(ct)&&(ct=null),st.forEach(bt),ft.forEach(bt)}function kt(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,wt)))}function Et(e){function t(t){return kt(t,e)}if(0<it.length){kt(it[0],e);for(var r=1;r<it.length;r++){var n=it[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==lt&&kt(lt,e),null!==ut&&kt(ut,e),null!==ct&&kt(ct,e),st.forEach(t),ft.forEach(t),r=0;r<dt.length;r++)(n=dt[r]).blockedOn===e&&(n.blockedOn=null);for(;0<dt.length&&null===(r=dt[0]).blockedOn;)mt(r),null===r.blockedOn&&dt.shift()}function xt(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var St={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},_t={},Tt={};function Ct(e){if(_t[e])return _t[e];if(!St[e])return e;var t,r=St[e];for(t in r)if(r.hasOwnProperty(t)&&t in Tt)return _t[e]=r[t];return e}f&&(Tt=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Ot=Ct("animationend"),Pt=Ct("animationiteration"),Rt=Ct("animationstart"),Nt=Ct("transitionend"),Lt=new Map,At=new Map,It=["abort","abort",Ot,"animationEnd",Pt,"animationIteration",Rt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Nt,"transitionEnd","waiting","waiting"];function jt(e,t){for(var r=0;r<e.length;r+=2){var n=e[r],o=e[r+1];o="on"+(o[0].toUpperCase()+o.slice(1)),At.set(n,t),Lt.set(n,o),c(o,[n])}}(0,a.unstable_now)();var Mt=8;function Dt(e){if(0!==(1&e))return Mt=15,1;if(0!==(2&e))return Mt=14,2;if(0!==(4&e))return Mt=13,4;var t=24&e;return 0!==t?(Mt=12,t):0!==(32&e)?(Mt=11,32):0!==(t=192&e)?(Mt=10,t):0!==(256&e)?(Mt=9,256):0!==(t=3584&e)?(Mt=8,t):0!==(4096&e)?(Mt=7,4096):0!==(t=4186112&e)?(Mt=6,t):0!==(t=62914560&e)?(Mt=5,t):67108864&e?(Mt=4,67108864):0!==(134217728&e)?(Mt=3,134217728):0!==(t=805306368&e)?(Mt=2,t):0!==(1073741824&e)?(Mt=1,1073741824):(Mt=8,e)}function qt(e,t){var r=e.pendingLanes;if(0===r)return Mt=0;var n=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)n=a,o=Mt=15;else if(0!==(a=134217727&r)){var u=a&~i;0!==u?(n=Dt(u),o=Mt):0!==(l&=a)&&(n=Dt(l),o=Mt)}else 0!==(a=r&~i)?(n=Dt(a),o=Mt):0!==l&&(n=Dt(l),o=Mt);if(0===n)return 0;if(n=r&((0>(n=31-Ht(n))?0:1<<n)<<1)-1,0!==t&&t!==n&&0===(t&i)){if(Dt(t),o<=Mt)return t;Mt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)o=1<<(r=31-Ht(t)),n|=e[r],t&=~o;return n}function zt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ut(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?Ut(10,t):e;case 10:return 0===(e=Ft(192&~t))?Ut(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&(0===(e=Ft(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ft(e){return e&-e}function Bt(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function Vt(e,t,r){e.pendingLanes|=t;var n=t-1;e.suspendedLanes&=n,e.pingedLanes&=n,(e=e.eventTimes)[t=31-Ht(t)]=r}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/$t|0)|0},Wt=Math.log,$t=Math.LN2;var Gt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Yt=!0;function Kt(e,t,r,n){De||je();var o=Jt,a=De;De=!0;try{Ie(o,e,t,r,n)}finally{(De=a)||ze()}}function Xt(e,t,r,n){Qt(Gt,Jt.bind(null,e,t,r,n))}function Jt(e,t,r,n){var o;if(Yt)if((o=0===(4&t))&&0<it.length&&-1<pt.indexOf(e))e=ht(null,e,t,r,n),it.push(e);else{var a=Zt(e,t,r,n);if(null===a)o&&gt(e,n);else{if(o){if(-1<pt.indexOf(e))return e=ht(a,e,t,r,n),void it.push(e);if(function(e,t,r,n,o){switch(t){case"focusin":return lt=vt(lt,e,t,r,n,o),!0;case"dragenter":return ut=vt(ut,e,t,r,n,o),!0;case"mouseover":return ct=vt(ct,e,t,r,n,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,vt(st.get(a)||null,e,t,r,n,o)),!0;case"gotpointercapture":return a=o.pointerId,ft.set(a,vt(ft.get(a)||null,e,t,r,n,o)),!0}return!1}(a,e,t,r,n))return;gt(e,n)}Ln(e,t,n,null,r)}}}function Zt(e,t,r,n){var o=Te(n);if(null!==(o=Zn(o))){var a=Ke(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Xe(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ln(e,t,n,o,r),null}var er=null,tr=null,rr=null;function nr(){if(rr)return rr;var e,t,r=tr,n=r.length,o="value"in er?er.value:er.textContent,a=o.length;for(e=0;e<n&&r[e]===o[e];e++);var i=n-e;for(t=1;t<=i&&r[n-t]===o[a-t];t++);return rr=o.slice(e,1<t?1-t:void 0)}function or(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function ar(){return!0}function ir(){return!1}function lr(e){function t(t,r,n,o,a){for(var i in this._reactName=t,this._targetInst=n,this.type=r,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?ar:ir,this.isPropagationStopped=ir,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!==typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ar)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!==typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ar)},persist:function(){},isPersistent:ar}),t}var ur,cr,sr,fr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dr=lr(fr),pr=o({},fr,{view:0,detail:0}),hr=lr(pr),gr=o({},pr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Tr,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sr&&(sr&&"mousemove"===e.type?(ur=e.screenX-sr.screenX,cr=e.screenY-sr.screenY):cr=ur=0,sr=e),ur)},movementY:function(e){return"movementY"in e?e.movementY:cr}}),vr=lr(gr),mr=lr(o({},gr,{dataTransfer:0})),yr=lr(o({},pr,{relatedTarget:0})),br=lr(o({},fr,{animationName:0,elapsedTime:0,pseudoElement:0})),wr=lr(o({},fr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),kr=lr(o({},fr,{data:0})),Er={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _r(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function Tr(){return _r}var Cr=lr(o({},pr,{key:function(e){if(e.key){var t=Er[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=or(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xr[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Tr,charCode:function(e){return"keypress"===e.type?or(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?or(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Or=lr(o({},gr,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pr=lr(o({},pr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Tr})),Rr=lr(o({},fr,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nr=lr(o({},gr,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Lr=[9,13,27,32],Ar=f&&"CompositionEvent"in window,Ir=null;f&&"documentMode"in document&&(Ir=document.documentMode);var jr=f&&"TextEvent"in window&&!Ir,Mr=f&&(!Ar||Ir&&8<Ir&&11>=Ir),Dr=String.fromCharCode(32),qr=!1;function zr(e,t){switch(e){case"keyup":return-1!==Lr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ur(e){return"object"===typeof(e=e.detail)&&"data"in e?e.data:null}var Fr=!1;var Br={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Br[e.type]:"textarea"===t}function Hr(e,t,r,n){Ne(n),0<(t=In(t,"onChange")).length&&(r=new dr("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var Wr=null,$r=null;function Gr(e){Tn(e,0)}function Qr(e){if(X(to(e)))return e}function Yr(e,t){if("change"===e)return t}var Kr=!1;if(f){var Xr;if(f){var Jr="oninput"in document;if(!Jr){var Zr=document.createElement("div");Zr.setAttribute("oninput","return;"),Jr="function"===typeof Zr.oninput}Xr=Jr}else Xr=!1;Kr=Xr&&(!document.documentMode||9<document.documentMode)}function en(){Wr&&(Wr.detachEvent("onpropertychange",tn),$r=Wr=null)}function tn(e){if("value"===e.propertyName&&Qr($r)){var t=[];if(Hr(t,$r,e,Te(e)),e=Gr,De)e(t);else{De=!0;try{Ae(e,t)}finally{De=!1,ze()}}}}function rn(e,t,r){"focusin"===e?(en(),$r=r,(Wr=t).attachEvent("onpropertychange",tn)):"focusout"===e&&en()}function nn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qr($r)}function on(e,t){if("click"===e)return Qr(t)}function an(e,t){if("input"===e||"change"===e)return Qr(t)}var ln="function"===typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e===1/t)||e!==e&&t!==t},un=Object.prototype.hasOwnProperty;function cn(e,t){if(ln(e,t))return!0;if("object"!==typeof e||null===e||"object"!==typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++)if(!un.call(t,r[n])||!ln(e[r[n]],t[r[n]]))return!1;return!0}function sn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var r,n=sn(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=sn(n)}}function dn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pn(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var r="string"===typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=J((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gn=f&&"documentMode"in document&&11>=document.documentMode,vn=null,mn=null,yn=null,bn=!1;function wn(e,t,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;bn||null==vn||vn!==J(n)||("selectionStart"in(n=vn)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},yn&&cn(yn,n)||(yn=n,0<(n=In(mn,"onSelect")).length&&(t=new dr("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=vn)))}jt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),jt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),jt(It,2);for(var kn="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),En=0;En<kn.length;En++)At.set(kn[En],0);s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sn=new Set("cancel close invalid load scroll toggle".split(" ").concat(xn));function _n(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,function(e,t,r,n,o,a,l,u,c){if(Ye.apply(this,arguments),He){if(!He)throw Error(i(198));var s=We;He=!1,We=null,$e||($e=!0,Ge=s)}}(n,t,void 0,e),e.currentTarget=null}function Tn(e,t){t=0!==(4&t);for(var r=0;r<e.length;r++){var n=e[r],o=n.event;n=n.listeners;e:{var a=void 0;if(t)for(var i=n.length-1;0<=i;i--){var l=n[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;_n(o,l,c),a=u}else for(i=0;i<n.length;i++){if(u=(l=n[i]).instance,c=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;_n(o,l,c),a=u}}}if($e)throw e=Ge,$e=!1,Ge=null,e}function Cn(e,t){var r=no(t),n=e+"__bubble";r.has(n)||(Nn(t,e,2,!1),r.add(n))}var On="_reactListening"+Math.random().toString(36).slice(2);function Pn(e){e[On]||(e[On]=!0,l.forEach((function(t){Sn.has(t)||Rn(t,!1,e,null),Rn(t,!0,e,null)})))}function Rn(e,t,r,n){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=r;if("selectionchange"===e&&9!==r.nodeType&&(a=r.ownerDocument),null!==n&&!t&&Sn.has(e)){if("scroll"!==e)return;o|=2,a=n}var i=no(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Nn(a,e,o,t),i.add(l))}function Nn(e,t,r,n){var o=At.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Xt;break;default:o=Jt}r=o.bind(null,t,r,e),o=void 0,!Fe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),n?void 0!==o?e.addEventListener(t,r,{capture:!0,passive:o}):e.addEventListener(t,r,!0):void 0!==o?e.addEventListener(t,r,{passive:o}):e.addEventListener(t,r,!1)}function Ln(e,t,r,n,o){var a=n;if(0===(1&t)&&0===(2&t)&&null!==n)e:for(;;){if(null===n)return;var i=n.tag;if(3===i||4===i){var l=n.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=n.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=Zn(l)))return;if(5===(u=i.tag)||6===u){n=a=i;continue e}l=l.parentNode}}n=n.return}!function(e,t,r){if(qe)return e(t,r);qe=!0;try{Me(e,t,r)}finally{qe=!1,ze()}}((function(){var n=a,o=Te(r),i=[];e:{var l=Lt.get(e);if(void 0!==l){var u=dr,c=e;switch(e){case"keypress":if(0===or(r))break e;case"keydown":case"keyup":u=Cr;break;case"focusin":c="focus",u=yr;break;case"focusout":c="blur",u=yr;break;case"beforeblur":case"afterblur":u=yr;break;case"click":if(2===r.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pr;break;case Ot:case Pt:case Rt:u=br;break;case Nt:u=Rr;break;case"scroll":u=hr;break;case"wheel":u=Nr;break;case"copy":case"cut":case"paste":u=wr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Or}var s=0!==(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=n;null!==h;){var g=(p=h).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==d&&(null!=(g=Ue(h,d))&&s.push(An(h,g,p)))),f)break;h=h.return}0<s.length&&(l=new u(l,c,null,r,o),i.push({event:l,listeners:s}))}}if(0===(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!==(16&t)||!(c=r.relatedTarget||r.fromElement)||!Zn(c)&&!c[Xn])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=n,null!==(c=(c=r.relatedTarget||r.toElement)?Zn(c):null)&&(c!==(f=Ke(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=n),u!==c)){if(s=vr,g="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Or,g="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:to(u),p=null==c?l:to(c),(l=new s(g,h+"leave",u,r,o)).target=f,l.relatedTarget=p,g=null,Zn(o)===n&&((s=new s(d,h+"enter",c,r,o)).target=p,s.relatedTarget=f,g=s),f=g,u&&c)e:{for(d=c,h=0,p=s=u;p;p=jn(p))h++;for(p=0,g=d;g;g=jn(g))p++;for(;0<h-p;)s=jn(s),h--;for(;0<p-h;)d=jn(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=jn(s),d=jn(d)}s=null}else s=null;null!==u&&Mn(i,l,u,s,!1),null!==c&&null!==f&&Mn(i,f,c,s,!0)}if("select"===(u=(l=n?to(n):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Yr;else if(Vr(l))if(Kr)v=an;else{v=nn;var m=rn}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=on);switch(v&&(v=v(e,n))?Hr(i,v,r,o):(m&&m(e,l,n),"focusout"===e&&(m=l._wrapperState)&&m.controlled&&"number"===l.type&&oe(l,"number",l.value)),m=n?to(n):window,e){case"focusin":(Vr(m)||"true"===m.contentEditable)&&(vn=m,mn=n,yn=null);break;case"focusout":yn=mn=vn=null;break;case"mousedown":bn=!0;break;case"contextmenu":case"mouseup":case"dragend":bn=!1,wn(i,r,o);break;case"selectionchange":if(gn)break;case"keydown":case"keyup":wn(i,r,o)}var y;if(Ar)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Fr?zr(e,r)&&(b="onCompositionEnd"):"keydown"===e&&229===r.keyCode&&(b="onCompositionStart");b&&(Mr&&"ko"!==r.locale&&(Fr||"onCompositionStart"!==b?"onCompositionEnd"===b&&Fr&&(y=nr()):(tr="value"in(er=o)?er.value:er.textContent,Fr=!0)),0<(m=In(n,b)).length&&(b=new kr(b,e,null,r,o),i.push({event:b,listeners:m}),y?b.data=y:null!==(y=Ur(r))&&(b.data=y))),(y=jr?function(e,t){switch(e){case"compositionend":return Ur(t);case"keypress":return 32!==t.which?null:(qr=!0,Dr);case"textInput":return(e=t.data)===Dr&&qr?null:e;default:return null}}(e,r):function(e,t){if(Fr)return"compositionend"===e||!Ar&&zr(e,t)?(e=nr(),rr=tr=er=null,Fr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mr&&"ko"!==t.locale?null:t.data;default:return null}}(e,r))&&(0<(n=In(n,"onBeforeInput")).length&&(o=new kr("onBeforeInput","beforeinput",null,r,o),i.push({event:o,listeners:n}),o.data=y))}Tn(i,t)}))}function An(e,t,r){return{instance:e,listener:t,currentTarget:r}}function In(e,t){for(var r=t+"Capture",n=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ue(e,r))&&n.unshift(An(e,a,o)),null!=(a=Ue(e,t))&&n.push(An(e,a,o))),e=e.return}return n}function jn(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Mn(e,t,r,n,o){for(var a=t._reactName,i=[];null!==r&&r!==n;){var l=r,u=l.alternate,c=l.stateNode;if(null!==u&&u===n)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=Ue(r,a))&&i.unshift(An(r,u,l)):o||null!=(u=Ue(r,a))&&i.push(An(r,u,l))),r=r.return}0!==i.length&&e.push({event:t,listeners:i})}function Dn(){}var qn=null,zn=null;function Un(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Fn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"===typeof t.children||"number"===typeof t.children||"object"===typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Bn="function"===typeof setTimeout?setTimeout:void 0,Vn="function"===typeof clearTimeout?clearTimeout:void 0;function Hn(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function $n(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var Gn=0;var Qn=Math.random().toString(36).slice(2),Yn="__reactFiber$"+Qn,Kn="__reactProps$"+Qn,Xn="__reactContainer$"+Qn,Jn="__reactEvents$"+Qn;function Zn(e){var t=e[Yn];if(t)return t;for(var r=e.parentNode;r;){if(t=r[Xn]||r[Yn]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=$n(e);null!==e;){if(r=e[Yn])return r;e=$n(e)}return t}r=(e=r).parentNode}return null}function eo(e){return!(e=e[Yn]||e[Xn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function to(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function ro(e){return e[Kn]||null}function no(e){var t=e[Jn];return void 0===t&&(t=e[Jn]=new Set),t}var oo=[],ao=-1;function io(e){return{current:e}}function lo(e){0>ao||(e.current=oo[ao],oo[ao]=null,ao--)}function uo(e,t){ao++,oo[ao]=e.current,e.current=t}var co={},so=io(co),fo=io(!1),po=co;function ho(e,t){var r=e.type.contextTypes;if(!r)return co;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in r)a[o]=t[o];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function go(e){return null!==(e=e.childContextTypes)&&void 0!==e}function vo(){lo(fo),lo(so)}function mo(e,t,r){if(so.current!==co)throw Error(i(168));uo(so,t),uo(fo,r)}function yo(e,t,r){var n=e.stateNode;if(e=t.childContextTypes,"function"!==typeof n.getChildContext)return r;for(var a in n=n.getChildContext())if(!(a in e))throw Error(i(108,G(t)||"Unknown",a));return o({},r,n)}function bo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||co,po=so.current,uo(so,e),uo(fo,fo.current),!0}function wo(e,t,r){var n=e.stateNode;if(!n)throw Error(i(169));r?(e=yo(e,t,po),n.__reactInternalMemoizedMergedChildContext=e,lo(fo),lo(so),uo(so,e)):lo(fo),uo(fo,r)}var ko=null,Eo=null,xo=a.unstable_runWithPriority,So=a.unstable_scheduleCallback,_o=a.unstable_cancelCallback,To=a.unstable_shouldYield,Co=a.unstable_requestPaint,Oo=a.unstable_now,Po=a.unstable_getCurrentPriorityLevel,Ro=a.unstable_ImmediatePriority,No=a.unstable_UserBlockingPriority,Lo=a.unstable_NormalPriority,Ao=a.unstable_LowPriority,Io=a.unstable_IdlePriority,jo={},Mo=void 0!==Co?Co:function(){},Do=null,qo=null,zo=!1,Uo=Oo(),Fo=1e4>Uo?Oo:function(){return Oo()-Uo};function Bo(){switch(Po()){case Ro:return 99;case No:return 98;case Lo:return 97;case Ao:return 96;case Io:return 95;default:throw Error(i(332))}}function Vo(e){switch(e){case 99:return Ro;case 98:return No;case 97:return Lo;case 96:return Ao;case 95:return Io;default:throw Error(i(332))}}function Ho(e,t){return e=Vo(e),xo(e,t)}function Wo(e,t,r){return e=Vo(e),So(e,t,r)}function $o(){if(null!==qo){var e=qo;qo=null,_o(e)}Go()}function Go(){if(!zo&&null!==Do){zo=!0;var e=0;try{var t=Do;Ho(99,(function(){for(;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),So(Ro,$o),t}finally{zo=!1}}}var Qo=k.ReactCurrentBatchConfig;function Yo(e,t){if(e&&e.defaultProps){for(var r in t=o({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}return t}var Ko=io(null),Xo=null,Jo=null,Zo=null;function ea(){Zo=Jo=Xo=null}function ta(e){var t=Ko.current;lo(Ko),e.type._context._currentValue=t}function ra(e,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)===t){if(null===r||(r.childLanes&t)===t)break;r.childLanes|=t}else e.childLanes|=t,null!==r&&(r.childLanes|=t);e=e.return}}function na(e,t){Xo=e,Zo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!==(e.lanes&t)&&(Ii=!0),e.firstContext=null)}function oa(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"===typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Xo)throw Error(i(308));Jo=t,Xo.dependencies={lanes:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var aa=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ua(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ca(e,t){if(null!==(e=e.updateQueue)){var r=(e=e.shared).pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}}function sa(e,t){var r=e.updateQueue,n=e.alternate;if(null!==n&&r===(n=n.updateQueue)){var o=null,a=null;if(null!==(r=r.firstBaseUpdate)){do{var i={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===a?o=a=i:a=a.next=i,r=r.next}while(null!==r);null===a?o=a=t:a=a.next=t}else o=a=t;return r={baseState:n.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:n.shared,effects:n.effects},void(e.updateQueue=r)}null===(e=r.lastBaseUpdate)?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function fa(e,t,r,n){var a=e.updateQueue;aa=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var c=u,s=c.next;c.next=null,null===l?i=s:l.next=s,l=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==i){for(d=a.baseState,l=0,f=s=c=null;;){u=i.lane;var p=i.eventTime;if((n&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,g=i;switch(u=t,p=r,g.tag){case 1:if("function"===typeof(h=g.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null===(u="function"===typeof(h=g.payload)?h.call(p,d,u):h)||void 0===u)break e;d=o({},d,u);break e;case 2:aa=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(c=d),a.baseState=c,a.firstBaseUpdate=s,a.lastBaseUpdate=f,ql|=l,e.lanes=l,e.memoizedState=d}}function da(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],o=n.callback;if(null!==o){if(n.callback=null,n=r,"function"!==typeof o)throw Error(i(191,o));o.call(n)}}}var pa=(new n.Component).refs;function ha(e,t,r,n){r=null===(r=r(n,t=e.memoizedState))||void 0===r?t:o({},t,r),e.memoizedState=r,0===e.lanes&&(e.updateQueue.baseState=r)}var ga={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=cu(),o=su(e),a=ua(n,o);a.payload=t,void 0!==r&&null!==r&&(a.callback=r),ca(e,a),fu(e,o,n)},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=cu(),o=su(e),a=ua(n,o);a.tag=1,a.payload=t,void 0!==r&&null!==r&&(a.callback=r),ca(e,a),fu(e,o,n)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=cu(),n=su(e),o=ua(r,n);o.tag=2,void 0!==t&&null!==t&&(o.callback=t),ca(e,o),fu(e,n,r)}};function va(e,t,r,n,o,a,i){return"function"===typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!cn(r,n)||!cn(o,a))}function ma(e,t,r){var n=!1,o=co,a=t.contextType;return"object"===typeof a&&null!==a?a=oa(a):(o=go(t)?po:so.current,a=(n=null!==(n=t.contextTypes)&&void 0!==n)?ho(e,o):co),t=new t(r,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ga,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,r,n){e=t.state,"function"===typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"===typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&ga.enqueueReplaceState(t,t.state,null)}function ba(e,t,r,n){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=pa,ia(e);var a=t.contextType;"object"===typeof a&&null!==a?o.context=oa(a):(a=go(t)?po:so.current,o.context=ho(e,a)),fa(e,r,o,n),o.state=e.memoizedState,"function"===typeof(a=t.getDerivedStateFromProps)&&(ha(e,t,a,r),o.state=e.memoizedState),"function"===typeof t.getDerivedStateFromProps||"function"===typeof o.getSnapshotBeforeUpdate||"function"!==typeof o.UNSAFE_componentWillMount&&"function"!==typeof o.componentWillMount||(t=o.state,"function"===typeof o.componentWillMount&&o.componentWillMount(),"function"===typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ga.enqueueReplaceState(o,o.state,null),fa(e,r,o,n),o.state=e.memoizedState),"function"===typeof o.componentDidMount&&(e.flags|=4)}var wa=Array.isArray;function ka(e,t,r){if(null!==(e=r.ref)&&"function"!==typeof e&&"object"!==typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(i(309));var n=r.stateNode}if(!n)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"===typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=n.refs;t===pa&&(t=n.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!==typeof e)throw Error(i(284));if(!r._owner)throw Error(i(290,e))}return e}function Ea(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function xa(e){function t(t,r){if(e){var n=t.lastEffect;null!==n?(n.nextEffect=r,t.lastEffect=r):t.firstEffect=t.lastEffect=r,r.nextEffect=null,r.flags=8}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Vu(e,t)).index=0,e.sibling=null,e}function a(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.flags=2,r):n:(t.flags=2,r):r}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,r,n){return null===t||6!==t.tag?((t=Gu(r,e.mode,n)).return=e,t):((t=o(t,r)).return=e,t)}function c(e,t,r,n){return null!==t&&t.elementType===r.type?((n=o(t,r.props)).ref=ka(e,t,r),n.return=e,n):((n=Hu(r.type,r.key,r.props,null,e.mode,n)).ref=ka(e,t,r),n.return=e,n)}function s(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=Qu(r,e.mode,n)).return=e,t):((t=o(t,r.children||[])).return=e,t)}function f(e,t,r,n,a){return null===t||7!==t.tag?((t=Wu(r,e.mode,n,a)).return=e,t):((t=o(t,r)).return=e,t)}function d(e,t,r){if("string"===typeof t||"number"===typeof t)return(t=Gu(""+t,e.mode,r)).return=e,t;if("object"===typeof t&&null!==t){switch(t.$$typeof){case E:return(r=Hu(t.type,t.key,t.props,null,e.mode,r)).ref=ka(e,null,t),r.return=e,r;case x:return(t=Qu(t,e.mode,r)).return=e,t}if(wa(t)||B(t))return(t=Wu(t,e.mode,r,null)).return=e,t;Ea(e,t)}return null}function p(e,t,r,n){var o=null!==t?t.key:null;if("string"===typeof r||"number"===typeof r)return null!==o?null:u(e,t,""+r,n);if("object"===typeof r&&null!==r){switch(r.$$typeof){case E:return r.key===o?r.type===S?f(e,t,r.props.children,n,o):c(e,t,r,n):null;case x:return r.key===o?s(e,t,r,n):null}if(wa(r)||B(r))return null!==o?null:f(e,t,r,n,null);Ea(e,r)}return null}function h(e,t,r,n,o){if("string"===typeof n||"number"===typeof n)return u(t,e=e.get(r)||null,""+n,o);if("object"===typeof n&&null!==n){switch(n.$$typeof){case E:return e=e.get(null===n.key?r:n.key)||null,n.type===S?f(t,e,n.props.children,o,n.key):c(t,e,n,o);case x:return s(t,e=e.get(null===n.key?r:n.key)||null,n,o)}if(wa(n)||B(n))return f(t,e=e.get(r)||null,n,o,null);Ea(t,n)}return null}function g(o,i,l,u){for(var c=null,s=null,f=i,g=i=0,v=null;null!==f&&g<l.length;g++){f.index>g?(v=f,f=null):v=f.sibling;var m=p(o,f,l[g],u);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(o,f),i=a(m,i,g),null===s?c=m:s.sibling=m,s=m,f=v}if(g===l.length)return r(o,f),c;if(null===f){for(;g<l.length;g++)null!==(f=d(o,l[g],u))&&(i=a(f,i,g),null===s?c=f:s.sibling=f,s=f);return c}for(f=n(o,f);g<l.length;g++)null!==(v=h(f,o,g,l[g],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?g:v.key),i=a(v,i,g),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),c}function v(o,l,u,c){var s=B(u);if("function"!==typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var f=s=null,g=l,v=l=0,m=null,y=u.next();null!==g&&!y.done;v++,y=u.next()){g.index>v?(m=g,g=null):m=g.sibling;var b=p(o,g,y.value,c);if(null===b){null===g&&(g=m);break}e&&g&&null===b.alternate&&t(o,g),l=a(b,l,v),null===f?s=b:f.sibling=b,f=b,g=m}if(y.done)return r(o,g),s;if(null===g){for(;!y.done;v++,y=u.next())null!==(y=d(o,y.value,c))&&(l=a(y,l,v),null===f?s=y:f.sibling=y,f=y);return s}for(g=n(o,g);!y.done;v++,y=u.next())null!==(y=h(g,o,v,y.value,c))&&(e&&null!==y.alternate&&g.delete(null===y.key?v:y.key),l=a(y,l,v),null===f?s=y:f.sibling=y,f=y);return e&&g.forEach((function(e){return t(o,e)})),s}return function(e,n,a,u){var c="object"===typeof a&&null!==a&&a.type===S&&null===a.key;c&&(a=a.props.children);var s="object"===typeof a&&null!==a;if(s)switch(a.$$typeof){case E:e:{for(s=a.key,c=n;null!==c;){if(c.key===s){switch(c.tag){case 7:if(a.type===S){r(e,c.sibling),(n=o(c,a.props.children)).return=e,e=n;break e}break;default:if(c.elementType===a.type){r(e,c.sibling),(n=o(c,a.props)).ref=ka(e,c,a),n.return=e,e=n;break e}}r(e,c);break}t(e,c),c=c.sibling}a.type===S?((n=Wu(a.props.children,e.mode,u,a.key)).return=e,e=n):((u=Hu(a.type,a.key,a.props,null,e.mode,u)).ref=ka(e,n,a),u.return=e,e=u)}return l(e);case x:e:{for(c=a.key;null!==n;){if(n.key===c){if(4===n.tag&&n.stateNode.containerInfo===a.containerInfo&&n.stateNode.implementation===a.implementation){r(e,n.sibling),(n=o(n,a.children||[])).return=e,e=n;break e}r(e,n);break}t(e,n),n=n.sibling}(n=Qu(a,e.mode,u)).return=e,e=n}return l(e)}if("string"===typeof a||"number"===typeof a)return a=""+a,null!==n&&6===n.tag?(r(e,n.sibling),(n=o(n,a)).return=e,e=n):(r(e,n),(n=Gu(a,e.mode,u)).return=e,e=n),l(e);if(wa(a))return g(e,n,a,u);if(B(a))return v(e,n,a,u);if(s&&Ea(e,a),"undefined"===typeof a&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,G(e.type)||"Component"))}return r(e,n)}}var Sa=xa(!0),_a=xa(!1),Ta={},Ca=io(Ta),Oa=io(Ta),Pa=io(Ta);function Ra(e){if(e===Ta)throw Error(i(174));return e}function Na(e,t){switch(uo(Pa,t),uo(Oa,e),uo(Ca,Ta),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Ca),uo(Ca,t)}function La(){lo(Ca),lo(Oa),lo(Pa)}function Aa(e){Ra(Pa.current);var t=Ra(Ca.current),r=he(t,e.type);t!==r&&(uo(Oa,e),uo(Ca,r))}function Ia(e){Oa.current===e&&(lo(Ca),lo(Oa))}var ja=io(0);function Ma(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!==(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,qa=null,za=!1;function Ua(e,t){var r=Fu(5,null,null,0);r.elementType="DELETED",r.type="DELETED",r.stateNode=t,r.return=e,r.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function Fa(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ba(e){if(za){var t=qa;if(t){var r=t;if(!Fa(e,t)){if(!(t=Wn(r.nextSibling))||!Fa(e,t))return e.flags=-1025&e.flags|2,za=!1,void(Da=e);Ua(Da,r)}Da=e,qa=Wn(t.firstChild)}else e.flags=-1025&e.flags|2,za=!1,Da=e}}function Va(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function Ha(e){if(e!==Da)return!1;if(!za)return Va(e),za=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Fn(t,e.memoizedProps))for(t=qa;t;)Ua(e,t),t=Wn(t.nextSibling);if(Va(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){qa=Wn(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}qa=null}}else qa=Da?Wn(e.stateNode.nextSibling):null;return!0}function Wa(){qa=Da=null,za=!1}var $a=[];function Ga(){for(var e=0;e<$a.length;e++)$a[e]._workInProgressVersionPrimary=null;$a.length=0}var Qa=k.ReactCurrentDispatcher,Ya=k.ReactCurrentBatchConfig,Ka=0,Xa=null,Ja=null,Za=null,ei=!1,ti=!1;function ri(){throw Error(i(321))}function ni(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!ln(e[r],t[r]))return!1;return!0}function oi(e,t,r,n,o,a){if(Ka=a,Xa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qa.current=null===e||null===e.memoizedState?Ri:Ni,e=r(n,o),ti){a=0;do{if(ti=!1,!(25>a))throw Error(i(301));a+=1,Za=Ja=null,t.updateQueue=null,Qa.current=Li,e=r(n,o)}while(ti)}if(Qa.current=Pi,t=null!==Ja&&null!==Ja.next,Ka=0,Za=Ja=Xa=null,ei=!1,t)throw Error(i(300));return e}function ai(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Za?Xa.memoizedState=Za=e:Za=Za.next=e,Za}function ii(){if(null===Ja){var e=Xa.alternate;e=null!==e?e.memoizedState:null}else e=Ja.next;var t=null===Za?Xa.memoizedState:Za.next;if(null!==t)Za=t,Ja=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Ja=e).memoizedState,baseState:Ja.baseState,baseQueue:Ja.baseQueue,queue:Ja.queue,next:null},null===Za?Xa.memoizedState=Za=e:Za=Za.next=e}return Za}function li(e,t){return"function"===typeof t?t(e):t}function ui(e){var t=ii(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=Ja,o=n.baseQueue,a=r.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}n.baseQueue=o=a,r.pending=null}if(null!==o){o=o.next,n=n.baseState;var u=l=a=null,c=o;do{var s=c.lane;if((Ka&s)===s)null!==u&&(u=u.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),n=c.eagerReducer===e?c.eagerState:e(n,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,a=n):u=u.next=f,Xa.lanes|=s,ql|=s}c=c.next}while(null!==c&&c!==o);null===u?a=n:u.next=l,ln(n,t.memoizedState)||(Ii=!0),t.memoizedState=n,t.baseState=a,t.baseQueue=u,r.lastRenderedState=n}return[t.memoizedState,r.dispatch]}function ci(e){var t=ii(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=r.dispatch,o=r.pending,a=t.memoizedState;if(null!==o){r.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ln(a,t.memoizedState)||(Ii=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),r.lastRenderedState=a}return[a,n]}function si(e,t,r){var n=t._getVersion;n=n(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===n:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=n,$a.push(t))),e)return r(t._source);throw $a.push(t),Error(i(350))}function fi(e,t,r,n){var o=Rl;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=Qa.current,c=u.useState((function(){return si(o,t,r)})),s=c[1],f=c[0];c=Za;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,g=d.source;d=d.subscribe;var v=Xa;return e.memoizedState={refs:p,source:t,subscribe:n},u.useEffect((function(){p.getSnapshot=r,p.setSnapshot=s;var e=a(t._source);if(!ln(l,e)){e=r(t._source),ln(f,e)||(s(e),e=su(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var n=o.entanglements,i=e;0<i;){var u=31-Ht(i),c=1<<u;n[u]|=e,i&=~c}}}),[r,t,n]),u.useEffect((function(){return n(t._source,(function(){var e=p.getSnapshot,r=p.setSnapshot;try{r(e(t._source));var n=su(v);o.mutableReadLanes|=n&o.pendingLanes}catch(e){r((function(){throw e}))}}))}),[t,n]),ln(h,r)&&ln(g,t)&&ln(d,n)||((e={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:f}).dispatch=s=Oi.bind(null,Xa,e),c.queue=e,c.baseQueue=null,f=si(o,t,r),c.memoizedState=c.baseState=f),f}function di(e,t,r){return fi(ii(),e,t,r)}function pi(e){var t=ai();return"function"===typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:e}).dispatch=Oi.bind(null,Xa,e),[t.memoizedState,e]}function hi(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=Xa.updateQueue)?(t={lastEffect:null},Xa.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function gi(e){return e={current:e},ai().memoizedState=e}function vi(){return ii().memoizedState}function mi(e,t,r,n){var o=ai();Xa.flags|=e,o.memoizedState=hi(1|t,r,void 0,void 0===n?null:n)}function yi(e,t,r,n){var o=ii();n=void 0===n?null:n;var a=void 0;if(null!==Ja){var i=Ja.memoizedState;if(a=i.destroy,null!==n&&ni(n,i.deps))return void hi(t,r,a,n)}Xa.flags|=e,o.memoizedState=hi(1|t,r,a,n)}function bi(e,t){return mi(516,4,e,t)}function wi(e,t){return yi(516,4,e,t)}function ki(e,t){return yi(4,2,e,t)}function Ei(e,t){return"function"===typeof t?(e=e(),t(e),function(){t(null)}):null!==t&&void 0!==t?(e=e(),t.current=e,function(){t.current=null}):void 0}function xi(e,t,r){return r=null!==r&&void 0!==r?r.concat([e]):null,yi(4,2,Ei.bind(null,t,e),r)}function Si(){}function _i(e,t){var r=ii();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&ni(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function Ti(e,t){var r=ii();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&ni(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function Ci(e,t){var r=Bo();Ho(98>r?98:r,(function(){e(!0)})),Ho(97<r?97:r,(function(){var r=Ya.transition;Ya.transition=1;try{e(!1),t()}finally{Ya.transition=r}}))}function Oi(e,t,r){var n=cu(),o=su(e),a={lane:o,action:r,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Xa||null!==i&&i===Xa)ti=ei=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,r);if(a.eagerReducer=i,a.eagerState=u,ln(u,l))return}catch(e){}fu(e,o,n)}}var Pi={readContext:oa,useCallback:ri,useContext:ri,useEffect:ri,useImperativeHandle:ri,useLayoutEffect:ri,useMemo:ri,useReducer:ri,useRef:ri,useState:ri,useDebugValue:ri,useDeferredValue:ri,useTransition:ri,useMutableSource:ri,useOpaqueIdentifier:ri,unstable_isNewReconciler:!1},Ri={readContext:oa,useCallback:function(e,t){return ai().memoizedState=[e,void 0===t?null:t],e},useContext:oa,useEffect:bi,useImperativeHandle:function(e,t,r){return r=null!==r&&void 0!==r?r.concat([e]):null,mi(4,2,Ei.bind(null,t,e),r)},useLayoutEffect:function(e,t){return mi(4,2,e,t)},useMemo:function(e,t){var r=ai();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=ai();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e=(e=n.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Oi.bind(null,Xa,e),[n.memoizedState,e]},useRef:gi,useState:pi,useDebugValue:Si,useDeferredValue:function(e){var t=pi(e),r=t[0],n=t[1];return bi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=pi(!1),t=e[0];return gi(e=Ci.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,r){var n=ai();return n.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:r},fi(n,e,t,r)},useOpaqueIdentifier:function(){if(za){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,r("r:"+(Gn++).toString(36))),Error(i(355))})),r=pi(t)[1];return 0===(2&Xa.mode)&&(Xa.flags|=516,hi(5,(function(){r("r:"+(Gn++).toString(36))}),void 0,null)),t}return pi(t="r:"+(Gn++).toString(36)),t},unstable_isNewReconciler:!1},Ni={readContext:oa,useCallback:_i,useContext:oa,useEffect:wi,useImperativeHandle:xi,useLayoutEffect:ki,useMemo:Ti,useReducer:ui,useRef:vi,useState:function(){return ui(li)},useDebugValue:Si,useDeferredValue:function(e){var t=ui(li),r=t[0],n=t[1];return wi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=ui(li)[0];return[vi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ui(li)[0]},unstable_isNewReconciler:!1},Li={readContext:oa,useCallback:_i,useContext:oa,useEffect:wi,useImperativeHandle:xi,useLayoutEffect:ki,useMemo:Ti,useReducer:ci,useRef:vi,useState:function(){return ci(li)},useDebugValue:Si,useDeferredValue:function(e){var t=ci(li),r=t[0],n=t[1];return wi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=ci(li)[0];return[vi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ci(li)[0]},unstable_isNewReconciler:!1},Ai=k.ReactCurrentOwner,Ii=!1;function ji(e,t,r,n){t.child=null===e?_a(t,null,r,n):Sa(t,e.child,r,n)}function Mi(e,t,r,n,o){r=r.render;var a=t.ref;return na(t,o),n=oi(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,rl(e,t,o))}function Di(e,t,r,n,o,a){if(null===e){var i=r.type;return"function"!==typeof i||Bu(i)||void 0!==i.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Hu(r.type,null,n,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,qi(e,t,i,n,o,a))}return i=e.child,0===(o&a)&&(o=i.memoizedProps,(r=null!==(r=r.compare)?r:cn)(o,n)&&e.ref===t.ref)?rl(e,t,a):(t.flags|=1,(e=Vu(i,n)).ref=t.ref,e.return=t,t.child=e)}function qi(e,t,r,n,o,a){if(null!==e&&cn(e.memoizedProps,n)&&e.ref===t.ref){if(Ii=!1,0===(a&o))return t.lanes=e.lanes,rl(e,t,a);0!==(16384&e.flags)&&(Ii=!0)}return Fi(e,t,r,n,a)}function zi(e,t,r){var n=t.pendingProps,o=n.children,a=null!==e?e.memoizedState:null;if("hidden"===n.mode||"unstable-defer-without-hiding"===n.mode)if(0===(4&t.mode))t.memoizedState={baseLanes:0},bu(t,r);else{if(0===(1073741824&r))return e=null!==a?a.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bu(t,e),null;t.memoizedState={baseLanes:0},bu(t,null!==a?a.baseLanes:r)}else null!==a?(n=a.baseLanes|r,t.memoizedState=null):n=r,bu(t,n);return ji(e,t,o,r),t.child}function Ui(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.flags|=128)}function Fi(e,t,r,n,o){var a=go(r)?po:so.current;return a=ho(t,a),na(t,o),r=oi(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,rl(e,t,o))}function Bi(e,t,r,n,o){if(go(r)){var a=!0;bo(t)}else a=!1;if(na(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,r,n),ba(t,r,n,o),n=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=r.contextType;"object"===typeof c&&null!==c?c=oa(c):c=ho(t,c=go(r)?po:so.current);var s=r.getDerivedStateFromProps,f="function"===typeof s||"function"===typeof i.getSnapshotBeforeUpdate;f||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(l!==n||u!==c)&&ya(t,i,n,c),aa=!1;var d=t.memoizedState;i.state=d,fa(t,n,i,o),u=t.memoizedState,l!==n||d!==u||fo.current||aa?("function"===typeof s&&(ha(t,r,s,n),u=t.memoizedState),(l=aa||va(t,r,l,n,d,u,c))?(f||"function"!==typeof i.UNSAFE_componentWillMount&&"function"!==typeof i.componentWillMount||("function"===typeof i.componentWillMount&&i.componentWillMount(),"function"===typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"===typeof i.componentDidMount&&(t.flags|=4)):("function"===typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=n,t.memoizedState=u),i.props=n,i.state=u,i.context=c,n=l):("function"===typeof i.componentDidMount&&(t.flags|=4),n=!1)}else{i=t.stateNode,la(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:Yo(t.type,l),i.props=c,f=t.pendingProps,d=i.context,"object"===typeof(u=r.contextType)&&null!==u?u=oa(u):u=ho(t,u=go(r)?po:so.current);var p=r.getDerivedStateFromProps;(s="function"===typeof p||"function"===typeof i.getSnapshotBeforeUpdate)||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(l!==f||d!==u)&&ya(t,i,n,u),aa=!1,d=t.memoizedState,i.state=d,fa(t,n,i,o);var h=t.memoizedState;l!==f||d!==h||fo.current||aa?("function"===typeof p&&(ha(t,r,p,n),h=t.memoizedState),(c=aa||va(t,r,c,n,d,h,u))?(s||"function"!==typeof i.UNSAFE_componentWillUpdate&&"function"!==typeof i.componentWillUpdate||("function"===typeof i.componentWillUpdate&&i.componentWillUpdate(n,h,u),"function"===typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(n,h,u)),"function"===typeof i.componentDidUpdate&&(t.flags|=4),"function"===typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!==typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!==typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=n,t.memoizedState=h),i.props=n,i.state=h,i.context=u,n=c):("function"!==typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!==typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),n=!1)}return Vi(e,t,r,n,a,o)}function Vi(e,t,r,n,o,a){Ui(e,t);var i=0!==(64&t.flags);if(!n&&!i)return o&&wo(t,r,!1),rl(e,t,a);n=t.stateNode,Ai.current=t;var l=i&&"function"!==typeof r.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&i?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,l,a)):ji(e,t,l,a),t.memoizedState=n.state,o&&wo(t,r,!0),t.child}function Hi(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Na(e,t.containerInfo)}var Wi,$i,Gi,Qi={dehydrated:null,retryLane:0};function Yi(e,t,r){var n,o=t.pendingProps,a=ja.current,i=!1;return(n=0!==(64&t.flags))||(n=(null===e||null!==e.memoizedState)&&0!==(2&a)),n?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),uo(ja,1&a),null===e?(void 0!==o.fallback&&Ba(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Qi,e):"number"===typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Qi,t.lanes=33554432,e):((r=$u({mode:"visible",children:e},t.mode,r,null)).return=t,t.child=r)):(e.memoizedState,i?(o=Ji(e,t,o.children,o.fallback,r),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:r}:{baseLanes:a.baseLanes|r},i.childLanes=e.childLanes&~r,t.memoizedState=Qi,o):(r=Xi(e,t,o.children,r),t.memoizedState=null,r))}function Ki(e,t,r,n){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0===(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=$u(t,o,0,null),r=Wu(r,o,n,null),a.return=e,r.return=e,a.sibling=r,e.child=a,r}function Xi(e,t,r,n){var o=e.child;return e=o.sibling,r=Vu(o,{mode:"visible",children:r}),0===(2&t.mode)&&(r.lanes=n),r.return=t,r.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=r}function Ji(e,t,r,n,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:r};return 0===(2&a)&&t.child!==i?((r=t.child).childLanes=0,r.pendingProps=l,null!==(i=r.lastEffect)?(t.firstEffect=r.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):r=Vu(i,l),null!==e?n=Vu(e,n):(n=Wu(n,a,o,null)).flags|=2,n.return=t,r.return=t,r.sibling=n,t.child=r,n}function Zi(e,t){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ra(e.return,t)}function el(e,t,r,n,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=r,i.tailMode=o,i.lastEffect=a)}function tl(e,t,r){var n=t.pendingProps,o=n.revealOrder,a=n.tail;if(ji(e,t,n.children,r),0!==(2&(n=ja.current)))n=1&n|2,t.flags|=64;else{if(null!==e&&0!==(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Zi(e,r);else if(19===e.tag)Zi(e,r);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(uo(ja,n),0===(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(r=t.child,o=null;null!==r;)null!==(e=r.alternate)&&null===Ma(e)&&(o=r),r=r.sibling;null===(r=o)?(o=t.child,t.child=null):(o=r.sibling,r.sibling=null),el(t,!1,o,r,a,t.lastEffect);break;case"backwards":for(r=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ma(e)){t.child=o;break}e=o.sibling,o.sibling=r,r=o,o=e}el(t,!0,r,null,a,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function rl(e,t,r){if(null!==e&&(t.dependencies=e.dependencies),ql|=t.lanes,0!==(r&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(r=Vu(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=Vu(e,e.pendingProps)).return=t;r.sibling=null}return t.child}return null}function nl(e,t){if(!za)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function ol(e,t,r){var n=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return go(t.type)&&vo(),null;case 3:return La(),lo(fo),lo(so),Ga(),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(Ha(t)?t.flags|=4:n.hydrate||(t.flags|=256)),null;case 5:Ia(t);var a=Ra(Pa.current);if(r=t.type,null!==e&&null!=t.stateNode)$i(e,t,r,n),e.ref!==t.ref&&(t.flags|=128);else{if(!n){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ra(Ca.current),Ha(t)){n=t.stateNode,r=t.type;var l=t.memoizedProps;switch(n[Yn]=t,n[Kn]=l,r){case"dialog":Cn("cancel",n),Cn("close",n);break;case"iframe":case"object":case"embed":Cn("load",n);break;case"video":case"audio":for(e=0;e<xn.length;e++)Cn(xn[e],n);break;case"source":Cn("error",n);break;case"img":case"image":case"link":Cn("error",n),Cn("load",n);break;case"details":Cn("toggle",n);break;case"input":ee(n,l),Cn("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!l.multiple},Cn("invalid",n);break;case"textarea":ue(n,l),Cn("invalid",n)}for(var c in Se(r,l),e=null,l)l.hasOwnProperty(c)&&(a=l[c],"children"===c?"string"===typeof a?n.textContent!==a&&(e=["children",a]):"number"===typeof a&&n.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(c)&&null!=a&&"onScroll"===c&&Cn("scroll",n));switch(r){case"input":K(n),ne(n,l,!0);break;case"textarea":K(n),se(n);break;case"select":case"option":break;default:"function"===typeof l.onClick&&(n.onclick=Dn)}n=e,t.updateQueue=n,null!==n&&(t.flags|=4)}else{switch(c=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=pe(r)),e===fe?"script"===r?((e=c.createElement("div")).innerHTML="<script><\\/script>",e=e.removeChild(e.firstChild)):"string"===typeof n.is?e=c.createElement(r,{is:n.is}):(e=c.createElement(r),"select"===r&&(c=e,n.multiple?c.multiple=!0:n.size&&(c.size=n.size))):e=c.createElementNS(e,r),e[Yn]=t,e[Kn]=n,Wi(e,t),t.stateNode=e,c=_e(r,n),r){case"dialog":Cn("cancel",e),Cn("close",e),a=n;break;case"iframe":case"object":case"embed":Cn("load",e),a=n;break;case"video":case"audio":for(a=0;a<xn.length;a++)Cn(xn[a],e);a=n;break;case"source":Cn("error",e),a=n;break;case"img":case"image":case"link":Cn("error",e),Cn("load",e),a=n;break;case"details":Cn("toggle",e),a=n;break;case"input":ee(e,n),a=Z(e,n),Cn("invalid",e);break;case"option":a=ae(e,n);break;case"select":e._wrapperState={wasMultiple:!!n.multiple},a=o({},n,{value:void 0}),Cn("invalid",e);break;case"textarea":ue(e,n),a=le(e,n),Cn("invalid",e);break;default:a=n}Se(r,a);var s=a;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?Ee(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===l?"string"===typeof f?("textarea"!==r||""!==f)&&ye(e,f):"number"===typeof f&&ye(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Cn("scroll",e):null!=f&&w(e,l,f,c))}switch(r){case"input":K(e),ne(e,n,!1);break;case"textarea":K(e),se(e);break;case"option":null!=n.value&&e.setAttribute("value",""+Q(n.value));break;case"select":e.multiple=!!n.multiple,null!=(l=n.value)?ie(e,!!n.multiple,l,!1):null!=n.defaultValue&&ie(e,!!n.multiple,n.defaultValue,!0);break;default:"function"===typeof a.onClick&&(e.onclick=Dn)}Un(r,n)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Gi(0,t,e.memoizedProps,n);else{if("string"!==typeof n&&null===t.stateNode)throw Error(i(166));r=Ra(Pa.current),Ra(Ca.current),Ha(t)?(n=t.stateNode,r=t.memoizedProps,n[Yn]=t,n.nodeValue!==r&&(t.flags|=4)):((n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[Yn]=t,t.stateNode=n)}return null;case 13:return lo(ja),n=t.memoizedState,0!==(64&t.flags)?(t.lanes=r,t):(n=null!==n,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Ha(t):r=null!==e.memoizedState,n&&!r&&0!==(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!==(1&ja.current)?0===jl&&(jl=3):(0!==jl&&3!==jl||(jl=4),null===Rl||0===(134217727&ql)&&0===(134217727&zl)||gu(Rl,Ll))),(n||r)&&(t.flags|=4),null);case 4:return La(),null===e&&Pn(t.stateNode.containerInfo),null;case 10:return ta(t),null;case 17:return go(t.type)&&vo(),null;case 19:if(lo(ja),null===(n=t.memoizedState))return null;if(l=0!==(64&t.flags),null===(c=n.rendering))if(l)nl(n,!1);else{if(0!==jl||null!==e&&0!==(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Ma(e))){for(t.flags|=64,nl(n,!1),null!==(l=c.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===n.lastEffect&&(t.firstEffect=null),t.lastEffect=n.lastEffect,n=r,r=t.child;null!==r;)e=n,(l=r).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(c=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=c.childLanes,l.lanes=c.lanes,l.child=c.child,l.memoizedProps=c.memoizedProps,l.memoizedState=c.memoizedState,l.updateQueue=c.updateQueue,l.type=c.type,e=c.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return uo(ja,1&ja.current|2),t.child}e=e.sibling}null!==n.tail&&Fo()>Vl&&(t.flags|=64,l=!0,nl(n,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Ma(c))){if(t.flags|=64,l=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.flags|=4),nl(n,!0),null===n.tail&&"hidden"===n.tailMode&&!c.alternate&&!za)return null!==(t=t.lastEffect=n.lastEffect)&&(t.nextEffect=null),null}else 2*Fo()-n.renderingStartTime>Vl&&1073741824!==r&&(t.flags|=64,l=!0,nl(n,!1),t.lanes=33554432);n.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=n.last)?r.sibling=c:t.child=c,n.last=c)}return null!==n.tail?(r=n.tail,n.rendering=r,n.tail=r.sibling,n.lastEffect=t.lastEffect,n.renderingStartTime=Fo(),r.sibling=null,t=ja.current,uo(ja,l?1&t|2:1&t),r):null;case 23:case 24:return wu(),null!==e&&null!==e.memoizedState!==(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==n.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function al(e){switch(e.tag){case 1:go(e.type)&&vo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(La(),lo(fo),lo(so),Ga(),0!==(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ia(e),null;case 13:return lo(ja),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return lo(ja),null;case 4:return La(),null;case 10:return ta(e),null;case 23:case 24:return wu(),null;default:return null}}function il(e,t){try{var r="",n=t;do{r+=$(n),n=n.return}while(n);var o=r}catch(e){o="\\nError generating stack: "+e.message+"\\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},$i=function(e,t,r,n){var a=e.memoizedProps;if(a!==n){e=t.stateNode,Ra(Ca.current);var i,l=null;switch(r){case"input":a=Z(e,a),n=Z(e,n),l=[];break;case"option":a=ae(e,a),n=ae(e,n),l=[];break;case"select":a=o({},a,{value:void 0}),n=o({},n,{value:void 0}),l=[];break;case"textarea":a=le(e,a),n=le(e,n),l=[];break;default:"function"!==typeof a.onClick&&"function"===typeof n.onClick&&(e.onclick=Dn)}for(f in Se(r,n),r=null,a)if(!n.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var c=a[f];for(i in c)c.hasOwnProperty(i)&&(r||(r={}),r[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in n){var s=n[f];if(c=null!=a?a[f]:void 0,n.hasOwnProperty(f)&&s!==c&&(null!=s||null!=c))if("style"===f)if(c){for(i in c)!c.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(r||(r={}),r[i]="");for(i in s)s.hasOwnProperty(i)&&c[i]!==s[i]&&(r||(r={}),r[i]=s[i])}else r||(l||(l=[]),l.push(f,r)),r=s;else"dangerouslySetInnerHTML"===f?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(l=l||[]).push(f,s)):"children"===f?"string"!==typeof s&&"number"!==typeof s||(l=l||[]).push(f,""+s):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=s&&"onScroll"===f&&Cn("scroll",e),l||c===s||(l=[])):"object"===typeof s&&null!==s&&s.$$typeof===j?s.toString():(l=l||[]).push(f,s))}r&&(l=l||[]).push("style",r);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Gi=function(e,t,r,n){r!==n&&(t.flags|=4)};var ul="function"===typeof WeakMap?WeakMap:Map;function cl(e,t,r){(r=ua(-1,r)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){Gl||(Gl=!0,Ql=n),ll(0,t)},r}function sl(e,t,r){(r=ua(-1,r)).tag=3;var n=e.type.getDerivedStateFromError;if("function"===typeof n){var o=t.value;r.payload=function(){return ll(0,t),n(o)}}var a=e.stateNode;return null!==a&&"function"===typeof a.componentDidCatch&&(r.callback=function(){"function"!==typeof n&&(null===Yl?Yl=new Set([this]):Yl.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),r}var fl="function"===typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"===typeof t)try{t(null)}catch(t){Du(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var r=e.memoizedProps,n=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?r:Yo(t.type,r),n),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hn(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function hl(e,t,r){switch(r.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3===(3&e.tag)){var n=e.create;e.destroy=n()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;n=o.next,0!==(4&(o=o.tag))&&0!==(1&o)&&(Iu(r,e),Au(r,e)),e=n}while(e!==t)}return;case 1:return e=r.stateNode,4&r.flags&&(null===t?e.componentDidMount():(n=r.elementType===r.type?t.memoizedProps:Yo(r.type,t.memoizedProps),e.componentDidUpdate(n,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=r.updateQueue)&&da(r,t,e));case 3:if(null!==(t=r.updateQueue)){if(e=null,null!==r.child)switch(r.child.tag){case 5:e=r.child.stateNode;break;case 1:e=r.child.stateNode}da(r,t,e)}return;case 5:return e=r.stateNode,void(null===t&&4&r.flags&&Un(r.type,r.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===r.memoizedState&&(r=r.alternate,null!==r&&(r=r.memoizedState,null!==r&&(r=r.dehydrated,null!==r&&Et(r)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function gl(e,t){for(var r=e;;){if(5===r.tag){var n=r.stateNode;if(t)"function"===typeof(n=n.style).setProperty?n.setProperty("display","none","important"):n.display="none";else{n=r.stateNode;var o=r.memoizedProps.style;o=void 0!==o&&null!==o&&o.hasOwnProperty("display")?o.display:null,n.style.display=ke("display",o)}}else if(6===r.tag)r.stateNode.nodeValue=t?"":r.memoizedProps;else if((23!==r.tag&&24!==r.tag||null===r.memoizedState||r===e)&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}function vl(e,t){if(Eo&&"function"===typeof Eo.onCommitFiberUnmount)try{Eo.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var n=r,o=n.destroy;if(n=n.tag,void 0!==o)if(0!==(4&n))Iu(t,r);else{n=t;try{o()}catch(e){Du(n,e)}}r=r.next}while(r!==e)}break;case 1:if(dl(t),"function"===typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Du(t,e)}break;case 5:dl(t);break;case 4:El(e,t)}}function ml(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(i(160))}var r=t;switch(t=r.stateNode,r.tag){case 5:var n=!1;break;case 3:case 4:t=t.containerInfo,n=!0;break;default:throw Error(i(161))}16&r.flags&&(ye(t,""),r.flags&=-17);e:t:for(r=e;;){for(;null===r.sibling;){if(null===r.return||yl(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;5!==r.tag&&6!==r.tag&&18!==r.tag;){if(2&r.flags)continue t;if(null===r.child||4===r.tag)continue t;r.child.return=r,r=r.child}if(!(2&r.flags)){r=r.stateNode;break e}}n?wl(e,r,t):kl(e,r,t)}function wl(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===r.nodeType?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(8===r.nodeType?(t=r.parentNode).insertBefore(e,r):(t=r).appendChild(e),null!==(r=r._reactRootContainer)&&void 0!==r||null!==t.onclick||(t.onclick=Dn));else if(4!==n&&null!==(e=e.child))for(wl(e,t,r),e=e.sibling;null!==e;)wl(e,t,r),e=e.sibling}function kl(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?r.insertBefore(e,t):r.appendChild(e);else if(4!==n&&null!==(e=e.child))for(kl(e,t,r),e=e.sibling;null!==e;)kl(e,t,r),e=e.sibling}function El(e,t){for(var r,n,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(r=a.stateNode,a.tag){case 5:n=!1;break e;case 3:case 4:r=r.containerInfo,n=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,c=u;;)if(vl(l,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===u)break e;for(;null===c.sibling;){if(null===c.return||c.return===u)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}n?(l=r,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,n=!0,o.child.return=o,o=o.child;continue}}else if(vl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function xl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var n=r=r.next;do{3===(3&n.tag)&&(e=n.destroy,n.destroy=void 0,void 0!==e&&e()),n=n.next}while(n!==r)}return;case 1:return;case 5:if(null!=(r=t.stateNode)){n=t.memoizedProps;var o=null!==e?e.memoizedProps:n;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(r[Kn]=n,"input"===e&&"radio"===n.type&&null!=n.name&&te(r,n),_e(e,o),t=_e(e,n),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?Ee(r,u):"dangerouslySetInnerHTML"===l?me(r,u):"children"===l?ye(r,u):w(r,l,u,t)}switch(e){case"input":re(r,n);break;case"textarea":ce(r,n);break;case"select":e=r._wrapperState.wasMultiple,r._wrapperState.wasMultiple=!!n.multiple,null!=(a=n.value)?ie(r,!!n.multiple,a,!1):e!==!!n.multiple&&(null!=n.defaultValue?ie(r,!!n.multiple,n.defaultValue,!0):ie(r,!!n.multiple,n.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((r=t.stateNode).hydrate&&(r.hydrate=!1,Et(r.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Bl=Fo(),gl(t.child,!0)),void Sl(t);case 19:return void Sl(t);case 17:return;case 23:case 24:return void gl(t,null!==t.memoizedState)}throw Error(i(163))}function Sl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new fl),t.forEach((function(t){var n=zu.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}function _l(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Tl=Math.ceil,Cl=k.ReactCurrentDispatcher,Ol=k.ReactCurrentOwner,Pl=0,Rl=null,Nl=null,Ll=0,Al=0,Il=io(0),jl=0,Ml=null,Dl=0,ql=0,zl=0,Ul=0,Fl=null,Bl=0,Vl=1/0;function Hl(){Vl=Fo()+500}var Wl,$l=null,Gl=!1,Ql=null,Yl=null,Kl=!1,Xl=null,Jl=90,Zl=[],eu=[],tu=null,ru=0,nu=null,ou=-1,au=0,iu=0,lu=null,uu=!1;function cu(){return 0!==(48&Pl)?Fo():-1!==ou?ou:ou=Fo()}function su(e){if(0===(2&(e=e.mode)))return 1;if(0===(4&e))return 99===Bo()?1:2;if(0===au&&(au=Dl),0!==Qo.transition){0!==iu&&(iu=null!==Fl?Fl.pendingLanes:0),e=au;var t=4186112&~iu;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Bo(),0!==(4&Pl)&&98===e?e=Ut(12,au):e=Ut(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),au),e}function fu(e,t,r){if(50<ru)throw ru=0,nu=null,Error(i(185));if(null===(e=du(e,t)))return null;Vt(e,t,r),e===Rl&&(zl|=t,4===jl&&gu(e,Ll));var n=Bo();1===t?0!==(8&Pl)&&0===(48&Pl)?vu(e):(pu(e,r),0===Pl&&(Hl(),$o())):(0===(4&Pl)||98!==n&&99!==n||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,r)),Fl=e}function du(e,t){e.lanes|=t;var r=e.alternate;for(null!==r&&(r.lanes|=t),r=e,e=e.return;null!==e;)e.childLanes|=t,null!==(r=e.alternate)&&(r.childLanes|=t),r=e,e=e.return;return 3===r.tag?r.stateNode:null}function pu(e,t){for(var r=e.callbackNode,n=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Ht(l),c=1<<u,s=a[u];if(-1===s){if(0===(c&n)||0!==(c&o)){s=t,Dt(c);var f=Mt;a[u]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);l&=~c}if(n=qt(e,e===Rl?Ll:0),t=Mt,0===n)null!==r&&(r!==jo&&_o(r),e.callbackNode=null,e.callbackPriority=0);else{if(null!==r){if(e.callbackPriority===t)return;r!==jo&&_o(r)}15===t?(r=vu.bind(null,e),null===Do?(Do=[r],qo=So(Ro,Go)):Do.push(r),r=jo):14===t?r=Wo(99,vu.bind(null,e)):r=Wo(r=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),hu.bind(null,e)),e.callbackPriority=t,e.callbackNode=r}}function hu(e){if(ou=-1,iu=au=0,0!==(48&Pl))throw Error(i(327));var t=e.callbackNode;if(Lu()&&e.callbackNode!==t)return null;var r=qt(e,e===Rl?Ll:0);if(0===r)return null;var n=r,o=Pl;Pl|=16;var a=xu();for(Rl===e&&Ll===n||(Hl(),ku(e,n));;)try{Tu();break}catch(t){Eu(e,t)}if(ea(),Cl.current=a,Pl=o,null!==Nl?n=0:(Rl=null,Ll=0,n=jl),0!==(Dl&zl))ku(e,0);else if(0!==n){if(2===n&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(r=zt(e))&&(n=Su(e,r))),1===n)throw t=Ml,ku(e,0),gu(e,r),pu(e,Fo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=r,n){case 0:case 1:throw Error(i(345));case 2:Pu(e);break;case 3:if(gu(e,r),(62914560&r)===r&&10<(n=Bl+500-Fo())){if(0!==qt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){cu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Bn(Pu.bind(null,e),n);break}Pu(e);break;case 4:if(gu(e,r),(4186112&r)===r)break;for(n=e.eventTimes,o=-1;0<r;){var l=31-Ht(r);a=1<<l,(l=n[l])>o&&(o=l),r&=~a}if(r=o,10<(r=(120>(r=Fo()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Tl(r/1960))-r)){e.timeoutHandle=Bn(Pu.bind(null,e),r);break}Pu(e);break;case 5:Pu(e);break;default:throw Error(i(329))}}return pu(e,Fo()),e.callbackNode===t?hu.bind(null,e):null}function gu(e,t){for(t&=~Ul,t&=~zl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-Ht(t),n=1<<r;e[r]=-1,t&=~n}}function vu(e){if(0!==(48&Pl))throw Error(i(327));if(Lu(),e===Rl&&0!==(e.expiredLanes&Ll)){var t=Ll,r=Su(e,t);0!==(Dl&zl)&&(r=Su(e,t=qt(e,t)))}else r=Su(e,t=qt(e,0));if(0!==e.tag&&2===r&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(t=zt(e))&&(r=Su(e,t))),1===r)throw r=Ml,ku(e,0),gu(e,t),pu(e,Fo()),r;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Pu(e),pu(e,Fo()),null}function mu(e,t){var r=Pl;Pl|=1;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}}function yu(e,t){var r=Pl;Pl&=-2,Pl|=8;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}}function bu(e,t){uo(Il,Al),Al|=t,Dl|=t}function wu(){Al=Il.current,lo(Il)}function ku(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,Vn(r)),null!==Nl)for(r=Nl.return;null!==r;){var n=r;switch(n.tag){case 1:null!==(n=n.type.childContextTypes)&&void 0!==n&&vo();break;case 3:La(),lo(fo),lo(so),Ga();break;case 5:Ia(n);break;case 4:La();break;case 13:case 19:lo(ja);break;case 10:ta(n);break;case 23:case 24:wu()}r=r.return}Rl=e,Nl=Vu(e.current,null),Ll=Al=Dl=t,jl=0,Ml=null,Ul=zl=ql=0}function Eu(e,t){for(;;){var r=Nl;try{if(ea(),Qa.current=Pi,ei){for(var n=Xa.memoizedState;null!==n;){var o=n.queue;null!==o&&(o.pending=null),n=n.next}ei=!1}if(Ka=0,Za=Ja=Xa=null,ti=!1,Ol.current=null,null===r||null===r.return){jl=1,Ml=t,Nl=null;break}e:{var a=e,i=r.return,l=r,u=t;if(t=Ll,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"===typeof u&&"function"===typeof u.then){var c=u;if(0===(2&l.mode)){var s=l.alternate;s?(l.updateQueue=s.updateQueue,l.memoizedState=s.memoizedState,l.lanes=s.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!==(1&ja.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var g=d.memoizedProps;p=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var m=new Set;m.add(c),d.updateQueue=m}else v.add(c);if(0===(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=ua(-1,1);y.tag=2,ca(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new ul,u=new Set,b.set(c,u)):void 0===(u=b.get(c))&&(u=new Set,b.set(c,u)),!u.has(l)){u.add(l);var w=qu.bind(null,a,c,l);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((G(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==jl&&(jl=2),u=il(u,l),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,t&=-t,d.lanes|=t,sa(d,cl(0,a,t));break e;case 1:a=u;var k=d.type,E=d.stateNode;if(0===(64&d.flags)&&("function"===typeof k.getDerivedStateFromError||null!==E&&"function"===typeof E.componentDidCatch&&(null===Yl||!Yl.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,sa(d,sl(d,a,t));break e}}d=d.return}while(null!==d)}Ou(r)}catch(e){t=e,Nl===r&&null!==r&&(Nl=r=r.return);continue}break}}function xu(){var e=Cl.current;return Cl.current=Pi,null===e?Pi:e}function Su(e,t){var r=Pl;Pl|=16;var n=xu();for(Rl===e&&Ll===t||ku(e,t);;)try{_u();break}catch(t){Eu(e,t)}if(ea(),Pl=r,Cl.current=n,null!==Nl)throw Error(i(261));return Rl=null,Ll=0,jl}function _u(){for(;null!==Nl;)Cu(Nl)}function Tu(){for(;null!==Nl&&!To();)Cu(Nl)}function Cu(e){var t=Wl(e.alternate,e,Al);e.memoizedProps=e.pendingProps,null===t?Ou(e):Nl=t,Ol.current=null}function Ou(e){var t=e;do{var r=t.alternate;if(e=t.return,0===(2048&t.flags)){if(null!==(r=ol(r,t,Al)))return void(Nl=r);if(24!==(r=t).tag&&23!==r.tag||null===r.memoizedState||0!==(1073741824&Al)||0===(4&r.mode)){for(var n=0,o=r.child;null!==o;)n|=o.lanes|o.childLanes,o=o.sibling;r.childLanes=n}null!==e&&0===(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(r=al(t)))return r.flags&=2047,void(Nl=r);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Nl=t);Nl=t=e}while(null!==t);0===jl&&(jl=5)}function Pu(e){var t=Bo();return Ho(99,Ru.bind(null,e,t)),null}function Ru(e,t){do{Lu()}while(null!==Xl);if(0!==(48&Pl))throw Error(i(327));var r=e.finishedWork;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(i(177));e.callbackNode=null;var n=r.lanes|r.childLanes,o=n,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var c=31-Ht(a),s=1<<c;o[c]=0,l[c]=-1,u[c]=-1,a&=~s}if(null!==tu&&0===(24&n)&&tu.has(e)&&tu.delete(e),e===Rl&&(Nl=Rl=null,Ll=0),1<r.flags?null!==r.lastEffect?(r.lastEffect.nextEffect=r,n=r.firstEffect):n=r:n=r.firstEffect,null!==n){if(o=Pl,Pl|=32,Ol.current=null,qn=Yt,hn(l=pn())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(s=u.getSelection&&u.getSelection())&&0!==s.rangeCount){u=s.anchorNode,a=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,g=0,v=l,m=null;t:for(;;){for(var y;v!==u||0!==a&&3!==v.nodeType||(d=f+a),v!==c||0!==s&&3!==v.nodeType||(p=f+s),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)m=v,v=y;for(;;){if(v===l)break t;if(m===u&&++h===a&&(d=f),m===c&&++g===s&&(p=f),null!==(y=v.nextSibling))break;m=(v=m).parentNode}v=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;zn={focusedElem:l,selectionRange:u},Yt=!1,lu=null,uu=!1,$l=n;do{try{Nu()}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);lu=null,$l=n;do{try{for(l=e;null!==$l;){var b=$l.flags;if(16&b&&ye($l.stateNode,""),128&b){var w=$l.alternate;if(null!==w){var k=w.ref;null!==k&&("function"===typeof k?k(null):k.current=null)}}switch(1038&b){case 2:bl($l),$l.flags&=-3;break;case 6:bl($l),$l.flags&=-3,xl($l.alternate,$l);break;case 1024:$l.flags&=-1025;break;case 1028:$l.flags&=-1025,xl($l.alternate,$l);break;case 4:xl($l.alternate,$l);break;case 8:El(l,u=$l);var E=u.alternate;ml(u),null!==E&&ml(E)}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);if(k=zn,w=pn(),b=k.focusedElem,l=k.selectionRange,w!==b&&b&&b.ownerDocument&&dn(b.ownerDocument.documentElement,b)){null!==l&&hn(b)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,E=Math.min(l.start,u),l=void 0===l.end?E:Math.min(l.end,u),!k.extend&&E>l&&(u=l,l=E,E=u),u=fn(b,E),a=fn(b,l),u&&a&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==a.node||k.focusOffset!==a.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),E>l?(k.addRange(w),k.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"===typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Yt=!!qn,zn=qn=null,e.current=r,$l=n;do{try{for(b=e;null!==$l;){var x=$l.flags;if(36&x&&hl(b,$l.alternate,$l),128&x){w=void 0;var S=$l.ref;if(null!==S){var _=$l.stateNode;switch($l.tag){case 5:w=_;break;default:w=_}"function"===typeof S?S(w):S.current=w}}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);$l=null,Mo(),Pl=o}else e.current=r;if(Kl)Kl=!1,Xl=e,Jl=t;else for($l=n;null!==$l;)t=$l.nextEffect,$l.nextEffect=null,8&$l.flags&&((x=$l).sibling=null,x.stateNode=null),$l=t;if(0===(n=e.pendingLanes)&&(Yl=null),1===n?e===nu?ru++:(ru=0,nu=e):ru=0,r=r.stateNode,Eo&&"function"===typeof Eo.onCommitFiberRoot)try{Eo.onCommitFiberRoot(ko,r,void 0,64===(64&r.current.flags))}catch(e){}if(pu(e,Fo()),Gl)throw Gl=!1,e=Ql,Ql=null,e;return 0!==(8&Pl)||$o(),null}function Nu(){for(;null!==$l;){var e=$l.alternate;uu||null===lu||(0!==(8&$l.flags)?et($l,lu)&&(uu=!0):13===$l.tag&&_l(e,$l)&&et($l,lu)&&(uu=!0));var t=$l.flags;0!==(256&t)&&pl(e,$l),0===(512&t)||Kl||(Kl=!0,Wo(97,(function(){return Lu(),null}))),$l=$l.nextEffect}}function Lu(){if(90!==Jl){var e=97<Jl?97:Jl;return Jl=90,Ho(e,ju)}return!1}function Au(e,t){Zl.push(t,e),Kl||(Kl=!0,Wo(97,(function(){return Lu(),null})))}function Iu(e,t){eu.push(t,e),Kl||(Kl=!0,Wo(97,(function(){return Lu(),null})))}function ju(){if(null===Xl)return!1;var e=Xl;if(Xl=null,0!==(48&Pl))throw Error(i(331));var t=Pl;Pl|=32;var r=eu;eu=[];for(var n=0;n<r.length;n+=2){var o=r[n],a=r[n+1],l=o.destroy;if(o.destroy=void 0,"function"===typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Du(a,e)}}for(r=Zl,Zl=[],n=0;n<r.length;n+=2){o=r[n],a=r[n+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Du(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Pl=t,$o(),!0}function Mu(e,t,r){ca(e,t=cl(0,t=il(r,t),1)),t=cu(),null!==(e=du(e,1))&&(Vt(e,1,t),pu(e,t))}function Du(e,t){if(3===e.tag)Mu(e,e,t);else for(var r=e.return;null!==r;){if(3===r.tag){Mu(r,e,t);break}if(1===r.tag){var n=r.stateNode;if("function"===typeof r.type.getDerivedStateFromError||"function"===typeof n.componentDidCatch&&(null===Yl||!Yl.has(n))){var o=sl(r,e=il(t,e),1);if(ca(r,o),o=cu(),null!==(r=du(r,1)))Vt(r,1,o),pu(r,o);else if("function"===typeof n.componentDidCatch&&(null===Yl||!Yl.has(n)))try{n.componentDidCatch(t,e)}catch(e){}break}}r=r.return}}function qu(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),t=cu(),e.pingedLanes|=e.suspendedLanes&r,Rl===e&&(Ll&r)===r&&(4===jl||3===jl&&(62914560&Ll)===Ll&&500>Fo()-Bl?ku(e,0):Ul|=r),pu(e,t)}function zu(e,t){var r=e.stateNode;null!==r&&r.delete(t),0===(t=0)&&(0===(2&(t=e.mode))?t=1:0===(4&t)?t=99===Bo()?1:2:(0===au&&(au=Dl),0===(t=Ft(62914560&~au))&&(t=4194304))),r=cu(),null!==(e=du(e,t))&&(Vt(e,t,r),pu(e,r))}function Uu(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fu(e,t,r,n){return new Uu(e,t,r,n)}function Bu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Vu(e,t){var r=e.alternate;return null===r?((r=Fu(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Hu(e,t,r,n,o,a){var l=2;if(n=e,"function"===typeof e)Bu(e)&&(l=1);else if("string"===typeof e)l=5;else e:switch(e){case S:return Wu(r.children,o,a,t);case M:l=8,o|=16;break;case _:l=8,o|=1;break;case T:return(e=Fu(12,r,t,8|o)).elementType=T,e.type=T,e.lanes=a,e;case R:return(e=Fu(13,r,t,o)).type=R,e.elementType=R,e.lanes=a,e;case N:return(e=Fu(19,r,t,o)).elementType=N,e.lanes=a,e;case D:return $u(r,o,a,t);case q:return(e=Fu(24,r,t,o)).elementType=q,e.lanes=a,e;default:if("object"===typeof e&&null!==e)switch(e.$$typeof){case C:l=10;break e;case O:l=9;break e;case P:l=11;break e;case L:l=14;break e;case A:l=16,n=null;break e;case I:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Fu(l,r,t,o)).elementType=e,t.type=n,t.lanes=a,t}function Wu(e,t,r,n){return(e=Fu(7,e,n,t)).lanes=r,e}function $u(e,t,r,n){return(e=Fu(23,e,n,t)).elementType=D,e.lanes=r,e}function Gu(e,t,r){return(e=Fu(6,e,null,t)).lanes=r,e}function Qu(e,t,r){return(t=Fu(4,null!==e.children?e.children:[],e.key,t)).lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Yu(e,t,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=r,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Ku(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}}function Xu(e,t,r,n){var o=t.current,a=cu(),l=su(o);e:if(r){t:{if(Ke(r=r._reactInternals)!==r||1!==r.tag)throw Error(i(170));var u=r;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(go(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===r.tag){var c=r.type;if(go(c)){r=yo(r,c,u);break e}}r=u}else r=co;return null===t.context?t.context=r:t.pendingContext=r,(t=ua(a,l)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),ca(o,t),fu(o,l,a),l}function Ju(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Zu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var r=e.retryLane;e.retryLane=0!==r&&r<t?r:t}}function ec(e,t){Zu(e,t),(e=e.alternate)&&Zu(e,t)}function tc(e,t,r){var n=null!=r&&null!=r.hydrationOptions&&r.hydrationOptions.mutableSources||null;if(r=new Yu(e,t,null!=r&&!0===r.hydrate),t=Fu(3,null,null,2===t?7:1===t?3:0),r.current=t,t.stateNode=r,ia(t),e[Xn]=r.current,Pn(8===e.nodeType?e.parentNode:e),n)for(e=0;e<n.length;e++){var o=(t=n[e])._getVersion;o=o(t._source),null==r.mutableSourceEagerHydrationData?r.mutableSourceEagerHydrationData=[t,o]:r.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=r}function rc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function nc(e,t,r,n,o){var a=r._reactRootContainer;if(a){var i=a._internalRoot;if("function"===typeof o){var l=o;o=function(){var e=Ju(i);l.call(e)}}Xu(t,i,e,o)}else{if(a=r._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var r;r=e.lastChild;)e.removeChild(r);return new tc(e,0,t?{hydrate:!0}:void 0)}(r,n),i=a._internalRoot,"function"===typeof o){var u=o;o=function(){var e=Ju(i);u.call(e)}}yu((function(){Xu(t,i,e,o)}))}return Ju(i)}function oc(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rc(t))throw Error(i(200));return Ku(e,t,null,r)}Wl=function(e,t,r){var n=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fo.current)Ii=!0;else{if(0===(r&n)){switch(Ii=!1,t.tag){case 3:Hi(t),Wa();break;case 5:Aa(t);break;case 1:go(t.type)&&bo(t);break;case 4:Na(t,t.stateNode.containerInfo);break;case 10:n=t.memoizedProps.value;var o=t.type._context;uo(Ko,o._currentValue),o._currentValue=n;break;case 13:if(null!==t.memoizedState)return 0!==(r&t.child.childLanes)?Yi(e,t,r):(uo(ja,1&ja.current),null!==(t=rl(e,t,r))?t.sibling:null);uo(ja,1&ja.current);break;case 19:if(n=0!==(r&t.childLanes),0!==(64&e.flags)){if(n)return tl(e,t,r);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),uo(ja,ja.current),n)break;return null;case 23:case 24:return t.lanes=0,zi(e,t,r)}return rl(e,t,r)}Ii=0!==(16384&e.flags)}else Ii=!1;switch(t.lanes=0,t.tag){case 2:if(n=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=ho(t,so.current),na(t,r),o=oi(null,t,n,e,o,r),t.flags|=1,"object"===typeof o&&null!==o&&"function"===typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(n)){var a=!0;bo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ia(t);var l=n.getDerivedStateFromProps;"function"===typeof l&&ha(t,n,l,e),o.updater=ga,t.stateNode=o,o._reactInternals=t,ba(t,n,e,r),t=Vi(null,t,n,!0,a,r)}else t.tag=0,ji(null,t,o,r),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"===typeof e)return Bu(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===P)return 11;if(e===L)return 14}return 2}(o),e=Yo(o,e),a){case 0:t=Fi(null,t,o,e,r);break e;case 1:t=Bi(null,t,o,e,r);break e;case 11:t=Mi(null,t,o,e,r);break e;case 14:t=Di(null,t,o,Yo(o.type,e),n,r);break e}throw Error(i(306,o,""))}return t;case 0:return n=t.type,o=t.pendingProps,Fi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 1:return n=t.type,o=t.pendingProps,Bi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 3:if(Hi(t),n=t.updateQueue,null===e||null===n)throw Error(i(282));if(n=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),fa(t,n,null,r),(n=t.memoizedState.element)===o)Wa(),t=rl(e,t,r);else{if((a=(o=t.stateNode).hydrate)&&(qa=Wn(t.stateNode.containerInfo.firstChild),Da=t,a=za=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],$a.push(a);for(r=_a(t,null,n,r),t.child=r;r;)r.flags=-3&r.flags|1024,r=r.sibling}else ji(e,t,n,r),Wa();t=t.child}return t;case 5:return Aa(t),null===e&&Ba(t),n=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Fn(n,o)?l=null:null!==a&&Fn(n,a)&&(t.flags|=16),Ui(e,t),ji(e,t,l,r),t.child;case 6:return null===e&&Ba(t),null;case 13:return Yi(e,t,r);case 4:return Na(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Sa(t,null,n,r):ji(e,t,n,r),t.child;case 11:return n=t.type,o=t.pendingProps,Mi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 7:return ji(e,t,t.pendingProps,r),t.child;case 8:case 12:return ji(e,t,t.pendingProps.children,r),t.child;case 10:e:{n=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(uo(Ko,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0===(a=ln(u,a)?0:0|("function"===typeof n._calculateChangedBits?n._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!fo.current){t=rl(e,t,r);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===n&&0!==(s.observedBits&a)){1===u.tag&&((s=ua(-1,r&-r)).tag=2,ca(u,s)),u.lanes|=r,null!==(s=u.alternate)&&(s.lanes|=r),ra(u.return,r),c.lanes|=r;break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}ji(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,n=(a=t.pendingProps).children,na(t,r),n=n(o=oa(o,a.unstable_observedBits)),t.flags|=1,ji(e,t,n,r),t.child;case 14:return a=Yo(o=t.type,t.pendingProps),Di(e,t,o,a=Yo(o.type,a),n,r);case 15:return qi(e,t,t.type,t.pendingProps,n,r);case 17:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:Yo(n,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,go(n)?(e=!0,bo(t)):e=!1,na(t,r),ma(t,n,o),ba(t,n,o,r),Vi(null,t,n,!0,e,r);case 19:return tl(e,t,r);case 23:case 24:return zi(e,t,r)}throw Error(i(156,t.tag))},tc.prototype.render=function(e){Xu(e,this._internalRoot,null,null)},tc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Xu(null,e,null,(function(){t[Xn]=null}))},tt=function(e){13===e.tag&&(fu(e,4,cu()),ec(e,4))},rt=function(e){13===e.tag&&(fu(e,67108864,cu()),ec(e,67108864))},nt=function(e){if(13===e.tag){var t=cu(),r=su(e);fu(e,r,t),ec(e,r)}},ot=function(e,t){return t()},Ce=function(e,t,r){switch(t){case"input":if(re(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+\'][type="radio"]\'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var o=ro(n);if(!o)throw Error(i(90));X(n),re(n,o)}}}break;case"textarea":ce(e,r);break;case"select":null!=(t=r.value)&&ie(e,!!r.multiple,t,!1)}},Ae=mu,Ie=function(e,t,r,n,o){var a=Pl;Pl|=4;try{return Ho(98,e.bind(null,t,r,n,o))}finally{0===(Pl=a)&&(Hl(),$o())}},je=function(){0===(49&Pl)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,Fo())}))}$o()}(),Lu())},Me=function(e,t){var r=Pl;Pl|=2;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}};var ac={Events:[eo,to,ro,Ne,Le,Lu,{current:!1}]},ic={findFiberByHostInstance:Zn,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},lc={bundleType:ic.bundleType,version:ic.version,rendererPackageName:ic.rendererPackageName,rendererConfig:ic.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:ic.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!==typeof{}){var uc={};if(!uc.isDisabled&&uc.supportsFiber)try{ko=uc.inject(lc),Eo=uc}catch(ve){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ac,t.createPortal=oc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"===typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var r=Pl;if(0!==(48&r))return e(t);Pl|=1;try{if(e)return Ho(99,e.bind(null,t))}finally{Pl=r,$o()}},t.hydrate=function(e,t,r){if(!rc(t))throw Error(i(200));return nc(null,e,t,!0,r)},t.render=function(e,t,r){if(!rc(t))throw Error(i(200));return nc(null,e,t,!1,r)},t.unmountComponentAtNode=function(e){if(!rc(e))throw Error(i(40));return!!e._reactRootContainer&&(yu((function(){nc(null,null,e,!1,(function(){e._reactRootContainer=null,e[Xn]=null}))})),!0)},t.unstable_batchedUpdates=mu,t.unstable_createPortal=function(e,t){return oc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!rc(r))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return nc(e,t,r,!1,n)},t.version="17.0.1"},function(e,t,r){"use strict";e.exports=r(186)},function(e,t,r){"use strict";var n,o,a,i;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var u=Date,c=u.now();t.unstable_now=function(){return u.now()-c}}if("undefined"===typeof window||"function"!==typeof MessageChannel){var s=null,f=null,d=function e(){if(null!==s)try{var r=t.unstable_now();s(!0,r),s=null}catch(t){throw setTimeout(e,0),t}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(d,0))},o=function(e,t){f=setTimeout(e,t)},a=function(){clearTimeout(f)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,h=window.clearTimeout;if("undefined"!==typeof console){var g=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!==typeof g&&console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,m=null,y=-1,b=5,w=0;t.unstable_shouldYield=function(){return t.unstable_now()>=w},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,E=k.port2;k.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();w=e+b;try{m(!0,e)?E.postMessage(null):(v=!1,m=null)}catch(e){throw E.postMessage(null),e}}else v=!1},n=function(e){m=e,v||(v=!0,E.postMessage(null))},o=function(e,r){y=p((function(){e(t.unstable_now())}),r)},a=function(){h(y),y=-1}}function x(e,t){var r=e.length;e.push(t);e:for(;;){var n=r-1>>>1,o=e[n];if(!(void 0!==o&&0<T(o,t)))break e;e[n]=t,e[r]=o,r=n}}function S(e){return void 0===(e=e[0])?null:e}function _(e){var t=e[0];if(void 0!==t){var r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,o=e.length;n<o;){var a=2*(n+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>T(i,r))void 0!==u&&0>T(u,i)?(e[n]=u,e[l]=r,n=l):(e[n]=i,e[a]=r,n=a);else{if(!(void 0!==u&&0>T(u,r)))break e;e[n]=u,e[l]=r,n=l}}}return t}return null}function T(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}var C=[],O=[],P=1,R=null,N=3,L=!1,A=!1,I=!1;function j(e){for(var t=S(O);null!==t;){if(null===t.callback)_(O);else{if(!(t.startTime<=e))break;_(O),t.sortIndex=t.expirationTime,x(C,t)}t=S(O)}}function M(e){if(I=!1,j(e),!A)if(null!==S(C))A=!0,n(D);else{var t=S(O);null!==t&&o(M,t.startTime-e)}}function D(e,r){A=!1,I&&(I=!1,a()),L=!0;var n=N;try{for(j(r),R=S(C);null!==R&&(!(R.expirationTime>r)||e&&!t.unstable_shouldYield());){var i=R.callback;if("function"===typeof i){R.callback=null,N=R.priorityLevel;var l=i(R.expirationTime<=r);r=t.unstable_now(),"function"===typeof l?R.callback=l:R===S(C)&&_(C),j(r)}else _(C);R=S(C)}if(null!==R)var u=!0;else{var c=S(O);null!==c&&o(M,c.startTime-r),u=!1}return u}finally{R=null,N=n,L=!1}}var q=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||L||(A=!0,n(D))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return S(C)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var r=N;N=t;try{return e()}finally{N=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=q,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=N;N=e;try{return t()}finally{N=r}},t.unstable_scheduleCallback=function(e,r,i){var l=t.unstable_now();switch("object"===typeof i&&null!==i?i="number"===typeof(i=i.delay)&&0<i?l+i:l:i=l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:P++,callback:r,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,x(O,e),null===S(C)&&e===S(O)&&(I?a():I=!0,o(M,i-l))):(e.sortIndex=u,x(C,e),A||L||(A=!0,n(D))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var r=N;N=t;try{return e.apply(this,arguments)}finally{N=r}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={"&lt":"<","&gt":">","&quot":\'"\',"&apos":"\'","&amp":"&","&lt;":"<","&gt;":">","&quot;":\'"\',"&apos;":"\'","&amp;":"&"},o={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},a={"<":"&lt;",">":"&gt;",\'"\':"&quot;","\'":"&apos;","&":"&amp;"},i=function(){function e(){}return e.prototype.encode=function(e){return e&&e.length?e.replace(/[<>"\'&]/g,(function(e){return a[e]})):""},e.encode=function(t){return(new e).encode(t)},e.prototype.decode=function(e){return e&&e.length?e.replace(/&#?[0-9a-zA-Z]+;?/g,(function(e){if("#"===e.charAt(1)){var t="x"===e.charAt(2).toLowerCase()?parseInt(e.substr(3),16):parseInt(e.substr(2));return isNaN(t)||t<-32768||t>65535?"":String.fromCharCode(t)}return n[e]||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var a=e.charCodeAt(n),i=o[a];i?(r+="&"+i+";",n++):(r+=a<32||a>126?"&#"+a+";":e.charAt(n),n++)}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.XmlEntities=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","Aelig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],o=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],a={},i={};!function(){for(var e=0,t=n.length;e<t;){var r=n[e],l=o[e];a[r]=String.fromCharCode(l),i[l]=r,e++}}();var l=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var n="x"===t.charAt(1).toLowerCase()?parseInt(t.substr(2),16):parseInt(t.substr(1));isNaN(n)||n<-32768||n>65535||(r=String.fromCharCode(n))}else r=a[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=i[e.charCodeAt(n)];r+=o?"&"+o+";":e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n),a=i[o];r+=a?"&"+a+";":o<32||o>126?"&#"+o+";":e.charAt(n),n++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html4Entities=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],o={},a={};!function(e,t){var r=n.length;for(;r--;){var o=n[r],a=o[0],i=o[1],l=i[0],u=l<32||l>126||62===l||60===l||38===l||34===l||39===l,c=void 0;if(u&&(c=t[l]=t[l]||{}),i[1]){var s=i[1];e[a]=String.fromCharCode(l)+String.fromCharCode(s),u&&(c[s]=a)}else e[a]=String.fromCharCode(l),u&&(c[""]=a)}}(o,a);var i=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var n="x"===t.charAt(1)?parseInt(t.substr(2).toLowerCase(),16):parseInt(t.substr(1));isNaN(n)||n<-32768||n>65535||(r=String.fromCharCode(n))}else r=o[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=a[e.charCodeAt(n)];if(o){var i=o[e.charCodeAt(n+1)];if(i?n++:i=o[""],i){r+="&"+i+";",n++;continue}}r+=e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n),i=a[o];if(i){var l=i[e.charCodeAt(n+1)];if(l?n++:l=i[""],l){r+="&"+l+";",n++;continue}}r+=o<32||o>126?"&#"+o+";":e.charAt(n),n++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html5Entities=i},function(e,t,r){"use strict";var n=r(52),o=r(193);Object.defineProperty(t,"__esModule",{value:!0}),t.shouldHighlight=b,t.getChalk=w,t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(b(t)){var r=w(t),n=f(r);return y(n,e)}return e};var a,i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==typeof e&&"function"!==typeof e)return{default:e};var t=c();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=n?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(r,o,a):r[o]=e[o]}r.default=e,t&&t.set(e,r);return r}(r(195)),l=r(196),u=(a=r(199))&&a.__esModule?a:{default:a};function c(){if("function"!==typeof WeakMap)return null;var e=new WeakMap;return c=function(){return e},e}var s=new Set(["as","async","from","get","of","set"]);function f(e){return{keyword:e.cyan,capitalized:e.yellow,jsxIdentifier:e.yellow,punctuator:e.yellow,number:e.magenta,string:e.green,regex:e.magenta,comment:e.grey,invalid:e.white.bgRed.bold}}var d,p=/\\r\\n|[\\n\\r\\u2028\\u2029]/,h=/^[()[\\]{}]$/,g=i.matchToToken,v=/^[a-z][\\w-]*$/i,m=function(e,t,r){if("name"===e.type){if((0,l.isKeyword)(e.value)||(0,l.isStrictReservedWord)(e.value,!0)||s.has(e.value))return"keyword";if(v.test(e.value)&&("<"===r[t-1]||"</"==r.substr(t-2,2)))return"jsxIdentifier";if(e.value[0]!==e.value[0].toLowerCase())return"capitalized"}return"punctuator"===e.type&&h.test(e.value)?"bracket":"invalid"!==e.type||"@"!==e.value&&"#"!==e.value?e.type:"punctuator"};function y(e,t){var r,o="",a=n(d(t));try{var i=function(){var t=r.value,n=t.type,a=t.value,i=e[n];o+=i?a.split(p).map((function(e){return i(e)})).join("\\n"):a};for(a.s();!(r=a.n()).done;)i()}catch(e){a.e(e)}finally{a.f()}return o}function b(e){return u.default.supportsColor||e.forceColor}function w(e){var t=u.default;return e.forceColor&&(t=new u.default.constructor({enabled:!0,level:1})),t}d=o.mark((function e(t){var r,n;return o.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(r=i.default.exec(t))){e.next=6;break}return n=g(r),e.next=4,{type:m(n,r.index,t),value:n.value};case 4:e.next=0;break;case 6:case"end":return e.stop()}}),e)}))},function(e,t,r){var n=r(192);e.exports=function(e,t){if(e){if("string"===typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}},function(e,t,r){e.exports=r(194)},function(e,t,r){var n=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,o="function"===typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,r){return e[t]=r}}function c(e,t,r,n){var o=t&&t.prototype instanceof v?t:v,a=Object.create(o.prototype),i=new O(n||[]);return a._invoke=function(e,t,r){var n=f;return function(o,a){if(n===p)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw a;return R()}for(r.method=o,r.arg=a;;){var i=r.delegate;if(i){var l=_(i,r);if(l){if(l===g)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=s(e,t,r);if("normal"===u.type){if(n=r.done?h:d,u.arg===g)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=h,r.method="throw",r.arg=u.arg)}}}(e,r,i),a}function s(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",g={};function v(){}function m(){}function y(){}var b={};b[a]=function(){return this};var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==r&&n.call(k,a)&&(b=k);var E=y.prototype=v.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function r(o,a,i,l){var u=s(e[o],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"===typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var o;this._invoke=function(e,n){function a(){return new t((function(t,o){r(e,n,t,o)}))}return o=o?o.then(a,a):a()}}function _(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,_(e,r),"throw"===r.method))return g;r.method="throw",r.arg=new TypeError("The iterator does not provide a \'throw\' method")}return g}var o=s(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,g;var a=o.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,g):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function P(e){if(e){var r=e[a];if(r)return r.call(e);if("function"===typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:R}}function R(){return{value:t,done:!0}}return m.prototype=E.constructor=y,y.constructor=m,m.displayName=u(y,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"===typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,l,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},x(S.prototype),S.prototype[i]=function(){return this},e.AsyncIterator=S,e.async=function(t,r,n,o,a){void 0===a&&(a=Promise);var i=new S(c(t,r,n,o),a);return e.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(E),u(E,l,"Generator"),E[a]=function(){return this},E.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=P,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(C),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return l.type="throw",l.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),C(r),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;C(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:P(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=n}catch(e){Function("r","regeneratorRuntime = r")(n)}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=/(([\'"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\\'"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g,t.matchToToken=function(e){var t={type:"invalid",value:e[0],closed:void 0};return e[1]?(t.type="string",t.closed=!(!e[3]&&!e[4])):e[5]?t.type="comment":e[6]?(t.type="comment",t.closed=!!e[7]):e[8]?t.type="regex":e[9]?t.type="number":e[10]?t.type="name":e[11]?t.type="punctuator":e[12]&&(t.type="whitespace"),t}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"isIdentifierName",{enumerable:!0,get:function(){return n.isIdentifierName}}),Object.defineProperty(t,"isIdentifierChar",{enumerable:!0,get:function(){return n.isIdentifierChar}}),Object.defineProperty(t,"isIdentifierStart",{enumerable:!0,get:function(){return n.isIdentifierStart}}),Object.defineProperty(t,"isReservedWord",{enumerable:!0,get:function(){return o.isReservedWord}}),Object.defineProperty(t,"isStrictBindOnlyReservedWord",{enumerable:!0,get:function(){return o.isStrictBindOnlyReservedWord}}),Object.defineProperty(t,"isStrictBindReservedWord",{enumerable:!0,get:function(){return o.isStrictBindReservedWord}}),Object.defineProperty(t,"isStrictReservedWord",{enumerable:!0,get:function(){return o.isStrictReservedWord}}),Object.defineProperty(t,"isKeyword",{enumerable:!0,get:function(){return o.isKeyword}});var n=r(197),o=r(198)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIdentifierStart=s,t.isIdentifierChar=f,t.isIdentifierName=function(e){for(var t=!0,r=0,n=Array.from(e);r<n.length;r++){var o=n[r].codePointAt(0);if(t){if(!s(o))return!1;t=!1}else if(!f(o))return!1}return!t};var n="\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",o="\u200C\u200D\xb7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F",a=new RegExp("["+n+"]"),i=new RegExp("["+n+o+"]");n=o=null;var l=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938],u=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];function c(e,t){for(var r=65536,n=0,o=t.length;n<o;n+=2){if((r+=t[n])>e)return!1;if((r+=t[n+1])>=e)return!0}return!1}function s(e){return e<65?36===e:e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&a.test(String.fromCharCode(e)):c(e,l)))}function f(e){return e<48?36===e:e<58||!(e<65)&&(e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&i.test(String.fromCharCode(e)):c(e,l)||c(e,u))))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isReservedWord=u,t.isStrictReservedWord=c,t.isStrictBindOnlyReservedWord=s,t.isStrictBindReservedWord=function(e,t){return c(e,t)||s(e)},t.isKeyword=function(e){return a.has(e)};var n=["implements","interface","let","package","private","protected","public","static","yield"],o=["eval","arguments"],a=new Set(["break","case","catch","continue","debugger","default","do","else","finally","for","function","if","return","switch","throw","try","var","const","while","with","new","this","super","class","extends","export","import","null","true","false","in","instanceof","typeof","void","delete"]),i=new Set(n),l=new Set(o);function u(e,t){return t&&"await"===e||"enum"===e}function c(e,t){return u(e,t)||i.has(e)}function s(e){return l.has(e)}},function(e,t,r){"use strict";(function(t){var n=r(52),o=r(200),a=r(201),i=r(206).stdout,l=r(207),u="win32"===t.platform&&!(Object({NODE_ENV:"production"}).TERM||"").toLowerCase().startsWith("xterm"),c=["ansi","ansi","ansi256","ansi16m"],s=new Set(["gray"]),f=Object.create(null);function d(e,t){t=t||{};var r=i?i.level:0;e.level=void 0===t.level?r:t.level,e.enabled="enabled"in t?t.enabled:e.level>0}function p(e){if(!this||!(this instanceof p)||this.template){var t={};return d(t,e),t.template=function(){var e=[].slice.call(arguments);return T.apply(null,[t.template].concat(e))},Object.setPrototypeOf(t,p.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=p,t.template}d(this,e)}u&&(a.blue.open="\x1b[94m");for(var h=function(){var e=v[g];a[e].closeRe=new RegExp(o(a[e].close),"g"),f[e]={get:function(){var t=a[e];return S.call(this,this._styles?this._styles.concat(t):[t],this._empty,e)}}},g=0,v=Object.keys(a);g<v.length;g++)h();f.visible={get:function(){return S.call(this,this._styles||[],!0,"visible")}},a.color.closeRe=new RegExp(o(a.color.close),"g");for(var m=function(){var e=b[y];if(s.has(e))return"continue";f[e]={get:function(){var t=this.level;return function(){var r=a.color[c[t]][e].apply(null,arguments),n={open:r,close:a.color.close,closeRe:a.color.closeRe};return S.call(this,this._styles?this._styles.concat(n):[n],this._empty,e)}}}},y=0,b=Object.keys(a.color.ansi);y<b.length;y++)m();a.bgColor.closeRe=new RegExp(o(a.bgColor.close),"g");for(var w=function(){var e=E[k];if(s.has(e))return"continue";var t="bg"+e[0].toUpperCase()+e.slice(1);f[t]={get:function(){var t=this.level;return function(){var r=a.bgColor[c[t]][e].apply(null,arguments),n={open:r,close:a.bgColor.close,closeRe:a.bgColor.closeRe};return S.call(this,this._styles?this._styles.concat(n):[n],this._empty,e)}}}},k=0,E=Object.keys(a.bgColor.ansi);k<E.length;k++)w();var x=Object.defineProperties((function(){}),f);function S(e,t,r){var n=function e(){return _.apply(e,arguments)};n._styles=e,n._empty=t;var o=this;return Object.defineProperty(n,"level",{enumerable:!0,get:function(){return o.level},set:function(e){o.level=e}}),Object.defineProperty(n,"enabled",{enumerable:!0,get:function(){return o.enabled},set:function(e){o.enabled=e}}),n.hasGrey=this.hasGrey||"gray"===r||"grey"===r,n.__proto__=x,n}function _(){var e=arguments,t=e.length,r=String(arguments[0]);if(0===t)return"";if(t>1)for(var o=1;o<t;o++)r+=" "+e[o];if(!this.enabled||this.level<=0||!r)return this._empty?"":r;var i=a.dim.open;u&&this.hasGrey&&(a.dim.open="");var l,c=n(this._styles.slice().reverse());try{for(c.s();!(l=c.n()).done;){var s=l.value;r=(r=s.open+r.replace(s.closeRe,s.open)+s.close).replace(/\\r?\\n/g,"".concat(s.close,"$&").concat(s.open))}}catch(e){c.e(e)}finally{c.f()}return a.dim.open=i,r}function T(e,t){if(!Array.isArray(t))return[].slice.call(arguments,1).join(" ");for(var r=[].slice.call(arguments,2),n=[t.raw[0]],o=1;o<t.length;o++)n.push(String(r[o-1]).replace(/[{}\\\\]/g,"\\\\$&")),n.push(String(t.raw[o]));return l(e,n.join(""))}Object.defineProperties(p.prototype,f),e.exports=p(),e.exports.supportsColor=i,e.exports.default=e.exports}).call(this,r(51))},function(e,t,r){"use strict";var n=/[|\\\\{}()[\\]^$+*?.]/g;e.exports=function(e){if("string"!==typeof e)throw new TypeError("Expected a string");return e.replace(n,"\\\\$&")}},function(e,t,r){"use strict";(function(e){var t=r(203),n=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(n+r,"m")}},o=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(38+r,";5;").concat(n,"m")}},a=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(38+r,";2;").concat(n[0],";").concat(n[1],";").concat(n[2],"m")}};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){var e=new Map,r={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};r.color.grey=r.color.gray;for(var i=0,l=Object.keys(r);i<l.length;i++){for(var u=l[i],c=r[u],s=0,f=Object.keys(c);s<f.length;s++){var d=f[s],p=c[d];r[d]={open:"\x1b[".concat(p[0],"m"),close:"\x1b[".concat(p[1],"m")},c[d]=r[d],e.set(p[0],p[1])}Object.defineProperty(r,u,{value:c,enumerable:!1}),Object.defineProperty(r,"codes",{value:e,enumerable:!1})}var h=function(e){return e},g=function(e,t,r){return[e,t,r]};r.color.close="\x1b[39m",r.bgColor.close="\x1b[49m",r.color.ansi={ansi:n(h,0)},r.color.ansi256={ansi256:o(h,0)},r.color.ansi16m={rgb:a(g,0)},r.bgColor.ansi={ansi:n(h,10)},r.bgColor.ansi256={ansi256:o(h,10)},r.bgColor.ansi16m={rgb:a(g,10)};for(var v=0,m=Object.keys(t);v<m.length;v++){var y=m[v];if("object"===typeof t[y]){var b=t[y];"ansi16"===y&&(y="ansi"),"ansi16"in b&&(r.color.ansi[y]=n(b.ansi16,0),r.bgColor.ansi[y]=n(b.ansi16,10)),"ansi256"in b&&(r.color.ansi256[y]=o(b.ansi256,0),r.bgColor.ansi256[y]=o(b.ansi256,10)),"rgb"in b&&(r.color.ansi16m[y]=a(b.rgb,0),r.bgColor.ansi16m[y]=a(b.rgb,10))}}return r}})}).call(this,r(202)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){var n=r(87),o=r(205),a={};Object.keys(n).forEach((function(e){a[e]={},Object.defineProperty(a[e],"channels",{value:n[e].channels}),Object.defineProperty(a[e],"labels",{value:n[e].labels});var t=o(e);Object.keys(t).forEach((function(r){var n=t[r];a[e][r]=function(e){var t=function(t){if(void 0===t||null===t)return t;arguments.length>1&&(t=Array.prototype.slice.call(arguments));var r=e(t);if("object"===typeof r)for(var n=r.length,o=0;o<n;o++)r[o]=Math.round(r[o]);return r};return"conversion"in e&&(t.conversion=e.conversion),t}(n),a[e][r].raw=function(e){var t=function(t){return void 0===t||null===t?t:(arguments.length>1&&(t=Array.prototype.slice.call(arguments)),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(n)}))})),e.exports=a},function(e,t,r){"use strict";e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(e,t,r){var n=r(87);function o(e){var t=function(){for(var e={},t=Object.keys(n),r=t.length,o=0;o<r;o++)e[t[o]]={distance:-1,parent:null};return e}(),r=[e];for(t[e].distance=0;r.length;)for(var o=r.pop(),a=Object.keys(n[o]),i=a.length,l=0;l<i;l++){var u=a[l],c=t[u];-1===c.distance&&(c.distance=t[o].distance+1,c.parent=o,r.unshift(u))}return t}function a(e,t){return function(r){return t(e(r))}}function i(e,t){for(var r=[t[e].parent,e],o=n[t[e].parent][e],i=t[e].parent;t[i].parent;)r.unshift(t[i].parent),o=a(n[t[i].parent][i],o),i=t[i].parent;return o.conversion=r,o}e.exports=function(e){for(var t=o(e),r={},n=Object.keys(t),a=n.length,l=0;l<a;l++){var u=n[l];null!==t[u].parent&&(r[u]=i(u,t))}return r}},function(e,t,r){"use strict";e.exports={stdout:!1,stderr:!1}},function(e,t,r){"use strict";var n=r(52),o=/(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi,a=/(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g,i=/^([\'"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/,l=/\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi,u=new Map([["n","\\n"],["r","\\r"],["t","\\t"],["b","\\b"],["f","\\f"],["v","\\v"],["0","\\0"],["\\\\","\\\\"],["e","\x1b"],["a","\x07"]]);function c(e){return"u"===e[0]&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):u.get(e)||e}function s(e,t){var r,o,a=[],u=t.trim().split(/\\s*,\\s*/g),s=n(u);try{for(s.s();!(o=s.n()).done;){var f=o.value;if(isNaN(f)){if(!(r=f.match(i)))throw new Error("Invalid Chalk template style argument: ".concat(f," (in style \'").concat(e,"\')"));a.push(r[2].replace(l,(function(e,t,r){return t?c(t):r})))}else a.push(Number(f))}}catch(e){s.e(e)}finally{s.f()}return a}function f(e){a.lastIndex=0;for(var t,r=[];null!==(t=a.exec(e));){var n=t[1];if(t[2]){var o=s(n,t[2]);r.push([n].concat(o))}else r.push([n])}return r}function d(e,t){var r,o={},a=n(t);try{for(a.s();!(r=a.n()).done;){var i,l=r.value,u=n(l.styles);try{for(u.s();!(i=u.n()).done;){var c=i.value;o[c[0]]=l.inverse?null:c.slice(1)}}catch(e){u.e(e)}finally{u.f()}}}catch(e){a.e(e)}finally{a.f()}for(var s=e,f=0,d=Object.keys(o);f<d.length;f++){var p=d[f];if(Array.isArray(o[p])){if(!(p in s))throw new Error("Unknown Chalk style: ".concat(p));s=o[p].length>0?s[p].apply(s,o[p]):s[p]}}return s}e.exports=function(e,t){var r=[],n=[],a=[];if(t.replace(o,(function(t,o,i,l,u,s){if(o)a.push(c(o));else if(l){var p=a.join("");a=[],n.push(0===r.length?p:d(e,r)(p)),r.push({inverse:i,styles:f(l)})}else if(u){if(0===r.length)throw new Error("Found extraneous } in Chalk template literal");n.push(d(e,r)(a.join(""))),a=[],r.pop()}else a.push(s)})),n.push(a.join("")),r.length>0){var i="Chalk template literal is missing ".concat(r.length," closing bracket").concat(1===r.length?"":"s"," (`}`)");throw new Error(i)}return n.join("")}},function(e,t,r){"use strict";r.r(t),r.d(t,"ThemeContext",(function(){return me}));r(90);var n=r(0),o=r.n(n),a=r(53),i=r.n(a),l=function(e){return{position:"relative",display:"inline-flex",flexDirection:"column",height:"100%",width:"1024px",maxWidth:"100%",overflowX:"hidden",overflowY:"auto",padding:"0.5rem",boxSizing:"border-box",textAlign:"left",fontFamily:"Consolas, Menlo, monospace",fontSize:"11px",whiteSpace:"pre-wrap",wordBreak:"break-word",lineHeight:1.5,color:e.color}},u=null;var c=function(e){var t=Object(n.useContext)(me),r=e.shortcutHandler;return Object(n.useEffect)((function(){var e=function(e){r&&r(e.key)};return window.addEventListener("keydown",e),u&&u.addEventListener("keydown",e),function(){window.removeEventListener("keydown",e),u&&u.removeEventListener("keydown",e)}}),[r]),o.a.createElement("div",{style:l(t),ref:function(e){if(e){var t=e.ownerDocument;u=t.defaultView}}},e.children)},s=function(e){return{fontFamily:"sans-serif",color:e.footer,marginTop:"0.5rem",flex:"0 0 auto"}};var f=function(e){var t=Object(n.useContext)(me);return o.a.createElement("div",{style:s(t)},e.line1,o.a.createElement("br",null),e.line2)},d=function(e){return{fontSize:"2em",fontFamily:"sans-serif",color:e.headerColor,whiteSpace:"pre-wrap",margin:"0 2rem 0.75rem 0",flex:"0 0 auto",maxHeight:"50%",overflow:"auto"}};var p=function(e){var t=Object(n.useContext)(me);return o.a.createElement("div",{style:d(t)},e.headerText)};function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function g(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function v(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?g(Object(r),!0).forEach((function(t){h(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var m={position:"relative",display:"block",padding:"0.5em",marginTop:"0.5em",marginBottom:"0.5em",overflowX:"auto",whiteSpace:"pre-wrap",borderRadius:"0.25rem"},y={fontFamily:"Consolas, Menlo, monospace"};var b=function(e){var t=e.main,r=e.codeHTML,a=Object(n.useContext)(me),i=v(v({},m),{},{backgroundColor:a.primaryPreBackground,color:a.primaryPreColor}),l=v(v({},m),{},{backgroundColor:a.secondaryPreBackground,color:a.secondaryPreColor}),u=t?i:l,c={__html:r};return o.a.createElement("pre",{style:u},o.a.createElement("code",{style:y,dangerouslySetInnerHTML:c}))},w=r(33),k=r.n(w),E=new(r(88).AllHtmlEntities),x=function(e){return{reset:[e.base05,"transparent"],black:e.base05,red:e.base08,green:e.base0B,yellow:e.base08,blue:e.base0C,magenta:e.base0C,cyan:e.base0E,gray:e.base03,lightgrey:e.base01,darkgrey:e.base03}},S={"ansi-bright-black":"black","ansi-bright-yellow":"yellow","ansi-yellow":"yellow","ansi-bright-green":"green","ansi-green":"green","ansi-bright-cyan":"cyan","ansi-cyan":"cyan","ansi-bright-red":"red","ansi-red":"red","ansi-bright-magenta":"magenta","ansi-magenta":"magenta","ansi-white":"darkgrey"};var _=function(e,t){for(var r=(new k.a).ansiToJson(E.encode(e),{use_classes:!0}),n="",o=!1,a=0;a<r.length;++a)for(var i=r[a],l=i.content,u=i.fg,c=l.split("\\n"),s=0;s<c.length;++s){o||(n+=\'<span data-ansi-line="true">\',o=!0);var f=c[s].replace("\\r",""),d=x(t)[S[u]];null!=d?n+=\'<span style="color: \'+d+\';">\'+f+"</span>":(null!=u&&console.log("Missing color mapping: ",u),n+="<span>"+f+"</span>"),s<c.length-1&&(n+="</span>",o=!1,n+="<br/>")}return o&&(n+="</span>",o=!1),n},T=/^\\.(\\/[^/\\n ]+)+\\.[^/\\n ]+$/,C=[/^.*\\((\\d+):(\\d+)\\)$/,/^Line (\\d+):.+$/];var O=function(e){for(var t=e.split("\\n"),r="",n=0,o=0,a=0;a<t.length;a++){var i=k.a.ansiToText(t[a]).trim();if(i){!r&&i.match(T)&&(r=i);for(var l=0;l<C.length;){var u=i.match(C[l]);if(u){n=parseInt(u[1],10),o=parseInt(u[2],10)+1||1;break}l++}if(r&&n)break}}return r&&n?{fileName:r,lineNumber:n,colNumber:o}:null},P={cursor:"pointer"};var R=function(e){var t=Object(n.useContext)(me),r=e.error,a=e.editorHandler,i=O(r),l=null!==i&&null!==a;return o.a.createElement(c,null,o.a.createElement(p,{headerText:"Failed to compile"}),o.a.createElement("div",{onClick:l&&i?function(){return a(i)}:null,style:l?P:null},o.a.createElement(b,{main:!0,codeHTML:_(r,t)})),o.a.createElement(f,{line1:"This error occurred during the build time and cannot be dismissed."}))};function N(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function L(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function A(e,t,r){return t&&L(e.prototype,t),r&&L(e,r),e}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function j(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function D(e){return(D="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){return!t||"object"!==D(t)&&"function"!==typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return e}(e):t}function z(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=M(e);if(t){var o=M(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return q(this,r)}}var U=function(e){return{color:e.closeColor,lineHeight:"1rem",fontSize:"1.5rem",padding:"1rem",cursor:"pointer",position:"absolute",right:0,top:0}};var F=function(e){var t=e.close,r=Object(n.useContext)(me);return o.a.createElement("span",{title:"Click or press Escape to dismiss.",onClick:t,style:U(r)},"\xd7")},B={marginBottom:"0.5rem"},V={marginRight:"1em"},H={border:"none",borderRadius:"4px",padding:"3px 6px",cursor:"pointer"},W=function(e){return v(v({},H),{},{backgroundColor:e.navBackground,color:e.navArrow,borderTopRightRadius:"0px",borderBottomRightRadius:"0px",marginRight:"1px"})},$=function(e){return v(v({},H),{},{backgroundColor:e.navBackground,color:e.navArrow,borderTopLeftRadius:"0px",borderBottomLeftRadius:"0px"})};var G=function(e){var t=Object(n.useContext)(me),r=e.currentError,a=e.totalErrors,i=e.previous,l=e.next;return o.a.createElement("div",{style:B},o.a.createElement("span",{style:V},o.a.createElement("button",{onClick:i,style:W(t)},"\u2190"),o.a.createElement("button",{onClick:l,style:$(t)},"\u2192")),"".concat(r," of ").concat(a," errors on the page"))};function Q(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(n=(i=l.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){o=!0,a=e}finally{try{n||null==l.return||l.return()}finally{if(o)throw a}}return r}}(e,t)||function(e,t){if(e){if("string"===typeof e)return Q(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Q(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function K(e,t){for(;null!=t&&"br"!==t.tagName.toLowerCase();)t=t.nextElementSibling;null!=t&&e.removeChild(t)}var X=r(89);var J=function(e){var t=Object(n.useContext)(me),r=e.lines,a=e.lineNum,i=e.columnNum,l=e.contextSize,u=e.main,c=[],s=1/0;r.forEach((function(e){var t=e.content,r=t.match(/^\\s*/);""!==t&&(s=r&&r[0]?Math.min(s,r[0].length):0)})),r.forEach((function(e){var t=e.content,r=e.lineNumber;isFinite(s)&&(t=t.substring(s)),c[r-1]=t}));var f=Object(X.codeFrameColumns)(c.join("\\n"),{start:{line:a,column:null==i?0:i-(isFinite(s)?s:0)}},{forceColor:!0,linesAbove:l,linesBelow:l}),d=_(f,t),p=document.createElement("code");p.innerHTML=d,function(e){for(var t=e.childNodes,r=0;r<t.length;++r){var n=t[r];if("span"===n.tagName.toLowerCase()){var o=n.innerText;null!=o&&"|^"===o.replace(/\\s/g,"")&&(n.style.position="absolute",K(e,n))}}}(p);var h=p.childNodes;e:for(var g=0;g<h.length;++g)for(var v=h[g].childNodes,m=0;m<v.length;++m){var y=v[m].innerText;if(null!=y&&-1!==y.indexOf(" "+a+" |"))break e}return o.a.createElement(b,{main:u,codeHTML:p.innerHTML})};function Z(e,t,r,n,o,a,i){var l;if(!i&&e&&"number"===typeof t){var u=/^[/|\\\\].*?[/|\\\\]((src|node_modules)[/|\\\\].*)/.exec(e);l=u&&u[1]?u[1]:e,l+=":"+t,r&&(l+=":"+r)}else n&&"number"===typeof o?(l=n+":"+o,a&&(l+=":"+a)):l="unknown";return l.replace("webpack://",".")}var ee=function(e){return{textDecoration:"none",color:e.anchorColor,cursor:"pointer"}},te=function(e){return{marginBottom:"1.5em",color:e.toggleColor,cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",background:e.toggleBackground,fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"}};var re=function(e){var t=Object(n.useContext)(me),r=Y(Object(n.useState)(!1),2),a=r[0],i=r[1],l=function(){var t=e.frame,r=t._originalFileName,n=t._originalLineNumber;return r?-1!==r.trim().indexOf(" ")?null:{fileName:r,lineNumber:n||1}:null},u=function(){var t=l();t&&e.editorHandler(t)},c=e.frame,s=e.contextSize,f=e.critical,d=e.showCode,p=c.fileName,h=c.lineNumber,g=c.columnNumber,v=c._scriptCode,m=c._originalFileName,y=c._originalLineNumber,b=c._originalColumnNumber,w=c._originalScriptCode,k=c.getFunctionName(),E=Z(m,y,b,p,h,g,a),x=null;d&&(a&&v&&0!==v.length&&null!=h?x={lines:v,lineNum:h,columnNum:g,contextSize:s,main:f}:!a&&w&&0!==w.length&&null!=y&&(x={lines:w,lineNum:y,columnNum:b,contextSize:s,main:f}));var S=null!==l()&&null!==e.editorHandler;return o.a.createElement("div",null,o.a.createElement("div",null,k),o.a.createElement("div",{style:{fontSize:"0.9em",marginBottom:"0.9em"}},o.a.createElement("span",{style:S?ee(t):null,onClick:S?u:null,onKeyDown:S?function(e){"Enter"===e.key&&u()}:null,tabIndex:S?"0":null},E)),x&&o.a.createElement("span",null,o.a.createElement("span",{onClick:S?u:null,style:S?{cursor:"pointer"}:null},o.a.createElement(J,x)),o.a.createElement("button",{style:te(t),onClick:function(){i(!a)}},"View "+(a?"source":"compiled"))))},ne={cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"},oe=function(e){return v(v({},ne),{},{color:e.color,background:e.background,marginBottom:"1.5em"})},ae=function(e){return v(v({},ne),{},{color:e.color,background:e.background,marginBottom:"0.6em"})};var ie=function(e){var t=Object(n.useContext)(me),r=Y(Object(n.useState)(!0),2),a=r[0],i=r[1],l=function(){i(!a)},u=e.children.length;return o.a.createElement("div",null,o.a.createElement("button",{onClick:l,style:a?oe(t):ae(t)},(a?"\u25B6":"\u25BC")+" ".concat(u," stack frames were ")+(a?"collapsed.":"expanded.")),o.a.createElement("div",{style:{display:a?"none":"block"}},e.children,o.a.createElement("button",{onClick:l,style:ae(t)},"\u25B2 ".concat(u," stack frames were expanded."))))};function le(e){switch(e){case"EvalError":case"InternalError":case"RangeError":case"ReferenceError":case"SyntaxError":case"TypeError":case"URIError":return!0;default:return!1}}var ue={fontSize:"1em",flex:"0 1 auto",minHeight:"0px",overflow:"auto"},ce=function(e){j(r,e);var t=z(r);function r(){return N(this,r),t.apply(this,arguments)}return A(r,[{key:"renderFrames",value:function(){var e=this.props,t=e.stackFrames,r=e.errorName,n=e.contextSize,a=e.editorHandler,i=[],l=!1,u=[],c=0;return t.forEach((function(e,s){var f=e.fileName,d=function(e,t){return null==e||""===e||-1!==e.indexOf("/~/")||-1!==e.indexOf("/node_modules/")||-1!==e.trim().indexOf(" ")||null==t||""===t}(e._originalFileName,f),p=!le(r),h=d&&(p||l);d||(l=!0);var g=o.a.createElement(re,{key:"frame-"+s,frame:e,contextSize:n,critical:0===s,showCode:!h,editorHandler:a}),v=s===t.length-1;h&&u.push(g),h&&!v||(1===u.length?i.push(u[0]):u.length>1&&(c++,i.push(o.a.createElement(ie,{key:"bundle-"+c},u))),u=[]),h||i.push(g)})),i}},{key:"render",value:function(){return o.a.createElement("div",{style:ue},this.renderFrames())}}]),r}(n.Component),se={display:"flex",flexDirection:"column"};var fe=function(e){var t=e.errorRecord,r=e.editorHandler,n=t.error,a=t.unhandledRejection,i=t.contextSize,l=t.stackFrames,u=a?"Unhandled Rejection ("+n.name+")":n.name,c=n.message,s=c.match(/^\\w*:/)||!u?c:u+": "+c;return s=s.replace(/^Invariant Violation:\\s*/,"").replace(/^Warning:\\s*/,"").replace(" Check the render method","\\n\\nCheck the render method").replace(" Check your code at","\\n\\nCheck your code at"),o.a.createElement("div",{style:se},o.a.createElement(p,{headerText:s}),o.a.createElement(ce,{stackFrames:l,errorName:u,contextSize:i,editorHandler:r}))},de=function(e){j(r,e);var t=z(r);function r(){var e;N(this,r);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return(e=t.call.apply(t,[this].concat(o))).state={currentIndex:0},e.previous=function(){e.setState((function(e,t){return{currentIndex:e.currentIndex>0?e.currentIndex-1:t.errorRecords.length-1}}))},e.next=function(){e.setState((function(e,t){return{currentIndex:e.currentIndex<t.errorRecords.length-1?e.currentIndex+1:0}}))},e.shortcutHandler=function(t){"Escape"===t?e.props.close():"ArrowLeft"===t?e.previous():"ArrowRight"===t&&e.next()},e}return A(r,[{key:"render",value:function(){var e=this.props,t=e.errorRecords,r=e.close,n=t.length;return o.a.createElement(c,{shortcutHandler:this.shortcutHandler},o.a.createElement(F,{close:r}),n>1&&o.a.createElement(G,{currentError:this.state.currentIndex+1,totalErrors:n,previous:this.previous,next:this.next}),o.a.createElement(fe,{errorRecord:t[this.state.currentIndex],editorHandler:this.props.editorHandler}),o.a.createElement(f,{line1:"This screen is visible only in development. It will not appear if the app crashes in production.",line2:"Open your browser\u2019s developer console to further inspect this error.  Click the \'X\' or hit ESC to dismiss this message."}))}}]),r}(n.PureComponent),pe={background:"white",color:"black",headerColor:"#ce1126",primaryPreBackground:"rgba(206, 17, 38, 0.05)",primaryPreColor:"inherit",secondaryPreBackground:"rgba(251, 245, 180, 0.3)",secondaryPreColor:"inherit",footer:"#878e91",anchorColor:"#878e91",toggleBackground:"transparent",toggleColor:"#878e91",closeColor:"#293238",navBackground:"rgba(206, 17, 38, 0.05)",navArrow:"#ce1126",base01:"#f5f5f5",base03:"#6e6e6e",base05:"#333333",base08:"#881280",base0B:"#1155cc",base0C:"#994500",base0E:"#c80000"},he={background:"#353535",color:"white",headerColor:"#e83b46",primaryPreBackground:"rgba(206, 17, 38, 0.1)",primaryPreColor:"#fccfcf",secondaryPreBackground:"rgba(251, 245, 180, 0.1)",secondaryPreColor:"#fbf5b4",footer:"#878e91",anchorColor:"#878e91",toggleBackground:"transparent",toggleColor:"#878e91",closeColor:"#ffffff",navBackground:"rgba(206, 17, 38, 0.2)",navArrow:"#ce1126",base01:"#282a2e",base03:"#969896",base05:"#c5c8c6",base08:"#cc6666",base0B:"#b5bd68",base0C:"#8abeb7",base0E:"#b294bb"};var ge=null,ve=window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?he:pe,me=Object(n.createContext)();window.updateContent=function(e){var t,r,n,a,l,u=(r=(t=e).currentBuildError,n=t.currentRuntimeErrorRecords,a=t.dismissRuntimeErrors,l=t.editorHandler,r?o.a.createElement(me.Provider,{value:ve},o.a.createElement(R,{error:r,editorHandler:l})):n.length>0?o.a.createElement(me.Provider,{value:ve},o.a.createElement(de,{errorRecords:n,close:a,editorHandler:l})):null);return null===u?(i.a.unmountComponentAtNode(ge),!1):(i.a.render(u,ge),!0)},document.body.style.margin="0",document.body.style["max-width"]="100vw",function(e,t){for(var r in e.setAttribute("style",""),t)t.hasOwnProperty(r)&&(e.style[r]=t[r])}(ge=document.createElement("div"),{width:"100%",height:"100%","box-sizing":"border-box","text-align":"center","background-color":ve.background}),document.body.appendChild(ge),window.parent.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady()}]);', ee = null, te = !1, re = !1, ne = null, oe = null, ae = [], ie = null, le = null;
            function ue(e) {
                ne = e, ee && me();
            }
            function ce(e) {
                oe = e, me();
            }
            function se(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                ie = t, X(pe(t))(e);
            }
            function fe() {
                oe = null, me();
            }
            function de(e) {
                if (null !== le) throw new Error("Already listening");
                e.launchEditorEndpoint && console.warn("Warning: `startReportingRuntimeErrors` doesn\u2019t accept `launchEditorEndpoint` argument anymore. Use `listenToOpenInEditor` instead with your own implementation to open errors in editor "), ie = e, le = K(pe(e), e.filename);
            }
            var pe = function(e69) {
                return function(t) {
                    try {
                        "function" == typeof e69.onError && e69.onError.call(null);
                    } finally{
                        if (ae.some(function(e) {
                            return e.error === t.error;
                        })) return;
                        ae = ae.concat([
                            t
                        ]), me();
                    }
                };
            };
            function he() {
                ae = [], me();
            }
            function ge() {
                if (null === le) throw new Error("Not currently listening");
                ie = null;
                try {
                    le();
                } finally{
                    le = null;
                }
            }
            function me() {
                if (!te) {
                    if (re) ve();
                    else {
                        te = !0;
                        var e70 = window.document.createElement("iframe");
                        !function(e, t) {
                            for(var r in e.setAttribute("style", ""), t)t.hasOwnProperty(r) && (e.style[r] = t[r]);
                        }(e70, J), e70.onload = function() {
                            var t = e70.contentDocument;
                            if (null != t && null != t.body) {
                                ee = e70;
                                var r = e70.contentWindow.document.createElement("script");
                                r.type = "text/javascript", r.innerHTML = Z, t.body.appendChild(r);
                            }
                        }, window.document.body.appendChild(e70);
                    }
                }
            }
            function ve() {
                if (!ie) throw new Error("Expected options to be injected.");
                if (!ee) throw new Error("Iframe has not been created yet.");
                ee.contentWindow.updateContent({
                    currentBuildError: oe,
                    currentRuntimeErrorRecords: ae,
                    dismissRuntimeErrors: he,
                    editorHandler: ne
                }) || (window.document.body.removeChild(ee), ee = null, re = !1);
            }
            window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ = window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ || {}, window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady = function() {
                re = !0, te = !1, ve();
            };
        }
    ]);
});

},{"process":"50f2S"}],"50f2S":[function(require,module,exports) {
module.exports = {};

},{}],"c69Lw":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "8f98bc9cb13a246d";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id1][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"5se51":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _reserveAirdrop = require("../artifacts/contracts/ReserveAirdrop.sol/ReserveAirdrop");
var _reserveAirdropDefault = parcelHelpers.interopDefault(_reserveAirdrop);
var _ethers = require("ethers");
var _airdropUploadCss = require("./airdropUpload.css");
const { create  } = require("ipfs-http-client");
const ipfs = create("https://ipfs.infura.io:5001");
const airdropAddress = "0x50681Cbd21D0c17827f1cBE7c7952c162C318c63";
const btn = document.querySelector("#btn-one");
const text = document.querySelector("#results-text");
const dropArea = document.getElementById("drop-area");
const status = document.getElementById("status");
const provider = new (0, _ethers.ethers).providers.Web3Provider(ethereum);
async function generateWinner() {
    await ethereum.request({
        method: "eth_requestAccounts"
    });
    const signer = provider.getSigner();
    const contract = new (0, _ethers.ethers).Contract(airdropAddress, (0, _reserveAirdropDefault.default).abi, signer);
    const result = await contract.generateWinner();
    console.log(result);
    text.innerHTML = "random winner chosen! upload the prize!";
}
btn.addEventListener("click", generateWinner);
async function ipfsUpload(buffer) {
    const result = await ipfs.add(buffer);
    return `https://gateway.ipfs.io/ipfs/${result.path}`;
}
[
    "dragenter",
    "dragover",
    "dragleave",
    "drop"
].forEach((eventName)=>{
    dropArea.addEventListener(eventName, preventDefaults, false);
});
function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
}
[
    "dragenter",
    "dragover"
].forEach((eventName)=>{
    dropArea.addEventListener(eventName, highlight, false);
});
[
    "dragleave",
    "drop"
].forEach((eventName)=>{
    dropArea.addEventListener(eventName, unhighlight, false);
});
function highlight(e) {
    dropArea.classList.add("highlight");
}
function unhighlight(e) {
    dropArea.classList.remove("highlight");
}
dropArea.addEventListener("drop", handleDrop, false);
function handleDrop(e) {
    let dt = e.dataTransfer;
    let files = dt.files;
    handleFiles(files);
}
function handleFiles(files) {
    [
        ...files
    ].forEach(uploadFile);
}
async function awardWinner(tokenURI) {
    await ethereum.request({
        method: "eth_requestAccounts"
    });
    const signer = provider.getSigner();
    const contract = new (0, _ethers.ethers).Contract(airdropAddress, (0, _reserveAirdropDefault.default).abi, signer);
    const result = await contract.awardRandomWinner(tokenURI);
    console.log(result);
}
async function uploadFile(file) {
    status.innerHTML = "Uploading...";
    const nftName = document.querySelector("#nft-name").value;
    const nftDescription = document.querySelector("#nft-description").value;
    const traitOne = document.querySelector("#trait-one").value;
    const traitTwo = document.querySelector("#trait-two").value;
    const valueOne = document.querySelector("#value-one").value;
    const valueTwo = document.querySelector("#value-two").value;
    const gateway = await ipfsUpload(file);
    const files = [
        {
            path: "/",
            content: JSON.stringify({
                name: nftName,
                attributes: [
                    {
                        "trait_type": traitOne,
                        "value": valueOne
                    },
                    {
                        "trait_type": traitTwo,
                        "value": valueTwo
                    }
                ],
                image: gateway,
                description: nftDescription
            })
        }
    ];
    const result = await ipfs.add(files);
    console.log(result);
    status.innerHTML = "Upload Successful!";
    console.log(gateway);
    console.log(result.path);
    const currentTokenURI = result.path;
    await awardWinner(currentTokenURI);
    const para = document.createElement("p");
    para.textContent = "Winner awarded!";
    para.setAttribute("id", "status-p");
    document.body.appendChild(para);
    const nftImage = document.createElement("img");
    nftImage.setAttribute("width", "300px;");
    nftImage.setAttribute("src", gateway);
    nftImage.setAttribute("id", "status-image");
    document.body.appendChild(nftImage);
}

},{"../artifacts/contracts/ReserveAirdrop.sol/ReserveAirdrop":"fIJGS","ethers":"hdHML","./airdropUpload.css":"7ZiVZ","ipfs-http-client":"5oPc9","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"fIJGS":[function(require,module,exports) {
module.exports = JSON.parse('{"_format":"hh-sol-artifact-1","contractName":"ReserveAirdrop","sourceName":"contracts/ReserveAirdrop.sol","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_recip","type":"address"},{"internalType":"string","name":"_tokenURI","type":"string"}],"name":"awardItem","outputs":[{"internalType":"uint256","name":"_newItemId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_tokenURI","type":"string"}],"name":"awardRandomWinner","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"generateWinner","outputs":[{"internalType":"bool","name":"_success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"bytecode":"0x608060405273997618b67b91c8b5651257580fe7a2aa94410336600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507365a64a17eec885c0858cbb9fc55d17cb8e8e78bc600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550733c16cb7c469d93778933902bc47bd37b6e036a6f600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550733c16cb7c469d93778933902bc47bd37b6e036a6f600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200016557600080fd5b506040518060400160405280600e81526020017f5265736572766541697264726f700000000000000000000000000000000000008152506040518060400160405280600481526020017f52414952000000000000000000000000000000000000000000000000000000008152508160009080519060200190620001ea9291906200020c565b508060019080519060200190620002039291906200020c565b50505062000321565b8280546200021a90620002bc565b90600052602060002090601f0160209004810192826200023e57600085556200028a565b82601f106200025957805160ff19168380011785556200028a565b828001600101855582156200028a579182015b82811115620002895782518255916020019190600101906200026c565b5b5090506200029991906200029d565b5090565b5b80821115620002b85760008160009055506001016200029e565b5090565b60006002820490506001821680620002d557607f821691505b60208210811415620002ec57620002eb620002f2565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61336e80620003316000396000f3fe6080604052600436106100f75760003560e01c806370a082311161008a578063c87b56dd11610059578063c87b56dd14610345578063cd03f9b314610382578063cf378343146103ab578063e985e9c5146103e8576100fe565b806370a082311461028b57806395d89b41146102c8578063a22cb465146102f3578063b88d4fde1461031c576100fe565b8063188af657116100c6578063188af657146101d157806323b872dd146101fc57806342842e0e146102255780636352211e1461024e576100fe565b806301ffc9a71461010357806306fdde0314610140578063081812fc1461016b578063095ea7b3146101a8576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190612356565b610425565b60405161013791906127de565b60405180910390f35b34801561014c57600080fd5b50610155610507565b60405161016291906127f9565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d91906123f9565b610599565b60405161019f9190612777565b60405180910390f35b3480156101b457600080fd5b506101cf60048036038101906101ca91906122e9565b61061e565b005b3480156101dd57600080fd5b506101e6610736565b6040516101f391906127de565b60405180910390f35b34801561020857600080fd5b50610223600480360381019061021e9190612177565b610875565b005b34801561023157600080fd5b5061024c60048036038101906102479190612177565b6108d5565b005b34801561025a57600080fd5b50610275600480360381019061027091906123f9565b6108f5565b6040516102829190612777565b60405180910390f35b34801561029757600080fd5b506102b260048036038101906102ad91906120dd565b6109a7565b6040516102bf9190612a1b565b60405180910390f35b3480156102d457600080fd5b506102dd610a5f565b6040516102ea91906127f9565b60405180910390f35b3480156102ff57600080fd5b5061031a6004803603810190610315919061224d565b610af1565b005b34801561032857600080fd5b50610343600480360381019061033e91906121ca565b610b07565b005b34801561035157600080fd5b5061036c600480360381019061036791906123f9565b610b69565b60405161037991906127f9565b60405180910390f35b34801561038e57600080fd5b506103a960048036038101906103a491906123b0565b610cbb565b005b3480156103b757600080fd5b506103d260048036038101906103cd919061228d565b61103e565b6040516103df9190612a1b565b60405180910390f35b3480156103f457600080fd5b5061040f600480360381019061040a9190612137565b611124565b60405161041c91906127de565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104f057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061050057506104ff826111b8565b5b9050919050565b60606000805461051690612c71565b80601f016020809104026020016040519081016040528092919081815260200182805461054290612c71565b801561058f5780601f106105645761010080835404028352916020019161058f565b820191906000526020600020905b81548152906001019060200180831161057257829003601f168201915b5050505050905090565b60006105a482611222565b6105e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105da9061299b565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610629826108f5565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561069a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610691906129db565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106b961128e565b73ffffffffffffffffffffffffffffffffffffffff1614806106e857506106e7816106e261128e565b611124565b5b610727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071e906128db565b60405180910390fd5b6107318383611296565b505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee95feaf336040518263ffffffff1660e01b81526004016107939190612777565b60206040518083038186803b1580156107ab57600080fd5b505afa1580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190612329565b6107ec57600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0c862896040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561085657600080fd5b505af115801561086a573d6000803e3d6000fd5b505050506001905090565b61088661088061128e565b8261134f565b6108c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bc906129fb565b60405180910390fd5b6108d083838361142d565b505050565b6108f083838360405180602001604052806000815250610b07565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561099e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109959061291b565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0f906128fb565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610a6e90612c71565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9a90612c71565b8015610ae75780601f10610abc57610100808354040283529160200191610ae7565b820191906000526020600020905b815481529060010190602001808311610aca57829003601f168201915b5050505050905090565b610b03610afc61128e565b8383611694565b5050565b610b18610b1261128e565b8361134f565b610b57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4e906129fb565b60405180910390fd5b610b6384848484611801565b50505050565b6060610b7482611222565b610bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610baa9061297b565b60405180910390fd5b6000600660008481526020019081526020016000208054610bd390612c71565b80601f0160208091040260200160405190810160405280929190818152602001828054610bff90612c71565b8015610c4c5780601f10610c2157610100808354040283529160200191610c4c565b820191906000526020600020905b815481529060010190602001808311610c2f57829003601f168201915b505050505090506000610c5d61185d565b9050600081511415610c73578192505050610cb6565b600082511115610ca8578082604051602001610c90929190612753565b60405160208183030381529060405292505050610cb6565b610cb184611874565b925050505b919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee95feaf336040518263ffffffff1660e01b8152600401610d169190612777565b60206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190612329565b610d6f57600080fd5b60006001600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639eb067f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610ddb57600080fd5b505afa158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e139190612426565b610e1d9190612b87565b9050600081600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f8073da66040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8a57600080fd5b505afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190612426565b610ecc9190612d1d565b90506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166397988dce836040518263ffffffff1660e01b8152600401610f2b9190612a1b565b60206040518083038186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7b9190612426565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401610fda9190612a1b565b60206040518083038186803b158015610ff257600080fd5b505afa158015611006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102a919061210a565b9050611036818661103e565b505050505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee95feaf336040518263ffffffff1660e01b815260040161109b9190612777565b60206040518083038186803b1580156110b357600080fd5b505afa1580156110c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110eb9190612329565b6110f457600080fd5b6110fe600761191b565b6111086007611931565b9050611114838261193f565b61111e8183611b19565b92915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611309836108f5565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061135a82611222565b611399576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611390906128bb565b60405180910390fd5b60006113a4836108f5565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113e657506113e58185611124565b5b8061142457508373ffffffffffffffffffffffffffffffffffffffff1661140c84610599565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661144d826108f5565b73ffffffffffffffffffffffffffffffffffffffff16146114a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149a9061283b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150a9061287b565b60405180910390fd5b61151e838383611b8d565b611529600082611296565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115799190612b87565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115d09190612b00565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461168f838383611b92565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fa9061289b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516117f491906127de565b60405180910390a3505050565b61180c84848461142d565b61181884848484611b97565b611857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184e9061281b565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061187f82611222565b6118be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b5906129bb565b60405180910390fd5b60006118c861185d565b905060008151116118e85760405180602001604052806000815250611913565b806118f284611d2e565b604051602001611903929190612753565b6040516020818303038152906040525b915050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a69061295b565b60405180910390fd5b6119b881611222565b156119f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ef9061285b565b60405180910390fd5b611a0460008383611b8d565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a549190612b00565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611b1560008383611b92565b5050565b611b2282611222565b611b61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b589061293b565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611b88929190611eb2565b505050565b505050565b505050565b6000611bb88473ffffffffffffffffffffffffffffffffffffffff16611e8f565b15611d21578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611be161128e565b8786866040518563ffffffff1660e01b8152600401611c039493929190612792565b602060405180830381600087803b158015611c1d57600080fd5b505af1925050508015611c4e57506040513d601f19601f82011682018060405250810190611c4b9190612383565b60015b611cd1573d8060008114611c7e576040519150601f19603f3d011682016040523d82523d6000602084013e611c83565b606091505b50600081511415611cc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc09061281b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611d26565b600190505b949350505050565b60606000821415611d76576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611e8a565b600082905060005b60008214611da8578080611d9190612cd4565b915050600a82611da19190612b56565b9150611d7e565b60008167ffffffffffffffff811115611dc457611dc3612e0a565b5b6040519080825280601f01601f191660200182016040528015611df65781602001600182028036833780820191505090505b5090505b60008514611e8357600182611e0f9190612b87565b9150600a85611e1e9190612d1d565b6030611e2a9190612b00565b60f81b818381518110611e4057611e3f612ddb565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611e7c9190612b56565b9450611dfa565b8093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611ebe90612c71565b90600052602060002090601f016020900481019282611ee05760008555611f27565b82601f10611ef957805160ff1916838001178555611f27565b82800160010185558215611f27579182015b82811115611f26578251825591602001919060010190611f0b565b5b509050611f349190611f38565b5090565b5b80821115611f51576000816000905550600101611f39565b5090565b6000611f68611f6384612a5b565b612a36565b905082815260208101848484011115611f8457611f83612e3e565b5b611f8f848285612c2f565b509392505050565b6000611faa611fa584612a8c565b612a36565b905082815260208101848484011115611fc657611fc5612e3e565b5b611fd1848285612c2f565b509392505050565b600081359050611fe8816132dc565b92915050565b600081519050611ffd816132dc565b92915050565b600081359050612012816132f3565b92915050565b600081519050612027816132f3565b92915050565b60008135905061203c8161330a565b92915050565b6000815190506120518161330a565b92915050565b600082601f83011261206c5761206b612e39565b5b813561207c848260208601611f55565b91505092915050565b600082601f83011261209a57612099612e39565b5b81356120aa848260208601611f97565b91505092915050565b6000813590506120c281613321565b92915050565b6000815190506120d781613321565b92915050565b6000602082840312156120f3576120f2612e48565b5b600061210184828501611fd9565b91505092915050565b6000602082840312156121205761211f612e48565b5b600061212e84828501611fee565b91505092915050565b6000806040838503121561214e5761214d612e48565b5b600061215c85828601611fd9565b925050602061216d85828601611fd9565b9150509250929050565b6000806000606084860312156121905761218f612e48565b5b600061219e86828701611fd9565b93505060206121af86828701611fd9565b92505060406121c0868287016120b3565b9150509250925092565b600080600080608085870312156121e4576121e3612e48565b5b60006121f287828801611fd9565b945050602061220387828801611fd9565b9350506040612214878288016120b3565b925050606085013567ffffffffffffffff81111561223557612234612e43565b5b61224187828801612057565b91505092959194509250565b6000806040838503121561226457612263612e48565b5b600061227285828601611fd9565b925050602061228385828601612003565b9150509250929050565b600080604083850312156122a4576122a3612e48565b5b60006122b285828601611fd9565b925050602083013567ffffffffffffffff8111156122d3576122d2612e43565b5b6122df85828601612085565b9150509250929050565b60008060408385031215612300576122ff612e48565b5b600061230e85828601611fd9565b925050602061231f858286016120b3565b9150509250929050565b60006020828403121561233f5761233e612e48565b5b600061234d84828501612018565b91505092915050565b60006020828403121561236c5761236b612e48565b5b600061237a8482850161202d565b91505092915050565b60006020828403121561239957612398612e48565b5b60006123a784828501612042565b91505092915050565b6000602082840312156123c6576123c5612e48565b5b600082013567ffffffffffffffff8111156123e4576123e3612e43565b5b6123f084828501612085565b91505092915050565b60006020828403121561240f5761240e612e48565b5b600061241d848285016120b3565b91505092915050565b60006020828403121561243c5761243b612e48565b5b600061244a848285016120c8565b91505092915050565b61245c81612bbb565b82525050565b61246b81612bcd565b82525050565b600061247c82612abd565b6124868185612ad3565b9350612496818560208601612c3e565b61249f81612e4d565b840191505092915050565b60006124b582612ac8565b6124bf8185612ae4565b93506124cf818560208601612c3e565b6124d881612e4d565b840191505092915050565b60006124ee82612ac8565b6124f88185612af5565b9350612508818560208601612c3e565b80840191505092915050565b6000612521603283612ae4565b915061252c82612e5e565b604082019050919050565b6000612544602583612ae4565b915061254f82612ead565b604082019050919050565b6000612567601c83612ae4565b915061257282612efc565b602082019050919050565b600061258a602483612ae4565b915061259582612f25565b604082019050919050565b60006125ad601983612ae4565b91506125b882612f74565b602082019050919050565b60006125d0602c83612ae4565b91506125db82612f9d565b604082019050919050565b60006125f3603883612ae4565b91506125fe82612fec565b604082019050919050565b6000612616602a83612ae4565b91506126218261303b565b604082019050919050565b6000612639602983612ae4565b91506126448261308a565b604082019050919050565b600061265c602e83612ae4565b9150612667826130d9565b604082019050919050565b600061267f602083612ae4565b915061268a82613128565b602082019050919050565b60006126a2603183612ae4565b91506126ad82613151565b604082019050919050565b60006126c5602c83612ae4565b91506126d0826131a0565b604082019050919050565b60006126e8602f83612ae4565b91506126f3826131ef565b604082019050919050565b600061270b602183612ae4565b91506127168261323e565b604082019050919050565b600061272e603183612ae4565b91506127398261328d565b604082019050919050565b61274d81612c25565b82525050565b600061275f82856124e3565b915061276b82846124e3565b91508190509392505050565b600060208201905061278c6000830184612453565b92915050565b60006080820190506127a76000830187612453565b6127b46020830186612453565b6127c16040830185612744565b81810360608301526127d38184612471565b905095945050505050565b60006020820190506127f36000830184612462565b92915050565b6000602082019050818103600083015261281381846124aa565b905092915050565b6000602082019050818103600083015261283481612514565b9050919050565b6000602082019050818103600083015261285481612537565b9050919050565b600060208201905081810360008301526128748161255a565b9050919050565b600060208201905081810360008301526128948161257d565b9050919050565b600060208201905081810360008301526128b4816125a0565b9050919050565b600060208201905081810360008301526128d4816125c3565b9050919050565b600060208201905081810360008301526128f4816125e6565b9050919050565b6000602082019050818103600083015261291481612609565b9050919050565b600060208201905081810360008301526129348161262c565b9050919050565b600060208201905081810360008301526129548161264f565b9050919050565b6000602082019050818103600083015261297481612672565b9050919050565b6000602082019050818103600083015261299481612695565b9050919050565b600060208201905081810360008301526129b4816126b8565b9050919050565b600060208201905081810360008301526129d4816126db565b9050919050565b600060208201905081810360008301526129f4816126fe565b9050919050565b60006020820190508181036000830152612a1481612721565b9050919050565b6000602082019050612a306000830184612744565b92915050565b6000612a40612a51565b9050612a4c8282612ca3565b919050565b6000604051905090565b600067ffffffffffffffff821115612a7657612a75612e0a565b5b612a7f82612e4d565b9050602081019050919050565b600067ffffffffffffffff821115612aa757612aa6612e0a565b5b612ab082612e4d565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612b0b82612c25565b9150612b1683612c25565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b4b57612b4a612d4e565b5b828201905092915050565b6000612b6182612c25565b9150612b6c83612c25565b925082612b7c57612b7b612d7d565b5b828204905092915050565b6000612b9282612c25565b9150612b9d83612c25565b925082821015612bb057612baf612d4e565b5b828203905092915050565b6000612bc682612c05565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612c5c578082015181840152602081019050612c41565b83811115612c6b576000848401525b50505050565b60006002820490506001821680612c8957607f821691505b60208210811415612c9d57612c9c612dac565b5b50919050565b612cac82612e4d565b810181811067ffffffffffffffff82111715612ccb57612cca612e0a565b5b80604052505050565b6000612cdf82612c25565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d1257612d11612d4e565b5b600182019050919050565b6000612d2882612c25565b9150612d3383612c25565b925082612d4357612d42612d7d565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6132e581612bbb565b81146132f057600080fd5b50565b6132fc81612bcd565b811461330757600080fd5b50565b61331381612bd9565b811461331e57600080fd5b50565b61332a81612c25565b811461333557600080fd5b5056fea2646970667358221220de44360692073b7d9b7108ff3639b9df0ecc877a748fb8778f03fa0686cd0a6e64736f6c63430008070033","deployedBytecode":"0x6080604052600436106100f75760003560e01c806370a082311161008a578063c87b56dd11610059578063c87b56dd14610345578063cd03f9b314610382578063cf378343146103ab578063e985e9c5146103e8576100fe565b806370a082311461028b57806395d89b41146102c8578063a22cb465146102f3578063b88d4fde1461031c576100fe565b8063188af657116100c6578063188af657146101d157806323b872dd146101fc57806342842e0e146102255780636352211e1461024e576100fe565b806301ffc9a71461010357806306fdde0314610140578063081812fc1461016b578063095ea7b3146101a8576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190612356565b610425565b60405161013791906127de565b60405180910390f35b34801561014c57600080fd5b50610155610507565b60405161016291906127f9565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d91906123f9565b610599565b60405161019f9190612777565b60405180910390f35b3480156101b457600080fd5b506101cf60048036038101906101ca91906122e9565b61061e565b005b3480156101dd57600080fd5b506101e6610736565b6040516101f391906127de565b60405180910390f35b34801561020857600080fd5b50610223600480360381019061021e9190612177565b610875565b005b34801561023157600080fd5b5061024c60048036038101906102479190612177565b6108d5565b005b34801561025a57600080fd5b50610275600480360381019061027091906123f9565b6108f5565b6040516102829190612777565b60405180910390f35b34801561029757600080fd5b506102b260048036038101906102ad91906120dd565b6109a7565b6040516102bf9190612a1b565b60405180910390f35b3480156102d457600080fd5b506102dd610a5f565b6040516102ea91906127f9565b60405180910390f35b3480156102ff57600080fd5b5061031a6004803603810190610315919061224d565b610af1565b005b34801561032857600080fd5b50610343600480360381019061033e91906121ca565b610b07565b005b34801561035157600080fd5b5061036c600480360381019061036791906123f9565b610b69565b60405161037991906127f9565b60405180910390f35b34801561038e57600080fd5b506103a960048036038101906103a491906123b0565b610cbb565b005b3480156103b757600080fd5b506103d260048036038101906103cd919061228d565b61103e565b6040516103df9190612a1b565b60405180910390f35b3480156103f457600080fd5b5061040f600480360381019061040a9190612137565b611124565b60405161041c91906127de565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104f057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061050057506104ff826111b8565b5b9050919050565b60606000805461051690612c71565b80601f016020809104026020016040519081016040528092919081815260200182805461054290612c71565b801561058f5780601f106105645761010080835404028352916020019161058f565b820191906000526020600020905b81548152906001019060200180831161057257829003601f168201915b5050505050905090565b60006105a482611222565b6105e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105da9061299b565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610629826108f5565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561069a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610691906129db565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106b961128e565b73ffffffffffffffffffffffffffffffffffffffff1614806106e857506106e7816106e261128e565b611124565b5b610727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071e906128db565b60405180910390fd5b6107318383611296565b505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee95feaf336040518263ffffffff1660e01b81526004016107939190612777565b60206040518083038186803b1580156107ab57600080fd5b505afa1580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190612329565b6107ec57600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0c862896040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561085657600080fd5b505af115801561086a573d6000803e3d6000fd5b505050506001905090565b61088661088061128e565b8261134f565b6108c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bc906129fb565b60405180910390fd5b6108d083838361142d565b505050565b6108f083838360405180602001604052806000815250610b07565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561099e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109959061291b565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0f906128fb565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610a6e90612c71565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9a90612c71565b8015610ae75780601f10610abc57610100808354040283529160200191610ae7565b820191906000526020600020905b815481529060010190602001808311610aca57829003601f168201915b5050505050905090565b610b03610afc61128e565b8383611694565b5050565b610b18610b1261128e565b8361134f565b610b57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4e906129fb565b60405180910390fd5b610b6384848484611801565b50505050565b6060610b7482611222565b610bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610baa9061297b565b60405180910390fd5b6000600660008481526020019081526020016000208054610bd390612c71565b80601f0160208091040260200160405190810160405280929190818152602001828054610bff90612c71565b8015610c4c5780601f10610c2157610100808354040283529160200191610c4c565b820191906000526020600020905b815481529060010190602001808311610c2f57829003601f168201915b505050505090506000610c5d61185d565b9050600081511415610c73578192505050610cb6565b600082511115610ca8578082604051602001610c90929190612753565b60405160208183030381529060405292505050610cb6565b610cb184611874565b925050505b919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee95feaf336040518263ffffffff1660e01b8152600401610d169190612777565b60206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190612329565b610d6f57600080fd5b60006001600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639eb067f56040518163ffffffff1660e01b815260040160206040518083038186803b158015610ddb57600080fd5b505afa158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e139190612426565b610e1d9190612b87565b9050600081600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f8073da66040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8a57600080fd5b505afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190612426565b610ecc9190612d1d565b90506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166397988dce836040518263ffffffff1660e01b8152600401610f2b9190612a1b565b60206040518083038186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7b9190612426565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b8152600401610fda9190612a1b565b60206040518083038186803b158015610ff257600080fd5b505afa158015611006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102a919061210a565b9050611036818661103e565b505050505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee95feaf336040518263ffffffff1660e01b815260040161109b9190612777565b60206040518083038186803b1580156110b357600080fd5b505afa1580156110c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110eb9190612329565b6110f457600080fd5b6110fe600761191b565b6111086007611931565b9050611114838261193f565b61111e8183611b19565b92915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611309836108f5565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061135a82611222565b611399576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611390906128bb565b60405180910390fd5b60006113a4836108f5565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113e657506113e58185611124565b5b8061142457508373ffffffffffffffffffffffffffffffffffffffff1661140c84610599565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661144d826108f5565b73ffffffffffffffffffffffffffffffffffffffff16146114a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149a9061283b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150a9061287b565b60405180910390fd5b61151e838383611b8d565b611529600082611296565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115799190612b87565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115d09190612b00565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461168f838383611b92565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fa9061289b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516117f491906127de565b60405180910390a3505050565b61180c84848461142d565b61181884848484611b97565b611857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184e9061281b565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061187f82611222565b6118be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b5906129bb565b60405180910390fd5b60006118c861185d565b905060008151116118e85760405180602001604052806000815250611913565b806118f284611d2e565b604051602001611903929190612753565b6040516020818303038152906040525b915050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a69061295b565b60405180910390fd5b6119b881611222565b156119f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ef9061285b565b60405180910390fd5b611a0460008383611b8d565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a549190612b00565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611b1560008383611b92565b5050565b611b2282611222565b611b61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b589061293b565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611b88929190611eb2565b505050565b505050565b505050565b6000611bb88473ffffffffffffffffffffffffffffffffffffffff16611e8f565b15611d21578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611be161128e565b8786866040518563ffffffff1660e01b8152600401611c039493929190612792565b602060405180830381600087803b158015611c1d57600080fd5b505af1925050508015611c4e57506040513d601f19601f82011682018060405250810190611c4b9190612383565b60015b611cd1573d8060008114611c7e576040519150601f19603f3d011682016040523d82523d6000602084013e611c83565b606091505b50600081511415611cc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc09061281b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611d26565b600190505b949350505050565b60606000821415611d76576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611e8a565b600082905060005b60008214611da8578080611d9190612cd4565b915050600a82611da19190612b56565b9150611d7e565b60008167ffffffffffffffff811115611dc457611dc3612e0a565b5b6040519080825280601f01601f191660200182016040528015611df65781602001600182028036833780820191505090505b5090505b60008514611e8357600182611e0f9190612b87565b9150600a85611e1e9190612d1d565b6030611e2a9190612b00565b60f81b818381518110611e4057611e3f612ddb565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611e7c9190612b56565b9450611dfa565b8093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611ebe90612c71565b90600052602060002090601f016020900481019282611ee05760008555611f27565b82601f10611ef957805160ff1916838001178555611f27565b82800160010185558215611f27579182015b82811115611f26578251825591602001919060010190611f0b565b5b509050611f349190611f38565b5090565b5b80821115611f51576000816000905550600101611f39565b5090565b6000611f68611f6384612a5b565b612a36565b905082815260208101848484011115611f8457611f83612e3e565b5b611f8f848285612c2f565b509392505050565b6000611faa611fa584612a8c565b612a36565b905082815260208101848484011115611fc657611fc5612e3e565b5b611fd1848285612c2f565b509392505050565b600081359050611fe8816132dc565b92915050565b600081519050611ffd816132dc565b92915050565b600081359050612012816132f3565b92915050565b600081519050612027816132f3565b92915050565b60008135905061203c8161330a565b92915050565b6000815190506120518161330a565b92915050565b600082601f83011261206c5761206b612e39565b5b813561207c848260208601611f55565b91505092915050565b600082601f83011261209a57612099612e39565b5b81356120aa848260208601611f97565b91505092915050565b6000813590506120c281613321565b92915050565b6000815190506120d781613321565b92915050565b6000602082840312156120f3576120f2612e48565b5b600061210184828501611fd9565b91505092915050565b6000602082840312156121205761211f612e48565b5b600061212e84828501611fee565b91505092915050565b6000806040838503121561214e5761214d612e48565b5b600061215c85828601611fd9565b925050602061216d85828601611fd9565b9150509250929050565b6000806000606084860312156121905761218f612e48565b5b600061219e86828701611fd9565b93505060206121af86828701611fd9565b92505060406121c0868287016120b3565b9150509250925092565b600080600080608085870312156121e4576121e3612e48565b5b60006121f287828801611fd9565b945050602061220387828801611fd9565b9350506040612214878288016120b3565b925050606085013567ffffffffffffffff81111561223557612234612e43565b5b61224187828801612057565b91505092959194509250565b6000806040838503121561226457612263612e48565b5b600061227285828601611fd9565b925050602061228385828601612003565b9150509250929050565b600080604083850312156122a4576122a3612e48565b5b60006122b285828601611fd9565b925050602083013567ffffffffffffffff8111156122d3576122d2612e43565b5b6122df85828601612085565b9150509250929050565b60008060408385031215612300576122ff612e48565b5b600061230e85828601611fd9565b925050602061231f858286016120b3565b9150509250929050565b60006020828403121561233f5761233e612e48565b5b600061234d84828501612018565b91505092915050565b60006020828403121561236c5761236b612e48565b5b600061237a8482850161202d565b91505092915050565b60006020828403121561239957612398612e48565b5b60006123a784828501612042565b91505092915050565b6000602082840312156123c6576123c5612e48565b5b600082013567ffffffffffffffff8111156123e4576123e3612e43565b5b6123f084828501612085565b91505092915050565b60006020828403121561240f5761240e612e48565b5b600061241d848285016120b3565b91505092915050565b60006020828403121561243c5761243b612e48565b5b600061244a848285016120c8565b91505092915050565b61245c81612bbb565b82525050565b61246b81612bcd565b82525050565b600061247c82612abd565b6124868185612ad3565b9350612496818560208601612c3e565b61249f81612e4d565b840191505092915050565b60006124b582612ac8565b6124bf8185612ae4565b93506124cf818560208601612c3e565b6124d881612e4d565b840191505092915050565b60006124ee82612ac8565b6124f88185612af5565b9350612508818560208601612c3e565b80840191505092915050565b6000612521603283612ae4565b915061252c82612e5e565b604082019050919050565b6000612544602583612ae4565b915061254f82612ead565b604082019050919050565b6000612567601c83612ae4565b915061257282612efc565b602082019050919050565b600061258a602483612ae4565b915061259582612f25565b604082019050919050565b60006125ad601983612ae4565b91506125b882612f74565b602082019050919050565b60006125d0602c83612ae4565b91506125db82612f9d565b604082019050919050565b60006125f3603883612ae4565b91506125fe82612fec565b604082019050919050565b6000612616602a83612ae4565b91506126218261303b565b604082019050919050565b6000612639602983612ae4565b91506126448261308a565b604082019050919050565b600061265c602e83612ae4565b9150612667826130d9565b604082019050919050565b600061267f602083612ae4565b915061268a82613128565b602082019050919050565b60006126a2603183612ae4565b91506126ad82613151565b604082019050919050565b60006126c5602c83612ae4565b91506126d0826131a0565b604082019050919050565b60006126e8602f83612ae4565b91506126f3826131ef565b604082019050919050565b600061270b602183612ae4565b91506127168261323e565b604082019050919050565b600061272e603183612ae4565b91506127398261328d565b604082019050919050565b61274d81612c25565b82525050565b600061275f82856124e3565b915061276b82846124e3565b91508190509392505050565b600060208201905061278c6000830184612453565b92915050565b60006080820190506127a76000830187612453565b6127b46020830186612453565b6127c16040830185612744565b81810360608301526127d38184612471565b905095945050505050565b60006020820190506127f36000830184612462565b92915050565b6000602082019050818103600083015261281381846124aa565b905092915050565b6000602082019050818103600083015261283481612514565b9050919050565b6000602082019050818103600083015261285481612537565b9050919050565b600060208201905081810360008301526128748161255a565b9050919050565b600060208201905081810360008301526128948161257d565b9050919050565b600060208201905081810360008301526128b4816125a0565b9050919050565b600060208201905081810360008301526128d4816125c3565b9050919050565b600060208201905081810360008301526128f4816125e6565b9050919050565b6000602082019050818103600083015261291481612609565b9050919050565b600060208201905081810360008301526129348161262c565b9050919050565b600060208201905081810360008301526129548161264f565b9050919050565b6000602082019050818103600083015261297481612672565b9050919050565b6000602082019050818103600083015261299481612695565b9050919050565b600060208201905081810360008301526129b4816126b8565b9050919050565b600060208201905081810360008301526129d4816126db565b9050919050565b600060208201905081810360008301526129f4816126fe565b9050919050565b60006020820190508181036000830152612a1481612721565b9050919050565b6000602082019050612a306000830184612744565b92915050565b6000612a40612a51565b9050612a4c8282612ca3565b919050565b6000604051905090565b600067ffffffffffffffff821115612a7657612a75612e0a565b5b612a7f82612e4d565b9050602081019050919050565b600067ffffffffffffffff821115612aa757612aa6612e0a565b5b612ab082612e4d565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612b0b82612c25565b9150612b1683612c25565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b4b57612b4a612d4e565b5b828201905092915050565b6000612b6182612c25565b9150612b6c83612c25565b925082612b7c57612b7b612d7d565b5b828204905092915050565b6000612b9282612c25565b9150612b9d83612c25565b925082821015612bb057612baf612d4e565b5b828203905092915050565b6000612bc682612c05565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612c5c578082015181840152602081019050612c41565b83811115612c6b576000848401525b50505050565b60006002820490506001821680612c8957607f821691505b60208210811415612c9d57612c9c612dac565b5b50919050565b612cac82612e4d565b810181811067ffffffffffffffff82111715612ccb57612cca612e0a565b5b80604052505050565b6000612cdf82612c25565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d1257612d11612d4e565b5b600182019050919050565b6000612d2882612c25565b9150612d3383612c25565b925082612d4357612d42612d7d565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6132e581612bbb565b81146132f057600080fd5b50565b6132fc81612bcd565b811461330757600080fd5b50565b61331381612bd9565b811461331e57600080fd5b50565b61332a81612c25565b811461333557600080fd5b5056fea2646970667358221220de44360692073b7d9b7108ff3639b9df0ecc877a748fb8778f03fa0686cd0a6e64736f6c63430008070033","linkReferences":{},"deployedLinkReferences":{}}');

},{}],"hdHML":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ethers", ()=>_ethers);
parcelHelpers.export(exports, "Signer", ()=>(0, _ethers.Signer));
parcelHelpers.export(exports, "Wallet", ()=>(0, _ethers.Wallet));
parcelHelpers.export(exports, "VoidSigner", ()=>(0, _ethers.VoidSigner));
parcelHelpers.export(exports, "getDefaultProvider", ()=>(0, _ethers.getDefaultProvider));
parcelHelpers.export(exports, "providers", ()=>(0, _ethers.providers));
parcelHelpers.export(exports, "BaseContract", ()=>(0, _ethers.BaseContract));
parcelHelpers.export(exports, "Contract", ()=>(0, _ethers.Contract));
parcelHelpers.export(exports, "ContractFactory", ()=>(0, _ethers.ContractFactory));
parcelHelpers.export(exports, "BigNumber", ()=>(0, _ethers.BigNumber));
parcelHelpers.export(exports, "FixedNumber", ()=>(0, _ethers.FixedNumber));
parcelHelpers.export(exports, "constants", ()=>(0, _ethers.constants));
parcelHelpers.export(exports, "errors", ()=>(0, _ethers.errors));
parcelHelpers.export(exports, "logger", ()=>(0, _ethers.logger));
parcelHelpers.export(exports, "utils", ()=>(0, _ethers.utils));
parcelHelpers.export(exports, "wordlists", ()=>(0, _ethers.wordlists));
parcelHelpers.export(exports, "version", ()=>(0, _ethers.version));
parcelHelpers.export(exports, "Wordlist", ()=>(0, _ethers.Wordlist));
// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js
var _ethers = require("./ethers");
"use strict";
try {
    const anyGlobal = window;
    if (anyGlobal._ethers == null) anyGlobal._ethers = _ethers;
} catch (error) {}

},{"./ethers":"LOU4X","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"LOU4X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
////////////////////////
// Exports
parcelHelpers.export(exports, "Signer", ()=>(0, _abstractSigner.Signer));
parcelHelpers.export(exports, "Wallet", ()=>(0, _wallet.Wallet));
parcelHelpers.export(exports, "VoidSigner", ()=>(0, _abstractSigner.VoidSigner));
parcelHelpers.export(exports, "getDefaultProvider", ()=>(0, _providers.getDefaultProvider));
parcelHelpers.export(exports, "providers", ()=>_providers);
parcelHelpers.export(exports, "BaseContract", ()=>(0, _contracts.BaseContract));
parcelHelpers.export(exports, "Contract", ()=>(0, _contracts.Contract));
parcelHelpers.export(exports, "ContractFactory", ()=>(0, _contracts.ContractFactory));
parcelHelpers.export(exports, "BigNumber", ()=>(0, _bignumber.BigNumber));
parcelHelpers.export(exports, "FixedNumber", ()=>(0, _bignumber.FixedNumber));
parcelHelpers.export(exports, "constants", ()=>_constants);
parcelHelpers.export(exports, "errors", ()=>(0, _logger.ErrorCode));
parcelHelpers.export(exports, "logger", ()=>logger);
parcelHelpers.export(exports, "utils", ()=>_utils);
parcelHelpers.export(exports, "wordlists", ()=>(0, _wordlists.wordlists));
parcelHelpers.export(exports, "version", ()=>////////////////////////
    // Compile-Time Constants
    (0, _version.version));
parcelHelpers.export(exports, "Wordlist", ()=>(0, _wordlists.Wordlist));
var _contracts = require("@ethersproject/contracts");
var _bignumber = require("@ethersproject/bignumber");
var _abstractSigner = require("@ethersproject/abstract-signer");
var _wallet = require("@ethersproject/wallet");
var _constants = require("@ethersproject/constants");
var _providers = require("@ethersproject/providers");
var _wordlists = require("@ethersproject/wordlists");
var _utils = require("./utils");
var _logger = require("@ethersproject/logger");
////////////////////////
// Compile-Time Constants
// This is generated by "npm run dist"
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));

},{"@ethersproject/contracts":"97okZ","@ethersproject/bignumber":"ckYYW","@ethersproject/abstract-signer":"g9Ey5","@ethersproject/wallet":"2DfhD","@ethersproject/constants":"gKbDE","@ethersproject/providers":"bErvj","@ethersproject/wordlists":"czmoZ","./utils":"1VLBZ","@ethersproject/logger":"hLvB2","./_version":"aosLW","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"97okZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseContract", ()=>BaseContract);
parcelHelpers.export(exports, "Contract", ()=>Contract);
parcelHelpers.export(exports, "ContractFactory", ()=>ContractFactory);
var _abi = require("@ethersproject/abi");
var _abstractProvider = require("@ethersproject/abstract-provider");
var _abstractSigner = require("@ethersproject/abstract-signer");
var _address = require("@ethersproject/address");
var _bignumber = require("@ethersproject/bignumber");
var _bytes = require("@ethersproject/bytes");
var _properties = require("@ethersproject/properties");
var _transactions = require("@ethersproject/transactions");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
///////////////////////////////
const allowedTransactionKeys = {
    chainId: true,
    data: true,
    from: true,
    gasLimit: true,
    gasPrice: true,
    nonce: true,
    to: true,
    value: true,
    type: true,
    accessList: true,
    maxFeePerGas: true,
    maxPriorityFeePerGas: true,
    customData: true,
    ccipReadEnabled: true
};
function resolveName(resolver, nameOrPromise) {
    return __awaiter(this, void 0, void 0, function*() {
        const name = yield nameOrPromise;
        if (typeof name !== "string") logger.throwArgumentError("invalid address or ENS name", "name", name);
        // If it is already an address, just use it (after adding checksum)
        try {
            return (0, _address.getAddress)(name);
        } catch (error) {}
        if (!resolver) logger.throwError("a provider or signer is needed to resolve ENS names", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "resolveName"
        });
        const address = yield resolver.resolveName(name);
        if (address == null) logger.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
        return address;
    });
}
// Recursively replaces ENS names with promises to resolve the name and resolves all properties
function resolveAddresses(resolver, value, paramType1) {
    return __awaiter(this, void 0, void 0, function*() {
        if (Array.isArray(paramType1)) return yield Promise.all(paramType1.map((paramType, index)=>{
            return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);
        }));
        if (paramType1.type === "address") return yield resolveName(resolver, value);
        if (paramType1.type === "tuple") return yield resolveAddresses(resolver, value, paramType1.components);
        if (paramType1.baseType === "array") {
            if (!Array.isArray(value)) return Promise.reject(logger.makeError("invalid value for array", (0, _logger.Logger).errors.INVALID_ARGUMENT, {
                argument: "value",
                value
            }));
            return yield Promise.all(value.map((v)=>resolveAddresses(resolver, v, paramType1.arrayChildren)));
        }
        return value;
    });
}
function populateTransaction(contract, fragment, args) {
    return __awaiter(this, void 0, void 0, function*() {
        // If an extra argument is given, it is overrides
        let overrides = {};
        if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") overrides = (0, _properties.shallowCopy)(args.pop());
        // Make sure the parameter count matches
        logger.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
        // Populate "from" override (allow promises)
        if (contract.signer) {
            if (overrides.from) // Contracts with a Signer are from the Signer's frame-of-reference;
            // but we allow overriding "from" if it matches the signer
            overrides.from = (0, _properties.resolveProperties)({
                override: resolveName(contract.signer, overrides.from),
                signer: contract.signer.getAddress()
            }).then((check)=>__awaiter(this, void 0, void 0, function*() {
                    if ((0, _address.getAddress)(check.signer) !== check.override) logger.throwError("Contract with a Signer cannot override from", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.from"
                    });
                    return check.override;
                }));
            else overrides.from = contract.signer.getAddress();
        } else if (overrides.from) overrides.from = resolveName(contract.provider, overrides.from);
        // Wait for all dependencies to be resolved (prefer the signer over the provider)
        const resolved = yield (0, _properties.resolveProperties)({
            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
            address: contract.resolvedAddress,
            overrides: (0, _properties.resolveProperties)(overrides) || {}
        });
        // The ABI coded transaction
        const data = contract.interface.encodeFunctionData(fragment, resolved.args);
        const tx = {
            data: data,
            to: resolved.address
        };
        // Resolved Overrides
        const ro = resolved.overrides;
        // Populate simple overrides
        if (ro.nonce != null) tx.nonce = (0, _bignumber.BigNumber).from(ro.nonce).toNumber();
        if (ro.gasLimit != null) tx.gasLimit = (0, _bignumber.BigNumber).from(ro.gasLimit);
        if (ro.gasPrice != null) tx.gasPrice = (0, _bignumber.BigNumber).from(ro.gasPrice);
        if (ro.maxFeePerGas != null) tx.maxFeePerGas = (0, _bignumber.BigNumber).from(ro.maxFeePerGas);
        if (ro.maxPriorityFeePerGas != null) tx.maxPriorityFeePerGas = (0, _bignumber.BigNumber).from(ro.maxPriorityFeePerGas);
        if (ro.from != null) tx.from = ro.from;
        if (ro.type != null) tx.type = ro.type;
        if (ro.accessList != null) tx.accessList = (0, _transactions.accessListify)(ro.accessList);
        // If there was no "gasLimit" override, but the ABI specifies a default, use it
        if (tx.gasLimit == null && fragment.gas != null) {
            // Compute the intrinsic gas cost for this transaction
            // @TODO: This is based on the yellow paper as of Petersburg; this is something
            // we may wish to parameterize in v6 as part of the Network object. Since this
            // is always a non-nil to address, we can ignore G_create, but may wish to add
            // similar logic to the ContractFactory.
            let intrinsic = 21000;
            const bytes = (0, _bytes.arrayify)(data);
            for(let i = 0; i < bytes.length; i++){
                intrinsic += 4;
                if (bytes[i]) intrinsic += 64;
            }
            tx.gasLimit = (0, _bignumber.BigNumber).from(fragment.gas).add(intrinsic);
        }
        // Populate "value" override
        if (ro.value) {
            const roValue = (0, _bignumber.BigNumber).from(ro.value);
            if (!roValue.isZero() && !fragment.payable) logger.throwError("non-payable method cannot override value", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: "overrides.value",
                value: overrides.value
            });
            tx.value = roValue;
        }
        if (ro.customData) tx.customData = (0, _properties.shallowCopy)(ro.customData);
        if (ro.ccipReadEnabled) tx.ccipReadEnabled = !!ro.ccipReadEnabled;
        // Remove the overrides
        delete overrides.nonce;
        delete overrides.gasLimit;
        delete overrides.gasPrice;
        delete overrides.from;
        delete overrides.value;
        delete overrides.type;
        delete overrides.accessList;
        delete overrides.maxFeePerGas;
        delete overrides.maxPriorityFeePerGas;
        delete overrides.customData;
        delete overrides.ccipReadEnabled;
        // Make sure there are no stray overrides, which may indicate a
        // typo or using an unsupported key.
        const leftovers = Object.keys(overrides).filter((key)=>overrides[key] != null);
        if (leftovers.length) logger.throwError(`cannot override ${leftovers.map((l)=>JSON.stringify(l)).join(",")}`, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "overrides",
            overrides: leftovers
        });
        return tx;
    });
}
function buildPopulate(contract, fragment) {
    return function(...args) {
        return populateTransaction(contract, fragment, args);
    };
}
function buildEstimate(contract, fragment) {
    const signerOrProvider = contract.signer || contract.provider;
    return function(...args) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!signerOrProvider) logger.throwError("estimate require a provider or signer", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: "estimateGas"
            });
            const tx = yield populateTransaction(contract, fragment, args);
            return yield signerOrProvider.estimateGas(tx);
        });
    };
}
function addContractWait(contract, tx) {
    const wait = tx.wait.bind(tx);
    tx.wait = (confirmations)=>{
        return wait(confirmations).then((receipt)=>{
            receipt.events = receipt.logs.map((log)=>{
                let event = (0, _properties.deepCopy)(log);
                let parsed = null;
                try {
                    parsed = contract.interface.parseLog(log);
                } catch (e) {}
                // Successfully parsed the event log; include it
                if (parsed) {
                    event.args = parsed.args;
                    event.decode = (data, topics)=>{
                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
                    };
                    event.event = parsed.name;
                    event.eventSignature = parsed.signature;
                }
                // Useful operations
                event.removeListener = ()=>{
                    return contract.provider;
                };
                event.getBlock = ()=>{
                    return contract.provider.getBlock(receipt.blockHash);
                };
                event.getTransaction = ()=>{
                    return contract.provider.getTransaction(receipt.transactionHash);
                };
                event.getTransactionReceipt = ()=>{
                    return Promise.resolve(receipt);
                };
                return event;
            });
            return receipt;
        });
    };
}
function buildCall(contract, fragment, collapseSimple) {
    const signerOrProvider = contract.signer || contract.provider;
    return function(...args) {
        return __awaiter(this, void 0, void 0, function*() {
            // Extract the "blockTag" override if present
            let blockTag = undefined;
            if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
                const overrides = (0, _properties.shallowCopy)(args.pop());
                if (overrides.blockTag != null) blockTag = yield overrides.blockTag;
                delete overrides.blockTag;
                args.push(overrides);
            }
            // If the contract was just deployed, wait until it is mined
            if (contract.deployTransaction != null) yield contract._deployed(blockTag);
            // Call a node and get the result
            const tx = yield populateTransaction(contract, fragment, args);
            const result = yield signerOrProvider.call(tx, blockTag);
            try {
                let value = contract.interface.decodeFunctionResult(fragment, result);
                if (collapseSimple && fragment.outputs.length === 1) value = value[0];
                return value;
            } catch (error) {
                if (error.code === (0, _logger.Logger).errors.CALL_EXCEPTION) {
                    error.address = contract.address;
                    error.args = args;
                    error.transaction = tx;
                }
                throw error;
            }
        });
    };
}
function buildSend(contract, fragment) {
    return function(...args) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!contract.signer) logger.throwError("sending a transaction requires a signer", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: "sendTransaction"
            });
            // If the contract was just deployed, wait until it is mined
            if (contract.deployTransaction != null) yield contract._deployed();
            const txRequest = yield populateTransaction(contract, fragment, args);
            const tx = yield contract.signer.sendTransaction(txRequest);
            // Tweak the tx.wait so the receipt has extra properties
            addContractWait(contract, tx);
            return tx;
        });
    };
}
function buildDefault(contract, fragment, collapseSimple) {
    if (fragment.constant) return buildCall(contract, fragment, collapseSimple);
    return buildSend(contract, fragment);
}
function getEventTag(filter) {
    if (filter.address && (filter.topics == null || filter.topics.length === 0)) return "*";
    return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic)=>{
        if (Array.isArray(topic)) return topic.join("|");
        return topic;
    }).join(":") : "");
}
class RunningEvent {
    constructor(tag, filter){
        (0, _properties.defineReadOnly)(this, "tag", tag);
        (0, _properties.defineReadOnly)(this, "filter", filter);
        this._listeners = [];
    }
    addListener(listener, once) {
        this._listeners.push({
            listener: listener,
            once: once
        });
    }
    removeListener(listener) {
        let done = false;
        this._listeners = this._listeners.filter((item)=>{
            if (done || item.listener !== listener) return true;
            done = true;
            return false;
        });
    }
    removeAllListeners() {
        this._listeners = [];
    }
    listeners() {
        return this._listeners.map((i)=>i.listener);
    }
    listenerCount() {
        return this._listeners.length;
    }
    run(args) {
        const listenerCount = this.listenerCount();
        this._listeners = this._listeners.filter((item)=>{
            const argsCopy = args.slice();
            // Call the callback in the next event loop
            setTimeout(()=>{
                item.listener.apply(this, argsCopy);
            }, 0);
            // Reschedule it if it not "once"
            return !item.once;
        });
        return listenerCount;
    }
    prepareEvent(event) {}
    // Returns the array that will be applied to an emit
    getEmit(event) {
        return [
            event
        ];
    }
}
class ErrorRunningEvent extends RunningEvent {
    constructor(){
        super("error", null);
    }
}
// @TODO Fragment should inherit Wildcard? and just override getEmit?
//       or have a common abstract super class, with enough constructor
//       options to configure both.
// A Fragment Event will populate all the properties that Wildcard
// will, and additionally dereference the arguments when emitting
class FragmentRunningEvent extends RunningEvent {
    constructor(address, contractInterface, fragment, topics){
        const filter = {
            address: address
        };
        let topic = contractInterface.getEventTopic(fragment);
        if (topics) {
            if (topic !== topics[0]) logger.throwArgumentError("topic mismatch", "topics", topics);
            filter.topics = topics.slice();
        } else filter.topics = [
            topic
        ];
        super(getEventTag(filter), filter);
        (0, _properties.defineReadOnly)(this, "address", address);
        (0, _properties.defineReadOnly)(this, "interface", contractInterface);
        (0, _properties.defineReadOnly)(this, "fragment", fragment);
    }
    prepareEvent(event) {
        super.prepareEvent(event);
        event.event = this.fragment.name;
        event.eventSignature = this.fragment.format();
        event.decode = (data, topics)=>{
            return this.interface.decodeEventLog(this.fragment, data, topics);
        };
        try {
            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
        } catch (error) {
            event.args = null;
            event.decodeError = error;
        }
    }
    getEmit(event) {
        const errors = (0, _abi.checkResultErrors)(event.args);
        if (errors.length) throw errors[0].error;
        const args = (event.args || []).slice();
        args.push(event);
        return args;
    }
}
// A Wildcard Event will attempt to populate:
//  - event            The name of the event name
//  - eventSignature   The full signature of the event
//  - decode           A function to decode data and topics
//  - args             The decoded data and topics
class WildcardRunningEvent extends RunningEvent {
    constructor(address, contractInterface){
        super("*", {
            address: address
        });
        (0, _properties.defineReadOnly)(this, "address", address);
        (0, _properties.defineReadOnly)(this, "interface", contractInterface);
    }
    prepareEvent(event) {
        super.prepareEvent(event);
        try {
            const parsed = this.interface.parseLog(event);
            event.event = parsed.name;
            event.eventSignature = parsed.signature;
            event.decode = (data, topics)=>{
                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
            };
            event.args = parsed.args;
        } catch (error) {
        // No matching event
        }
    }
}
class BaseContract {
    constructor(addressOrName, contractInterface, signerOrProvider){
        // @TODO: Maybe still check the addressOrName looks like a valid address or name?
        //address = getAddress(address);
        (0, _properties.defineReadOnly)(this, "interface", (0, _properties.getStatic)(new.target, "getInterface")(contractInterface));
        if (signerOrProvider == null) {
            (0, _properties.defineReadOnly)(this, "provider", null);
            (0, _properties.defineReadOnly)(this, "signer", null);
        } else if ((0, _abstractSigner.Signer).isSigner(signerOrProvider)) {
            (0, _properties.defineReadOnly)(this, "provider", signerOrProvider.provider || null);
            (0, _properties.defineReadOnly)(this, "signer", signerOrProvider);
        } else if ((0, _abstractProvider.Provider).isProvider(signerOrProvider)) {
            (0, _properties.defineReadOnly)(this, "provider", signerOrProvider);
            (0, _properties.defineReadOnly)(this, "signer", null);
        } else logger.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
        (0, _properties.defineReadOnly)(this, "callStatic", {});
        (0, _properties.defineReadOnly)(this, "estimateGas", {});
        (0, _properties.defineReadOnly)(this, "functions", {});
        (0, _properties.defineReadOnly)(this, "populateTransaction", {});
        (0, _properties.defineReadOnly)(this, "filters", {});
        {
            const uniqueFilters = {};
            Object.keys(this.interface.events).forEach((eventSignature)=>{
                const event = this.interface.events[eventSignature];
                (0, _properties.defineReadOnly)(this.filters, eventSignature, (...args)=>{
                    return {
                        address: this.address,
                        topics: this.interface.encodeFilterTopics(event, args)
                    };
                });
                if (!uniqueFilters[event.name]) uniqueFilters[event.name] = [];
                uniqueFilters[event.name].push(eventSignature);
            });
            Object.keys(uniqueFilters).forEach((name)=>{
                const filters = uniqueFilters[name];
                if (filters.length === 1) (0, _properties.defineReadOnly)(this.filters, name, this.filters[filters[0]]);
                else logger.warn(`Duplicate definition of ${name} (${filters.join(", ")})`);
            });
        }
        (0, _properties.defineReadOnly)(this, "_runningEvents", {});
        (0, _properties.defineReadOnly)(this, "_wrappedEmits", {});
        if (addressOrName == null) logger.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
        (0, _properties.defineReadOnly)(this, "address", addressOrName);
        if (this.provider) (0, _properties.defineReadOnly)(this, "resolvedAddress", resolveName(this.provider, addressOrName));
        else try {
            (0, _properties.defineReadOnly)(this, "resolvedAddress", Promise.resolve((0, _address.getAddress)(addressOrName)));
        } catch (error) {
            // Without a provider, we cannot use ENS names
            logger.throwError("provider is required to use ENS name as contract address", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: "new Contract"
            });
        }
        // Swallow bad ENS names to prevent Unhandled Exceptions
        this.resolvedAddress.catch((e)=>{});
        const uniqueNames = {};
        const uniqueSignatures = {};
        Object.keys(this.interface.functions).forEach((signature)=>{
            const fragment = this.interface.functions[signature];
            // Check that the signature is unique; if not the ABI generation has
            // not been cleaned or may be incorrectly generated
            if (uniqueSignatures[signature]) {
                logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);
                return;
            }
            uniqueSignatures[signature] = true;
            // Track unique names; we only expose bare named functions if they
            // are ambiguous
            {
                const name = fragment.name;
                if (!uniqueNames[`%${name}`]) uniqueNames[`%${name}`] = [];
                uniqueNames[`%${name}`].push(signature);
            }
            if (this[signature] == null) (0, _properties.defineReadOnly)(this, signature, buildDefault(this, fragment, true));
            // We do not collapse simple calls on this bucket, which allows
            // frameworks to safely use this without introspection as well as
            // allows decoding error recovery.
            if (this.functions[signature] == null) (0, _properties.defineReadOnly)(this.functions, signature, buildDefault(this, fragment, false));
            if (this.callStatic[signature] == null) (0, _properties.defineReadOnly)(this.callStatic, signature, buildCall(this, fragment, true));
            if (this.populateTransaction[signature] == null) (0, _properties.defineReadOnly)(this.populateTransaction, signature, buildPopulate(this, fragment));
            if (this.estimateGas[signature] == null) (0, _properties.defineReadOnly)(this.estimateGas, signature, buildEstimate(this, fragment));
        });
        Object.keys(uniqueNames).forEach((name)=>{
            // Ambiguous names to not get attached as bare names
            const signatures = uniqueNames[name];
            if (signatures.length > 1) return;
            // Strip off the leading "%" used for prototype protection
            name = name.substring(1);
            const signature = signatures[0];
            // If overwriting a member property that is null, swallow the error
            try {
                if (this[name] == null) (0, _properties.defineReadOnly)(this, name, this[signature]);
            } catch (e) {}
            if (this.functions[name] == null) (0, _properties.defineReadOnly)(this.functions, name, this.functions[signature]);
            if (this.callStatic[name] == null) (0, _properties.defineReadOnly)(this.callStatic, name, this.callStatic[signature]);
            if (this.populateTransaction[name] == null) (0, _properties.defineReadOnly)(this.populateTransaction, name, this.populateTransaction[signature]);
            if (this.estimateGas[name] == null) (0, _properties.defineReadOnly)(this.estimateGas, name, this.estimateGas[signature]);
        });
    }
    static getContractAddress(transaction) {
        return (0, _address.getContractAddress)(transaction);
    }
    static getInterface(contractInterface) {
        if ((0, _abi.Interface).isInterface(contractInterface)) return contractInterface;
        return new (0, _abi.Interface)(contractInterface);
    }
    // @TODO: Allow timeout?
    deployed() {
        return this._deployed();
    }
    _deployed(blockTag) {
        if (!this._deployedPromise) {
            // If we were just deployed, we know the transaction we should occur in
            if (this.deployTransaction) this._deployedPromise = this.deployTransaction.wait().then(()=>{
                return this;
            });
            else // @TODO: Once we allow a timeout to be passed in, we will wait
            // up to that many blocks for getCode
            // Otherwise, poll for our code to be deployed
            this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code)=>{
                if (code === "0x") logger.throwError("contract not deployed", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                    contractAddress: this.address,
                    operation: "getDeployed"
                });
                return this;
            });
        }
        return this._deployedPromise;
    }
    // @TODO:
    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
    // @TODO:
    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
    fallback(overrides) {
        if (!this.signer) logger.throwError("sending a transactions require a signer", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "sendTransaction(fallback)"
        });
        const tx = (0, _properties.shallowCopy)(overrides || {});
        [
            "from",
            "to"
        ].forEach(function(key) {
            if (tx[key] == null) return;
            logger.throwError("cannot override " + key, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: key
            });
        });
        tx.to = this.resolvedAddress;
        return this.deployed().then(()=>{
            return this.signer.sendTransaction(tx);
        });
    }
    // Reconnect to a different signer or provider
    connect(signerOrProvider) {
        if (typeof signerOrProvider === "string") signerOrProvider = new (0, _abstractSigner.VoidSigner)(signerOrProvider, this.provider);
        const contract = new this.constructor(this.address, this.interface, signerOrProvider);
        if (this.deployTransaction) (0, _properties.defineReadOnly)(contract, "deployTransaction", this.deployTransaction);
        return contract;
    }
    // Re-attach to a different on-chain instance of this contract
    attach(addressOrName) {
        return new this.constructor(addressOrName, this.interface, this.signer || this.provider);
    }
    static isIndexed(value) {
        return (0, _abi.Indexed).isIndexed(value);
    }
    _normalizeRunningEvent(runningEvent) {
        // Already have an instance of this event running; we can re-use it
        if (this._runningEvents[runningEvent.tag]) return this._runningEvents[runningEvent.tag];
        return runningEvent;
    }
    _getRunningEvent(eventName) {
        if (typeof eventName === "string") {
            // Listen for "error" events (if your contract has an error event, include
            // the full signature to bypass this special event keyword)
            if (eventName === "error") return this._normalizeRunningEvent(new ErrorRunningEvent());
            // Listen for any event that is registered
            if (eventName === "event") return this._normalizeRunningEvent(new RunningEvent("event", null));
            // Listen for any event
            if (eventName === "*") return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
            // Get the event Fragment (throws if ambiguous/unknown event)
            const fragment = this.interface.getEvent(eventName);
            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
        }
        // We have topics to filter by...
        if (eventName.topics && eventName.topics.length > 0) {
            // Is it a known topichash? (throws if no matching topichash)
            try {
                const topic = eventName.topics[0];
                if (typeof topic !== "string") throw new Error("invalid topic"); // @TODO: May happen for anonymous events
                const fragment = this.interface.getEvent(topic);
                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
            } catch (error) {}
            // Filter by the unknown topichash
            const filter = {
                address: this.address,
                topics: eventName.topics
            };
            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
        }
        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
    }
    _checkRunningEvents(runningEvent) {
        if (runningEvent.listenerCount() === 0) {
            delete this._runningEvents[runningEvent.tag];
            // If we have a poller for this, remove it
            const emit = this._wrappedEmits[runningEvent.tag];
            if (emit && runningEvent.filter) {
                this.provider.off(runningEvent.filter, emit);
                delete this._wrappedEmits[runningEvent.tag];
            }
        }
    }
    // Subclasses can override this to gracefully recover
    // from parse errors if they wish
    _wrapEvent(runningEvent, log, listener) {
        const event = (0, _properties.deepCopy)(log);
        event.removeListener = ()=>{
            if (!listener) return;
            runningEvent.removeListener(listener);
            this._checkRunningEvents(runningEvent);
        };
        event.getBlock = ()=>{
            return this.provider.getBlock(log.blockHash);
        };
        event.getTransaction = ()=>{
            return this.provider.getTransaction(log.transactionHash);
        };
        event.getTransactionReceipt = ()=>{
            return this.provider.getTransactionReceipt(log.transactionHash);
        };
        // This may throw if the topics and data mismatch the signature
        runningEvent.prepareEvent(event);
        return event;
    }
    _addEventListener(runningEvent, listener, once) {
        if (!this.provider) logger.throwError("events require a provider or a signer with a provider", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "once"
        });
        runningEvent.addListener(listener, once);
        // Track this running event and its listeners (may already be there; but no hard in updating)
        this._runningEvents[runningEvent.tag] = runningEvent;
        // If we are not polling the provider, start polling
        if (!this._wrappedEmits[runningEvent.tag]) {
            const wrappedEmit = (log)=>{
                let event = this._wrapEvent(runningEvent, log, listener);
                // Try to emit the result for the parameterized event...
                if (event.decodeError == null) try {
                    const args = runningEvent.getEmit(event);
                    this.emit(runningEvent.filter, ...args);
                } catch (error) {
                    event.decodeError = error.error;
                }
                // Always emit "event" for fragment-base events
                if (runningEvent.filter != null) this.emit("event", event);
                // Emit "error" if there was an error
                if (event.decodeError != null) this.emit("error", event.decodeError, event);
            };
            this._wrappedEmits[runningEvent.tag] = wrappedEmit;
            // Special events, like "error" do not have a filter
            if (runningEvent.filter != null) this.provider.on(runningEvent.filter, wrappedEmit);
        }
    }
    queryFilter(event, fromBlockOrBlockhash, toBlock) {
        const runningEvent = this._getRunningEvent(event);
        const filter = (0, _properties.shallowCopy)(runningEvent.filter);
        if (typeof fromBlockOrBlockhash === "string" && (0, _bytes.isHexString)(fromBlockOrBlockhash, 32)) {
            if (toBlock != null) logger.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
            filter.blockHash = fromBlockOrBlockhash;
        } else {
            filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
            filter.toBlock = toBlock != null ? toBlock : "latest";
        }
        return this.provider.getLogs(filter).then((logs)=>{
            return logs.map((log)=>this._wrapEvent(runningEvent, log, null));
        });
    }
    on(event, listener) {
        this._addEventListener(this._getRunningEvent(event), listener, false);
        return this;
    }
    once(event, listener) {
        this._addEventListener(this._getRunningEvent(event), listener, true);
        return this;
    }
    emit(eventName, ...args) {
        if (!this.provider) return false;
        const runningEvent = this._getRunningEvent(eventName);
        const result = runningEvent.run(args) > 0;
        // May have drained all the "once" events; check for living events
        this._checkRunningEvents(runningEvent);
        return result;
    }
    listenerCount(eventName) {
        if (!this.provider) return 0;
        if (eventName == null) return Object.keys(this._runningEvents).reduce((accum, key)=>{
            return accum + this._runningEvents[key].listenerCount();
        }, 0);
        return this._getRunningEvent(eventName).listenerCount();
    }
    listeners(eventName) {
        if (!this.provider) return [];
        if (eventName == null) {
            const result = [];
            for(let tag in this._runningEvents)this._runningEvents[tag].listeners().forEach((listener)=>{
                result.push(listener);
            });
            return result;
        }
        return this._getRunningEvent(eventName).listeners();
    }
    removeAllListeners(eventName) {
        if (!this.provider) return this;
        if (eventName == null) {
            for(const tag in this._runningEvents){
                const runningEvent = this._runningEvents[tag];
                runningEvent.removeAllListeners();
                this._checkRunningEvents(runningEvent);
            }
            return this;
        }
        // Delete any listeners
        const runningEvent = this._getRunningEvent(eventName);
        runningEvent.removeAllListeners();
        this._checkRunningEvents(runningEvent);
        return this;
    }
    off(eventName, listener) {
        if (!this.provider) return this;
        const runningEvent = this._getRunningEvent(eventName);
        runningEvent.removeListener(listener);
        this._checkRunningEvents(runningEvent);
        return this;
    }
    removeListener(eventName, listener) {
        return this.off(eventName, listener);
    }
}
class Contract extends BaseContract {
}
class ContractFactory {
    constructor(contractInterface, bytecode, signer){
        let bytecodeHex = null;
        if (typeof bytecode === "string") bytecodeHex = bytecode;
        else if ((0, _bytes.isBytes)(bytecode)) bytecodeHex = (0, _bytes.hexlify)(bytecode);
        else if (bytecode && typeof bytecode.object === "string") // Allow the bytecode object from the Solidity compiler
        bytecodeHex = bytecode.object;
        else // Crash in the next verification step
        bytecodeHex = "!";
        // Make sure it is 0x prefixed
        if (bytecodeHex.substring(0, 2) !== "0x") bytecodeHex = "0x" + bytecodeHex;
        // Make sure the final result is valid bytecode
        if (!(0, _bytes.isHexString)(bytecodeHex) || bytecodeHex.length % 2) logger.throwArgumentError("invalid bytecode", "bytecode", bytecode);
        // If we have a signer, make sure it is valid
        if (signer && !(0, _abstractSigner.Signer).isSigner(signer)) logger.throwArgumentError("invalid signer", "signer", signer);
        (0, _properties.defineReadOnly)(this, "bytecode", bytecodeHex);
        (0, _properties.defineReadOnly)(this, "interface", (0, _properties.getStatic)(new.target, "getInterface")(contractInterface));
        (0, _properties.defineReadOnly)(this, "signer", signer || null);
    }
    // @TODO: Future; rename to populateTransaction?
    getDeployTransaction(...args) {
        let tx = {};
        // If we have 1 additional argument, we allow transaction overrides
        if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
            tx = (0, _properties.shallowCopy)(args.pop());
            for(const key in tx){
                if (!allowedTransactionKeys[key]) throw new Error("unknown transaction override " + key);
            }
        }
        // Do not allow these to be overridden in a deployment transaction
        [
            "data",
            "from",
            "to"
        ].forEach((key)=>{
            if (tx[key] == null) return;
            logger.throwError("cannot override " + key, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: key
            });
        });
        if (tx.value) {
            const value = (0, _bignumber.BigNumber).from(tx.value);
            if (!value.isZero() && !this.interface.deploy.payable) logger.throwError("non-payable constructor cannot override value", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: "overrides.value",
                value: tx.value
            });
        }
        // Make sure the call matches the constructor signature
        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
        // Set the data to the bytecode + the encoded constructor arguments
        tx.data = (0, _bytes.hexlify)((0, _bytes.concat)([
            this.bytecode,
            this.interface.encodeDeploy(args)
        ]));
        return tx;
    }
    deploy(...args) {
        return __awaiter(this, void 0, void 0, function*() {
            let overrides = {};
            // If 1 extra parameter was passed in, it contains overrides
            if (args.length === this.interface.deploy.inputs.length + 1) overrides = args.pop();
            // Make sure the call matches the constructor signature
            logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
            // Resolve ENS names and promises in the arguments
            const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
            params.push(overrides);
            // Get the deployment transaction (with optional overrides)
            const unsignedTx = this.getDeployTransaction(...params);
            // Send the deployment transaction
            const tx = yield this.signer.sendTransaction(unsignedTx);
            const address = (0, _properties.getStatic)(this.constructor, "getContractAddress")(tx);
            const contract = (0, _properties.getStatic)(this.constructor, "getContract")(address, this.interface, this.signer);
            // Add the modified wait that wraps events
            addContractWait(contract, tx);
            (0, _properties.defineReadOnly)(contract, "deployTransaction", tx);
            return contract;
        });
    }
    attach(address) {
        return this.constructor.getContract(address, this.interface, this.signer);
    }
    connect(signer) {
        return new this.constructor(this.interface, this.bytecode, signer);
    }
    static fromSolidity(compilerOutput, signer) {
        if (compilerOutput == null) logger.throwError("missing compiler output", (0, _logger.Logger).errors.MISSING_ARGUMENT, {
            argument: "compilerOutput"
        });
        if (typeof compilerOutput === "string") compilerOutput = JSON.parse(compilerOutput);
        const abi = compilerOutput.abi;
        let bytecode = null;
        if (compilerOutput.bytecode) bytecode = compilerOutput.bytecode;
        else if (compilerOutput.evm && compilerOutput.evm.bytecode) bytecode = compilerOutput.evm.bytecode;
        return new this(abi, bytecode, signer);
    }
    static getInterface(contractInterface) {
        return Contract.getInterface(contractInterface);
    }
    static getContractAddress(tx) {
        return (0, _address.getContractAddress)(tx);
    }
    static getContract(address, contractInterface, signer) {
        return new Contract(address, contractInterface, signer);
    }
}

},{"@ethersproject/abi":"fYeCq","@ethersproject/abstract-provider":"g1jr1","@ethersproject/abstract-signer":"g9Ey5","@ethersproject/address":"ggdAz","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@ethersproject/transactions":"d1ust","@ethersproject/logger":"hLvB2","./_version":"6ewae","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"fYeCq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConstructorFragment", ()=>(0, _fragments.ConstructorFragment));
parcelHelpers.export(exports, "ErrorFragment", ()=>(0, _fragments.ErrorFragment));
parcelHelpers.export(exports, "EventFragment", ()=>(0, _fragments.EventFragment));
parcelHelpers.export(exports, "Fragment", ()=>(0, _fragments.Fragment));
parcelHelpers.export(exports, "FunctionFragment", ()=>(0, _fragments.FunctionFragment));
parcelHelpers.export(exports, "ParamType", ()=>(0, _fragments.ParamType));
parcelHelpers.export(exports, "FormatTypes", ()=>(0, _fragments.FormatTypes));
parcelHelpers.export(exports, "AbiCoder", ()=>(0, _abiCoder.AbiCoder));
parcelHelpers.export(exports, "defaultAbiCoder", ()=>(0, _abiCoder.defaultAbiCoder));
parcelHelpers.export(exports, "Interface", ()=>(0, _interface.Interface));
parcelHelpers.export(exports, "Indexed", ()=>(0, _interface.Indexed));
parcelHelpers.export(exports, "checkResultErrors", ()=>(0, _interface.checkResultErrors));
parcelHelpers.export(exports, "LogDescription", ()=>(0, _interface.LogDescription));
parcelHelpers.export(exports, "TransactionDescription", ()=>(0, _interface.TransactionDescription));
var _fragments = require("./fragments");
var _abiCoder = require("./abi-coder");
var _interface = require("./interface");
"use strict";

},{"./fragments":"jvsHr","./abi-coder":"4pw2B","./interface":"8nE5c","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"jvsHr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FormatTypes", ()=>FormatTypes);
parcelHelpers.export(exports, "ParamType", ()=>ParamType);
parcelHelpers.export(exports, "Fragment", ()=>Fragment);
parcelHelpers.export(exports, "EventFragment", ()=>EventFragment);
parcelHelpers.export(exports, "ConstructorFragment", ()=>ConstructorFragment);
parcelHelpers.export(exports, "FunctionFragment", ()=>FunctionFragment);
parcelHelpers.export(exports, "ErrorFragment", ()=>ErrorFragment);
var _bignumber = require("@ethersproject/bignumber");
var _properties = require("@ethersproject/properties");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
const _constructorGuard = {};
let ModifiersBytes = {
    calldata: true,
    memory: true,
    storage: true
};
let ModifiersNest = {
    calldata: true,
    memory: true
};
function checkModifier(type, name) {
    if (type === "bytes" || type === "string") {
        if (ModifiersBytes[name]) return true;
    } else if (type === "address") {
        if (name === "payable") return true;
    } else if (type.indexOf("[") >= 0 || type === "tuple") {
        if (ModifiersNest[name]) return true;
    }
    if (ModifiersBytes[name] || name === "payable") logger.throwArgumentError("invalid modifier", "name", name);
    return false;
}
// @TODO: Make sure that children of an indexed tuple are marked with a null indexed
function parseParamType(param, allowIndexed) {
    let originalParam = param;
    function throwError(i) {
        logger.throwArgumentError(`unexpected character at position ${i}`, "param", param);
    }
    param = param.replace(/\s/g, " ");
    function newNode(parent) {
        let node = {
            type: "",
            name: "",
            parent: parent,
            state: {
                allowType: true
            }
        };
        if (allowIndexed) node.indexed = false;
        return node;
    }
    let parent1 = {
        type: "",
        name: "",
        state: {
            allowType: true
        }
    };
    let node1 = parent1;
    for(let i1 = 0; i1 < param.length; i1++){
        let c = param[i1];
        switch(c){
            case "(":
                if (node1.state.allowType && node1.type === "") node1.type = "tuple";
                else if (!node1.state.allowParams) throwError(i1);
                node1.state.allowType = false;
                node1.type = verifyType(node1.type);
                node1.components = [
                    newNode(node1)
                ];
                node1 = node1.components[0];
                break;
            case ")":
                delete node1.state;
                if (node1.name === "indexed") {
                    if (!allowIndexed) throwError(i1);
                    node1.indexed = true;
                    node1.name = "";
                }
                if (checkModifier(node1.type, node1.name)) node1.name = "";
                node1.type = verifyType(node1.type);
                let child = node1;
                node1 = node1.parent;
                if (!node1) throwError(i1);
                delete child.parent;
                node1.state.allowParams = false;
                node1.state.allowName = true;
                node1.state.allowArray = true;
                break;
            case ",":
                delete node1.state;
                if (node1.name === "indexed") {
                    if (!allowIndexed) throwError(i1);
                    node1.indexed = true;
                    node1.name = "";
                }
                if (checkModifier(node1.type, node1.name)) node1.name = "";
                node1.type = verifyType(node1.type);
                let sibling = newNode(node1.parent);
                //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
                node1.parent.components.push(sibling);
                delete node1.parent;
                node1 = sibling;
                break;
            // Hit a space...
            case " ":
                // If reading type, the type is done and may read a param or name
                if (node1.state.allowType) {
                    if (node1.type !== "") {
                        node1.type = verifyType(node1.type);
                        delete node1.state.allowType;
                        node1.state.allowName = true;
                        node1.state.allowParams = true;
                    }
                }
                // If reading name, the name is done
                if (node1.state.allowName) {
                    if (node1.name !== "") {
                        if (node1.name === "indexed") {
                            if (!allowIndexed) throwError(i1);
                            if (node1.indexed) throwError(i1);
                            node1.indexed = true;
                            node1.name = "";
                        } else if (checkModifier(node1.type, node1.name)) node1.name = "";
                        else node1.state.allowName = false;
                    }
                }
                break;
            case "[":
                if (!node1.state.allowArray) throwError(i1);
                node1.type += c;
                node1.state.allowArray = false;
                node1.state.allowName = false;
                node1.state.readArray = true;
                break;
            case "]":
                if (!node1.state.readArray) throwError(i1);
                node1.type += c;
                node1.state.readArray = false;
                node1.state.allowArray = true;
                node1.state.allowName = true;
                break;
            default:
                if (node1.state.allowType) {
                    node1.type += c;
                    node1.state.allowParams = true;
                    node1.state.allowArray = true;
                } else if (node1.state.allowName) {
                    node1.name += c;
                    delete node1.state.allowArray;
                } else if (node1.state.readArray) node1.type += c;
                else throwError(i1);
        }
    }
    if (node1.parent) logger.throwArgumentError("unexpected eof", "param", param);
    delete parent1.state;
    if (node1.name === "indexed") {
        if (!allowIndexed) throwError(originalParam.length - 7);
        if (node1.indexed) throwError(originalParam.length - 7);
        node1.indexed = true;
        node1.name = "";
    } else if (checkModifier(node1.type, node1.name)) node1.name = "";
    parent1.type = verifyType(parent1.type);
    return parent1;
}
function populate(object, params) {
    for(let key in params)(0, _properties.defineReadOnly)(object, key, params[key]);
}
const FormatTypes = Object.freeze({
    // Bare formatting, as is needed for computing a sighash of an event or function
    sighash: "sighash",
    // Human-Readable with Minimal spacing and without names (compact human-readable)
    minimal: "minimal",
    // Human-Readable with nice spacing, including all names
    full: "full",
    // JSON-format a la Solidity
    json: "json"
});
const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
class ParamType {
    constructor(constructorGuard, params){
        if (constructorGuard !== _constructorGuard) logger.throwError("use fromString", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "new ParamType()"
        });
        populate(this, params);
        let match = this.type.match(paramTypeArray);
        if (match) populate(this, {
            arrayLength: parseInt(match[2] || "-1"),
            arrayChildren: ParamType.fromObject({
                type: match[1],
                components: this.components
            }),
            baseType: "array"
        });
        else populate(this, {
            arrayLength: null,
            arrayChildren: null,
            baseType: this.components != null ? "tuple" : this.type
        });
        this._isParamType = true;
        Object.freeze(this);
    }
    // Format the parameter fragment
    //   - sighash: "(uint256,address)"
    //   - minimal: "tuple(uint256,address) indexed"
    //   - full:    "tuple(uint256 foo, address bar) indexed baz"
    format(format) {
        if (!format) format = FormatTypes.sighash;
        if (!FormatTypes[format]) logger.throwArgumentError("invalid format type", "format", format);
        if (format === FormatTypes.json) {
            let result = {
                type: this.baseType === "tuple" ? "tuple" : this.type,
                name: this.name || undefined
            };
            if (typeof this.indexed === "boolean") result.indexed = this.indexed;
            if (this.components) result.components = this.components.map((comp)=>JSON.parse(comp.format(format)));
            return JSON.stringify(result);
        }
        let result = "";
        // Array
        if (this.baseType === "array") {
            result += this.arrayChildren.format(format);
            result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
        } else if (this.baseType === "tuple") {
            if (format !== FormatTypes.sighash) result += this.type;
            result += "(" + this.components.map((comp)=>comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
        } else result += this.type;
        if (format !== FormatTypes.sighash) {
            if (this.indexed === true) result += " indexed";
            if (format === FormatTypes.full && this.name) result += " " + this.name;
        }
        return result;
    }
    static from(value, allowIndexed) {
        if (typeof value === "string") return ParamType.fromString(value, allowIndexed);
        return ParamType.fromObject(value);
    }
    static fromObject(value) {
        if (ParamType.isParamType(value)) return value;
        return new ParamType(_constructorGuard, {
            name: value.name || null,
            type: verifyType(value.type),
            indexed: value.indexed == null ? null : !!value.indexed,
            components: value.components ? value.components.map(ParamType.fromObject) : null
        });
    }
    static fromString(value, allowIndexed) {
        function ParamTypify(node) {
            return ParamType.fromObject({
                name: node.name,
                type: node.type,
                indexed: node.indexed,
                components: node.components
            });
        }
        return ParamTypify(parseParamType(value, !!allowIndexed));
    }
    static isParamType(value) {
        return !!(value != null && value._isParamType);
    }
}
function parseParams(value, allowIndex) {
    return splitNesting(value).map((param)=>ParamType.fromString(param, allowIndex));
}
class Fragment {
    constructor(constructorGuard, params){
        if (constructorGuard !== _constructorGuard) logger.throwError("use a static from method", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "new Fragment()"
        });
        populate(this, params);
        this._isFragment = true;
        Object.freeze(this);
    }
    static from(value) {
        if (Fragment.isFragment(value)) return value;
        if (typeof value === "string") return Fragment.fromString(value);
        return Fragment.fromObject(value);
    }
    static fromObject(value) {
        if (Fragment.isFragment(value)) return value;
        switch(value.type){
            case "function":
                return FunctionFragment.fromObject(value);
            case "event":
                return EventFragment.fromObject(value);
            case "constructor":
                return ConstructorFragment.fromObject(value);
            case "error":
                return ErrorFragment.fromObject(value);
            case "fallback":
            case "receive":
                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
                return null;
        }
        return logger.throwArgumentError("invalid fragment object", "value", value);
    }
    static fromString(value) {
        // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
        value = value.replace(/\s/g, " ");
        value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
        value = value.trim();
        if (value.split(" ")[0] === "event") return EventFragment.fromString(value.substring(5).trim());
        else if (value.split(" ")[0] === "function") return FunctionFragment.fromString(value.substring(8).trim());
        else if (value.split("(")[0].trim() === "constructor") return ConstructorFragment.fromString(value.trim());
        else if (value.split(" ")[0] === "error") return ErrorFragment.fromString(value.substring(5).trim());
        return logger.throwArgumentError("unsupported fragment", "value", value);
    }
    static isFragment(value) {
        return !!(value && value._isFragment);
    }
}
class EventFragment extends Fragment {
    format(format) {
        if (!format) format = FormatTypes.sighash;
        if (!FormatTypes[format]) logger.throwArgumentError("invalid format type", "format", format);
        if (format === FormatTypes.json) return JSON.stringify({
            type: "event",
            anonymous: this.anonymous,
            name: this.name,
            inputs: this.inputs.map((input)=>JSON.parse(input.format(format)))
        });
        let result = "";
        if (format !== FormatTypes.sighash) result += "event ";
        result += this.name + "(" + this.inputs.map((input)=>input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
            if (this.anonymous) result += "anonymous ";
        }
        return result.trim();
    }
    static from(value) {
        if (typeof value === "string") return EventFragment.fromString(value);
        return EventFragment.fromObject(value);
    }
    static fromObject(value) {
        if (EventFragment.isEventFragment(value)) return value;
        if (value.type !== "event") logger.throwArgumentError("invalid event object", "value", value);
        const params = {
            name: verifyIdentifier(value.name),
            anonymous: value.anonymous,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            type: "event"
        };
        return new EventFragment(_constructorGuard, params);
    }
    static fromString(value) {
        let match = value.match(regexParen);
        if (!match) logger.throwArgumentError("invalid event string", "value", value);
        let anonymous = false;
        match[3].split(" ").forEach((modifier)=>{
            switch(modifier.trim()){
                case "anonymous":
                    anonymous = true;
                    break;
                case "":
                    break;
                default:
                    logger.warn("unknown modifier: " + modifier);
            }
        });
        return EventFragment.fromObject({
            name: match[1].trim(),
            anonymous: anonymous,
            inputs: parseParams(match[2], true),
            type: "event"
        });
    }
    static isEventFragment(value) {
        return value && value._isFragment && value.type === "event";
    }
}
function parseGas(value, params) {
    params.gas = null;
    let comps = value.split("@");
    if (comps.length !== 1) {
        if (comps.length > 2) logger.throwArgumentError("invalid human-readable ABI signature", "value", value);
        if (!comps[1].match(/^[0-9]+$/)) logger.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
        params.gas = (0, _bignumber.BigNumber).from(comps[1]);
        return comps[0];
    }
    return value;
}
function parseModifiers(value, params) {
    params.constant = false;
    params.payable = false;
    params.stateMutability = "nonpayable";
    value.split(" ").forEach((modifier)=>{
        switch(modifier.trim()){
            case "constant":
                params.constant = true;
                break;
            case "payable":
                params.payable = true;
                params.stateMutability = "payable";
                break;
            case "nonpayable":
                params.payable = false;
                params.stateMutability = "nonpayable";
                break;
            case "pure":
                params.constant = true;
                params.stateMutability = "pure";
                break;
            case "view":
                params.constant = true;
                params.stateMutability = "view";
                break;
            case "external":
            case "public":
            case "":
                break;
            default:
                console.log("unknown modifier: " + modifier);
        }
    });
}
function verifyState(value) {
    let result = {
        constant: false,
        payable: true,
        stateMutability: "payable"
    };
    if (value.stateMutability != null) {
        result.stateMutability = value.stateMutability;
        // Set (and check things are consistent) the constant property
        result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
        if (value.constant != null) {
            if (!!value.constant !== result.constant) logger.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
        }
        // Set (and check things are consistent) the payable property
        result.payable = result.stateMutability === "payable";
        if (value.payable != null) {
            if (!!value.payable !== result.payable) logger.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
        }
    } else if (value.payable != null) {
        result.payable = !!value.payable;
        // If payable we can assume non-constant; otherwise we can't assume
        if (value.constant == null && !result.payable && value.type !== "constructor") logger.throwArgumentError("unable to determine stateMutability", "value", value);
        result.constant = !!value.constant;
        if (result.constant) result.stateMutability = "view";
        else result.stateMutability = result.payable ? "payable" : "nonpayable";
        if (result.payable && result.constant) logger.throwArgumentError("cannot have constant payable function", "value", value);
    } else if (value.constant != null) {
        result.constant = !!value.constant;
        result.payable = !result.constant;
        result.stateMutability = result.constant ? "view" : "payable";
    } else if (value.type !== "constructor") logger.throwArgumentError("unable to determine stateMutability", "value", value);
    return result;
}
class ConstructorFragment extends Fragment {
    format(format) {
        if (!format) format = FormatTypes.sighash;
        if (!FormatTypes[format]) logger.throwArgumentError("invalid format type", "format", format);
        if (format === FormatTypes.json) return JSON.stringify({
            type: "constructor",
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : undefined,
            inputs: this.inputs.map((input)=>JSON.parse(input.format(format)))
        });
        if (format === FormatTypes.sighash) logger.throwError("cannot format a constructor for sighash", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "format(sighash)"
        });
        let result = "constructor(" + this.inputs.map((input)=>input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (this.stateMutability && this.stateMutability !== "nonpayable") result += this.stateMutability + " ";
        return result.trim();
    }
    static from(value) {
        if (typeof value === "string") return ConstructorFragment.fromString(value);
        return ConstructorFragment.fromObject(value);
    }
    static fromObject(value) {
        if (ConstructorFragment.isConstructorFragment(value)) return value;
        if (value.type !== "constructor") logger.throwArgumentError("invalid constructor object", "value", value);
        let state = verifyState(value);
        if (state.constant) logger.throwArgumentError("constructor cannot be constant", "value", value);
        const params = {
            name: null,
            type: value.type,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            payable: state.payable,
            stateMutability: state.stateMutability,
            gas: value.gas ? (0, _bignumber.BigNumber).from(value.gas) : null
        };
        return new ConstructorFragment(_constructorGuard, params);
    }
    static fromString(value) {
        let params = {
            type: "constructor"
        };
        value = parseGas(value, params);
        let parens = value.match(regexParen);
        if (!parens || parens[1].trim() !== "constructor") logger.throwArgumentError("invalid constructor string", "value", value);
        params.inputs = parseParams(parens[2].trim(), false);
        parseModifiers(parens[3].trim(), params);
        return ConstructorFragment.fromObject(params);
    }
    static isConstructorFragment(value) {
        return value && value._isFragment && value.type === "constructor";
    }
}
class FunctionFragment extends ConstructorFragment {
    format(format) {
        if (!format) format = FormatTypes.sighash;
        if (!FormatTypes[format]) logger.throwArgumentError("invalid format type", "format", format);
        if (format === FormatTypes.json) return JSON.stringify({
            type: "function",
            name: this.name,
            constant: this.constant,
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : undefined,
            inputs: this.inputs.map((input)=>JSON.parse(input.format(format))),
            outputs: this.outputs.map((output)=>JSON.parse(output.format(format)))
        });
        let result = "";
        if (format !== FormatTypes.sighash) result += "function ";
        result += this.name + "(" + this.inputs.map((input)=>input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
            if (this.stateMutability) {
                if (this.stateMutability !== "nonpayable") result += this.stateMutability + " ";
            } else if (this.constant) result += "view ";
            if (this.outputs && this.outputs.length) result += "returns (" + this.outputs.map((output)=>output.format(format)).join(", ") + ") ";
            if (this.gas != null) result += "@" + this.gas.toString() + " ";
        }
        return result.trim();
    }
    static from(value) {
        if (typeof value === "string") return FunctionFragment.fromString(value);
        return FunctionFragment.fromObject(value);
    }
    static fromObject(value) {
        if (FunctionFragment.isFunctionFragment(value)) return value;
        if (value.type !== "function") logger.throwArgumentError("invalid function object", "value", value);
        let state = verifyState(value);
        const params = {
            type: value.type,
            name: verifyIdentifier(value.name),
            constant: state.constant,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
            payable: state.payable,
            stateMutability: state.stateMutability,
            gas: value.gas ? (0, _bignumber.BigNumber).from(value.gas) : null
        };
        return new FunctionFragment(_constructorGuard, params);
    }
    static fromString(value) {
        let params = {
            type: "function"
        };
        value = parseGas(value, params);
        let comps = value.split(" returns ");
        if (comps.length > 2) logger.throwArgumentError("invalid function string", "value", value);
        let parens = comps[0].match(regexParen);
        if (!parens) logger.throwArgumentError("invalid function signature", "value", value);
        params.name = parens[1].trim();
        if (params.name) verifyIdentifier(params.name);
        params.inputs = parseParams(parens[2], false);
        parseModifiers(parens[3].trim(), params);
        // We have outputs
        if (comps.length > 1) {
            let returns = comps[1].match(regexParen);
            if (returns[1].trim() != "" || returns[3].trim() != "") logger.throwArgumentError("unexpected tokens", "value", value);
            params.outputs = parseParams(returns[2], false);
        } else params.outputs = [];
        return FunctionFragment.fromObject(params);
    }
    static isFunctionFragment(value) {
        return value && value._isFragment && value.type === "function";
    }
}
//export class StructFragment extends Fragment {
//}
function checkForbidden(fragment) {
    const sig = fragment.format();
    if (sig === "Error(string)" || sig === "Panic(uint256)") logger.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
    return fragment;
}
class ErrorFragment extends Fragment {
    format(format) {
        if (!format) format = FormatTypes.sighash;
        if (!FormatTypes[format]) logger.throwArgumentError("invalid format type", "format", format);
        if (format === FormatTypes.json) return JSON.stringify({
            type: "error",
            name: this.name,
            inputs: this.inputs.map((input)=>JSON.parse(input.format(format)))
        });
        let result = "";
        if (format !== FormatTypes.sighash) result += "error ";
        result += this.name + "(" + this.inputs.map((input)=>input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        return result.trim();
    }
    static from(value) {
        if (typeof value === "string") return ErrorFragment.fromString(value);
        return ErrorFragment.fromObject(value);
    }
    static fromObject(value) {
        if (ErrorFragment.isErrorFragment(value)) return value;
        if (value.type !== "error") logger.throwArgumentError("invalid error object", "value", value);
        const params = {
            type: value.type,
            name: verifyIdentifier(value.name),
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
        };
        return checkForbidden(new ErrorFragment(_constructorGuard, params));
    }
    static fromString(value) {
        let params = {
            type: "error"
        };
        let parens = value.match(regexParen);
        if (!parens) logger.throwArgumentError("invalid error signature", "value", value);
        params.name = parens[1].trim();
        if (params.name) verifyIdentifier(params.name);
        params.inputs = parseParams(parens[2], false);
        return checkForbidden(ErrorFragment.fromObject(params));
    }
    static isErrorFragment(value) {
        return value && value._isFragment && value.type === "error";
    }
}
function verifyType(type) {
    // These need to be transformed to their full description
    if (type.match(/^uint($|[^1-9])/)) type = "uint256" + type.substring(4);
    else if (type.match(/^int($|[^1-9])/)) type = "int256" + type.substring(3);
    // @TODO: more verification
    return type;
}
// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
function verifyIdentifier(value) {
    if (!value || !value.match(regexIdentifier)) logger.throwArgumentError(`invalid identifier "${value}"`, "value", value);
    return value;
}
const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
function splitNesting(value) {
    value = value.trim();
    let result = [];
    let accum = "";
    let depth = 0;
    for(let offset = 0; offset < value.length; offset++){
        let c = value[offset];
        if (c === "," && depth === 0) {
            result.push(accum);
            accum = "";
        } else {
            accum += c;
            if (c === "(") depth++;
            else if (c === ")") {
                depth--;
                if (depth === -1) logger.throwArgumentError("unbalanced parenthesis", "value", value);
            }
        }
    }
    if (accum) result.push(accum);
    return result;
}

},{"@ethersproject/bignumber":"ckYYW","@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"9uxOS","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"ckYYW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BigNumber", ()=>(0, _bignumber.BigNumber));
parcelHelpers.export(exports, "formatFixed", ()=>(0, _fixednumber.formatFixed));
parcelHelpers.export(exports, "FixedFormat", ()=>(0, _fixednumber.FixedFormat));
parcelHelpers.export(exports, "FixedNumber", ()=>(0, _fixednumber.FixedNumber));
parcelHelpers.export(exports, "parseFixed", ()=>(0, _fixednumber.parseFixed));
// Internal methods used by address
parcelHelpers.export(exports, "_base16To36", ()=>(0, _bignumber._base16To36));
parcelHelpers.export(exports, "_base36To16", ()=>(0, _bignumber._base36To16));
var _bignumber = require("./bignumber");
var _fixednumber = require("./fixednumber");

},{"./bignumber":"eCYd8","./fixednumber":"4kqiW","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"eCYd8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBigNumberish", ()=>isBigNumberish);
parcelHelpers.export(exports, "BigNumber", ()=>BigNumber);
// value should have no prefix
parcelHelpers.export(exports, "_base36To16", ()=>_base36To16);
// value should have no prefix
parcelHelpers.export(exports, "_base16To36", ()=>_base16To36);
/**
 *  BigNumber
 *
 *  A wrapper around the BN.js object. We use the BN.js library
 *  because it is used by elliptic, so it is required regardless.
 *
 */ var _bnJs = require("bn.js");
var _bnJsDefault = parcelHelpers.interopDefault(_bnJs);
var _bytes = require("@ethersproject/bytes");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
var BN = (0, _bnJsDefault.default).BN;
const logger = new (0, _logger.Logger)((0, _version.version));
const _constructorGuard = {};
const MAX_SAFE = 0x1fffffffffffff;
function isBigNumberish(value) {
    return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || (0, _bytes.isHexString)(value) || typeof value === "bigint" || (0, _bytes.isBytes)(value));
}
// Only warn about passing 10 into radix once
let _warnedToStringRadix = false;
class BigNumber {
    constructor(constructorGuard, hex){
        if (constructorGuard !== _constructorGuard) logger.throwError("cannot call constructor directly; use BigNumber.from", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "new (BigNumber)"
        });
        this._hex = hex;
        this._isBigNumber = true;
        Object.freeze(this);
    }
    fromTwos(value) {
        return toBigNumber(toBN(this).fromTwos(value));
    }
    toTwos(value) {
        return toBigNumber(toBN(this).toTwos(value));
    }
    abs() {
        if (this._hex[0] === "-") return BigNumber.from(this._hex.substring(1));
        return this;
    }
    add(other) {
        return toBigNumber(toBN(this).add(toBN(other)));
    }
    sub(other) {
        return toBigNumber(toBN(this).sub(toBN(other)));
    }
    div(other) {
        const o = BigNumber.from(other);
        if (o.isZero()) throwFault("division-by-zero", "div");
        return toBigNumber(toBN(this).div(toBN(other)));
    }
    mul(other) {
        return toBigNumber(toBN(this).mul(toBN(other)));
    }
    mod(other) {
        const value = toBN(other);
        if (value.isNeg()) throwFault("division-by-zero", "mod");
        return toBigNumber(toBN(this).umod(value));
    }
    pow(other) {
        const value = toBN(other);
        if (value.isNeg()) throwFault("negative-power", "pow");
        return toBigNumber(toBN(this).pow(value));
    }
    and(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) throwFault("unbound-bitwise-result", "and");
        return toBigNumber(toBN(this).and(value));
    }
    or(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) throwFault("unbound-bitwise-result", "or");
        return toBigNumber(toBN(this).or(value));
    }
    xor(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) throwFault("unbound-bitwise-result", "xor");
        return toBigNumber(toBN(this).xor(value));
    }
    mask(value) {
        if (this.isNegative() || value < 0) throwFault("negative-width", "mask");
        return toBigNumber(toBN(this).maskn(value));
    }
    shl(value) {
        if (this.isNegative() || value < 0) throwFault("negative-width", "shl");
        return toBigNumber(toBN(this).shln(value));
    }
    shr(value) {
        if (this.isNegative() || value < 0) throwFault("negative-width", "shr");
        return toBigNumber(toBN(this).shrn(value));
    }
    eq(other) {
        return toBN(this).eq(toBN(other));
    }
    lt(other) {
        return toBN(this).lt(toBN(other));
    }
    lte(other) {
        return toBN(this).lte(toBN(other));
    }
    gt(other) {
        return toBN(this).gt(toBN(other));
    }
    gte(other) {
        return toBN(this).gte(toBN(other));
    }
    isNegative() {
        return this._hex[0] === "-";
    }
    isZero() {
        return toBN(this).isZero();
    }
    toNumber() {
        try {
            return toBN(this).toNumber();
        } catch (error) {
            throwFault("overflow", "toNumber", this.toString());
        }
        return null;
    }
    toBigInt() {
        try {
            return BigInt(this.toString());
        } catch (e) {}
        return logger.throwError("this platform does not support BigInt", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            value: this.toString()
        });
    }
    toString() {
        // Lots of people expect this, which we do not support, so check (See: #889)
        if (arguments.length > 0) {
            if (arguments[0] === 10) {
                if (!_warnedToStringRadix) {
                    _warnedToStringRadix = true;
                    logger.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                }
            } else if (arguments[0] === 16) logger.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", (0, _logger.Logger).errors.UNEXPECTED_ARGUMENT, {});
            else logger.throwError("BigNumber.toString does not accept parameters", (0, _logger.Logger).errors.UNEXPECTED_ARGUMENT, {});
        }
        return toBN(this).toString(10);
    }
    toHexString() {
        return this._hex;
    }
    toJSON(key) {
        return {
            type: "BigNumber",
            hex: this.toHexString()
        };
    }
    static from(value) {
        if (value instanceof BigNumber) return value;
        if (typeof value === "string") {
            if (value.match(/^-?0x[0-9a-f]+$/i)) return new BigNumber(_constructorGuard, toHex(value));
            if (value.match(/^-?[0-9]+$/)) return new BigNumber(_constructorGuard, toHex(new BN(value)));
            return logger.throwArgumentError("invalid BigNumber string", "value", value);
        }
        if (typeof value === "number") {
            if (value % 1) throwFault("underflow", "BigNumber.from", value);
            if (value >= MAX_SAFE || value <= -MAX_SAFE) throwFault("overflow", "BigNumber.from", value);
            return BigNumber.from(String(value));
        }
        const anyValue = value;
        if (typeof anyValue === "bigint") return BigNumber.from(anyValue.toString());
        if ((0, _bytes.isBytes)(anyValue)) return BigNumber.from((0, _bytes.hexlify)(anyValue));
        if (anyValue) {
            // Hexable interface (takes priority)
            if (anyValue.toHexString) {
                const hex = anyValue.toHexString();
                if (typeof hex === "string") return BigNumber.from(hex);
            } else {
                // For now, handle legacy JSON-ified values (goes away in v6)
                let hex = anyValue._hex;
                // New-form JSON
                if (hex == null && anyValue.type === "BigNumber") hex = anyValue.hex;
                if (typeof hex === "string") {
                    if ((0, _bytes.isHexString)(hex) || hex[0] === "-" && (0, _bytes.isHexString)(hex.substring(1))) return BigNumber.from(hex);
                }
            }
        }
        return logger.throwArgumentError("invalid BigNumber value", "value", value);
    }
    static isBigNumber(value) {
        return !!(value && value._isBigNumber);
    }
}
// Normalize the hex string
function toHex(value) {
    // For BN, call on the hex string
    if (typeof value !== "string") return toHex(value.toString(16));
    // If negative, prepend the negative sign to the normalized positive value
    if (value[0] === "-") {
        // Strip off the negative sign
        value = value.substring(1);
        // Cannot have multiple negative signs (e.g. "--0x04")
        if (value[0] === "-") logger.throwArgumentError("invalid hex", "value", value);
        // Call toHex on the positive component
        value = toHex(value);
        // Do not allow "-0x00"
        if (value === "0x00") return value;
        // Negate the value
        return "-" + value;
    }
    // Add a "0x" prefix if missing
    if (value.substring(0, 2) !== "0x") value = "0x" + value;
    // Normalize zero
    if (value === "0x") return "0x00";
    // Make the string even length
    if (value.length % 2) value = "0x0" + value.substring(2);
    // Trim to smallest even-length string
    while(value.length > 4 && value.substring(0, 4) === "0x00")value = "0x" + value.substring(4);
    return value;
}
function toBigNumber(value) {
    return BigNumber.from(toHex(value));
}
function toBN(value) {
    const hex = BigNumber.from(value).toHexString();
    if (hex[0] === "-") return new BN("-" + hex.substring(3), 16);
    return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
    const params = {
        fault: fault,
        operation: operation
    };
    if (value != null) params.value = value;
    return logger.throwError(fault, (0, _logger.Logger).errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
    return new BN(value, 36).toString(16);
}
function _base16To36(value) {
    return new BN(value, 16).toString(36);
}

},{"bn.js":"VopIn","@ethersproject/bytes":"htrqZ","@ethersproject/logger":"hLvB2","./_version":"gN5k0","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"VopIn":[function(require,module,exports) {
(function(module, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module === "object") module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = require("buffer").Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, "Invalid character in " + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 0xa;
            else if (c >= 17) b = c - 17 + 0xa;
            else b = c;
            assert(c >= 0 && b < mul, "Invalid character");
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") try {
        BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 0xff;
            if (position < res.length) res[position++] = word >> 8 & 0xff;
            if (position < res.length) res[position++] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 0xff;
            if (position >= 0) res[position--] = word >> 8 & 0xff;
            if (position >= 0) res[position--] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

},{"buffer":"bXKEI"}],"bXKEI":[function(require,module,exports) {
"use strict";

},{}],"htrqZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBytesLike", ()=>isBytesLike);
parcelHelpers.export(exports, "isBytes", ()=>isBytes);
parcelHelpers.export(exports, "arrayify", ()=>arrayify);
parcelHelpers.export(exports, "concat", ()=>concat);
parcelHelpers.export(exports, "stripZeros", ()=>stripZeros);
parcelHelpers.export(exports, "zeroPad", ()=>zeroPad);
parcelHelpers.export(exports, "isHexString", ()=>isHexString);
parcelHelpers.export(exports, "hexlify", ()=>hexlify);
/*
function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
    if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
        return "0x0" + value.substring(2);
    }
    return value;
}
*/ parcelHelpers.export(exports, "hexDataLength", ()=>hexDataLength);
parcelHelpers.export(exports, "hexDataSlice", ()=>hexDataSlice);
parcelHelpers.export(exports, "hexConcat", ()=>hexConcat);
parcelHelpers.export(exports, "hexValue", ()=>hexValue);
parcelHelpers.export(exports, "hexStripZeros", ()=>hexStripZeros);
parcelHelpers.export(exports, "hexZeroPad", ()=>hexZeroPad);
parcelHelpers.export(exports, "splitSignature", ()=>splitSignature);
parcelHelpers.export(exports, "joinSignature", ()=>joinSignature);
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
///////////////////////////////
function isHexable(value) {
    return !!value.toHexString;
}
function addSlice(array) {
    if (array.slice) return array;
    array.slice = function() {
        const args = Array.prototype.slice.call(arguments);
        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
    };
    return array;
}
function isBytesLike(value) {
    return isHexString(value) && !(value.length % 2) || isBytes(value);
}
function isInteger(value) {
    return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
    if (value == null) return false;
    if (value.constructor === Uint8Array) return true;
    if (typeof value === "string") return false;
    if (!isInteger(value.length) || value.length < 0) return false;
    for(let i = 0; i < value.length; i++){
        const v = value[i];
        if (!isInteger(v) || v < 0 || v >= 256) return false;
    }
    return true;
}
function arrayify(value, options) {
    if (!options) options = {};
    if (typeof value === "number") {
        logger.checkSafeUint53(value, "invalid arrayify value");
        const result = [];
        while(value){
            result.unshift(value & 0xff);
            value = parseInt(String(value / 256));
        }
        if (result.length === 0) result.push(0);
        return addSlice(new Uint8Array(result));
    }
    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") value = "0x" + value;
    if (isHexable(value)) value = value.toHexString();
    if (isHexString(value)) {
        let hex = value.substring(2);
        if (hex.length % 2) {
            if (options.hexPad === "left") hex = "0" + hex;
            else if (options.hexPad === "right") hex += "0";
            else logger.throwArgumentError("hex data is odd-length", "value", value);
        }
        const result = [];
        for(let i = 0; i < hex.length; i += 2)result.push(parseInt(hex.substring(i, i + 2), 16));
        return addSlice(new Uint8Array(result));
    }
    if (isBytes(value)) return addSlice(new Uint8Array(value));
    return logger.throwArgumentError("invalid arrayify value", "value", value);
}
function concat(items) {
    const objects = items.map((item)=>arrayify(item));
    const length = objects.reduce((accum, item)=>accum + item.length, 0);
    const result = new Uint8Array(length);
    objects.reduce((offset, object)=>{
        result.set(object, offset);
        return offset + object.length;
    }, 0);
    return addSlice(result);
}
function stripZeros(value) {
    let result = arrayify(value);
    if (result.length === 0) return result;
    // Find the first non-zero entry
    let start = 0;
    while(start < result.length && result[start] === 0)start++;
    // If we started with zeros, strip them
    if (start) result = result.slice(start);
    return result;
}
function zeroPad(value, length) {
    value = arrayify(value);
    if (value.length > length) logger.throwArgumentError("value out of range", "value", arguments[0]);
    const result = new Uint8Array(length);
    result.set(value, length - value.length);
    return addSlice(result);
}
function isHexString(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;
    if (length && value.length !== 2 + 2 * length) return false;
    return true;
}
const HexCharacters = "0123456789abcdef";
function hexlify(value, options) {
    if (!options) options = {};
    if (typeof value === "number") {
        logger.checkSafeUint53(value, "invalid hexlify value");
        let hex = "";
        while(value){
            hex = HexCharacters[value & 0xf] + hex;
            value = Math.floor(value / 16);
        }
        if (hex.length) {
            if (hex.length % 2) hex = "0" + hex;
            return "0x" + hex;
        }
        return "0x00";
    }
    if (typeof value === "bigint") {
        value = value.toString(16);
        if (value.length % 2) return "0x0" + value;
        return "0x" + value;
    }
    if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") value = "0x" + value;
    if (isHexable(value)) return value.toHexString();
    if (isHexString(value)) {
        if (value.length % 2) {
            if (options.hexPad === "left") value = "0x0" + value.substring(2);
            else if (options.hexPad === "right") value += "0";
            else logger.throwArgumentError("hex data is odd-length", "value", value);
        }
        return value.toLowerCase();
    }
    if (isBytes(value)) {
        let result = "0x";
        for(let i = 0; i < value.length; i++){
            let v = value[i];
            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
        }
        return result;
    }
    return logger.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataLength(data) {
    if (typeof data !== "string") data = hexlify(data);
    else if (!isHexString(data) || data.length % 2) return null;
    return (data.length - 2) / 2;
}
function hexDataSlice(data, offset, endOffset) {
    if (typeof data !== "string") data = hexlify(data);
    else if (!isHexString(data) || data.length % 2) logger.throwArgumentError("invalid hexData", "value", data);
    offset = 2 + 2 * offset;
    if (endOffset != null) return "0x" + data.substring(offset, 2 + 2 * endOffset);
    return "0x" + data.substring(offset);
}
function hexConcat(items) {
    let result = "0x";
    items.forEach((item)=>{
        result += hexlify(item).substring(2);
    });
    return result;
}
function hexValue(value) {
    const trimmed = hexStripZeros(hexlify(value, {
        hexPad: "left"
    }));
    if (trimmed === "0x") return "0x0";
    return trimmed;
}
function hexStripZeros(value) {
    if (typeof value !== "string") value = hexlify(value);
    if (!isHexString(value)) logger.throwArgumentError("invalid hex string", "value", value);
    value = value.substring(2);
    let offset = 0;
    while(offset < value.length && value[offset] === "0")offset++;
    return "0x" + value.substring(offset);
}
function hexZeroPad(value, length) {
    if (typeof value !== "string") value = hexlify(value);
    else if (!isHexString(value)) logger.throwArgumentError("invalid hex string", "value", value);
    if (value.length > 2 * length + 2) logger.throwArgumentError("value out of range", "value", arguments[1]);
    while(value.length < 2 * length + 2)value = "0x0" + value.substring(2);
    return value;
}
function splitSignature(signature) {
    const result = {
        r: "0x",
        s: "0x",
        _vs: "0x",
        recoveryParam: 0,
        v: 0,
        yParityAndS: "0x",
        compact: "0x"
    };
    if (isBytesLike(signature)) {
        let bytes = arrayify(signature);
        // Get the r, s and v
        if (bytes.length === 64) {
            // EIP-2098; pull the v from the top bit of s and clear it
            result.v = 27 + (bytes[32] >> 7);
            bytes[32] &= 0x7f;
            result.r = hexlify(bytes.slice(0, 32));
            result.s = hexlify(bytes.slice(32, 64));
        } else if (bytes.length === 65) {
            result.r = hexlify(bytes.slice(0, 32));
            result.s = hexlify(bytes.slice(32, 64));
            result.v = bytes[64];
        } else logger.throwArgumentError("invalid signature string", "signature", signature);
        // Allow a recid to be used as the v
        if (result.v < 27) {
            if (result.v === 0 || result.v === 1) result.v += 27;
            else logger.throwArgumentError("signature invalid v byte", "signature", signature);
        }
        // Compute recoveryParam from v
        result.recoveryParam = 1 - result.v % 2;
        // Compute _vs from recoveryParam and s
        if (result.recoveryParam) bytes[32] |= 0x80;
        result._vs = hexlify(bytes.slice(32, 64));
    } else {
        result.r = signature.r;
        result.s = signature.s;
        result.v = signature.v;
        result.recoveryParam = signature.recoveryParam;
        result._vs = signature._vs;
        // If the _vs is available, use it to populate missing s, v and recoveryParam
        // and verify non-missing s, v and recoveryParam
        if (result._vs != null) {
            const vs = zeroPad(arrayify(result._vs), 32);
            result._vs = hexlify(vs);
            // Set or check the recid
            const recoveryParam = vs[0] >= 128 ? 1 : 0;
            if (result.recoveryParam == null) result.recoveryParam = recoveryParam;
            else if (result.recoveryParam !== recoveryParam) logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
            // Set or check the s
            vs[0] &= 0x7f;
            const s = hexlify(vs);
            if (result.s == null) result.s = s;
            else if (result.s !== s) logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
        }
        // Use recid and v to populate each other
        if (result.recoveryParam == null) {
            if (result.v == null) logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
            else if (result.v === 0 || result.v === 1) result.recoveryParam = result.v;
            else result.recoveryParam = 1 - result.v % 2;
        } else if (result.v == null) result.v = 27 + result.recoveryParam;
        else {
            const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
            if (result.recoveryParam !== recId) logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
        }
        if (result.r == null || !isHexString(result.r)) logger.throwArgumentError("signature missing or invalid r", "signature", signature);
        else result.r = hexZeroPad(result.r, 32);
        if (result.s == null || !isHexString(result.s)) logger.throwArgumentError("signature missing or invalid s", "signature", signature);
        else result.s = hexZeroPad(result.s, 32);
        const vs = arrayify(result.s);
        if (vs[0] >= 128) logger.throwArgumentError("signature s out of range", "signature", signature);
        if (result.recoveryParam) vs[0] |= 0x80;
        const _vs = hexlify(vs);
        if (result._vs) {
            if (!isHexString(result._vs)) logger.throwArgumentError("signature invalid _vs", "signature", signature);
            result._vs = hexZeroPad(result._vs, 32);
        }
        // Set or check the _vs
        if (result._vs == null) result._vs = _vs;
        else if (result._vs !== _vs) logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
    }
    result.yParityAndS = result._vs;
    result.compact = result.r + result.yParityAndS.substring(2);
    return result;
}
function joinSignature(signature) {
    signature = splitSignature(signature);
    return hexlify(concat([
        signature.r,
        signature.s,
        signature.recoveryParam ? "0x1c" : "0x1b"
    ]));
}

},{"@ethersproject/logger":"hLvB2","./_version":"4BMks","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"hLvB2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogLevel", ()=>LogLevel);
parcelHelpers.export(exports, "ErrorCode", ()=>ErrorCode);
parcelHelpers.export(exports, "Logger", ()=>Logger);
var _version = require("./_version");
"use strict";
let _permanentCensorErrors = false;
let _censorErrors = false;
const LogLevels = {
    debug: 1,
    "default": 2,
    info: 2,
    warning: 3,
    error: 4,
    off: 5
};
let _logLevel = LogLevels["default"];
let _globalLogger = null;
function _checkNormalize() {
    try {
        const missing = [];
        // Make sure all forms of normalization are supported
        [
            "NFD",
            "NFC",
            "NFKD",
            "NFKC"
        ].forEach((form)=>{
            try {
                if ("test".normalize(form) !== "test") throw new Error("bad normalize");
            } catch (error) {
                missing.push(form);
            }
        });
        if (missing.length) throw new Error("missing " + missing.join(", "));
        if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) throw new Error("broken implementation");
    } catch (error) {
        return error.message;
    }
    return null;
}
const _normalizeError = _checkNormalize();
var LogLevel;
(function(LogLevel1) {
    LogLevel1["DEBUG"] = "DEBUG";
    LogLevel1["INFO"] = "INFO";
    LogLevel1["WARNING"] = "WARNING";
    LogLevel1["ERROR"] = "ERROR";
    LogLevel1["OFF"] = "OFF";
})(LogLevel || (LogLevel = {}));
var ErrorCode;
(function(ErrorCode1) {
    ///////////////////
    // Generic Errors
    // Unknown Error
    ErrorCode1["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
    // Not Implemented
    ErrorCode1["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
    // Unsupported Operation
    //   - operation
    ErrorCode1["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
    //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
    ErrorCode1["NETWORK_ERROR"] = "NETWORK_ERROR";
    // Some sort of bad response from the server
    ErrorCode1["SERVER_ERROR"] = "SERVER_ERROR";
    // Timeout
    ErrorCode1["TIMEOUT"] = "TIMEOUT";
    ///////////////////
    // Operational  Errors
    // Buffer Overrun
    ErrorCode1["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
    // Numeric Fault
    //   - operation: the operation being executed
    //   - fault: the reason this faulted
    ErrorCode1["NUMERIC_FAULT"] = "NUMERIC_FAULT";
    ///////////////////
    // Argument Errors
    // Missing new operator to an object
    //  - name: The name of the class
    ErrorCode1["MISSING_NEW"] = "MISSING_NEW";
    // Invalid argument (e.g. value is incompatible with type) to a function:
    //   - argument: The argument name that was invalid
    //   - value: The value of the argument
    ErrorCode1["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
    // Missing argument to a function:
    //   - count: The number of arguments received
    //   - expectedCount: The number of arguments expected
    ErrorCode1["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
    // Too many arguments
    //   - count: The number of arguments received
    //   - expectedCount: The number of arguments expected
    ErrorCode1["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
    ///////////////////
    // Blockchain Errors
    // Call exception
    //  - transaction: the transaction
    //  - address?: the contract address
    //  - args?: The arguments passed into the function
    //  - method?: The Solidity method signature
    //  - errorSignature?: The EIP848 error signature
    //  - errorArgs?: The EIP848 error parameters
    //  - reason: The reason (only for EIP848 "Error(string)")
    ErrorCode1["CALL_EXCEPTION"] = "CALL_EXCEPTION";
    // Insufficient funds (< value + gasLimit * gasPrice)
    //   - transaction: the transaction attempted
    ErrorCode1["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
    // Nonce has already been used
    //   - transaction: the transaction attempted
    ErrorCode1["NONCE_EXPIRED"] = "NONCE_EXPIRED";
    // The replacement fee for the transaction is too low
    //   - transaction: the transaction attempted
    ErrorCode1["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
    // The gas limit could not be estimated
    //   - transaction: the transaction passed to estimateGas
    ErrorCode1["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
    // The transaction was replaced by one with a higher gas price
    //   - reason: "cancelled", "replaced" or "repriced"
    //   - cancelled: true if reason == "cancelled" or reason == "replaced")
    //   - hash: original transaction hash
    //   - replacement: the full TransactionsResponse for the replacement
    //   - receipt: the receipt of the replacement
    ErrorCode1["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
})(ErrorCode || (ErrorCode = {}));
const HEX = "0123456789abcdef";
class Logger {
    constructor(version){
        Object.defineProperty(this, "version", {
            enumerable: true,
            value: version,
            writable: false
        });
    }
    _log(logLevel, args) {
        const level = logLevel.toLowerCase();
        if (LogLevels[level] == null) this.throwArgumentError("invalid log level name", "logLevel", logLevel);
        if (_logLevel > LogLevels[level]) return;
        console.log.apply(console, args);
    }
    debug(...args) {
        this._log(Logger.levels.DEBUG, args);
    }
    info(...args) {
        this._log(Logger.levels.INFO, args);
    }
    warn(...args) {
        this._log(Logger.levels.WARNING, args);
    }
    makeError(message, code, params) {
        // Errors are being censored
        if (_censorErrors) return this.makeError("censored error", code, {});
        if (!code) code = Logger.errors.UNKNOWN_ERROR;
        if (!params) params = {};
        const messageDetails = [];
        Object.keys(params).forEach((key)=>{
            const value = params[key];
            try {
                if (value instanceof Uint8Array) {
                    let hex = "";
                    for(let i = 0; i < value.length; i++){
                        hex += HEX[value[i] >> 4];
                        hex += HEX[value[i] & 0x0f];
                    }
                    messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                } else messageDetails.push(key + "=" + JSON.stringify(value));
            } catch (error) {
                messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
            }
        });
        messageDetails.push(`code=${code}`);
        messageDetails.push(`version=${this.version}`);
        const reason = message;
        let url = "";
        switch(code){
            case ErrorCode.NUMERIC_FAULT:
                {
                    url = "NUMERIC_FAULT";
                    const fault = message;
                    switch(fault){
                        case "overflow":
                        case "underflow":
                        case "division-by-zero":
                            url += "-" + fault;
                            break;
                        case "negative-power":
                        case "negative-width":
                            url += "-unsupported";
                            break;
                        case "unbound-bitwise-result":
                            url += "-unbound-result";
                            break;
                    }
                    break;
                }
            case ErrorCode.CALL_EXCEPTION:
            case ErrorCode.INSUFFICIENT_FUNDS:
            case ErrorCode.MISSING_NEW:
            case ErrorCode.NONCE_EXPIRED:
            case ErrorCode.REPLACEMENT_UNDERPRICED:
            case ErrorCode.TRANSACTION_REPLACED:
            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
                url = code;
                break;
        }
        if (url) message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
        if (messageDetails.length) message += " (" + messageDetails.join(", ") + ")";
        // @TODO: Any??
        const error = new Error(message);
        error.reason = reason;
        error.code = code;
        Object.keys(params).forEach(function(key) {
            error[key] = params[key];
        });
        return error;
    }
    throwError(message, code, params) {
        throw this.makeError(message, code, params);
    }
    throwArgumentError(message, name, value) {
        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
            argument: name,
            value: value
        });
    }
    assert(condition, message, code, params) {
        if (!!condition) return;
        this.throwError(message, code, params);
    }
    assertArgument(condition, message, name, value) {
        if (!!condition) return;
        this.throwArgumentError(message, name, value);
    }
    checkNormalize(message) {
        if (message == null) message = "platform missing String.prototype.normalize";
        if (_normalizeError) this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "String.prototype.normalize",
            form: _normalizeError
        });
    }
    checkSafeUint53(value, message) {
        if (typeof value !== "number") return;
        if (message == null) message = "value not safe";
        if (value < 0 || value >= 0x1fffffffffffff) this.throwError(message, Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "out-of-safe-range",
            value: value
        });
        if (value % 1) this.throwError(message, Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "non-integer",
            value: value
        });
    }
    checkArgumentCount(count, expectedCount, message) {
        if (message) message = ": " + message;
        else message = "";
        if (count < expectedCount) this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
            count: count,
            expectedCount: expectedCount
        });
        if (count > expectedCount) this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
            count: count,
            expectedCount: expectedCount
        });
    }
    checkNew(target, kind) {
        if (target === Object || target == null) this.throwError("missing new", Logger.errors.MISSING_NEW, {
            name: kind.name
        });
    }
    checkAbstract(target, kind) {
        if (target === kind) this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, {
            name: target.name,
            operation: "new"
        });
        else if (target === Object || target == null) this.throwError("missing new", Logger.errors.MISSING_NEW, {
            name: kind.name
        });
    }
    static globalLogger() {
        if (!_globalLogger) _globalLogger = new Logger((0, _version.version));
        return _globalLogger;
    }
    static setCensorship(censorship, permanent) {
        if (!censorship && permanent) this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
        });
        if (_permanentCensorErrors) {
            if (!censorship) return;
            this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setCensorship"
            });
        }
        _censorErrors = !!censorship;
        _permanentCensorErrors = !!permanent;
    }
    static setLogLevel(logLevel) {
        const level = LogLevels[logLevel.toLowerCase()];
        if (level == null) {
            Logger.globalLogger().warn("invalid log level - " + logLevel);
            return;
        }
        _logLevel = level;
    }
    static from(version) {
        return new Logger(version);
    }
}
Logger.errors = ErrorCode;
Logger.levels = LogLevel;

},{"./_version":"7HqMB","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"7HqMB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "logger/5.6.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"fD7H8":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"4BMks":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "bytes/5.6.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"gN5k0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "bignumber/5.6.2";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"4kqiW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatFixed", ()=>formatFixed);
parcelHelpers.export(exports, "parseFixed", ()=>parseFixed);
parcelHelpers.export(exports, "FixedFormat", ()=>FixedFormat);
parcelHelpers.export(exports, "FixedNumber", ()=>FixedNumber);
var _bytes = require("@ethersproject/bytes");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
var _bignumber = require("./bignumber");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
const _constructorGuard = {};
const Zero = (0, _bignumber.BigNumber).from(0);
const NegativeOne = (0, _bignumber.BigNumber).from(-1);
function throwFault(message, fault, operation, value) {
    const params = {
        fault: fault,
        operation: operation
    };
    if (value !== undefined) params.value = value;
    return logger.throwError(message, (0, _logger.Logger).errors.NUMERIC_FAULT, params);
}
// Constant to pull zeros from for multipliers
let zeros = "0";
while(zeros.length < 256)zeros += zeros;
// Returns a string "1" followed by decimal "0"s
function getMultiplier(decimals) {
    if (typeof decimals !== "number") try {
        decimals = (0, _bignumber.BigNumber).from(decimals).toNumber();
    } catch (e) {}
    if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) return "1" + zeros.substring(0, decimals);
    return logger.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
    if (decimals == null) decimals = 0;
    const multiplier = getMultiplier(decimals);
    // Make sure wei is a big number (convert as necessary)
    value = (0, _bignumber.BigNumber).from(value);
    const negative = value.lt(Zero);
    if (negative) value = value.mul(NegativeOne);
    let fraction = value.mod(multiplier).toString();
    while(fraction.length < multiplier.length - 1)fraction = "0" + fraction;
    // Strip training 0
    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
    const whole = value.div(multiplier).toString();
    if (multiplier.length === 1) value = whole;
    else value = whole + "." + fraction;
    if (negative) value = "-" + value;
    return value;
}
function parseFixed(value, decimals) {
    if (decimals == null) decimals = 0;
    const multiplier = getMultiplier(decimals);
    if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) logger.throwArgumentError("invalid decimal value", "value", value);
    // Is it negative?
    const negative = value.substring(0, 1) === "-";
    if (negative) value = value.substring(1);
    if (value === ".") logger.throwArgumentError("missing value", "value", value);
    // Split it into a whole and fractional part
    const comps = value.split(".");
    if (comps.length > 2) logger.throwArgumentError("too many decimal points", "value", value);
    let whole = comps[0], fraction = comps[1];
    if (!whole) whole = "0";
    if (!fraction) fraction = "0";
    // Trim trailing zeros
    while(fraction[fraction.length - 1] === "0")fraction = fraction.substring(0, fraction.length - 1);
    // Check the fraction doesn't exceed our decimals size
    if (fraction.length > multiplier.length - 1) throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
    // If decimals is 0, we have an empty string for fraction
    if (fraction === "") fraction = "0";
    // Fully pad the string with zeros to get to wei
    while(fraction.length < multiplier.length - 1)fraction += "0";
    const wholeValue = (0, _bignumber.BigNumber).from(whole);
    const fractionValue = (0, _bignumber.BigNumber).from(fraction);
    let wei = wholeValue.mul(multiplier).add(fractionValue);
    if (negative) wei = wei.mul(NegativeOne);
    return wei;
}
class FixedFormat {
    constructor(constructorGuard, signed, width, decimals){
        if (constructorGuard !== _constructorGuard) logger.throwError("cannot use FixedFormat constructor; use FixedFormat.from", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
        });
        this.signed = signed;
        this.width = width;
        this.decimals = decimals;
        this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
        this._multiplier = getMultiplier(decimals);
        Object.freeze(this);
    }
    static from(value) {
        if (value instanceof FixedFormat) return value;
        if (typeof value === "number") value = `fixed128x${value}`;
        let signed = true;
        let width = 128;
        let decimals = 18;
        if (typeof value === "string") {
            if (value === "fixed") ;
            else if (value === "ufixed") signed = false;
            else {
                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                if (!match) logger.throwArgumentError("invalid fixed format", "format", value);
                signed = match[1] !== "u";
                width = parseInt(match[2]);
                decimals = parseInt(match[3]);
            }
        } else if (value) {
            const check = (key, type, defaultValue)=>{
                if (value[key] == null) return defaultValue;
                if (typeof value[key] !== type) logger.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
                return value[key];
            };
            signed = check("signed", "boolean", signed);
            width = check("width", "number", width);
            decimals = check("decimals", "number", decimals);
        }
        if (width % 8) logger.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
        if (decimals > 80) logger.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
        return new FixedFormat(_constructorGuard, signed, width, decimals);
    }
}
class FixedNumber {
    constructor(constructorGuard, hex, value, format){
        if (constructorGuard !== _constructorGuard) logger.throwError("cannot use FixedNumber constructor; use FixedNumber.from", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
        });
        this.format = format;
        this._hex = hex;
        this._value = value;
        this._isFixedNumber = true;
        Object.freeze(this);
    }
    _checkFormat(other) {
        if (this.format.name !== other.format.name) logger.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
    }
    addUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
    }
    subUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
    }
    mulUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
    }
    divUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
    }
    floor() {
        const comps = this.toString().split(".");
        if (comps.length === 1) comps.push("0");
        let result = FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (this.isNegative() && hasFraction) result = result.subUnsafe(ONE.toFormat(result.format));
        return result;
    }
    ceiling() {
        const comps = this.toString().split(".");
        if (comps.length === 1) comps.push("0");
        let result = FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (!this.isNegative() && hasFraction) result = result.addUnsafe(ONE.toFormat(result.format));
        return result;
    }
    // @TODO: Support other rounding algorithms
    round(decimals) {
        if (decimals == null) decimals = 0;
        // If we are already in range, we're done
        const comps = this.toString().split(".");
        if (comps.length === 1) comps.push("0");
        if (decimals < 0 || decimals > 80 || decimals % 1) logger.throwArgumentError("invalid decimal count", "decimals", decimals);
        if (comps[1].length <= decimals) return this;
        const factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
        const bump = BUMP.toFormat(this.format);
        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
    }
    isZero() {
        return this._value === "0.0" || this._value === "0";
    }
    isNegative() {
        return this._value[0] === "-";
    }
    toString() {
        return this._value;
    }
    toHexString(width) {
        if (width == null) return this._hex;
        if (width % 8) logger.throwArgumentError("invalid byte width", "width", width);
        const hex = (0, _bignumber.BigNumber).from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
        return (0, _bytes.hexZeroPad)(hex, width / 8);
    }
    toUnsafeFloat() {
        return parseFloat(this.toString());
    }
    toFormat(format) {
        return FixedNumber.fromString(this._value, format);
    }
    static fromValue(value, decimals, format) {
        // If decimals looks more like a format, and there is no format, shift the parameters
        if (format == null && decimals != null && !(0, _bignumber.isBigNumberish)(decimals)) {
            format = decimals;
            decimals = null;
        }
        if (decimals == null) decimals = 0;
        if (format == null) format = "fixed";
        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
    }
    static fromString(value, format) {
        if (format == null) format = "fixed";
        const fixedFormat = FixedFormat.from(format);
        const numeric = parseFixed(value, fixedFormat.decimals);
        if (!fixedFormat.signed && numeric.lt(Zero)) throwFault("unsigned value cannot be negative", "overflow", "value", value);
        let hex = null;
        if (fixedFormat.signed) hex = numeric.toTwos(fixedFormat.width).toHexString();
        else {
            hex = numeric.toHexString();
            hex = (0, _bytes.hexZeroPad)(hex, fixedFormat.width / 8);
        }
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
    }
    static fromBytes(value, format) {
        if (format == null) format = "fixed";
        const fixedFormat = FixedFormat.from(format);
        if ((0, _bytes.arrayify)(value).length > fixedFormat.width / 8) throw new Error("overflow");
        let numeric = (0, _bignumber.BigNumber).from(value);
        if (fixedFormat.signed) numeric = numeric.fromTwos(fixedFormat.width);
        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
    }
    static from(value, format) {
        if (typeof value === "string") return FixedNumber.fromString(value, format);
        if ((0, _bytes.isBytes)(value)) return FixedNumber.fromBytes(value, format);
        try {
            return FixedNumber.fromValue(value, 0, format);
        } catch (error) {
            // Allow NUMERIC_FAULT to bubble up
            if (error.code !== (0, _logger.Logger).errors.INVALID_ARGUMENT) throw error;
        }
        return logger.throwArgumentError("invalid FixedNumber value", "value", value);
    }
    static isFixedNumber(value) {
        return !!(value && value._isFixedNumber);
    }
}
const ONE = FixedNumber.from(1);
const BUMP = FixedNumber.from("0.5");

},{"@ethersproject/bytes":"htrqZ","@ethersproject/logger":"hLvB2","./_version":"gN5k0","./bignumber":"eCYd8","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"h3GJb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defineReadOnly", ()=>defineReadOnly);
// Crawl up the constructor chain to find a static method
parcelHelpers.export(exports, "getStatic", ()=>getStatic);
parcelHelpers.export(exports, "resolveProperties", ()=>resolveProperties);
parcelHelpers.export(exports, "checkProperties", ()=>checkProperties);
parcelHelpers.export(exports, "shallowCopy", ()=>shallowCopy);
parcelHelpers.export(exports, "deepCopy", ()=>deepCopy);
parcelHelpers.export(exports, "Description", ()=>Description);
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
function defineReadOnly(object, name, value) {
    Object.defineProperty(object, name, {
        enumerable: true,
        value: value,
        writable: false
    });
}
function getStatic(ctor, key) {
    for(let i = 0; i < 32; i++){
        if (ctor[key]) return ctor[key];
        if (!ctor.prototype || typeof ctor.prototype !== "object") break;
        ctor = Object.getPrototypeOf(ctor.prototype).constructor;
    }
    return null;
}
function resolveProperties(object) {
    return __awaiter(this, void 0, void 0, function*() {
        const promises = Object.keys(object).map((key)=>{
            const value = object[key];
            return Promise.resolve(value).then((v)=>({
                    key: key,
                    value: v
                }));
        });
        const results = yield Promise.all(promises);
        return results.reduce((accum, result)=>{
            accum[result.key] = result.value;
            return accum;
        }, {});
    });
}
function checkProperties(object, properties) {
    if (!object || typeof object !== "object") logger.throwArgumentError("invalid object", "object", object);
    Object.keys(object).forEach((key)=>{
        if (!properties[key]) logger.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
    });
}
function shallowCopy(object) {
    const result = {};
    for(const key in object)result[key] = object[key];
    return result;
}
const opaque = {
    bigint: true,
    boolean: true,
    "function": true,
    number: true,
    string: true
};
function _isFrozen(object) {
    // Opaque objects are not mutable, so safe to copy by assignment
    if (object === undefined || object === null || opaque[typeof object]) return true;
    if (Array.isArray(object) || typeof object === "object") {
        if (!Object.isFrozen(object)) return false;
        const keys = Object.keys(object);
        for(let i = 0; i < keys.length; i++){
            let value = null;
            try {
                value = object[keys[i]];
            } catch (error) {
                continue;
            }
            if (!_isFrozen(value)) return false;
        }
        return true;
    }
    return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
// Returns a new copy of object, such that no properties may be replaced.
// New properties may be added only to objects.
function _deepCopy(object) {
    if (_isFrozen(object)) return object;
    // Arrays are mutable, so we need to create a copy
    if (Array.isArray(object)) return Object.freeze(object.map((item)=>deepCopy(item)));
    if (typeof object === "object") {
        const result = {};
        for(const key in object){
            const value = object[key];
            if (value === undefined) continue;
            defineReadOnly(result, key, deepCopy(value));
        }
        return result;
    }
    return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function deepCopy(object) {
    return _deepCopy(object);
}
class Description {
    constructor(info){
        for(const key in info)this[key] = deepCopy(info[key]);
    }
}

},{"@ethersproject/logger":"hLvB2","./_version":"5xVnM","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"5xVnM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "properties/5.6.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"9uxOS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "abi/5.6.4";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"4pw2B":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbiCoder", ()=>AbiCoder);
parcelHelpers.export(exports, "defaultAbiCoder", ()=>defaultAbiCoder);
// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
var _bytes = require("@ethersproject/bytes");
var _properties = require("@ethersproject/properties");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
var _abstractCoder = require("./coders/abstract-coder");
var _address = require("./coders/address");
var _array = require("./coders/array");
var _boolean = require("./coders/boolean");
var _bytes1 = require("./coders/bytes");
var _fixedBytes = require("./coders/fixed-bytes");
var _null = require("./coders/null");
var _number = require("./coders/number");
var _string = require("./coders/string");
var _tuple = require("./coders/tuple");
var _fragments = require("./fragments");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
class AbiCoder {
    constructor(coerceFunc){
        (0, _properties.defineReadOnly)(this, "coerceFunc", coerceFunc || null);
    }
    _getCoder(param) {
        switch(param.baseType){
            case "address":
                return new (0, _address.AddressCoder)(param.name);
            case "bool":
                return new (0, _boolean.BooleanCoder)(param.name);
            case "string":
                return new (0, _string.StringCoder)(param.name);
            case "bytes":
                return new (0, _bytes1.BytesCoder)(param.name);
            case "array":
                return new (0, _array.ArrayCoder)(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
            case "tuple":
                return new (0, _tuple.TupleCoder)((param.components || []).map((component)=>{
                    return this._getCoder(component);
                }), param.name);
            case "":
                return new (0, _null.NullCoder)(param.name);
        }
        // u?int[0-9]*
        let match = param.type.match(paramTypeNumber);
        if (match) {
            let size = parseInt(match[2] || "256");
            if (size === 0 || size > 256 || size % 8 !== 0) logger.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
            return new (0, _number.NumberCoder)(size / 8, match[1] === "int", param.name);
        }
        // bytes[0-9]+
        match = param.type.match(paramTypeBytes);
        if (match) {
            let size = parseInt(match[1]);
            if (size === 0 || size > 32) logger.throwArgumentError("invalid bytes length", "param", param);
            return new (0, _fixedBytes.FixedBytesCoder)(size, param.name);
        }
        return logger.throwArgumentError("invalid type", "type", param.type);
    }
    _getWordSize() {
        return 32;
    }
    _getReader(data, allowLoose) {
        return new (0, _abstractCoder.Reader)(data, this._getWordSize(), this.coerceFunc, allowLoose);
    }
    _getWriter() {
        return new (0, _abstractCoder.Writer)(this._getWordSize());
    }
    getDefaultValue(types) {
        const coders = types.map((type)=>this._getCoder((0, _fragments.ParamType).from(type)));
        const coder = new (0, _tuple.TupleCoder)(coders, "_");
        return coder.defaultValue();
    }
    encode(types, values) {
        if (types.length !== values.length) logger.throwError("types/values length mismatch", (0, _logger.Logger).errors.INVALID_ARGUMENT, {
            count: {
                types: types.length,
                values: values.length
            },
            value: {
                types: types,
                values: values
            }
        });
        const coders = types.map((type)=>this._getCoder((0, _fragments.ParamType).from(type)));
        const coder = new (0, _tuple.TupleCoder)(coders, "_");
        const writer = this._getWriter();
        coder.encode(writer, values);
        return writer.data;
    }
    decode(types, data, loose) {
        const coders = types.map((type)=>this._getCoder((0, _fragments.ParamType).from(type)));
        const coder = new (0, _tuple.TupleCoder)(coders, "_");
        return coder.decode(this._getReader((0, _bytes.arrayify)(data), loose));
    }
}
const defaultAbiCoder = new AbiCoder();

},{"@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"9uxOS","./coders/abstract-coder":"hm9h5","./coders/address":"2Xx6r","./coders/array":"doYUW","./coders/boolean":"7U9tT","./coders/bytes":"i9ad0","./coders/fixed-bytes":"fMzsa","./coders/null":"8kB1r","./coders/number":"4eYqf","./coders/string":"bUJPj","./coders/tuple":"Cp2hA","./fragments":"jvsHr","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"hm9h5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkResultErrors", ()=>checkResultErrors);
parcelHelpers.export(exports, "Coder", ()=>Coder);
parcelHelpers.export(exports, "Writer", ()=>Writer);
parcelHelpers.export(exports, "Reader", ()=>Reader);
var _bytes = require("@ethersproject/bytes");
var _bignumber = require("@ethersproject/bignumber");
var _properties = require("@ethersproject/properties");
var _logger = require("@ethersproject/logger");
var _version = require("../_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
function checkResultErrors(result) {
    // Find the first error (if any)
    const errors = [];
    const checkErrors = function(path, object) {
        if (!Array.isArray(object)) return;
        for(let key in object){
            const childPath = path.slice();
            childPath.push(key);
            try {
                checkErrors(childPath, object[key]);
            } catch (error) {
                errors.push({
                    path: childPath,
                    error: error
                });
            }
        }
    };
    checkErrors([], result);
    return errors;
}
class Coder {
    constructor(name, type, localName, dynamic){
        // @TODO: defineReadOnly these
        this.name = name;
        this.type = type;
        this.localName = localName;
        this.dynamic = dynamic;
    }
    _throwError(message, value) {
        logger.throwArgumentError(message, this.localName, value);
    }
}
class Writer {
    constructor(wordSize){
        (0, _properties.defineReadOnly)(this, "wordSize", wordSize || 32);
        this._data = [];
        this._dataLength = 0;
        this._padding = new Uint8Array(wordSize);
    }
    get data() {
        return (0, _bytes.hexConcat)(this._data);
    }
    get length() {
        return this._dataLength;
    }
    _writeData(data) {
        this._data.push(data);
        this._dataLength += data.length;
        return data.length;
    }
    appendWriter(writer) {
        return this._writeData((0, _bytes.concat)(writer._data));
    }
    // Arrayish items; padded on the right to wordSize
    writeBytes(value) {
        let bytes = (0, _bytes.arrayify)(value);
        const paddingOffset = bytes.length % this.wordSize;
        if (paddingOffset) bytes = (0, _bytes.concat)([
            bytes,
            this._padding.slice(paddingOffset)
        ]);
        return this._writeData(bytes);
    }
    _getValue(value) {
        let bytes = (0, _bytes.arrayify)((0, _bignumber.BigNumber).from(value));
        if (bytes.length > this.wordSize) logger.throwError("value out-of-bounds", (0, _logger.Logger).errors.BUFFER_OVERRUN, {
            length: this.wordSize,
            offset: bytes.length
        });
        if (bytes.length % this.wordSize) bytes = (0, _bytes.concat)([
            this._padding.slice(bytes.length % this.wordSize),
            bytes
        ]);
        return bytes;
    }
    // BigNumberish items; padded on the left to wordSize
    writeValue(value) {
        return this._writeData(this._getValue(value));
    }
    writeUpdatableValue() {
        const offset = this._data.length;
        this._data.push(this._padding);
        this._dataLength += this.wordSize;
        return (value)=>{
            this._data[offset] = this._getValue(value);
        };
    }
}
class Reader {
    constructor(data, wordSize, coerceFunc, allowLoose){
        (0, _properties.defineReadOnly)(this, "_data", (0, _bytes.arrayify)(data));
        (0, _properties.defineReadOnly)(this, "wordSize", wordSize || 32);
        (0, _properties.defineReadOnly)(this, "_coerceFunc", coerceFunc);
        (0, _properties.defineReadOnly)(this, "allowLoose", allowLoose);
        this._offset = 0;
    }
    get data() {
        return (0, _bytes.hexlify)(this._data);
    }
    get consumed() {
        return this._offset;
    }
    // The default Coerce function
    static coerce(name, value) {
        let match = name.match("^u?int([0-9]+)$");
        if (match && parseInt(match[1]) <= 48) value = value.toNumber();
        return value;
    }
    coerce(name, value) {
        if (this._coerceFunc) return this._coerceFunc(name, value);
        return Reader.coerce(name, value);
    }
    _peekBytes(offset, length, loose) {
        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
        if (this._offset + alignedLength > this._data.length) {
            if (this.allowLoose && loose && this._offset + length <= this._data.length) alignedLength = length;
            else logger.throwError("data out-of-bounds", (0, _logger.Logger).errors.BUFFER_OVERRUN, {
                length: this._data.length,
                offset: this._offset + alignedLength
            });
        }
        return this._data.slice(this._offset, this._offset + alignedLength);
    }
    subReader(offset) {
        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
    }
    readBytes(length, loose) {
        let bytes = this._peekBytes(0, length, !!loose);
        this._offset += bytes.length;
        // @TODO: Make sure the length..end bytes are all 0?
        return bytes.slice(0, length);
    }
    readValue() {
        return (0, _bignumber.BigNumber).from(this.readBytes(this.wordSize));
    }
}

},{"@ethersproject/bytes":"htrqZ","@ethersproject/bignumber":"ckYYW","@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","../_version":"9uxOS","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"2Xx6r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AddressCoder", ()=>AddressCoder);
var _address = require("@ethersproject/address");
var _bytes = require("@ethersproject/bytes");
var _abstractCoder = require("./abstract-coder");
"use strict";
class AddressCoder extends (0, _abstractCoder.Coder) {
    constructor(localName){
        super("address", "address", localName, false);
    }
    defaultValue() {
        return "0x0000000000000000000000000000000000000000";
    }
    encode(writer, value) {
        try {
            value = (0, _address.getAddress)(value);
        } catch (error) {
            this._throwError(error.message, value);
        }
        return writer.writeValue(value);
    }
    decode(reader) {
        return (0, _address.getAddress)((0, _bytes.hexZeroPad)(reader.readValue().toHexString(), 20));
    }
}

},{"@ethersproject/address":"ggdAz","@ethersproject/bytes":"htrqZ","./abstract-coder":"hm9h5","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"ggdAz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAddress", ()=>getAddress);
parcelHelpers.export(exports, "isAddress", ()=>isAddress);
parcelHelpers.export(exports, "getIcapAddress", ()=>getIcapAddress);
// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
parcelHelpers.export(exports, "getContractAddress", ()=>getContractAddress);
parcelHelpers.export(exports, "getCreate2Address", ()=>getCreate2Address);
var _bytes = require("@ethersproject/bytes");
var _bignumber = require("@ethersproject/bignumber");
var _keccak256 = require("@ethersproject/keccak256");
var _rlp = require("@ethersproject/rlp");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
function getChecksumAddress(address) {
    if (!(0, _bytes.isHexString)(address, 20)) logger.throwArgumentError("invalid address", "address", address);
    address = address.toLowerCase();
    const chars = address.substring(2).split("");
    const expanded = new Uint8Array(40);
    for(let i3 = 0; i3 < 40; i3++)expanded[i3] = chars[i3].charCodeAt(0);
    const hashed = (0, _bytes.arrayify)((0, _keccak256.keccak256)(expanded));
    for(let i2 = 0; i2 < 40; i2 += 2){
        if (hashed[i2 >> 1] >> 4 >= 8) chars[i2] = chars[i2].toUpperCase();
        if ((hashed[i2 >> 1] & 0x0f) >= 8) chars[i2 + 1] = chars[i2 + 1].toUpperCase();
    }
    return "0x" + chars.join("");
}
// Shims for environments that are missing some required constants and functions
const MAX_SAFE_INTEGER = 0x1fffffffffffff;
function log10(x) {
    if (Math.log10) return Math.log10(x);
    return Math.log(x) / Math.LN10;
}
// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
// Create lookup table
const ibanLookup = {};
for(let i = 0; i < 10; i++)ibanLookup[String(i)] = String(i);
for(let i1 = 0; i1 < 26; i1++)ibanLookup[String.fromCharCode(65 + i1)] = String(10 + i1);
// How many decimal digits can we process? (for 64-bit float, this is 15)
const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
function ibanChecksum(address) {
    address = address.toUpperCase();
    address = address.substring(4) + address.substring(0, 2) + "00";
    let expanded = address.split("").map((c)=>{
        return ibanLookup[c];
    }).join("");
    // Javascript can handle integers safely up to 15 (decimal) digits
    while(expanded.length >= safeDigits){
        let block = expanded.substring(0, safeDigits);
        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
    }
    let checksum = String(98 - parseInt(expanded, 10) % 97);
    while(checksum.length < 2)checksum = "0" + checksum;
    return checksum;
}
function getAddress(address) {
    let result = null;
    if (typeof address !== "string") logger.throwArgumentError("invalid address", "address", address);
    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        // Missing the 0x prefix
        if (address.substring(0, 2) !== "0x") address = "0x" + address;
        result = getChecksumAddress(address);
        // It is a checksummed address with a bad checksum
        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) logger.throwArgumentError("bad address checksum", "address", address);
    // Maybe ICAP? (we only support direct mode)
    } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        // It is an ICAP address with a bad checksum
        if (address.substring(2, 4) !== ibanChecksum(address)) logger.throwArgumentError("bad icap checksum", "address", address);
        result = (0, _bignumber._base36To16)(address.substring(4));
        while(result.length < 40)result = "0" + result;
        result = getChecksumAddress("0x" + result);
    } else logger.throwArgumentError("invalid address", "address", address);
    return result;
}
function isAddress(address) {
    try {
        getAddress(address);
        return true;
    } catch (error) {}
    return false;
}
function getIcapAddress(address) {
    let base36 = (0, _bignumber._base16To36)(getAddress(address).substring(2)).toUpperCase();
    while(base36.length < 30)base36 = "0" + base36;
    return "XE" + ibanChecksum("XE00" + base36) + base36;
}
function getContractAddress(transaction) {
    let from = null;
    try {
        from = getAddress(transaction.from);
    } catch (error) {
        logger.throwArgumentError("missing from address", "transaction", transaction);
    }
    const nonce = (0, _bytes.stripZeros)((0, _bytes.arrayify)((0, _bignumber.BigNumber).from(transaction.nonce).toHexString()));
    return getAddress((0, _bytes.hexDataSlice)((0, _keccak256.keccak256)((0, _rlp.encode)([
        from,
        nonce
    ])), 12));
}
function getCreate2Address(from, salt, initCodeHash) {
    if ((0, _bytes.hexDataLength)(salt) !== 32) logger.throwArgumentError("salt must be 32 bytes", "salt", salt);
    if ((0, _bytes.hexDataLength)(initCodeHash) !== 32) logger.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
    return getAddress((0, _bytes.hexDataSlice)((0, _keccak256.keccak256)((0, _bytes.concat)([
        "0xff",
        getAddress(from),
        salt,
        initCodeHash
    ])), 12));
}

},{"@ethersproject/bytes":"htrqZ","@ethersproject/bignumber":"ckYYW","@ethersproject/keccak256":"hXDEv","@ethersproject/rlp":"b2vlp","@ethersproject/logger":"hLvB2","./_version":"jWoM7","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"hXDEv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "keccak256", ()=>keccak256);
var _jsSha3 = require("js-sha3");
var _jsSha3Default = parcelHelpers.interopDefault(_jsSha3);
var _bytes = require("@ethersproject/bytes");
"use strict";
function keccak256(data) {
    return "0x" + (0, _jsSha3Default.default).keccak_256((0, _bytes.arrayify)(data));
}

},{"js-sha3":"7x0z6","@ethersproject/bytes":"htrqZ","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"7x0z6":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */ /*jslint bitwise: true */ (function() {
    "use strict";
    var INPUT_ERROR = "input is invalid type";
    var FINALIZE_ERROR = "finalize already called";
    var WINDOW = typeof window === "object";
    var root = WINDOW ? window : {};
    if (root.JS_SHA3_NO_WINDOW) WINDOW = false;
    var WEB_WORKER = !WINDOW && typeof self === "object";
    var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
    if (NODE_JS) root = global;
    else if (WEB_WORKER) root = self;
    var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && true && module.exports;
    var AMD = typeof define === "function" && define.amd;
    var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
    var HEX_CHARS = "0123456789abcdef".split("");
    var SHAKE_PADDING = [
        31,
        7936,
        2031616,
        520093696
    ];
    var CSHAKE_PADDING = [
        4,
        1024,
        262144,
        67108864
    ];
    var KECCAK_PADDING = [
        1,
        256,
        65536,
        16777216
    ];
    var PADDING = [
        6,
        1536,
        393216,
        100663296
    ];
    var SHIFT = [
        0,
        8,
        16,
        24
    ];
    var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
    ];
    var BITS = [
        224,
        256,
        384,
        512
    ];
    var SHAKE_BITS = [
        128,
        256
    ];
    var OUTPUT_TYPES = [
        "hex",
        "buffer",
        "arrayBuffer",
        "array",
        "digest"
    ];
    var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
    };
    if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) Array.isArray = function(obj) {
        return Object.prototype.toString.call(obj) === "[object Array]";
    };
    if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) ArrayBuffer.isView = function(obj) {
        return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
    var createOutputMethod = function(bits, padding, outputType) {
        return function(message) {
            return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
    };
    var createShakeOutputMethod = function(bits, padding, outputType) {
        return function(message, outputBits) {
            return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
    };
    var createCshakeOutputMethod = function(bits, padding, outputType) {
        return function(message, outputBits, n, s) {
            return methods["cshake" + bits].update(message, outputBits, n, s)[outputType]();
        };
    };
    var createKmacOutputMethod = function(bits, padding, outputType) {
        return function(key, message, outputBits, s) {
            return methods["kmac" + bits].update(key, message, outputBits, s)[outputType]();
        };
    };
    var createOutputMethods = function(method, createMethod, bits, padding) {
        for(var i = 0; i < OUTPUT_TYPES.length; ++i){
            var type = OUTPUT_TYPES[i];
            method[type] = createMethod(bits, padding, type);
        }
        return method;
    };
    var createMethod1 = function(bits, padding) {
        var method = createOutputMethod(bits, padding, "hex");
        method.create = function() {
            return new Keccak(bits, padding, bits);
        };
        method.update = function(message) {
            return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits, padding);
    };
    var createShakeMethod = function(bits, padding) {
        var method = createShakeOutputMethod(bits, padding, "hex");
        method.create = function(outputBits) {
            return new Keccak(bits, padding, outputBits);
        };
        method.update = function(message, outputBits) {
            return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits, padding);
    };
    var createCshakeMethod = function(bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createCshakeOutputMethod(bits, padding, "hex");
        method.create = function(outputBits, n, s) {
            if (!n && !s) return methods["shake" + bits].create(outputBits);
            else return new Keccak(bits, padding, outputBits).bytepad([
                n,
                s
            ], w);
        };
        method.update = function(message, outputBits, n, s) {
            return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
    };
    var createKmacMethod = function(bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createKmacOutputMethod(bits, padding, "hex");
        method.create = function(key, outputBits, s) {
            return new Kmac(bits, padding, outputBits).bytepad([
                "KMAC",
                s
            ], w).bytepad([
                key
            ], w);
        };
        method.update = function(key, message, outputBits, s) {
            return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits, padding);
    };
    var algorithms = [
        {
            name: "keccak",
            padding: KECCAK_PADDING,
            bits: BITS,
            createMethod: createMethod1
        },
        {
            name: "sha3",
            padding: PADDING,
            bits: BITS,
            createMethod: createMethod1
        },
        {
            name: "shake",
            padding: SHAKE_PADDING,
            bits: SHAKE_BITS,
            createMethod: createShakeMethod
        },
        {
            name: "cshake",
            padding: CSHAKE_PADDING,
            bits: SHAKE_BITS,
            createMethod: createCshakeMethod
        },
        {
            name: "kmac",
            padding: CSHAKE_PADDING,
            bits: SHAKE_BITS,
            createMethod: createKmacMethod
        }
    ];
    var methods = {}, methodNames = [];
    for(var i1 = 0; i1 < algorithms.length; ++i1){
        var algorithm = algorithms[i1];
        var bits1 = algorithm.bits;
        for(var j = 0; j < bits1.length; ++j){
            var methodName = algorithm.name + "_" + bits1[j];
            methodNames.push(methodName);
            methods[methodName] = algorithm.createMethod(bits1[j], algorithm.padding);
            if (algorithm.name !== "sha3") {
                var newMethodName = algorithm.name + bits1[j];
                methodNames.push(newMethodName);
                methods[newMethodName] = methods[methodName];
            }
        }
    }
    function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for(var i = 0; i < 50; ++i)this.s[i] = 0;
    }
    Keccak.prototype.update = function(message) {
        if (this.finalized) throw new Error(FINALIZE_ERROR);
        var notString, type = typeof message;
        if (type !== "string") {
            if (type === "object") {
                if (message === null) throw new Error(INPUT_ERROR);
                else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) message = new Uint8Array(message);
                else if (!Array.isArray(message)) {
                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) throw new Error(INPUT_ERROR);
                }
            } else throw new Error(INPUT_ERROR);
            notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i, code;
        while(index < length){
            if (this.reset) {
                this.reset = false;
                blocks[0] = this.block;
                for(i = 1; i < blockCount + 1; ++i)blocks[i] = 0;
            }
            if (notString) for(i = this.start; index < length && i < byteCount; ++index)blocks[i >> 2] |= message[index] << SHIFT[(i++) & 3];
            else for(i = this.start; index < length && i < byteCount; ++index){
                code = message.charCodeAt(index);
                if (code < 0x80) blocks[i >> 2] |= code << SHIFT[(i++) & 3];
                else if (code < 0x800) {
                    blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[(i++) & 3];
                } else if (code < 0xd800 || code >= 0xe000) {
                    blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[(i++) & 3];
                } else {
                    code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
                    blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[(i++) & 3];
                }
            }
            this.lastByteIndex = i;
            if (i >= byteCount) {
                this.start = i - byteCount;
                this.block = blocks[blockCount];
                for(i = 0; i < blockCount; ++i)s[i] ^= blocks[i];
                f(s);
                this.reset = true;
            } else this.start = i;
        }
        return this;
    };
    Keccak.prototype.encode = function(x, right) {
        var o = x & 255, n = 1;
        var bytes = [
            o
        ];
        x = x >> 8;
        o = x & 255;
        while(o > 0){
            bytes.unshift(o);
            x = x >> 8;
            o = x & 255;
            ++n;
        }
        if (right) bytes.push(n);
        else bytes.unshift(n);
        this.update(bytes);
        return bytes.length;
    };
    Keccak.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== "string") {
            if (type === "object") {
                if (str === null) throw new Error(INPUT_ERROR);
                else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) str = new Uint8Array(str);
                else if (!Array.isArray(str)) {
                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) throw new Error(INPUT_ERROR);
                }
            } else throw new Error(INPUT_ERROR);
            notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) bytes = length;
        else for(var i = 0; i < str.length; ++i){
            var code = str.charCodeAt(i);
            if (code < 0x80) bytes += 1;
            else if (code < 0x800) bytes += 2;
            else if (code < 0xd800 || code >= 0xe000) bytes += 3;
            else {
                code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++i) & 0x3ff);
                bytes += 4;
            }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
    };
    Keccak.prototype.bytepad = function(strs, w) {
        var bytes = this.encode(w);
        for(var i = 0; i < strs.length; ++i)bytes += this.encodeString(strs[i]);
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
    };
    Keccak.prototype.finalize = function() {
        if (this.finalized) return;
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
            blocks[0] = blocks[blockCount];
            for(i = 1; i < blockCount + 1; ++i)blocks[i] = 0;
        }
        blocks[blockCount - 1] |= 0x80000000;
        for(i = 0; i < blockCount; ++i)s[i] ^= blocks[i];
        f(s);
    };
    Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = "", block;
        while(j < outputBlocks){
            for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j){
                block = s[i];
                hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
            }
            if (j % blockCount === 0) {
                f(s);
                i = 0;
            }
        }
        if (extraBytes) {
            block = s[i];
            hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];
            if (extraBytes > 1) hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];
            if (extraBytes > 2) hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];
        }
        return hex;
    };
    Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        else buffer = new ArrayBuffer(bytes);
        var array = new Uint32Array(buffer);
        while(j < outputBlocks){
            for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j)array[j] = s[i];
            if (j % blockCount === 0) f(s);
        }
        if (extraBytes) {
            array[i] = s[i];
            buffer = buffer.slice(0, bytes);
        }
        return buffer;
    };
    Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
    Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while(j < outputBlocks){
            for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j){
                offset = j << 2;
                block = s[i];
                array[offset] = block & 0xFF;
                array[offset + 1] = block >> 8 & 0xFF;
                array[offset + 2] = block >> 16 & 0xFF;
                array[offset + 3] = block >> 24 & 0xFF;
            }
            if (j % blockCount === 0) f(s);
        }
        if (extraBytes) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            if (extraBytes > 1) array[offset + 1] = block >> 8 & 0xFF;
            if (extraBytes > 2) array[offset + 2] = block >> 16 & 0xFF;
        }
        return array;
    };
    function Kmac(bits, padding, outputBits) {
        Keccak.call(this, bits, padding, outputBits);
    }
    Kmac.prototype = new Keccak();
    Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
    };
    var f = function(s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for(n = 0; n < 48; n += 2){
            c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
            c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
            c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
            c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
            c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
            c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
            c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
            c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
            c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
            c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
            h = c8 ^ (c2 << 1 | c3 >>> 31);
            l = c9 ^ (c3 << 1 | c2 >>> 31);
            s[0] ^= h;
            s[1] ^= l;
            s[10] ^= h;
            s[11] ^= l;
            s[20] ^= h;
            s[21] ^= l;
            s[30] ^= h;
            s[31] ^= l;
            s[40] ^= h;
            s[41] ^= l;
            h = c0 ^ (c4 << 1 | c5 >>> 31);
            l = c1 ^ (c5 << 1 | c4 >>> 31);
            s[2] ^= h;
            s[3] ^= l;
            s[12] ^= h;
            s[13] ^= l;
            s[22] ^= h;
            s[23] ^= l;
            s[32] ^= h;
            s[33] ^= l;
            s[42] ^= h;
            s[43] ^= l;
            h = c2 ^ (c6 << 1 | c7 >>> 31);
            l = c3 ^ (c7 << 1 | c6 >>> 31);
            s[4] ^= h;
            s[5] ^= l;
            s[14] ^= h;
            s[15] ^= l;
            s[24] ^= h;
            s[25] ^= l;
            s[34] ^= h;
            s[35] ^= l;
            s[44] ^= h;
            s[45] ^= l;
            h = c4 ^ (c8 << 1 | c9 >>> 31);
            l = c5 ^ (c9 << 1 | c8 >>> 31);
            s[6] ^= h;
            s[7] ^= l;
            s[16] ^= h;
            s[17] ^= l;
            s[26] ^= h;
            s[27] ^= l;
            s[36] ^= h;
            s[37] ^= l;
            s[46] ^= h;
            s[47] ^= l;
            h = c6 ^ (c0 << 1 | c1 >>> 31);
            l = c7 ^ (c1 << 1 | c0 >>> 31);
            s[8] ^= h;
            s[9] ^= l;
            s[18] ^= h;
            s[19] ^= l;
            s[28] ^= h;
            s[29] ^= l;
            s[38] ^= h;
            s[39] ^= l;
            s[48] ^= h;
            s[49] ^= l;
            b0 = s[0];
            b1 = s[1];
            b32 = s[11] << 4 | s[10] >>> 28;
            b33 = s[10] << 4 | s[11] >>> 28;
            b14 = s[20] << 3 | s[21] >>> 29;
            b15 = s[21] << 3 | s[20] >>> 29;
            b46 = s[31] << 9 | s[30] >>> 23;
            b47 = s[30] << 9 | s[31] >>> 23;
            b28 = s[40] << 18 | s[41] >>> 14;
            b29 = s[41] << 18 | s[40] >>> 14;
            b20 = s[2] << 1 | s[3] >>> 31;
            b21 = s[3] << 1 | s[2] >>> 31;
            b2 = s[13] << 12 | s[12] >>> 20;
            b3 = s[12] << 12 | s[13] >>> 20;
            b34 = s[22] << 10 | s[23] >>> 22;
            b35 = s[23] << 10 | s[22] >>> 22;
            b16 = s[33] << 13 | s[32] >>> 19;
            b17 = s[32] << 13 | s[33] >>> 19;
            b48 = s[42] << 2 | s[43] >>> 30;
            b49 = s[43] << 2 | s[42] >>> 30;
            b40 = s[5] << 30 | s[4] >>> 2;
            b41 = s[4] << 30 | s[5] >>> 2;
            b22 = s[14] << 6 | s[15] >>> 26;
            b23 = s[15] << 6 | s[14] >>> 26;
            b4 = s[25] << 11 | s[24] >>> 21;
            b5 = s[24] << 11 | s[25] >>> 21;
            b36 = s[34] << 15 | s[35] >>> 17;
            b37 = s[35] << 15 | s[34] >>> 17;
            b18 = s[45] << 29 | s[44] >>> 3;
            b19 = s[44] << 29 | s[45] >>> 3;
            b10 = s[6] << 28 | s[7] >>> 4;
            b11 = s[7] << 28 | s[6] >>> 4;
            b42 = s[17] << 23 | s[16] >>> 9;
            b43 = s[16] << 23 | s[17] >>> 9;
            b24 = s[26] << 25 | s[27] >>> 7;
            b25 = s[27] << 25 | s[26] >>> 7;
            b6 = s[36] << 21 | s[37] >>> 11;
            b7 = s[37] << 21 | s[36] >>> 11;
            b38 = s[47] << 24 | s[46] >>> 8;
            b39 = s[46] << 24 | s[47] >>> 8;
            b30 = s[8] << 27 | s[9] >>> 5;
            b31 = s[9] << 27 | s[8] >>> 5;
            b12 = s[18] << 20 | s[19] >>> 12;
            b13 = s[19] << 20 | s[18] >>> 12;
            b44 = s[29] << 7 | s[28] >>> 25;
            b45 = s[28] << 7 | s[29] >>> 25;
            b26 = s[38] << 8 | s[39] >>> 24;
            b27 = s[39] << 8 | s[38] >>> 24;
            b8 = s[48] << 14 | s[49] >>> 18;
            b9 = s[49] << 14 | s[48] >>> 18;
            s[0] = b0 ^ ~b2 & b4;
            s[1] = b1 ^ ~b3 & b5;
            s[10] = b10 ^ ~b12 & b14;
            s[11] = b11 ^ ~b13 & b15;
            s[20] = b20 ^ ~b22 & b24;
            s[21] = b21 ^ ~b23 & b25;
            s[30] = b30 ^ ~b32 & b34;
            s[31] = b31 ^ ~b33 & b35;
            s[40] = b40 ^ ~b42 & b44;
            s[41] = b41 ^ ~b43 & b45;
            s[2] = b2 ^ ~b4 & b6;
            s[3] = b3 ^ ~b5 & b7;
            s[12] = b12 ^ ~b14 & b16;
            s[13] = b13 ^ ~b15 & b17;
            s[22] = b22 ^ ~b24 & b26;
            s[23] = b23 ^ ~b25 & b27;
            s[32] = b32 ^ ~b34 & b36;
            s[33] = b33 ^ ~b35 & b37;
            s[42] = b42 ^ ~b44 & b46;
            s[43] = b43 ^ ~b45 & b47;
            s[4] = b4 ^ ~b6 & b8;
            s[5] = b5 ^ ~b7 & b9;
            s[14] = b14 ^ ~b16 & b18;
            s[15] = b15 ^ ~b17 & b19;
            s[24] = b24 ^ ~b26 & b28;
            s[25] = b25 ^ ~b27 & b29;
            s[34] = b34 ^ ~b36 & b38;
            s[35] = b35 ^ ~b37 & b39;
            s[44] = b44 ^ ~b46 & b48;
            s[45] = b45 ^ ~b47 & b49;
            s[6] = b6 ^ ~b8 & b0;
            s[7] = b7 ^ ~b9 & b1;
            s[16] = b16 ^ ~b18 & b10;
            s[17] = b17 ^ ~b19 & b11;
            s[26] = b26 ^ ~b28 & b20;
            s[27] = b27 ^ ~b29 & b21;
            s[36] = b36 ^ ~b38 & b30;
            s[37] = b37 ^ ~b39 & b31;
            s[46] = b46 ^ ~b48 & b40;
            s[47] = b47 ^ ~b49 & b41;
            s[8] = b8 ^ ~b0 & b2;
            s[9] = b9 ^ ~b1 & b3;
            s[18] = b18 ^ ~b10 & b12;
            s[19] = b19 ^ ~b11 & b13;
            s[28] = b28 ^ ~b20 & b22;
            s[29] = b29 ^ ~b21 & b23;
            s[38] = b38 ^ ~b30 & b32;
            s[39] = b39 ^ ~b31 & b33;
            s[48] = b48 ^ ~b40 & b42;
            s[49] = b49 ^ ~b41 & b43;
            s[0] ^= RC[n];
            s[1] ^= RC[n + 1];
        }
    };
    if (COMMON_JS) module.exports = methods;
    else {
        for(i1 = 0; i1 < methodNames.length; ++i1)root[methodNames[i1]] = methods[methodNames[i1]];
        if (AMD) define(function() {
            return methods;
        });
    }
})();

},{"process":"50f2S"}],"b2vlp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encode", ()=>encode);
parcelHelpers.export(exports, "decode", ()=>decode);
//See: https://github.com/ethereum/wiki/wiki/RLP
var _bytes = require("@ethersproject/bytes");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
function arrayifyInteger(value) {
    const result = [];
    while(value){
        result.unshift(value & 0xff);
        value >>= 8;
    }
    return result;
}
function unarrayifyInteger(data, offset, length) {
    let result = 0;
    for(let i = 0; i < length; i++)result = result * 256 + data[offset + i];
    return result;
}
function _encode(object) {
    if (Array.isArray(object)) {
        let payload = [];
        object.forEach(function(child) {
            payload = payload.concat(_encode(child));
        });
        if (payload.length <= 55) {
            payload.unshift(0xc0 + payload.length);
            return payload;
        }
        const length = arrayifyInteger(payload.length);
        length.unshift(0xf7 + length.length);
        return length.concat(payload);
    }
    if (!(0, _bytes.isBytesLike)(object)) logger.throwArgumentError("RLP object must be BytesLike", "object", object);
    const data = Array.prototype.slice.call((0, _bytes.arrayify)(object));
    if (data.length === 1 && data[0] <= 0x7f) return data;
    else if (data.length <= 55) {
        data.unshift(0x80 + data.length);
        return data;
    }
    const length = arrayifyInteger(data.length);
    length.unshift(0xb7 + length.length);
    return length.concat(data);
}
function encode(object) {
    return (0, _bytes.hexlify)(_encode(object));
}
function _decodeChildren(data, offset, childOffset, length) {
    const result = [];
    while(childOffset < offset + 1 + length){
        const decoded = _decode(data, childOffset);
        result.push(decoded.result);
        childOffset += decoded.consumed;
        if (childOffset > offset + 1 + length) logger.throwError("child data too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
    }
    return {
        consumed: 1 + length,
        result: result
    };
}
// returns { consumed: number, result: Object }
function _decode(data, offset) {
    if (data.length === 0) logger.throwError("data too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
    // Array with extra length prefix
    if (data[offset] >= 0xf8) {
        const lengthLength = data[offset] - 0xf7;
        if (offset + 1 + lengthLength > data.length) logger.throwError("data short segment too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
        const length = unarrayifyInteger(data, offset + 1, lengthLength);
        if (offset + 1 + lengthLength + length > data.length) logger.throwError("data long segment too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
    } else if (data[offset] >= 0xc0) {
        const length = data[offset] - 0xc0;
        if (offset + 1 + length > data.length) logger.throwError("data array too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
        return _decodeChildren(data, offset, offset + 1, length);
    } else if (data[offset] >= 0xb8) {
        const lengthLength = data[offset] - 0xb7;
        if (offset + 1 + lengthLength > data.length) logger.throwError("data array too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
        const length = unarrayifyInteger(data, offset + 1, lengthLength);
        if (offset + 1 + lengthLength + length > data.length) logger.throwError("data array too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
        const result = (0, _bytes.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
        return {
            consumed: 1 + lengthLength + length,
            result: result
        };
    } else if (data[offset] >= 0x80) {
        const length = data[offset] - 0x80;
        if (offset + 1 + length > data.length) logger.throwError("data too short", (0, _logger.Logger).errors.BUFFER_OVERRUN, {});
        const result = (0, _bytes.hexlify)(data.slice(offset + 1, offset + 1 + length));
        return {
            consumed: 1 + length,
            result: result
        };
    }
    return {
        consumed: 1,
        result: (0, _bytes.hexlify)(data[offset])
    };
}
function decode(data) {
    const bytes = (0, _bytes.arrayify)(data);
    const decoded = _decode(bytes, 0);
    if (decoded.consumed !== bytes.length) logger.throwArgumentError("invalid rlp data", "data", data);
    return decoded.result;
}

},{"@ethersproject/bytes":"htrqZ","@ethersproject/logger":"hLvB2","./_version":"9e0ao","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"9e0ao":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "rlp/5.6.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"jWoM7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "address/5.6.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"doYUW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pack", ()=>pack);
parcelHelpers.export(exports, "unpack", ()=>unpack);
parcelHelpers.export(exports, "ArrayCoder", ()=>ArrayCoder);
var _logger = require("@ethersproject/logger");
var _version = require("../_version");
var _abstractCoder = require("./abstract-coder");
var _anonymous = require("./anonymous");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
function pack(writer, coders, values) {
    let arrayValues = null;
    if (Array.isArray(values)) arrayValues = values;
    else if (values && typeof values === "object") {
        let unique = {};
        arrayValues = coders.map((coder)=>{
            const name = coder.localName;
            if (!name) logger.throwError("cannot encode object for signature with missing names", (0, _logger.Logger).errors.INVALID_ARGUMENT, {
                argument: "values",
                coder: coder,
                value: values
            });
            if (unique[name]) logger.throwError("cannot encode object for signature with duplicate names", (0, _logger.Logger).errors.INVALID_ARGUMENT, {
                argument: "values",
                coder: coder,
                value: values
            });
            unique[name] = true;
            return values[name];
        });
    } else logger.throwArgumentError("invalid tuple value", "tuple", values);
    if (coders.length !== arrayValues.length) logger.throwArgumentError("types/value length mismatch", "tuple", values);
    let staticWriter = new (0, _abstractCoder.Writer)(writer.wordSize);
    let dynamicWriter = new (0, _abstractCoder.Writer)(writer.wordSize);
    let updateFuncs = [];
    coders.forEach((coder, index)=>{
        let value = arrayValues[index];
        if (coder.dynamic) {
            // Get current dynamic offset (for the future pointer)
            let dynamicOffset = dynamicWriter.length;
            // Encode the dynamic value into the dynamicWriter
            coder.encode(dynamicWriter, value);
            // Prepare to populate the correct offset once we are done
            let updateFunc = staticWriter.writeUpdatableValue();
            updateFuncs.push((baseOffset)=>{
                updateFunc(baseOffset + dynamicOffset);
            });
        } else coder.encode(staticWriter, value);
    });
    // Backfill all the dynamic offsets, now that we know the static length
    updateFuncs.forEach((func)=>{
        func(staticWriter.length);
    });
    let length = writer.appendWriter(staticWriter);
    length += writer.appendWriter(dynamicWriter);
    return length;
}
function unpack(reader, coders) {
    let values = [];
    // A reader anchored to this base
    let baseReader = reader.subReader(0);
    coders.forEach((coder)=>{
        let value = null;
        if (coder.dynamic) {
            let offset = reader.readValue();
            let offsetReader = baseReader.subReader(offset.toNumber());
            try {
                value = coder.decode(offsetReader);
            } catch (error) {
                // Cannot recover from this
                if (error.code === (0, _logger.Logger).errors.BUFFER_OVERRUN) throw error;
                value = error;
                value.baseType = coder.name;
                value.name = coder.localName;
                value.type = coder.type;
            }
        } else try {
            value = coder.decode(reader);
        } catch (error) {
            // Cannot recover from this
            if (error.code === (0, _logger.Logger).errors.BUFFER_OVERRUN) throw error;
            value = error;
            value.baseType = coder.name;
            value.name = coder.localName;
            value.type = coder.type;
        }
        if (value != undefined) values.push(value);
    });
    // We only output named properties for uniquely named coders
    const uniqueNames = coders.reduce((accum, coder)=>{
        const name = coder.localName;
        if (name) {
            if (!accum[name]) accum[name] = 0;
            accum[name]++;
        }
        return accum;
    }, {});
    // Add any named parameters (i.e. tuples)
    coders.forEach((coder, index)=>{
        let name = coder.localName;
        if (!name || uniqueNames[name] !== 1) return;
        if (name === "length") name = "_length";
        if (values[name] != null) return;
        const value = values[index];
        if (value instanceof Error) Object.defineProperty(values, name, {
            enumerable: true,
            get: ()=>{
                throw value;
            }
        });
        else values[name] = value;
    });
    for(let i = 0; i < values.length; i++){
        const value = values[i];
        if (value instanceof Error) Object.defineProperty(values, i, {
            enumerable: true,
            get: ()=>{
                throw value;
            }
        });
    }
    return Object.freeze(values);
}
class ArrayCoder extends (0, _abstractCoder.Coder) {
    constructor(coder, length, localName){
        const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
        const dynamic = length === -1 || coder.dynamic;
        super("array", type, localName, dynamic);
        this.coder = coder;
        this.length = length;
    }
    defaultValue() {
        // Verifies the child coder is valid (even if the array is dynamic or 0-length)
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for(let i = 0; i < this.length; i++)result.push(defaultChild);
        return result;
    }
    encode(writer, value) {
        if (!Array.isArray(value)) this._throwError("expected array value", value);
        let count = this.length;
        if (count === -1) {
            count = value.length;
            writer.writeValue(value.length);
        }
        logger.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for(let i = 0; i < value.length; i++)coders.push(this.coder);
        return pack(writer, coders, value);
    }
    decode(reader) {
        let count = this.length;
        if (count === -1) {
            count = reader.readValue().toNumber();
            // Check that there is *roughly* enough data to ensure
            // stray random data is not being read as a length. Each
            // slot requires at least 32 bytes for their value (or 32
            // bytes as a link to the data). This could use a much
            // tighter bound, but we are erroring on the side of safety.
            if (count * 32 > reader._data.length) logger.throwError("insufficient data length", (0, _logger.Logger).errors.BUFFER_OVERRUN, {
                length: reader._data.length,
                count: count
            });
        }
        let coders = [];
        for(let i = 0; i < count; i++)coders.push(new (0, _anonymous.AnonymousCoder)(this.coder));
        return reader.coerce(this.name, unpack(reader, coders));
    }
}

},{"@ethersproject/logger":"hLvB2","../_version":"9uxOS","./abstract-coder":"hm9h5","./anonymous":"bx81i","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"bx81i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Clones the functionality of an existing Coder, but without a localName
parcelHelpers.export(exports, "AnonymousCoder", ()=>AnonymousCoder);
var _abstractCoder = require("./abstract-coder");
"use strict";
class AnonymousCoder extends (0, _abstractCoder.Coder) {
    constructor(coder){
        super(coder.name, coder.type, undefined, coder.dynamic);
        this.coder = coder;
    }
    defaultValue() {
        return this.coder.defaultValue();
    }
    encode(writer, value) {
        return this.coder.encode(writer, value);
    }
    decode(reader) {
        return this.coder.decode(reader);
    }
}

},{"./abstract-coder":"hm9h5","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"7U9tT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BooleanCoder", ()=>BooleanCoder);
var _abstractCoder = require("./abstract-coder");
"use strict";
class BooleanCoder extends (0, _abstractCoder.Coder) {
    constructor(localName){
        super("bool", "bool", localName, false);
    }
    defaultValue() {
        return false;
    }
    encode(writer, value) {
        return writer.writeValue(value ? 1 : 0);
    }
    decode(reader) {
        return reader.coerce(this.type, !reader.readValue().isZero());
    }
}

},{"./abstract-coder":"hm9h5","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"i9ad0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DynamicBytesCoder", ()=>DynamicBytesCoder);
parcelHelpers.export(exports, "BytesCoder", ()=>BytesCoder);
var _bytes = require("@ethersproject/bytes");
var _abstractCoder = require("./abstract-coder");
"use strict";
class DynamicBytesCoder extends (0, _abstractCoder.Coder) {
    constructor(type, localName){
        super(type, type, localName, true);
    }
    defaultValue() {
        return "0x";
    }
    encode(writer, value) {
        value = (0, _bytes.arrayify)(value);
        let length = writer.writeValue(value.length);
        length += writer.writeBytes(value);
        return length;
    }
    decode(reader) {
        return reader.readBytes(reader.readValue().toNumber(), true);
    }
}
class BytesCoder extends DynamicBytesCoder {
    constructor(localName){
        super("bytes", localName);
    }
    decode(reader) {
        return reader.coerce(this.name, (0, _bytes.hexlify)(super.decode(reader)));
    }
}

},{"@ethersproject/bytes":"htrqZ","./abstract-coder":"hm9h5","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"fMzsa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// @TODO: Merge this with bytes
parcelHelpers.export(exports, "FixedBytesCoder", ()=>FixedBytesCoder);
var _bytes = require("@ethersproject/bytes");
var _abstractCoder = require("./abstract-coder");
"use strict";
class FixedBytesCoder extends (0, _abstractCoder.Coder) {
    constructor(size, localName){
        let name = "bytes" + String(size);
        super(name, name, localName, false);
        this.size = size;
    }
    defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
    }
    encode(writer, value) {
        let data = (0, _bytes.arrayify)(value);
        if (data.length !== this.size) this._throwError("incorrect data length", value);
        return writer.writeBytes(data);
    }
    decode(reader) {
        return reader.coerce(this.name, (0, _bytes.hexlify)(reader.readBytes(this.size)));
    }
}

},{"@ethersproject/bytes":"htrqZ","./abstract-coder":"hm9h5","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"8kB1r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NullCoder", ()=>NullCoder);
var _abstractCoder = require("./abstract-coder");
"use strict";
class NullCoder extends (0, _abstractCoder.Coder) {
    constructor(localName){
        super("null", "", localName, false);
    }
    defaultValue() {
        return null;
    }
    encode(writer, value) {
        if (value != null) this._throwError("not null", value);
        return writer.writeBytes([]);
    }
    decode(reader) {
        reader.readBytes(0);
        return reader.coerce(this.name, null);
    }
}

},{"./abstract-coder":"hm9h5","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"4eYqf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NumberCoder", ()=>NumberCoder);
var _bignumber = require("@ethersproject/bignumber");
var _constants = require("@ethersproject/constants");
var _abstractCoder = require("./abstract-coder");
"use strict";
class NumberCoder extends (0, _abstractCoder.Coder) {
    constructor(size, signed, localName){
        const name = (signed ? "int" : "uint") + size * 8;
        super(name, name, localName, false);
        this.size = size;
        this.signed = signed;
    }
    defaultValue() {
        return 0;
    }
    encode(writer, value) {
        let v = (0, _bignumber.BigNumber).from(value);
        // Check bounds are safe for encoding
        let maxUintValue = (0, _constants.MaxUint256).mask(writer.wordSize * 8);
        if (this.signed) {
            let bounds = maxUintValue.mask(this.size * 8 - 1);
            if (v.gt(bounds) || v.lt(bounds.add((0, _constants.One)).mul((0, _constants.NegativeOne)))) this._throwError("value out-of-bounds", value);
        } else if (v.lt((0, _constants.Zero)) || v.gt(maxUintValue.mask(this.size * 8))) this._throwError("value out-of-bounds", value);
        v = v.toTwos(this.size * 8).mask(this.size * 8);
        if (this.signed) v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
        return writer.writeValue(v);
    }
    decode(reader) {
        let value = reader.readValue().mask(this.size * 8);
        if (this.signed) value = value.fromTwos(this.size * 8);
        return reader.coerce(this.name, value);
    }
}

},{"@ethersproject/bignumber":"ckYYW","@ethersproject/constants":"gKbDE","./abstract-coder":"hm9h5","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"gKbDE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AddressZero", ()=>(0, _addresses.AddressZero));
parcelHelpers.export(exports, "NegativeOne", ()=>(0, _bignumbers.NegativeOne));
parcelHelpers.export(exports, "Zero", ()=>(0, _bignumbers.Zero));
parcelHelpers.export(exports, "One", ()=>(0, _bignumbers.One));
parcelHelpers.export(exports, "Two", ()=>(0, _bignumbers.Two));
parcelHelpers.export(exports, "WeiPerEther", ()=>(0, _bignumbers.WeiPerEther));
parcelHelpers.export(exports, "MaxUint256", ()=>(0, _bignumbers.MaxUint256));
parcelHelpers.export(exports, "MinInt256", ()=>(0, _bignumbers.MinInt256));
parcelHelpers.export(exports, "MaxInt256", ()=>(0, _bignumbers.MaxInt256));
parcelHelpers.export(exports, "HashZero", ()=>(0, _hashes.HashZero));
parcelHelpers.export(exports, "EtherSymbol", ()=>(0, _strings.EtherSymbol));
var _addresses = require("./addresses");
var _bignumbers = require("./bignumbers");
var _hashes = require("./hashes");
var _strings = require("./strings");
"use strict";

},{"./addresses":"jR81H","./bignumbers":"dwozw","./hashes":"4Kb3P","./strings":"gdaUD","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"jR81H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AddressZero", ()=>AddressZero);
const AddressZero = "0x0000000000000000000000000000000000000000";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"dwozw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NegativeOne", ()=>NegativeOne);
parcelHelpers.export(exports, "Zero", ()=>Zero);
parcelHelpers.export(exports, "One", ()=>One);
parcelHelpers.export(exports, "Two", ()=>Two);
parcelHelpers.export(exports, "WeiPerEther", ()=>WeiPerEther);
parcelHelpers.export(exports, "MaxUint256", ()=>MaxUint256);
parcelHelpers.export(exports, "MinInt256", ()=>MinInt256);
parcelHelpers.export(exports, "MaxInt256", ()=>MaxInt256);
var _bignumber = require("@ethersproject/bignumber");
const NegativeOne = /*#__PURE__*/ (0, _bignumber.BigNumber).from(-1);
const Zero = /*#__PURE__*/ (0, _bignumber.BigNumber).from(0);
const One = /*#__PURE__*/ (0, _bignumber.BigNumber).from(1);
const Two = /*#__PURE__*/ (0, _bignumber.BigNumber).from(2);
const WeiPerEther = /*#__PURE__*/ (0, _bignumber.BigNumber).from("1000000000000000000");
const MaxUint256 = /*#__PURE__*/ (0, _bignumber.BigNumber).from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
const MinInt256 = /*#__PURE__*/ (0, _bignumber.BigNumber).from("-0x8000000000000000000000000000000000000000000000000000000000000000");
const MaxInt256 = /*#__PURE__*/ (0, _bignumber.BigNumber).from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

},{"@ethersproject/bignumber":"ckYYW","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"4Kb3P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HashZero", ()=>HashZero);
const HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"gdaUD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EtherSymbol", ()=>EtherSymbol);
const EtherSymbol = "\u039E"; // "\uD835\uDF63";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"bUJPj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StringCoder", ()=>StringCoder);
var _strings = require("@ethersproject/strings");
var _bytes = require("./bytes");
"use strict";
class StringCoder extends (0, _bytes.DynamicBytesCoder) {
    constructor(localName){
        super("string", localName);
    }
    defaultValue() {
        return "";
    }
    encode(writer, value) {
        return super.encode(writer, (0, _strings.toUtf8Bytes)(value));
    }
    decode(reader) {
        return (0, _strings.toUtf8String)(super.decode(reader));
    }
}

},{"@ethersproject/strings":"5TGFZ","./bytes":"i9ad0","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"5TGFZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_toEscapedUtf8String", ()=>(0, _utf8._toEscapedUtf8String));
parcelHelpers.export(exports, "toUtf8Bytes", ()=>(0, _utf8.toUtf8Bytes));
parcelHelpers.export(exports, "toUtf8CodePoints", ()=>(0, _utf8.toUtf8CodePoints));
parcelHelpers.export(exports, "toUtf8String", ()=>(0, _utf8.toUtf8String));
parcelHelpers.export(exports, "Utf8ErrorFuncs", ()=>(0, _utf8.Utf8ErrorFuncs));
parcelHelpers.export(exports, "Utf8ErrorReason", ()=>(0, _utf8.Utf8ErrorReason));
parcelHelpers.export(exports, "UnicodeNormalizationForm", ()=>(0, _utf8.UnicodeNormalizationForm));
parcelHelpers.export(exports, "formatBytes32String", ()=>(0, _bytes32.formatBytes32String));
parcelHelpers.export(exports, "parseBytes32String", ()=>(0, _bytes32.parseBytes32String));
parcelHelpers.export(exports, "nameprep", ()=>(0, _idna.nameprep));
var _bytes32 = require("./bytes32");
var _idna = require("./idna");
var _utf8 = require("./utf8");
"use strict";

},{"./bytes32":"l8eOg","./idna":"9qcL7","./utf8":"dsMpR","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"l8eOg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatBytes32String", ()=>formatBytes32String);
parcelHelpers.export(exports, "parseBytes32String", ()=>parseBytes32String);
var _constants = require("@ethersproject/constants");
var _bytes = require("@ethersproject/bytes");
var _utf8 = require("./utf8");
"use strict";
function formatBytes32String(text) {
    // Get the bytes
    const bytes = (0, _utf8.toUtf8Bytes)(text);
    // Check we have room for null-termination
    if (bytes.length > 31) throw new Error("bytes32 string must be less than 32 bytes");
    // Zero-pad (implicitly null-terminates)
    return (0, _bytes.hexlify)((0, _bytes.concat)([
        bytes,
        (0, _constants.HashZero)
    ]).slice(0, 32));
}
function parseBytes32String(bytes) {
    const data = (0, _bytes.arrayify)(bytes);
    // Must be 32 bytes with a null-termination
    if (data.length !== 32) throw new Error("invalid bytes32 - not 32 bytes long");
    if (data[31] !== 0) throw new Error("invalid bytes32 string - no null terminator");
    // Find the null termination
    let length = 31;
    while(data[length - 1] === 0)length--;
    // Determine the string value
    return (0, _utf8.toUtf8String)(data.slice(0, length));
}

},{"@ethersproject/constants":"gKbDE","@ethersproject/bytes":"htrqZ","./utf8":"dsMpR","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"dsMpR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnicodeNormalizationForm", ()=>UnicodeNormalizationForm);
parcelHelpers.export(exports, "Utf8ErrorReason", ()=>Utf8ErrorReason);
parcelHelpers.export(exports, "Utf8ErrorFuncs", ()=>Utf8ErrorFuncs);
// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
parcelHelpers.export(exports, "toUtf8Bytes", ()=>toUtf8Bytes);
parcelHelpers.export(exports, "_toEscapedUtf8String", ()=>_toEscapedUtf8String);
parcelHelpers.export(exports, "_toUtf8String", ()=>_toUtf8String);
parcelHelpers.export(exports, "toUtf8String", ()=>toUtf8String);
parcelHelpers.export(exports, "toUtf8CodePoints", ()=>toUtf8CodePoints);
var _bytes = require("@ethersproject/bytes");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
var UnicodeNormalizationForm;
(function(UnicodeNormalizationForm1) {
    UnicodeNormalizationForm1["current"] = "";
    UnicodeNormalizationForm1["NFC"] = "NFC";
    UnicodeNormalizationForm1["NFD"] = "NFD";
    UnicodeNormalizationForm1["NFKC"] = "NFKC";
    UnicodeNormalizationForm1["NFKD"] = "NFKD";
})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
var Utf8ErrorReason;
(function(Utf8ErrorReason1) {
    // A continuation byte was present where there was nothing to continue
    // - offset = the index the codepoint began in
    Utf8ErrorReason1["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
    // - offset = the index the codepoint began in
    Utf8ErrorReason1["BAD_PREFIX"] = "bad codepoint prefix";
    // The string is too short to process the expected codepoint
    // - offset = the index the codepoint began in
    Utf8ErrorReason1["OVERRUN"] = "string overrun";
    // A missing continuation byte was expected but not found
    // - offset = the index the continuation byte was expected at
    Utf8ErrorReason1["MISSING_CONTINUE"] = "missing continuation byte";
    // The computed code point is outside the range for UTF-8
    // - offset       = start of this codepoint
    // - badCodepoint = the computed codepoint; outside the UTF-8 range
    Utf8ErrorReason1["OUT_OF_RANGE"] = "out of UTF-8 range";
    // UTF-8 strings may not contain UTF-16 surrogate pairs
    // - offset       = start of this codepoint
    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
    Utf8ErrorReason1["UTF16_SURROGATE"] = "UTF-16 surrogate";
    // The string is an overlong representation
    // - offset       = start of this codepoint
    // - badCodepoint = the computed codepoint; already bounds checked
    Utf8ErrorReason1["OVERLONG"] = "overlong representation";
})(Utf8ErrorReason || (Utf8ErrorReason = {}));
function errorFunc(reason, offset, bytes, output, badCodepoint) {
    return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
        let i = 0;
        for(let o = offset + 1; o < bytes.length; o++){
            if (bytes[o] >> 6 !== 0x02) break;
            i++;
        }
        return i;
    }
    // This byte runs us past the end of the string, so just jump to the end
    // (but the first byte was read already read and therefore skipped)
    if (reason === Utf8ErrorReason.OVERRUN) return bytes.length - offset - 1;
    // Nothing to skip
    return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
    // Overlong representations are otherwise "valid" code points; just non-deistingtished
    if (reason === Utf8ErrorReason.OVERLONG) {
        output.push(badCodepoint);
        return 0;
    }
    // Put the replacement character into the output
    output.push(0xfffd);
    // Otherwise, process as if ignoring errors
    return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
const Utf8ErrorFuncs = Object.freeze({
    error: errorFunc,
    ignore: ignoreFunc,
    replace: replaceFunc
});
// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
function getUtf8CodePoints(bytes, onError) {
    if (onError == null) onError = Utf8ErrorFuncs.error;
    bytes = (0, _bytes.arrayify)(bytes);
    const result = [];
    let i = 0;
    // Invalid bytes are ignored
    while(i < bytes.length){
        const c = bytes[i++];
        // 0xxx xxxx
        if (c >> 7 === 0) {
            result.push(c);
            continue;
        }
        // Multibyte; how many bytes left for this character?
        let extraLength = null;
        let overlongMask = null;
        // 110x xxxx 10xx xxxx
        if ((c & 0xe0) === 0xc0) {
            extraLength = 1;
            overlongMask = 0x7f;
        // 1110 xxxx 10xx xxxx 10xx xxxx
        } else if ((c & 0xf0) === 0xe0) {
            extraLength = 2;
            overlongMask = 0x7ff;
        // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
        } else if ((c & 0xf8) === 0xf0) {
            extraLength = 3;
            overlongMask = 0xffff;
        } else {
            if ((c & 0xc0) === 0x80) i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
            else i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
            continue;
        }
        // Do we have enough bytes in our data?
        if (i - 1 + extraLength >= bytes.length) {
            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
            continue;
        }
        // Remove the length prefix from the char
        let res = c & (1 << 8 - extraLength - 1) - 1;
        for(let j = 0; j < extraLength; j++){
            let nextChar = bytes[i];
            // Invalid continuation byte
            if ((nextChar & 0xc0) != 0x80) {
                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
                res = null;
                break;
            }
            res = res << 6 | nextChar & 0x3f;
            i++;
        }
        // See above loop for invalid continuation byte
        if (res === null) continue;
        // Maximum code point
        if (res > 0x10ffff) {
            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
            continue;
        }
        // Reserved for UTF-16 surrogate halves
        if (res >= 0xd800 && res <= 0xdfff) {
            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
            continue;
        }
        // Check for overlong sequences (more bytes than needed)
        if (res <= overlongMask) {
            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
            continue;
        }
        result.push(res);
    }
    return result;
}
function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
    if (form != UnicodeNormalizationForm.current) {
        logger.checkNormalize();
        str = str.normalize(form);
    }
    let result = [];
    for(let i = 0; i < str.length; i++){
        const c = str.charCodeAt(i);
        if (c < 0x80) result.push(c);
        else if (c < 0x800) {
            result.push(c >> 6 | 0xc0);
            result.push(c & 0x3f | 0x80);
        } else if ((c & 0xfc00) == 0xd800) {
            i++;
            const c2 = str.charCodeAt(i);
            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) throw new Error("invalid utf-8 string");
            // Surrogate Pair
            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
            result.push(pair >> 18 | 0xf0);
            result.push(pair >> 12 & 0x3f | 0x80);
            result.push(pair >> 6 & 0x3f | 0x80);
            result.push(pair & 0x3f | 0x80);
        } else {
            result.push(c >> 12 | 0xe0);
            result.push(c >> 6 & 0x3f | 0x80);
            result.push(c & 0x3f | 0x80);
        }
    }
    return (0, _bytes.arrayify)(result);
}
function escapeChar(value) {
    const hex = "0000" + value.toString(16);
    return "\\u" + hex.substring(hex.length - 4);
}
function _toEscapedUtf8String(bytes, onError) {
    return '"' + getUtf8CodePoints(bytes, onError).map((codePoint)=>{
        if (codePoint < 256) {
            switch(codePoint){
                case 8:
                    return "\\b";
                case 9:
                    return "\\t";
                case 10:
                    return "\\n";
                case 13:
                    return "\\r";
                case 34:
                    return '\\"';
                case 92:
                    return "\\\\";
            }
            if (codePoint >= 32 && codePoint < 127) return String.fromCharCode(codePoint);
        }
        if (codePoint <= 0xffff) return escapeChar(codePoint);
        codePoint -= 0x10000;
        return escapeChar((codePoint >> 10 & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
    }).join("") + '"';
}
function _toUtf8String(codePoints) {
    return codePoints.map((codePoint)=>{
        if (codePoint <= 0xffff) return String.fromCharCode(codePoint);
        codePoint -= 0x10000;
        return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);
    }).join("");
}
function toUtf8String(bytes, onError) {
    return _toUtf8String(getUtf8CodePoints(bytes, onError));
}
function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
    return getUtf8CodePoints(toUtf8Bytes(str, form));
}

},{"@ethersproject/bytes":"htrqZ","@ethersproject/logger":"hLvB2","./_version":"9NTd9","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"9NTd9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "strings/5.6.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"9qcL7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_nameprepTableA1", ()=>_nameprepTableA1);
parcelHelpers.export(exports, "_nameprepTableB2", ()=>_nameprepTableB2);
parcelHelpers.export(exports, "_nameprepTableC", ()=>_nameprepTableC);
parcelHelpers.export(exports, "nameprep", ()=>nameprep);
var _utf8 = require("./utf8");
"use strict";
function bytes2(data) {
    if (data.length % 4 !== 0) throw new Error("bad data");
    let result = [];
    for(let i = 0; i < data.length; i += 4)result.push(parseInt(data.substring(i, i + 4), 16));
    return result;
}
function createTable(data, func) {
    if (!func) func = function(value) {
        return [
            parseInt(value, 16)
        ];
    };
    let lo = 0;
    let result = {};
    data.split(",").forEach((pair)=>{
        let comps = pair.split(":");
        lo += parseInt(comps[0], 16);
        result[lo] = func(comps[1]);
    });
    return result;
}
function createRangeTable(data) {
    let hi = 0;
    return data.split(",").map((v)=>{
        let comps = v.split("-");
        if (comps.length === 1) comps[1] = "0";
        else if (comps[1] === "") comps[1] = "1";
        let lo = hi + parseInt(comps[0], 16);
        hi = parseInt(comps[1], 16);
        return {
            l: lo,
            h: hi
        };
    });
}
function matchMap(value, ranges) {
    let lo = 0;
    for(let i = 0; i < ranges.length; i++){
        let range = ranges[i];
        lo += range.l;
        if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {
            if (range.e && range.e.indexOf(value - lo) !== -1) continue;
            return range;
        }
    }
    return null;
}
const Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
// @TODO: Make this relative...
const Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v)=>parseInt(v, 16));
const Table_B_2_ranges = [
    {
        h: 25,
        s: 32,
        l: 65
    },
    {
        h: 30,
        s: 32,
        e: [
            23
        ],
        l: 127
    },
    {
        h: 54,
        s: 1,
        e: [
            48
        ],
        l: 64,
        d: 2
    },
    {
        h: 14,
        s: 1,
        l: 57,
        d: 2
    },
    {
        h: 44,
        s: 1,
        l: 17,
        d: 2
    },
    {
        h: 10,
        s: 1,
        e: [
            2,
            6,
            8
        ],
        l: 61,
        d: 2
    },
    {
        h: 16,
        s: 1,
        l: 68,
        d: 2
    },
    {
        h: 84,
        s: 1,
        e: [
            18,
            24,
            66
        ],
        l: 19,
        d: 2
    },
    {
        h: 26,
        s: 32,
        e: [
            17
        ],
        l: 435
    },
    {
        h: 22,
        s: 1,
        l: 71,
        d: 2
    },
    {
        h: 15,
        s: 80,
        l: 40
    },
    {
        h: 31,
        s: 32,
        l: 16
    },
    {
        h: 32,
        s: 1,
        l: 80,
        d: 2
    },
    {
        h: 52,
        s: 1,
        l: 42,
        d: 2
    },
    {
        h: 12,
        s: 1,
        l: 55,
        d: 2
    },
    {
        h: 40,
        s: 1,
        e: [
            38
        ],
        l: 15,
        d: 2
    },
    {
        h: 14,
        s: 1,
        l: 48,
        d: 2
    },
    {
        h: 37,
        s: 48,
        l: 49
    },
    {
        h: 148,
        s: 1,
        l: 6351,
        d: 2
    },
    {
        h: 88,
        s: 1,
        l: 160,
        d: 2
    },
    {
        h: 15,
        s: 16,
        l: 704
    },
    {
        h: 25,
        s: 26,
        l: 854
    },
    {
        h: 25,
        s: 32,
        l: 55915
    },
    {
        h: 37,
        s: 40,
        l: 1247
    },
    {
        h: 25,
        s: -119711,
        l: 53248
    },
    {
        h: 25,
        s: -119763,
        l: 52
    },
    {
        h: 25,
        s: -119815,
        l: 52
    },
    {
        h: 25,
        s: -119867,
        e: [
            1,
            4,
            5,
            7,
            8,
            11,
            12,
            17
        ],
        l: 52
    },
    {
        h: 25,
        s: -119919,
        l: 52
    },
    {
        h: 24,
        s: -119971,
        e: [
            2,
            7,
            8,
            17
        ],
        l: 52
    },
    {
        h: 24,
        s: -120023,
        e: [
            2,
            7,
            13,
            15,
            16,
            17
        ],
        l: 52
    },
    {
        h: 25,
        s: -120075,
        l: 52
    },
    {
        h: 25,
        s: -120127,
        l: 52
    },
    {
        h: 25,
        s: -120179,
        l: 52
    },
    {
        h: 25,
        s: -120231,
        l: 52
    },
    {
        h: 25,
        s: -120283,
        l: 52
    },
    {
        h: 25,
        s: -120335,
        l: 52
    },
    {
        h: 24,
        s: -119543,
        e: [
            17
        ],
        l: 56
    },
    {
        h: 24,
        s: -119601,
        e: [
            17
        ],
        l: 58
    },
    {
        h: 24,
        s: -119659,
        e: [
            17
        ],
        l: 58
    },
    {
        h: 24,
        s: -119717,
        e: [
            17
        ],
        l: 58
    },
    {
        h: 24,
        s: -119775,
        e: [
            17
        ],
        l: 58
    }
];
const Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
const Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
const Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
const Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
function flatten(values) {
    return values.reduce((accum, value1)=>{
        value1.forEach((value)=>{
            accum.push(value);
        });
        return accum;
    }, []);
}
function _nameprepTableA1(codepoint) {
    return !!matchMap(codepoint, Table_A_1_ranges);
}
function _nameprepTableB2(codepoint) {
    let range = matchMap(codepoint, Table_B_2_ranges);
    if (range) return [
        codepoint + range.s
    ];
    let codes = Table_B_2_lut_abs[codepoint];
    if (codes) return codes;
    let shift = Table_B_2_lut_rel[codepoint];
    if (shift) return [
        codepoint + shift[0]
    ];
    let complex = Table_B_2_complex[codepoint];
    if (complex) return complex;
    return null;
}
function _nameprepTableC(codepoint) {
    return !!matchMap(codepoint, Table_C_ranges);
}
function nameprep(value) {
    // This allows platforms with incomplete normalize to bypass
    // it for very basic names which the built-in toLowerCase
    // will certainly handle correctly
    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) return value.toLowerCase();
    // Get the code points (keeping the current normalization)
    let codes = (0, _utf8.toUtf8CodePoints)(value);
    codes = flatten(codes.map((code)=>{
        // Substitute Table B.1 (Maps to Nothing)
        if (Table_B_1_flags.indexOf(code) >= 0) return [];
        if (code >= 0xfe00 && code <= 0xfe0f) return [];
        // Substitute Table B.2 (Case Folding)
        let codesTableB2 = _nameprepTableB2(code);
        if (codesTableB2) return codesTableB2;
        // No Substitution
        return [
            code
        ];
    }));
    // Normalize using form KC
    codes = (0, _utf8.toUtf8CodePoints)((0, _utf8._toUtf8String)(codes), (0, _utf8.UnicodeNormalizationForm).NFKC);
    // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9
    codes.forEach((code)=>{
        if (_nameprepTableC(code)) throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
    });
    // Prohibit Unassigned Code Points (Table A.1)
    codes.forEach((code)=>{
        if (_nameprepTableA1(code)) throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
    });
    // IDNA extras
    let name = (0, _utf8._toUtf8String)(codes);
    // IDNA: 4.2.3.1
    if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") throw new Error("invalid hyphen");
    // IDNA: 4.2.4
    if (name.length > 63) throw new Error("too long");
    return name;
}

},{"./utf8":"dsMpR","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"Cp2hA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TupleCoder", ()=>TupleCoder);
var _abstractCoder = require("./abstract-coder");
var _array = require("./array");
"use strict";
class TupleCoder extends (0, _abstractCoder.Coder) {
    constructor(coders, localName){
        let dynamic = false;
        const types = [];
        coders.forEach((coder)=>{
            if (coder.dynamic) dynamic = true;
            types.push(coder.type);
        });
        const type = "tuple(" + types.join(",") + ")";
        super("tuple", type, localName, dynamic);
        this.coders = coders;
    }
    defaultValue() {
        const values = [];
        this.coders.forEach((coder)=>{
            values.push(coder.defaultValue());
        });
        // We only output named properties for uniquely named coders
        const uniqueNames = this.coders.reduce((accum, coder)=>{
            const name = coder.localName;
            if (name) {
                if (!accum[name]) accum[name] = 0;
                accum[name]++;
            }
            return accum;
        }, {});
        // Add named values
        this.coders.forEach((coder, index)=>{
            let name = coder.localName;
            if (!name || uniqueNames[name] !== 1) return;
            if (name === "length") name = "_length";
            if (values[name] != null) return;
            values[name] = values[index];
        });
        return Object.freeze(values);
    }
    encode(writer, value) {
        return (0, _array.pack)(writer, this.coders, value);
    }
    decode(reader) {
        return reader.coerce(this.name, (0, _array.unpack)(reader, this.coders));
    }
}

},{"./abstract-coder":"hm9h5","./array":"doYUW","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"8nE5c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkResultErrors", ()=>(0, _abstractCoder.checkResultErrors));
parcelHelpers.export(exports, "LogDescription", ()=>LogDescription);
parcelHelpers.export(exports, "TransactionDescription", ()=>TransactionDescription);
parcelHelpers.export(exports, "ErrorDescription", ()=>ErrorDescription);
parcelHelpers.export(exports, "Indexed", ()=>Indexed);
/*
function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
    params.reduce((accum, param) => {
        if (param.name) {
            if (accum[param.name]) {
                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
            }
            accum[param.name] = true;
        }
        return accum;
    }, <{ [ name: string ]: boolean }>{ });
}
*/ parcelHelpers.export(exports, "Interface", ()=>Interface);
var _address = require("@ethersproject/address");
var _bignumber = require("@ethersproject/bignumber");
var _bytes = require("@ethersproject/bytes");
var _hash = require("@ethersproject/hash");
var _keccak256 = require("@ethersproject/keccak256");
var _properties = require("@ethersproject/properties");
var _abiCoder = require("./abi-coder");
var _abstractCoder = require("./coders/abstract-coder");
var _fragments = require("./fragments");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
class LogDescription extends (0, _properties.Description) {
}
class TransactionDescription extends (0, _properties.Description) {
}
class ErrorDescription extends (0, _properties.Description) {
}
class Indexed extends (0, _properties.Description) {
    static isIndexed(value) {
        return !!(value && value._isIndexed);
    }
}
const BuiltinErrors = {
    "0x08c379a0": {
        signature: "Error(string)",
        name: "Error",
        inputs: [
            "string"
        ],
        reason: true
    },
    "0x4e487b71": {
        signature: "Panic(uint256)",
        name: "Panic",
        inputs: [
            "uint256"
        ]
    }
};
function wrapAccessError(property, error) {
    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
    wrap.error = error;
    return wrap;
}
class Interface {
    constructor(fragments){
        let abi = [];
        if (typeof fragments === "string") abi = JSON.parse(fragments);
        else abi = fragments;
        (0, _properties.defineReadOnly)(this, "fragments", abi.map((fragment)=>{
            return (0, _fragments.Fragment).from(fragment);
        }).filter((fragment)=>fragment != null));
        (0, _properties.defineReadOnly)(this, "_abiCoder", (0, _properties.getStatic)(new.target, "getAbiCoder")());
        (0, _properties.defineReadOnly)(this, "functions", {});
        (0, _properties.defineReadOnly)(this, "errors", {});
        (0, _properties.defineReadOnly)(this, "events", {});
        (0, _properties.defineReadOnly)(this, "structs", {});
        // Add all fragments by their signature
        this.fragments.forEach((fragment)=>{
            let bucket = null;
            switch(fragment.type){
                case "constructor":
                    if (this.deploy) {
                        logger.warn("duplicate definition - constructor");
                        return;
                    }
                    //checkNames(fragment, "input", fragment.inputs);
                    (0, _properties.defineReadOnly)(this, "deploy", fragment);
                    return;
                case "function":
                    //checkNames(fragment, "input", fragment.inputs);
                    //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
                    bucket = this.functions;
                    break;
                case "event":
                    //checkNames(fragment, "input", fragment.inputs);
                    bucket = this.events;
                    break;
                case "error":
                    bucket = this.errors;
                    break;
                default:
                    return;
            }
            let signature = fragment.format();
            if (bucket[signature]) {
                logger.warn("duplicate definition - " + signature);
                return;
            }
            bucket[signature] = fragment;
        });
        // If we do not have a constructor add a default
        if (!this.deploy) (0, _properties.defineReadOnly)(this, "deploy", (0, _fragments.ConstructorFragment).from({
            payable: false,
            type: "constructor"
        }));
        (0, _properties.defineReadOnly)(this, "_isInterface", true);
    }
    format(format) {
        if (!format) format = (0, _fragments.FormatTypes).full;
        if (format === (0, _fragments.FormatTypes).sighash) logger.throwArgumentError("interface does not support formatting sighash", "format", format);
        const abi = this.fragments.map((fragment)=>fragment.format(format));
        // We need to re-bundle the JSON fragments a bit
        if (format === (0, _fragments.FormatTypes).json) return JSON.stringify(abi.map((j)=>JSON.parse(j)));
        return abi;
    }
    // Sub-classes can override these to handle other blockchains
    static getAbiCoder() {
        return 0, _abiCoder.defaultAbiCoder;
    }
    static getAddress(address) {
        return (0, _address.getAddress)(address);
    }
    static getSighash(fragment) {
        return (0, _bytes.hexDataSlice)((0, _hash.id)(fragment.format()), 0, 4);
    }
    static getEventTopic(eventFragment) {
        return (0, _hash.id)(eventFragment.format());
    }
    // Find a function definition by any means necessary (unless it is ambiguous)
    getFunction(nameOrSignatureOrSighash) {
        if ((0, _bytes.isHexString)(nameOrSignatureOrSighash)) {
            for(const name in this.functions){
                if (nameOrSignatureOrSighash === this.getSighash(name)) return this.functions[name];
            }
            logger.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
        }
        // It is a bare name, look up the function (will return null if ambiguous)
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
            const name = nameOrSignatureOrSighash.trim();
            const matching = Object.keys(this.functions).filter((f)=>f.split("(" /* fix:) */ )[0] === name);
            if (matching.length === 0) logger.throwArgumentError("no matching function", "name", name);
            else if (matching.length > 1) logger.throwArgumentError("multiple matching functions", "name", name);
            return this.functions[matching[0]];
        }
        // Normalize the signature and lookup the function
        const result = this.functions[(0, _fragments.FunctionFragment).fromString(nameOrSignatureOrSighash).format()];
        if (!result) logger.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
        return result;
    }
    // Find an event definition by any means necessary (unless it is ambiguous)
    getEvent(nameOrSignatureOrTopic) {
        if ((0, _bytes.isHexString)(nameOrSignatureOrTopic)) {
            const topichash = nameOrSignatureOrTopic.toLowerCase();
            for(const name in this.events){
                if (topichash === this.getEventTopic(name)) return this.events[name];
            }
            logger.throwArgumentError("no matching event", "topichash", topichash);
        }
        // It is a bare name, look up the function (will return null if ambiguous)
        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
            const name = nameOrSignatureOrTopic.trim();
            const matching = Object.keys(this.events).filter((f)=>f.split("(" /* fix:) */ )[0] === name);
            if (matching.length === 0) logger.throwArgumentError("no matching event", "name", name);
            else if (matching.length > 1) logger.throwArgumentError("multiple matching events", "name", name);
            return this.events[matching[0]];
        }
        // Normalize the signature and lookup the function
        const result = this.events[(0, _fragments.EventFragment).fromString(nameOrSignatureOrTopic).format()];
        if (!result) logger.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
        return result;
    }
    // Find a function definition by any means necessary (unless it is ambiguous)
    getError(nameOrSignatureOrSighash) {
        if ((0, _bytes.isHexString)(nameOrSignatureOrSighash)) {
            const getSighash = (0, _properties.getStatic)(this.constructor, "getSighash");
            for(const name in this.errors){
                const error = this.errors[name];
                if (nameOrSignatureOrSighash === getSighash(error)) return this.errors[name];
            }
            logger.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
        }
        // It is a bare name, look up the function (will return null if ambiguous)
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
            const name = nameOrSignatureOrSighash.trim();
            const matching = Object.keys(this.errors).filter((f)=>f.split("(" /* fix:) */ )[0] === name);
            if (matching.length === 0) logger.throwArgumentError("no matching error", "name", name);
            else if (matching.length > 1) logger.throwArgumentError("multiple matching errors", "name", name);
            return this.errors[matching[0]];
        }
        // Normalize the signature and lookup the function
        const result = this.errors[(0, _fragments.FunctionFragment).fromString(nameOrSignatureOrSighash).format()];
        if (!result) logger.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
        return result;
    }
    // Get the sighash (the bytes4 selector) used by Solidity to identify a function
    getSighash(fragment) {
        if (typeof fragment === "string") try {
            fragment = this.getFunction(fragment);
        } catch (error) {
            try {
                fragment = this.getError(fragment);
            } catch (_) {
                throw error;
            }
        }
        return (0, _properties.getStatic)(this.constructor, "getSighash")(fragment);
    }
    // Get the topic (the bytes32 hash) used by Solidity to identify an event
    getEventTopic(eventFragment) {
        if (typeof eventFragment === "string") eventFragment = this.getEvent(eventFragment);
        return (0, _properties.getStatic)(this.constructor, "getEventTopic")(eventFragment);
    }
    _decodeParams(params, data) {
        return this._abiCoder.decode(params, data);
    }
    _encodeParams(params, values) {
        return this._abiCoder.encode(params, values);
    }
    encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
    }
    decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") fragment = this.getError(fragment);
        const bytes = (0, _bytes.arrayify)(data);
        if ((0, _bytes.hexlify)(bytes.slice(0, 4)) !== this.getSighash(fragment)) logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", (0, _bytes.hexlify)(bytes));
        return this._decodeParams(fragment.inputs, bytes.slice(4));
    }
    encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") fragment = this.getError(fragment);
        return (0, _bytes.hexlify)((0, _bytes.concat)([
            this.getSighash(fragment),
            this._encodeParams(fragment.inputs, values || [])
        ]));
    }
    // Decode the data for a function call (e.g. tx.data)
    decodeFunctionData(functionFragment, data) {
        if (typeof functionFragment === "string") functionFragment = this.getFunction(functionFragment);
        const bytes = (0, _bytes.arrayify)(data);
        if ((0, _bytes.hexlify)(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", (0, _bytes.hexlify)(bytes));
        return this._decodeParams(functionFragment.inputs, bytes.slice(4));
    }
    // Encode the data for a function call (e.g. tx.data)
    encodeFunctionData(functionFragment, values) {
        if (typeof functionFragment === "string") functionFragment = this.getFunction(functionFragment);
        return (0, _bytes.hexlify)((0, _bytes.concat)([
            this.getSighash(functionFragment),
            this._encodeParams(functionFragment.inputs, values || [])
        ]));
    }
    // Decode the result from a function call (e.g. from eth_call)
    decodeFunctionResult(functionFragment, data) {
        if (typeof functionFragment === "string") functionFragment = this.getFunction(functionFragment);
        let bytes = (0, _bytes.arrayify)(data);
        let reason = null;
        let message = "";
        let errorArgs = null;
        let errorName = null;
        let errorSignature = null;
        switch(bytes.length % this._abiCoder._getWordSize()){
            case 0:
                try {
                    return this._abiCoder.decode(functionFragment.outputs, bytes);
                } catch (error) {}
                break;
            case 4:
                {
                    const selector = (0, _bytes.hexlify)(bytes.slice(0, 4));
                    const builtin = BuiltinErrors[selector];
                    if (builtin) {
                        errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
                        errorName = builtin.name;
                        errorSignature = builtin.signature;
                        if (builtin.reason) reason = errorArgs[0];
                        if (errorName === "Error") message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
                        else if (errorName === "Panic") message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
                    } else try {
                        const error = this.getError(selector);
                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                        errorName = error.name;
                        errorSignature = error.format();
                    } catch (error) {}
                    break;
                }
        }
        return logger.throwError("call revert exception" + message, (0, _logger.Logger).errors.CALL_EXCEPTION, {
            method: functionFragment.format(),
            data: (0, _bytes.hexlify)(data),
            errorArgs,
            errorName,
            errorSignature,
            reason
        });
    }
    // Encode the result for a function call (e.g. for eth_call)
    encodeFunctionResult(functionFragment, values) {
        if (typeof functionFragment === "string") functionFragment = this.getFunction(functionFragment);
        return (0, _bytes.hexlify)(this._abiCoder.encode(functionFragment.outputs, values || []));
    }
    // Create the filter for the event with search criteria (e.g. for eth_filterLog)
    encodeFilterTopics(eventFragment, values) {
        if (typeof eventFragment === "string") eventFragment = this.getEvent(eventFragment);
        if (values.length > eventFragment.inputs.length) logger.throwError("too many arguments for " + eventFragment.format(), (0, _logger.Logger).errors.UNEXPECTED_ARGUMENT, {
            argument: "values",
            value: values
        });
        let topics = [];
        if (!eventFragment.anonymous) topics.push(this.getEventTopic(eventFragment));
        const encodeTopic = (param, value)=>{
            if (param.type === "string") return (0, _hash.id)(value);
            else if (param.type === "bytes") return (0, _keccak256.keccak256)((0, _bytes.hexlify)(value));
            if (param.type === "bool" && typeof value === "boolean") value = value ? "0x01" : "0x00";
            if (param.type.match(/^u?int/)) value = (0, _bignumber.BigNumber).from(value).toHexString();
            // Check addresses are valid
            if (param.type === "address") this._abiCoder.encode([
                "address"
            ], [
                value
            ]);
            return (0, _bytes.hexZeroPad)((0, _bytes.hexlify)(value), 32);
        };
        values.forEach((value1, index)=>{
            let param = eventFragment.inputs[index];
            if (!param.indexed) {
                if (value1 != null) logger.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value1);
                return;
            }
            if (value1 == null) topics.push(null);
            else if (param.baseType === "array" || param.baseType === "tuple") logger.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value1);
            else if (Array.isArray(value1)) topics.push(value1.map((value)=>encodeTopic(param, value)));
            else topics.push(encodeTopic(param, value1));
        });
        // Trim off trailing nulls
        while(topics.length && topics[topics.length - 1] === null)topics.pop();
        return topics;
    }
    encodeEventLog(eventFragment, values) {
        if (typeof eventFragment === "string") eventFragment = this.getEvent(eventFragment);
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!eventFragment.anonymous) topics.push(this.getEventTopic(eventFragment));
        if (values.length !== eventFragment.inputs.length) logger.throwArgumentError("event arguments/values mismatch", "values", values);
        eventFragment.inputs.forEach((param, index)=>{
            const value = values[index];
            if (param.indexed) {
                if (param.type === "string") topics.push((0, _hash.id)(value));
                else if (param.type === "bytes") topics.push((0, _keccak256.keccak256)(value));
                else if (param.baseType === "tuple" || param.baseType === "array") // @TODO
                throw new Error("not implemented");
                else topics.push(this._abiCoder.encode([
                    param.type
                ], [
                    value
                ]));
            } else {
                dataTypes.push(param);
                dataValues.push(value);
            }
        });
        return {
            data: this._abiCoder.encode(dataTypes, dataValues),
            topics: topics
        };
    }
    // Decode a filter for the event and the search criteria
    decodeEventLog(eventFragment, data, topics) {
        if (typeof eventFragment === "string") eventFragment = this.getEvent(eventFragment);
        if (topics != null && !eventFragment.anonymous) {
            let topicHash = this.getEventTopic(eventFragment);
            if (!(0, _bytes.isHexString)(topics[0], 32) || topics[0].toLowerCase() !== topicHash) logger.throwError("fragment/topic mismatch", (0, _logger.Logger).errors.INVALID_ARGUMENT, {
                argument: "topics[0]",
                expected: topicHash,
                value: topics[0]
            });
            topics = topics.slice(1);
        }
        let indexed = [];
        let nonIndexed = [];
        let dynamic = [];
        eventFragment.inputs.forEach((param, index)=>{
            if (param.indexed) {
                if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                    indexed.push((0, _fragments.ParamType).fromObject({
                        type: "bytes32",
                        name: param.name
                    }));
                    dynamic.push(true);
                } else {
                    indexed.push(param);
                    dynamic.push(false);
                }
            } else {
                nonIndexed.push(param);
                dynamic.push(false);
            }
        });
        let resultIndexed = topics != null ? this._abiCoder.decode(indexed, (0, _bytes.concat)(topics)) : null;
        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
        let result = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        eventFragment.inputs.forEach((param, index)=>{
            if (param.indexed) {
                if (resultIndexed == null) result[index] = new Indexed({
                    _isIndexed: true,
                    hash: null
                });
                else if (dynamic[index]) result[index] = new Indexed({
                    _isIndexed: true,
                    hash: resultIndexed[indexedIndex++]
                });
                else try {
                    result[index] = resultIndexed[indexedIndex++];
                } catch (error) {
                    result[index] = error;
                }
            } else try {
                result[index] = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
                result[index] = error;
            }
            // Add the keyword argument if named and safe
            if (param.name && result[param.name] == null) {
                const value = result[index];
                // Make error named values throw on access
                if (value instanceof Error) Object.defineProperty(result, param.name, {
                    enumerable: true,
                    get: ()=>{
                        throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
                    }
                });
                else result[param.name] = value;
            }
        });
        // Make all error indexed values throw on access
        for(let i = 0; i < result.length; i++){
            const value = result[i];
            if (value instanceof Error) Object.defineProperty(result, i, {
                enumerable: true,
                get: ()=>{
                    throw wrapAccessError(`index ${i}`, value);
                }
            });
        }
        return Object.freeze(result);
    }
    // Given a transaction, find the matching function fragment (if any) and
    // determine all its properties and call parameters
    parseTransaction(tx) {
        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
        if (!fragment) return null;
        return new TransactionDescription({
            args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
            functionFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            sighash: this.getSighash(fragment),
            value: (0, _bignumber.BigNumber).from(tx.value || "0")
        });
    }
    // @TODO
    //parseCallResult(data: BytesLike): ??
    // Given an event log, find the matching event fragment (if any) and
    // determine all its properties and values
    parseLog(log) {
        let fragment = this.getEvent(log.topics[0]);
        if (!fragment || fragment.anonymous) return null;
        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
        //        Probably not, because just because it is the only event in the ABI does
        //        not mean we have the full ABI; maybe just a fragment?
        return new LogDescription({
            eventFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            topic: this.getEventTopic(fragment),
            args: this.decodeEventLog(fragment, log.data, log.topics)
        });
    }
    parseError(data) {
        const hexData = (0, _bytes.hexlify)(data);
        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
        if (!fragment) return null;
        return new ErrorDescription({
            args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
            errorFragment: fragment,
            name: fragment.name,
            signature: fragment.format(),
            sighash: this.getSighash(fragment)
        });
    }
    /*
    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
        if (Interface.isInterface(value)) {
            return value;
        }
        if (typeof(value) === "string") {
            return new Interface(JSON.parse(value));
        }
        return new Interface(value);
    }
    */ static isInterface(value) {
        return !!(value && value._isInterface);
    }
}

},{"@ethersproject/address":"ggdAz","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/hash":"7JYPm","@ethersproject/keccak256":"hXDEv","@ethersproject/properties":"h3GJb","./abi-coder":"4pw2B","./coders/abstract-coder":"hm9h5","./fragments":"jvsHr","@ethersproject/logger":"hLvB2","./_version":"9uxOS","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"7JYPm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "id", ()=>(0, _id.id));
parcelHelpers.export(exports, "dnsEncode", ()=>(0, _namehash.dnsEncode));
parcelHelpers.export(exports, "namehash", ()=>(0, _namehash.namehash));
parcelHelpers.export(exports, "isValidName", ()=>(0, _namehash.isValidName));
parcelHelpers.export(exports, "messagePrefix", ()=>(0, _message.messagePrefix));
parcelHelpers.export(exports, "hashMessage", ()=>(0, _message.hashMessage));
parcelHelpers.export(exports, "_TypedDataEncoder", ()=>(0, _typedData.TypedDataEncoder));
var _id = require("./id");
var _namehash = require("./namehash");
var _message = require("./message");
var _typedData = require("./typed-data");
"use strict";

},{"./id":"70HiZ","./namehash":"bSxC5","./message":"hJKk8","./typed-data":"lozox","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"70HiZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "id", ()=>id);
var _keccak256 = require("@ethersproject/keccak256");
var _strings = require("@ethersproject/strings");
function id(text) {
    return (0, _keccak256.keccak256)((0, _strings.toUtf8Bytes)(text));
}

},{"@ethersproject/keccak256":"hXDEv","@ethersproject/strings":"5TGFZ","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"bSxC5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isValidName", ()=>isValidName);
parcelHelpers.export(exports, "namehash", ()=>namehash);
parcelHelpers.export(exports, "dnsEncode", ()=>dnsEncode);
var _bytes = require("@ethersproject/bytes");
var _strings = require("@ethersproject/strings");
var _keccak256 = require("@ethersproject/keccak256");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
const logger = new (0, _logger.Logger)((0, _version.version));
const Zeros = new Uint8Array(32);
Zeros.fill(0);
const Partition = new RegExp("^((.*)\\.)?([^.]+)$");
function isValidName(name) {
    try {
        const comps = name.split(".");
        for(let i = 0; i < comps.length; i++){
            if ((0, _strings.nameprep)(comps[i]).length === 0) throw new Error("empty");
        }
        return true;
    } catch (error) {}
    return false;
}
function namehash(name) {
    /* istanbul ignore if */ if (typeof name !== "string") logger.throwArgumentError("invalid ENS name; not a string", "name", name);
    let current = name;
    let result = Zeros;
    while(current.length){
        const partition = current.match(Partition);
        if (partition == null || partition[2] === "") logger.throwArgumentError("invalid ENS address; missing component", "name", name);
        const label = (0, _strings.toUtf8Bytes)((0, _strings.nameprep)(partition[3]));
        result = (0, _keccak256.keccak256)((0, _bytes.concat)([
            result,
            (0, _keccak256.keccak256)(label)
        ]));
        current = partition[2] || "";
    }
    return (0, _bytes.hexlify)(result);
}
function dnsEncode(name) {
    return (0, _bytes.hexlify)((0, _bytes.concat)(name.split(".").map((comp)=>{
        // We jam in an _ prefix to fill in with the length later
        // Note: Nameprep throws if the component is over 63 bytes
        const bytes = (0, _strings.toUtf8Bytes)("_" + (0, _strings.nameprep)(comp));
        bytes[0] = bytes.length - 1;
        return bytes;
    }))) + "00";
}

},{"@ethersproject/bytes":"htrqZ","@ethersproject/strings":"5TGFZ","@ethersproject/keccak256":"hXDEv","@ethersproject/logger":"hLvB2","./_version":"kUuZu","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"kUuZu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "hash/5.6.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"hJKk8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "messagePrefix", ()=>messagePrefix);
parcelHelpers.export(exports, "hashMessage", ()=>hashMessage);
var _bytes = require("@ethersproject/bytes");
var _keccak256 = require("@ethersproject/keccak256");
var _strings = require("@ethersproject/strings");
const messagePrefix = "\x19Ethereum Signed Message:\n";
function hashMessage(message) {
    if (typeof message === "string") message = (0, _strings.toUtf8Bytes)(message);
    return (0, _keccak256.keccak256)((0, _bytes.concat)([
        (0, _strings.toUtf8Bytes)(messagePrefix),
        (0, _strings.toUtf8Bytes)(String(message.length)),
        message
    ]));
}

},{"@ethersproject/bytes":"htrqZ","@ethersproject/keccak256":"hXDEv","@ethersproject/strings":"5TGFZ","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"lozox":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TypedDataEncoder", ()=>TypedDataEncoder);
var _address = require("@ethersproject/address");
var _bignumber = require("@ethersproject/bignumber");
var _bytes = require("@ethersproject/bytes");
var _keccak256 = require("@ethersproject/keccak256");
var _properties = require("@ethersproject/properties");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
var _id = require("./id");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
const padding = new Uint8Array(32);
padding.fill(0);
const NegativeOne = (0, _bignumber.BigNumber).from(-1);
const Zero = (0, _bignumber.BigNumber).from(0);
const One = (0, _bignumber.BigNumber).from(1);
const MaxUint256 = (0, _bignumber.BigNumber).from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function hexPadRight(value) {
    const bytes = (0, _bytes.arrayify)(value);
    const padOffset = bytes.length % 32;
    if (padOffset) return (0, _bytes.hexConcat)([
        bytes,
        padding.slice(padOffset)
    ]);
    return (0, _bytes.hexlify)(bytes);
}
const hexTrue = (0, _bytes.hexZeroPad)(One.toHexString(), 32);
const hexFalse = (0, _bytes.hexZeroPad)(Zero.toHexString(), 32);
const domainFieldTypes = {
    name: "string",
    version: "string",
    chainId: "uint256",
    verifyingContract: "address",
    salt: "bytes32"
};
const domainFieldNames = [
    "name",
    "version",
    "chainId",
    "verifyingContract",
    "salt"
];
function checkString(key) {
    return function(value) {
        if (typeof value !== "string") logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
        return value;
    };
}
const domainChecks = {
    name: checkString("name"),
    version: checkString("version"),
    chainId: function(value) {
        try {
            return (0, _bignumber.BigNumber).from(value).toString();
        } catch (error) {}
        return logger.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
    },
    verifyingContract: function(value) {
        try {
            return (0, _address.getAddress)(value).toLowerCase();
        } catch (error) {}
        return logger.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
    },
    salt: function(value) {
        try {
            const bytes = (0, _bytes.arrayify)(value);
            if (bytes.length !== 32) throw new Error("bad length");
            return (0, _bytes.hexlify)(bytes);
        } catch (error) {}
        return logger.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
    }
};
function getBaseEncoder(type) {
    // intXX and uintXX
    {
        const match = type.match(/^(u?)int(\d*)$/);
        if (match) {
            const signed = match[1] === "";
            const width = parseInt(match[2] || "256");
            if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) logger.throwArgumentError("invalid numeric width", "type", type);
            const boundsUpper = MaxUint256.mask(signed ? width - 1 : width);
            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;
            return function(value) {
                const v = (0, _bignumber.BigNumber).from(value);
                if (v.lt(boundsLower) || v.gt(boundsUpper)) logger.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
                return (0, _bytes.hexZeroPad)(v.toTwos(256).toHexString(), 32);
            };
        }
    }
    // bytesXX
    {
        const match = type.match(/^bytes(\d+)$/);
        if (match) {
            const width = parseInt(match[1]);
            if (width === 0 || width > 32 || match[1] !== String(width)) logger.throwArgumentError("invalid bytes width", "type", type);
            return function(value) {
                const bytes = (0, _bytes.arrayify)(value);
                if (bytes.length !== width) logger.throwArgumentError(`invalid length for ${type}`, "value", value);
                return hexPadRight(value);
            };
        }
    }
    switch(type){
        case "address":
            return function(value) {
                return (0, _bytes.hexZeroPad)((0, _address.getAddress)(value), 32);
            };
        case "bool":
            return function(value) {
                return !value ? hexFalse : hexTrue;
            };
        case "bytes":
            return function(value) {
                return (0, _keccak256.keccak256)(value);
            };
        case "string":
            return function(value) {
                return (0, _id.id)(value);
            };
    }
    return null;
}
function encodeType(name1, fields) {
    return `${name1}(${fields.map(({ name , type  })=>type + " " + name).join(",")})`;
}
class TypedDataEncoder {
    constructor(types){
        (0, _properties.defineReadOnly)(this, "types", Object.freeze((0, _properties.deepCopy)(types)));
        (0, _properties.defineReadOnly)(this, "_encoderCache", {});
        (0, _properties.defineReadOnly)(this, "_types", {});
        // Link struct types to their direct child structs
        const links = {};
        // Link structs to structs which contain them as a child
        const parents = {};
        // Link all subtypes within a given struct
        const subtypes = {};
        Object.keys(types).forEach((type)=>{
            links[type] = {};
            parents[type] = [];
            subtypes[type] = {};
        });
        for(const name in types){
            const uniqueNames = {};
            types[name].forEach((field)=>{
                // Check each field has a unique name
                if (uniqueNames[field.name]) logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", types);
                uniqueNames[field.name] = true;
                // Get the base type (drop any array specifiers)
                const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                if (baseType === name) logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
                // Is this a base encoding type?
                const encoder = getBaseEncoder(baseType);
                if (encoder) return;
                if (!parents[baseType]) logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
                // Add linkage
                parents[baseType].push(name);
                links[name][baseType] = true;
            });
        }
        // Deduce the primary type
        const primaryTypes = Object.keys(parents).filter((n)=>parents[n].length === 0);
        if (primaryTypes.length === 0) logger.throwArgumentError("missing primary type", "types", types);
        else if (primaryTypes.length > 1) logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t)=>JSON.stringify(t)).join(", ")}`, "types", types);
        (0, _properties.defineReadOnly)(this, "primaryType", primaryTypes[0]);
        // Check for circular type references
        function checkCircular(type, found) {
            if (found[type]) logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
            found[type] = true;
            Object.keys(links[type]).forEach((child)=>{
                if (!parents[child]) return;
                // Recursively check children
                checkCircular(child, found);
                // Mark all ancestors as having this decendant
                Object.keys(found).forEach((subtype)=>{
                    subtypes[subtype][child] = true;
                });
            });
            delete found[type];
        }
        checkCircular(this.primaryType, {});
        // Compute each fully describe type
        for(const name2 in subtypes){
            const st = Object.keys(subtypes[name2]);
            st.sort();
            this._types[name2] = encodeType(name2, types[name2]) + st.map((t)=>encodeType(t, types[t])).join("");
        }
    }
    getEncoder(type) {
        let encoder = this._encoderCache[type];
        if (!encoder) encoder = this._encoderCache[type] = this._getEncoder(type);
        return encoder;
    }
    _getEncoder(type1) {
        // Basic encoder type (address, bool, uint256, etc)
        {
            const encoder = getBaseEncoder(type1);
            if (encoder) return encoder;
        }
        // Array
        const match = type1.match(/^(.*)(\x5b(\d*)\x5d)$/);
        if (match) {
            const subtype = match[1];
            const subEncoder = this.getEncoder(subtype);
            const length = parseInt(match[3]);
            return (value)=>{
                if (length >= 0 && value.length !== length) logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                let result = value.map(subEncoder);
                if (this._types[subtype]) result = result.map((0, _keccak256.keccak256));
                return (0, _keccak256.keccak256)((0, _bytes.hexConcat)(result));
            };
        }
        // Struct
        const fields = this.types[type1];
        if (fields) {
            const encodedType = (0, _id.id)(this._types[type1]);
            return (value)=>{
                const values = fields.map(({ name , type  })=>{
                    const result = this.getEncoder(type)(value[name]);
                    if (this._types[type]) return (0, _keccak256.keccak256)(result);
                    return result;
                });
                values.unshift(encodedType);
                return (0, _bytes.hexConcat)(values);
            };
        }
        return logger.throwArgumentError(`unknown type: ${type1}`, "type", type1);
    }
    encodeType(name) {
        const result = this._types[name];
        if (!result) logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, "name", name);
        return result;
    }
    encodeData(type, value) {
        return this.getEncoder(type)(value);
    }
    hashStruct(name, value) {
        return (0, _keccak256.keccak256)(this.encodeData(name, value));
    }
    encode(value) {
        return this.encodeData(this.primaryType, value);
    }
    hash(value) {
        return this.hashStruct(this.primaryType, value);
    }
    _visit(type2, value, callback) {
        // Basic encoder type (address, bool, uint256, etc)
        {
            const encoder = getBaseEncoder(type2);
            if (encoder) return callback(type2, value);
        }
        // Array
        const match = type2.match(/^(.*)(\x5b(\d*)\x5d)$/);
        if (match) {
            const subtype = match[1];
            const length = parseInt(match[3]);
            if (length >= 0 && value.length !== length) logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
            return value.map((v)=>this._visit(subtype, v, callback));
        }
        // Struct
        const fields = this.types[type2];
        if (fields) return fields.reduce((accum, { name , type  })=>{
            accum[name] = this._visit(type, value[name], callback);
            return accum;
        }, {});
        return logger.throwArgumentError(`unknown type: ${type2}`, "type", type2);
    }
    visit(value, callback) {
        return this._visit(this.primaryType, value, callback);
    }
    static from(types) {
        return new TypedDataEncoder(types);
    }
    static getPrimaryType(types) {
        return TypedDataEncoder.from(types).primaryType;
    }
    static hashStruct(name, types, value) {
        return TypedDataEncoder.from(types).hashStruct(name, value);
    }
    static hashDomain(domain) {
        const domainFields = [];
        for(const name in domain){
            const type = domainFieldTypes[name];
            if (!type) logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
            domainFields.push({
                name,
                type
            });
        }
        domainFields.sort((a, b)=>{
            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
        });
        return TypedDataEncoder.hashStruct("EIP712Domain", {
            EIP712Domain: domainFields
        }, domain);
    }
    static encode(domain, types, value) {
        return (0, _bytes.hexConcat)([
            "0x1901",
            TypedDataEncoder.hashDomain(domain),
            TypedDataEncoder.from(types).hash(value)
        ]);
    }
    static hash(domain, types, value) {
        return (0, _keccak256.keccak256)(TypedDataEncoder.encode(domain, types, value));
    }
    // Replaces all address types with ENS names with their looked up address
    static resolveNames(domain, types, value1, resolveName) {
        return __awaiter(this, void 0, void 0, function*() {
            // Make a copy to isolate it from the object passed in
            domain = (0, _properties.shallowCopy)(domain);
            // Look up all ENS names
            const ensCache = {};
            // Do we need to look up the domain's verifyingContract?
            if (domain.verifyingContract && !(0, _bytes.isHexString)(domain.verifyingContract, 20)) ensCache[domain.verifyingContract] = "0x";
            // We are going to use the encoder to visit all the base values
            const encoder = TypedDataEncoder.from(types);
            // Get a list of all the addresses
            encoder.visit(value1, (type, value)=>{
                if (type === "address" && !(0, _bytes.isHexString)(value, 20)) ensCache[value] = "0x";
                return value;
            });
            // Lookup each name
            for(const name in ensCache)ensCache[name] = yield resolveName(name);
            // Replace the domain verifyingContract if needed
            if (domain.verifyingContract && ensCache[domain.verifyingContract]) domain.verifyingContract = ensCache[domain.verifyingContract];
            // Replace all ENS names with their address
            value1 = encoder.visit(value1, (type, value)=>{
                if (type === "address" && ensCache[value]) return ensCache[value];
                return value;
            });
            return {
                domain,
                value: value1
            };
        });
    }
    static getPayload(domain, types, value2) {
        // Validate the domain fields
        TypedDataEncoder.hashDomain(domain);
        // Derive the EIP712Domain Struct reference type
        const domainValues = {};
        const domainTypes = [];
        domainFieldNames.forEach((name)=>{
            const value = domain[name];
            if (value == null) return;
            domainValues[name] = domainChecks[name](value);
            domainTypes.push({
                name,
                type: domainFieldTypes[name]
            });
        });
        const encoder = TypedDataEncoder.from(types);
        const typesWithDomain = (0, _properties.shallowCopy)(types);
        if (typesWithDomain.EIP712Domain) logger.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
        else typesWithDomain.EIP712Domain = domainTypes;
        // Validate the data structures and types
        encoder.encode(value2);
        return {
            types: typesWithDomain,
            domain: domainValues,
            primaryType: encoder.primaryType,
            message: encoder.visit(value2, (type, value)=>{
                // bytes
                if (type.match(/^bytes(\d*)/)) return (0, _bytes.hexlify)((0, _bytes.arrayify)(value));
                // uint or int
                if (type.match(/^u?int/)) return (0, _bignumber.BigNumber).from(value).toString();
                switch(type){
                    case "address":
                        return value.toLowerCase();
                    case "bool":
                        return !!value;
                    case "string":
                        if (typeof value !== "string") logger.throwArgumentError(`invalid string`, "value", value);
                        return value;
                }
                return logger.throwArgumentError("unsupported type", "type", type);
            })
        };
    }
}

},{"@ethersproject/address":"ggdAz","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/keccak256":"hXDEv","@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"kUuZu","./id":"70HiZ","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"g1jr1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//export type CallTransactionable = {
//    call(transaction: TransactionRequest): Promise<TransactionResponse>;
//};
parcelHelpers.export(exports, "ForkEvent", ()=>ForkEvent);
parcelHelpers.export(exports, "BlockForkEvent", ()=>BlockForkEvent);
parcelHelpers.export(exports, "TransactionForkEvent", ()=>TransactionForkEvent);
parcelHelpers.export(exports, "TransactionOrderForkEvent", ()=>TransactionOrderForkEvent);
///////////////////////////////
// Exported Abstracts
parcelHelpers.export(exports, "Provider", ()=>Provider);
var _bignumber = require("@ethersproject/bignumber");
var _bytes = require("@ethersproject/bytes");
var _properties = require("@ethersproject/properties");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
class ForkEvent extends (0, _properties.Description) {
    static isForkEvent(value) {
        return !!(value && value._isForkEvent);
    }
}
class BlockForkEvent extends ForkEvent {
    constructor(blockHash, expiry){
        if (!(0, _bytes.isHexString)(blockHash, 32)) logger.throwArgumentError("invalid blockHash", "blockHash", blockHash);
        super({
            _isForkEvent: true,
            _isBlockForkEvent: true,
            expiry: expiry || 0,
            blockHash: blockHash
        });
    }
}
class TransactionForkEvent extends ForkEvent {
    constructor(hash, expiry){
        if (!(0, _bytes.isHexString)(hash, 32)) logger.throwArgumentError("invalid transaction hash", "hash", hash);
        super({
            _isForkEvent: true,
            _isTransactionForkEvent: true,
            expiry: expiry || 0,
            hash: hash
        });
    }
}
class TransactionOrderForkEvent extends ForkEvent {
    constructor(beforeHash, afterHash, expiry){
        if (!(0, _bytes.isHexString)(beforeHash, 32)) logger.throwArgumentError("invalid transaction hash", "beforeHash", beforeHash);
        if (!(0, _bytes.isHexString)(afterHash, 32)) logger.throwArgumentError("invalid transaction hash", "afterHash", afterHash);
        super({
            _isForkEvent: true,
            _isTransactionOrderForkEvent: true,
            expiry: expiry || 0,
            beforeHash: beforeHash,
            afterHash: afterHash
        });
    }
}
class Provider {
    constructor(){
        logger.checkAbstract(new.target, Provider);
        (0, _properties.defineReadOnly)(this, "_isProvider", true);
    }
    getFeeData() {
        return __awaiter(this, void 0, void 0, function*() {
            const { block , gasPrice  } = yield (0, _properties.resolveProperties)({
                block: this.getBlock("latest"),
                gasPrice: this.getGasPrice().catch((error)=>{
                    // @TODO: Why is this now failing on Calaveras?
                    //console.log(error);
                    return null;
                })
            });
            let maxFeePerGas = null, maxPriorityFeePerGas = null;
            if (block && block.baseFeePerGas) {
                // We may want to compute this more accurately in the future,
                // using the formula "check if the base fee is correct".
                // See: https://eips.ethereum.org/EIPS/eip-1559
                maxPriorityFeePerGas = (0, _bignumber.BigNumber).from("1500000000");
                maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
            }
            return {
                maxFeePerGas,
                maxPriorityFeePerGas,
                gasPrice
            };
        });
    }
    // Alias for "on"
    addListener(eventName, listener) {
        return this.on(eventName, listener);
    }
    // Alias for "off"
    removeListener(eventName, listener) {
        return this.off(eventName, listener);
    }
    static isProvider(value) {
        return !!(value && value._isProvider);
    }
}

},{"@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"7ahSC","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"7ahSC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "abstract-provider/5.6.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"g9Ey5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Signer", ()=>Signer);
parcelHelpers.export(exports, "VoidSigner", ()=>VoidSigner);
var _properties = require("@ethersproject/properties");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
const allowedTransactionKeys = [
    "accessList",
    "ccipReadEnabled",
    "chainId",
    "customData",
    "data",
    "from",
    "gasLimit",
    "gasPrice",
    "maxFeePerGas",
    "maxPriorityFeePerGas",
    "nonce",
    "to",
    "type",
    "value"
];
const forwardErrors = [
    (0, _logger.Logger).errors.INSUFFICIENT_FUNDS,
    (0, _logger.Logger).errors.NONCE_EXPIRED,
    (0, _logger.Logger).errors.REPLACEMENT_UNDERPRICED, 
];
class Signer {
    ///////////////////
    // Sub-classes MUST call super
    constructor(){
        logger.checkAbstract(new.target, Signer);
        (0, _properties.defineReadOnly)(this, "_isSigner", true);
    }
    ///////////////////
    // Sub-classes MAY override these
    getBalance(blockTag) {
        return __awaiter(this, void 0, void 0, function*() {
            this._checkProvider("getBalance");
            return yield this.provider.getBalance(this.getAddress(), blockTag);
        });
    }
    getTransactionCount(blockTag) {
        return __awaiter(this, void 0, void 0, function*() {
            this._checkProvider("getTransactionCount");
            return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
        });
    }
    // Populates "from" if unspecified, and estimates the gas for the transaction
    estimateGas(transaction) {
        return __awaiter(this, void 0, void 0, function*() {
            this._checkProvider("estimateGas");
            const tx = yield (0, _properties.resolveProperties)(this.checkTransaction(transaction));
            return yield this.provider.estimateGas(tx);
        });
    }
    // Populates "from" if unspecified, and calls with the transaction
    call(transaction, blockTag) {
        return __awaiter(this, void 0, void 0, function*() {
            this._checkProvider("call");
            const tx = yield (0, _properties.resolveProperties)(this.checkTransaction(transaction));
            return yield this.provider.call(tx, blockTag);
        });
    }
    // Populates all fields in a transaction, signs it and sends it to the network
    sendTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function*() {
            this._checkProvider("sendTransaction");
            const tx = yield this.populateTransaction(transaction);
            const signedTx = yield this.signTransaction(tx);
            return yield this.provider.sendTransaction(signedTx);
        });
    }
    getChainId() {
        return __awaiter(this, void 0, void 0, function*() {
            this._checkProvider("getChainId");
            const network = yield this.provider.getNetwork();
            return network.chainId;
        });
    }
    getGasPrice() {
        return __awaiter(this, void 0, void 0, function*() {
            this._checkProvider("getGasPrice");
            return yield this.provider.getGasPrice();
        });
    }
    getFeeData() {
        return __awaiter(this, void 0, void 0, function*() {
            this._checkProvider("getFeeData");
            return yield this.provider.getFeeData();
        });
    }
    resolveName(name) {
        return __awaiter(this, void 0, void 0, function*() {
            this._checkProvider("resolveName");
            return yield this.provider.resolveName(name);
        });
    }
    // Checks a transaction does not contain invalid keys and if
    // no "from" is provided, populates it.
    // - does NOT require a provider
    // - adds "from" is not present
    // - returns a COPY (safe to mutate the result)
    // By default called from: (overriding these prevents it)
    //   - call
    //   - estimateGas
    //   - populateTransaction (and therefor sendTransaction)
    checkTransaction(transaction) {
        for(const key in transaction)if (allowedTransactionKeys.indexOf(key) === -1) logger.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
        const tx = (0, _properties.shallowCopy)(transaction);
        if (tx.from == null) tx.from = this.getAddress();
        else // Make sure any provided address matches this signer
        tx.from = Promise.all([
            Promise.resolve(tx.from),
            this.getAddress()
        ]).then((result)=>{
            if (result[0].toLowerCase() !== result[1].toLowerCase()) logger.throwArgumentError("from address mismatch", "transaction", transaction);
            return result[0];
        });
        return tx;
    }
    // Populates ALL keys for a transaction and checks that "from" matches
    // this Signer. Should be used by sendTransaction but NOT by signTransaction.
    // By default called from: (overriding these prevents it)
    //   - sendTransaction
    //
    // Notes:
    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
    populateTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function*() {
            const tx = yield (0, _properties.resolveProperties)(this.checkTransaction(transaction));
            if (tx.to != null) {
                tx.to = Promise.resolve(tx.to).then((to)=>__awaiter(this, void 0, void 0, function*() {
                        if (to == null) return null;
                        const address = yield this.resolveName(to);
                        if (address == null) logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                        return address;
                    }));
                // Prevent this error from causing an UnhandledPromiseException
                tx.to.catch((error)=>{});
            }
            // Do not allow mixing pre-eip-1559 and eip-1559 properties
            const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;
            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) logger.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
            else if ((tx.type === 0 || tx.type === 1) && hasEip1559) logger.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
            if ((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null) // Fully-formed EIP-1559 transaction (skip getFeeData)
            tx.type = 2;
            else if (tx.type === 0 || tx.type === 1) // Explicit Legacy or EIP-2930 transaction
            // Populate missing gasPrice
            {
                if (tx.gasPrice == null) tx.gasPrice = this.getGasPrice();
            } else {
                // We need to get fee data to determine things
                const feeData = yield this.getFeeData();
                if (tx.type == null) {
                    // We need to auto-detect the intended type of this transaction...
                    if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                        // The network supports EIP-1559!
                        // Upgrade transaction from null to eip-1559
                        tx.type = 2;
                        if (tx.gasPrice != null) {
                            // Using legacy gasPrice property on an eip-1559 network,
                            // so use gasPrice as both fee properties
                            const gasPrice = tx.gasPrice;
                            delete tx.gasPrice;
                            tx.maxFeePerGas = gasPrice;
                            tx.maxPriorityFeePerGas = gasPrice;
                        } else {
                            // Populate missing fee data
                            if (tx.maxFeePerGas == null) tx.maxFeePerGas = feeData.maxFeePerGas;
                            if (tx.maxPriorityFeePerGas == null) tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                        }
                    } else if (feeData.gasPrice != null) {
                        // Network doesn't support EIP-1559...
                        // ...but they are trying to use EIP-1559 properties
                        if (hasEip1559) logger.throwError("network does not support EIP-1559", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                            operation: "populateTransaction"
                        });
                        // Populate missing fee data
                        if (tx.gasPrice == null) tx.gasPrice = feeData.gasPrice;
                        // Explicitly set untyped transaction to legacy
                        tx.type = 0;
                    } else // getFeeData has failed us.
                    logger.throwError("failed to get consistent fee data", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                        operation: "signer.getFeeData"
                    });
                } else if (tx.type === 2) {
                    // Explicitly using EIP-1559
                    // Populate missing fee data
                    if (tx.maxFeePerGas == null) tx.maxFeePerGas = feeData.maxFeePerGas;
                    if (tx.maxPriorityFeePerGas == null) tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                }
            }
            if (tx.nonce == null) tx.nonce = this.getTransactionCount("pending");
            if (tx.gasLimit == null) tx.gasLimit = this.estimateGas(tx).catch((error)=>{
                if (forwardErrors.indexOf(error.code) >= 0) throw error;
                return logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", (0, _logger.Logger).errors.UNPREDICTABLE_GAS_LIMIT, {
                    error: error,
                    tx: tx
                });
            });
            if (tx.chainId == null) tx.chainId = this.getChainId();
            else tx.chainId = Promise.all([
                Promise.resolve(tx.chainId),
                this.getChainId()
            ]).then((results)=>{
                if (results[1] !== 0 && results[0] !== results[1]) logger.throwArgumentError("chainId address mismatch", "transaction", transaction);
                return results[0];
            });
            return yield (0, _properties.resolveProperties)(tx);
        });
    }
    ///////////////////
    // Sub-classes SHOULD leave these alone
    _checkProvider(operation) {
        if (!this.provider) logger.throwError("missing provider", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: operation || "_checkProvider"
        });
    }
    static isSigner(value) {
        return !!(value && value._isSigner);
    }
}
class VoidSigner extends Signer {
    constructor(address, provider){
        super();
        (0, _properties.defineReadOnly)(this, "address", address);
        (0, _properties.defineReadOnly)(this, "provider", provider || null);
    }
    getAddress() {
        return Promise.resolve(this.address);
    }
    _fail(message, operation) {
        return Promise.resolve().then(()=>{
            logger.throwError(message, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: operation
            });
        });
    }
    signMessage(message) {
        return this._fail("VoidSigner cannot sign messages", "signMessage");
    }
    signTransaction(transaction) {
        return this._fail("VoidSigner cannot sign transactions", "signTransaction");
    }
    _signTypedData(domain, types, value) {
        return this._fail("VoidSigner cannot sign typed data", "signTypedData");
    }
    connect(provider) {
        return new VoidSigner(this.address, provider);
    }
}

},{"@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"jstYZ","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"jstYZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "abstract-signer/5.6.2";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"d1ust":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TransactionTypes", ()=>TransactionTypes);
parcelHelpers.export(exports, "computeAddress", ()=>computeAddress);
parcelHelpers.export(exports, "recoverAddress", ()=>recoverAddress);
parcelHelpers.export(exports, "accessListify", ()=>accessListify);
parcelHelpers.export(exports, "serialize", ()=>serialize);
parcelHelpers.export(exports, "parse", ()=>parse);
var _address = require("@ethersproject/address");
var _bignumber = require("@ethersproject/bignumber");
var _bytes = require("@ethersproject/bytes");
var _constants = require("@ethersproject/constants");
var _keccak256 = require("@ethersproject/keccak256");
var _properties = require("@ethersproject/properties");
var _rlp = require("@ethersproject/rlp");
var _signingKey = require("@ethersproject/signing-key");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
var TransactionTypes;
(function(TransactionTypes1) {
    TransactionTypes1[TransactionTypes1["legacy"] = 0] = "legacy";
    TransactionTypes1[TransactionTypes1["eip2930"] = 1] = "eip2930";
    TransactionTypes1[TransactionTypes1["eip1559"] = 2] = "eip1559";
})(TransactionTypes || (TransactionTypes = {}));
///////////////////////////////
function handleAddress(value) {
    if (value === "0x") return null;
    return (0, _address.getAddress)(value);
}
function handleNumber(value) {
    if (value === "0x") return 0, _constants.Zero;
    return (0, _bignumber.BigNumber).from(value);
}
// Legacy Transaction Fields
const transactionFields = [
    {
        name: "nonce",
        maxLength: 32,
        numeric: true
    },
    {
        name: "gasPrice",
        maxLength: 32,
        numeric: true
    },
    {
        name: "gasLimit",
        maxLength: 32,
        numeric: true
    },
    {
        name: "to",
        length: 20
    },
    {
        name: "value",
        maxLength: 32,
        numeric: true
    },
    {
        name: "data"
    }, 
];
const allowedTransactionKeys = {
    chainId: true,
    data: true,
    gasLimit: true,
    gasPrice: true,
    nonce: true,
    to: true,
    type: true,
    value: true
};
function computeAddress(key) {
    const publicKey = (0, _signingKey.computePublicKey)(key);
    return (0, _address.getAddress)((0, _bytes.hexDataSlice)((0, _keccak256.keccak256)((0, _bytes.hexDataSlice)(publicKey, 1)), 12));
}
function recoverAddress(digest, signature) {
    return computeAddress((0, _signingKey.recoverPublicKey)((0, _bytes.arrayify)(digest), signature));
}
function formatNumber(value, name) {
    const result = (0, _bytes.stripZeros)((0, _bignumber.BigNumber).from(value).toHexString());
    if (result.length > 32) logger.throwArgumentError("invalid length for " + name, "transaction:" + name, value);
    return result;
}
function accessSetify(addr, storageKeys) {
    return {
        address: (0, _address.getAddress)(addr),
        storageKeys: (storageKeys || []).map((storageKey, index)=>{
            if ((0, _bytes.hexDataLength)(storageKey) !== 32) logger.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
            return storageKey.toLowerCase();
        })
    };
}
function accessListify(value) {
    if (Array.isArray(value)) return value.map((set, index)=>{
        if (Array.isArray(set)) {
            if (set.length > 2) logger.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
            return accessSetify(set[0], set[1]);
        }
        return accessSetify(set.address, set.storageKeys);
    });
    const result = Object.keys(value).map((addr)=>{
        const storageKeys = value[addr].reduce((accum, storageKey)=>{
            accum[storageKey] = true;
            return accum;
        }, {});
        return accessSetify(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a, b)=>a.address.localeCompare(b.address));
    return result;
}
function formatAccessList(value) {
    return accessListify(value).map((set)=>[
            set.address,
            set.storageKeys
        ]);
}
function _serializeEip1559(transaction, signature) {
    // If there is an explicit gasPrice, make sure it matches the
    // EIP-1559 fees; otherwise they may not understand what they
    // think they are setting in terms of fee.
    if (transaction.gasPrice != null) {
        const gasPrice = (0, _bignumber.BigNumber).from(transaction.gasPrice);
        const maxFeePerGas = (0, _bignumber.BigNumber).from(transaction.maxFeePerGas || 0);
        if (!gasPrice.eq(maxFeePerGas)) logger.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
            gasPrice,
            maxFeePerGas
        });
    }
    const fields = [
        formatNumber(transaction.chainId || 0, "chainId"),
        formatNumber(transaction.nonce || 0, "nonce"),
        formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
        formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
        formatNumber(transaction.gasLimit || 0, "gasLimit"),
        transaction.to != null ? (0, _address.getAddress)(transaction.to) : "0x",
        formatNumber(transaction.value || 0, "value"),
        transaction.data || "0x",
        formatAccessList(transaction.accessList || [])
    ];
    if (signature) {
        const sig = (0, _bytes.splitSignature)(signature);
        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
        fields.push((0, _bytes.stripZeros)(sig.r));
        fields.push((0, _bytes.stripZeros)(sig.s));
    }
    return (0, _bytes.hexConcat)([
        "0x02",
        _rlp.encode(fields)
    ]);
}
function _serializeEip2930(transaction, signature) {
    const fields = [
        formatNumber(transaction.chainId || 0, "chainId"),
        formatNumber(transaction.nonce || 0, "nonce"),
        formatNumber(transaction.gasPrice || 0, "gasPrice"),
        formatNumber(transaction.gasLimit || 0, "gasLimit"),
        transaction.to != null ? (0, _address.getAddress)(transaction.to) : "0x",
        formatNumber(transaction.value || 0, "value"),
        transaction.data || "0x",
        formatAccessList(transaction.accessList || [])
    ];
    if (signature) {
        const sig = (0, _bytes.splitSignature)(signature);
        fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
        fields.push((0, _bytes.stripZeros)(sig.r));
        fields.push((0, _bytes.stripZeros)(sig.s));
    }
    return (0, _bytes.hexConcat)([
        "0x01",
        _rlp.encode(fields)
    ]);
}
// Legacy Transactions and EIP-155
function _serialize(transaction, signature) {
    (0, _properties.checkProperties)(transaction, allowedTransactionKeys);
    const raw = [];
    transactionFields.forEach(function(fieldInfo) {
        let value = transaction[fieldInfo.name] || [];
        const options = {};
        if (fieldInfo.numeric) options.hexPad = "left";
        value = (0, _bytes.arrayify)((0, _bytes.hexlify)(value, options));
        // Fixed-width field
        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
        // Variable-width (with a maximum)
        if (fieldInfo.maxLength) {
            value = (0, _bytes.stripZeros)(value);
            if (value.length > fieldInfo.maxLength) logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
        }
        raw.push((0, _bytes.hexlify)(value));
    });
    let chainId = 0;
    if (transaction.chainId != null) {
        // A chainId was provided; if non-zero we'll use EIP-155
        chainId = transaction.chainId;
        if (typeof chainId !== "number") logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
    } else if (signature && !(0, _bytes.isBytesLike)(signature) && signature.v > 28) // No chainId provided, but the signature is signing with EIP-155; derive chainId
    chainId = Math.floor((signature.v - 35) / 2);
    // We have an EIP-155 transaction (chainId was specified and non-zero)
    if (chainId !== 0) {
        raw.push((0, _bytes.hexlify)(chainId)); // @TODO: hexValue?
        raw.push("0x");
        raw.push("0x");
    }
    // Requesting an unsigned transaction
    if (!signature) return _rlp.encode(raw);
    // The splitSignature will ensure the transaction has a recoveryParam in the
    // case that the signTransaction function only adds a v.
    const sig = (0, _bytes.splitSignature)(signature);
    // We pushed a chainId and null r, s on for hashing only; remove those
    let v = 27 + sig.recoveryParam;
    if (chainId !== 0) {
        raw.pop();
        raw.pop();
        raw.pop();
        v += chainId * 2 + 8;
        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
        if (sig.v > 28 && sig.v !== v) logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
    } else if (sig.v !== v) logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
    raw.push((0, _bytes.hexlify)(v));
    raw.push((0, _bytes.stripZeros)((0, _bytes.arrayify)(sig.r)));
    raw.push((0, _bytes.stripZeros)((0, _bytes.arrayify)(sig.s)));
    return _rlp.encode(raw);
}
function serialize(transaction, signature) {
    // Legacy and EIP-155 Transactions
    if (transaction.type == null || transaction.type === 0) {
        if (transaction.accessList != null) logger.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
        return _serialize(transaction, signature);
    }
    // Typed Transactions (EIP-2718)
    switch(transaction.type){
        case 1:
            return _serializeEip2930(transaction, signature);
        case 2:
            return _serializeEip1559(transaction, signature);
        default:
            break;
    }
    return logger.throwError(`unsupported transaction type: ${transaction.type}`, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
        operation: "serializeTransaction",
        transactionType: transaction.type
    });
}
function _parseEipSignature(tx, fields, serialize1) {
    try {
        const recid = handleNumber(fields[0]).toNumber();
        if (recid !== 0 && recid !== 1) throw new Error("bad recid");
        tx.v = recid;
    } catch (error) {
        logger.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
    }
    tx.r = (0, _bytes.hexZeroPad)(fields[1], 32);
    tx.s = (0, _bytes.hexZeroPad)(fields[2], 32);
    try {
        const digest = (0, _keccak256.keccak256)(serialize1(tx));
        tx.from = recoverAddress(digest, {
            r: tx.r,
            s: tx.s,
            recoveryParam: tx.v
        });
    } catch (error1) {}
}
function _parseEip1559(payload) {
    const transaction = _rlp.decode(payload.slice(1));
    if (transaction.length !== 9 && transaction.length !== 12) logger.throwArgumentError("invalid component count for transaction type: 2", "payload", (0, _bytes.hexlify)(payload));
    const maxPriorityFeePerGas = handleNumber(transaction[2]);
    const maxFeePerGas = handleNumber(transaction[3]);
    const tx = {
        type: 2,
        chainId: handleNumber(transaction[0]).toNumber(),
        nonce: handleNumber(transaction[1]).toNumber(),
        maxPriorityFeePerGas: maxPriorityFeePerGas,
        maxFeePerGas: maxFeePerGas,
        gasPrice: null,
        gasLimit: handleNumber(transaction[4]),
        to: handleAddress(transaction[5]),
        value: handleNumber(transaction[6]),
        data: transaction[7],
        accessList: accessListify(transaction[8])
    };
    // Unsigned EIP-1559 Transaction
    if (transaction.length === 9) return tx;
    tx.hash = (0, _keccak256.keccak256)(payload);
    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
    return tx;
}
function _parseEip2930(payload) {
    const transaction = _rlp.decode(payload.slice(1));
    if (transaction.length !== 8 && transaction.length !== 11) logger.throwArgumentError("invalid component count for transaction type: 1", "payload", (0, _bytes.hexlify)(payload));
    const tx = {
        type: 1,
        chainId: handleNumber(transaction[0]).toNumber(),
        nonce: handleNumber(transaction[1]).toNumber(),
        gasPrice: handleNumber(transaction[2]),
        gasLimit: handleNumber(transaction[3]),
        to: handleAddress(transaction[4]),
        value: handleNumber(transaction[5]),
        data: transaction[6],
        accessList: accessListify(transaction[7])
    };
    // Unsigned EIP-2930 Transaction
    if (transaction.length === 8) return tx;
    tx.hash = (0, _keccak256.keccak256)(payload);
    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
    return tx;
}
// Legacy Transactions and EIP-155
function _parse(rawTransaction) {
    const transaction = _rlp.decode(rawTransaction);
    if (transaction.length !== 9 && transaction.length !== 6) logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
    const tx = {
        nonce: handleNumber(transaction[0]).toNumber(),
        gasPrice: handleNumber(transaction[1]),
        gasLimit: handleNumber(transaction[2]),
        to: handleAddress(transaction[3]),
        value: handleNumber(transaction[4]),
        data: transaction[5],
        chainId: 0
    };
    // Legacy unsigned transaction
    if (transaction.length === 6) return tx;
    try {
        tx.v = (0, _bignumber.BigNumber).from(transaction[6]).toNumber();
    } catch (error) {
        // @TODO: What makes snese to do? The v is too big
        return tx;
    }
    tx.r = (0, _bytes.hexZeroPad)(transaction[7], 32);
    tx.s = (0, _bytes.hexZeroPad)(transaction[8], 32);
    if ((0, _bignumber.BigNumber).from(tx.r).isZero() && (0, _bignumber.BigNumber).from(tx.s).isZero()) {
        // EIP-155 unsigned transaction
        tx.chainId = tx.v;
        tx.v = 0;
    } else {
        // Signed Transaction
        tx.chainId = Math.floor((tx.v - 35) / 2);
        if (tx.chainId < 0) tx.chainId = 0;
        let recoveryParam = tx.v - 27;
        const raw = transaction.slice(0, 6);
        if (tx.chainId !== 0) {
            raw.push((0, _bytes.hexlify)(tx.chainId));
            raw.push("0x");
            raw.push("0x");
            recoveryParam -= tx.chainId * 2 + 8;
        }
        const digest = (0, _keccak256.keccak256)(_rlp.encode(raw));
        try {
            tx.from = recoverAddress(digest, {
                r: (0, _bytes.hexlify)(tx.r),
                s: (0, _bytes.hexlify)(tx.s),
                recoveryParam: recoveryParam
            });
        } catch (error) {}
        tx.hash = (0, _keccak256.keccak256)(rawTransaction);
    }
    tx.type = null;
    return tx;
}
function parse(rawTransaction) {
    const payload = (0, _bytes.arrayify)(rawTransaction);
    // Legacy and EIP-155 Transactions
    if (payload[0] > 0x7f) return _parse(payload);
    // Typed Transaction (EIP-2718)
    switch(payload[0]){
        case 1:
            return _parseEip2930(payload);
        case 2:
            return _parseEip1559(payload);
        default:
            break;
    }
    return logger.throwError(`unsupported transaction type: ${payload[0]}`, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
        operation: "parseTransaction",
        transactionType: payload[0]
    });
}

},{"@ethersproject/address":"ggdAz","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/constants":"gKbDE","@ethersproject/keccak256":"hXDEv","@ethersproject/properties":"h3GJb","@ethersproject/rlp":"b2vlp","@ethersproject/signing-key":"krGB2","@ethersproject/logger":"hLvB2","./_version":"7piXV","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"krGB2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SigningKey", ()=>SigningKey);
parcelHelpers.export(exports, "recoverPublicKey", ()=>recoverPublicKey);
parcelHelpers.export(exports, "computePublicKey", ()=>computePublicKey);
var _elliptic = require("./elliptic");
var _bytes = require("@ethersproject/bytes");
var _properties = require("@ethersproject/properties");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
let _curve = null;
function getCurve() {
    if (!_curve) _curve = new (0, _elliptic.EC)("secp256k1");
    return _curve;
}
class SigningKey {
    constructor(privateKey){
        (0, _properties.defineReadOnly)(this, "curve", "secp256k1");
        (0, _properties.defineReadOnly)(this, "privateKey", (0, _bytes.hexlify)(privateKey));
        if ((0, _bytes.hexDataLength)(this.privateKey) !== 32) logger.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
        const keyPair = getCurve().keyFromPrivate((0, _bytes.arrayify)(this.privateKey));
        (0, _properties.defineReadOnly)(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
        (0, _properties.defineReadOnly)(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
        (0, _properties.defineReadOnly)(this, "_isSigningKey", true);
    }
    _addPoint(other) {
        const p0 = getCurve().keyFromPublic((0, _bytes.arrayify)(this.publicKey));
        const p1 = getCurve().keyFromPublic((0, _bytes.arrayify)(other));
        return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
    }
    signDigest(digest) {
        const keyPair = getCurve().keyFromPrivate((0, _bytes.arrayify)(this.privateKey));
        const digestBytes = (0, _bytes.arrayify)(digest);
        if (digestBytes.length !== 32) logger.throwArgumentError("bad digest length", "digest", digest);
        const signature = keyPair.sign(digestBytes, {
            canonical: true
        });
        return (0, _bytes.splitSignature)({
            recoveryParam: signature.recoveryParam,
            r: (0, _bytes.hexZeroPad)("0x" + signature.r.toString(16), 32),
            s: (0, _bytes.hexZeroPad)("0x" + signature.s.toString(16), 32)
        });
    }
    computeSharedSecret(otherKey) {
        const keyPair = getCurve().keyFromPrivate((0, _bytes.arrayify)(this.privateKey));
        const otherKeyPair = getCurve().keyFromPublic((0, _bytes.arrayify)(computePublicKey(otherKey)));
        return (0, _bytes.hexZeroPad)("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
    }
    static isSigningKey(value) {
        return !!(value && value._isSigningKey);
    }
}
function recoverPublicKey(digest, signature) {
    const sig = (0, _bytes.splitSignature)(signature);
    const rs = {
        r: (0, _bytes.arrayify)(sig.r),
        s: (0, _bytes.arrayify)(sig.s)
    };
    return "0x" + getCurve().recoverPubKey((0, _bytes.arrayify)(digest), rs, sig.recoveryParam).encode("hex", false);
}
function computePublicKey(key, compressed) {
    const bytes = (0, _bytes.arrayify)(key);
    if (bytes.length === 32) {
        const signingKey = new SigningKey(bytes);
        if (compressed) return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
        return signingKey.publicKey;
    } else if (bytes.length === 33) {
        if (compressed) return (0, _bytes.hexlify)(bytes);
        return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
    } else if (bytes.length === 65) {
        if (!compressed) return (0, _bytes.hexlify)(bytes);
        return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
    }
    return logger.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}

},{"./elliptic":"iqlLr","@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"dHyc2","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"iqlLr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EC", ()=>EC$1);
var _bnJs = require("bn.js");
var _bnJsDefault = parcelHelpers.interopDefault(_bnJs);
var _hashJs = require("hash.js");
var _hashJsDefault = parcelHelpers.interopDefault(_hashJs);
"use strict";
"use strict";
"use strict";
"use strict";
"use strict";
"use strict";
var global = arguments[3];
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function createCommonjsModule(fn, basedir, module) {
    return module = {
        path: basedir,
        exports: {},
        require: function(path, base1) {
            return commonjsRequire(path, base1 === undefined || base1 === null ? module.path : base1);
        }
    }, fn(module, module.exports), module.exports;
}
function getDefaultExportFromNamespaceIfPresent(n) {
    return n && Object.prototype.hasOwnProperty.call(n, "default") ? n["default"] : n;
}
function getDefaultExportFromNamespaceIfNotNamed(n) {
    return n && Object.prototype.hasOwnProperty.call(n, "default") && Object.keys(n).length === 1 ? n["default"] : n;
}
function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var a = Object.defineProperty({}, "__esModule", {
        value: true
    });
    Object.keys(n).forEach(function(k) {
        var d = Object.getOwnPropertyDescriptor(n, k);
        Object.defineProperty(a, k, d.get ? d : {
            enumerable: true,
            get: function() {
                return n[k];
            }
        });
    });
    return a;
}
function commonjsRequire() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
var minimalisticAssert = assert;
function assert(val, msg) {
    if (!val) throw new Error(msg || "Assertion failed");
}
assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
};
var utils_1 = createCommonjsModule(function(module, exports) {
    "use strict";
    var utils = exports;
    function toArray(msg, enc) {
        if (Array.isArray(msg)) return msg.slice();
        if (!msg) return [];
        var res = [];
        if (typeof msg !== "string") {
            for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
            return res;
        }
        if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        } else for(var i = 0; i < msg.length; i++){
            var c = msg.charCodeAt(i);
            var hi = c >> 8;
            var lo = c & 0xff;
            if (hi) res.push(hi, lo);
            else res.push(lo);
        }
        return res;
    }
    utils.toArray = toArray;
    function zero2(word) {
        if (word.length === 1) return "0" + word;
        else return word;
    }
    utils.zero2 = zero2;
    function toHex(msg) {
        var res = "";
        for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
        return res;
    }
    utils.toHex = toHex;
    utils.encode = function encode(arr, enc) {
        if (enc === "hex") return toHex(arr);
        else return arr;
    };
});
var utils_1$1 = createCommonjsModule(function(module, exports) {
    "use strict";
    var utils = exports;
    utils.assert = minimalisticAssert;
    utils.toArray = utils_1.toArray;
    utils.zero2 = utils_1.zero2;
    utils.toHex = utils_1.toHex;
    utils.encode = utils_1.encode;
    // Represent num in a w-NAF form
    function getNAF1(num, w, bits) {
        var naf = new Array(Math.max(num.bitLength(), bits) + 1);
        naf.fill(0);
        var ws = 1 << w + 1;
        var k = num.clone();
        for(var i = 0; i < naf.length; i++){
            var z;
            var mod = k.andln(ws - 1);
            if (k.isOdd()) {
                if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
                else z = mod;
                k.isubn(z);
            } else z = 0;
            naf[i] = z;
            k.iushrn(1);
        }
        return naf;
    }
    utils.getNAF = getNAF1;
    // Represent k1, k2 in a Joint Sparse Form
    function getJSF1(k1, k2) {
        var jsf = [
            [],
            [], 
        ];
        k1 = k1.clone();
        k2 = k2.clone();
        var d1 = 0;
        var d2 = 0;
        var m8;
        while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
            // First phase
            var m14 = k1.andln(3) + d1 & 3;
            var m24 = k2.andln(3) + d2 & 3;
            if (m14 === 3) m14 = -1;
            if (m24 === 3) m24 = -1;
            var u1;
            if ((m14 & 1) === 0) u1 = 0;
            else {
                m8 = k1.andln(7) + d1 & 7;
                if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
                else u1 = m14;
            }
            jsf[0].push(u1);
            var u2;
            if ((m24 & 1) === 0) u2 = 0;
            else {
                m8 = k2.andln(7) + d2 & 7;
                if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
                else u2 = m24;
            }
            jsf[1].push(u2);
            // Second phase
            if (2 * d1 === u1 + 1) d1 = 1 - d1;
            if (2 * d2 === u2 + 1) d2 = 1 - d2;
            k1.iushrn(1);
            k2.iushrn(1);
        }
        return jsf;
    }
    utils.getJSF = getJSF1;
    function cachedProperty(obj, name, computer) {
        var key1 = "_" + name;
        obj.prototype[name] = function cachedProperty() {
            return this[key1] !== undefined ? this[key1] : this[key1] = computer.call(this);
        };
    }
    utils.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
        return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
    }
    utils.parseBytes = parseBytes;
    function intFromLE(bytes) {
        return new (0, _bnJsDefault.default)(bytes, "hex", "le");
    }
    utils.intFromLE = intFromLE;
});
var getNAF = utils_1$1.getNAF;
var getJSF = utils_1$1.getJSF;
var assert$1 = utils_1$1.assert;
function BaseCurve(type, conf) {
    this.type = type;
    this.p = new (0, _bnJsDefault.default)(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? (0, _bnJsDefault.default).red(conf.prime) : (0, _bnJsDefault.default).mont(this.p);
    // Useful for many curves
    this.zero = new (0, _bnJsDefault.default)(0).toRed(this.red);
    this.one = new (0, _bnJsDefault.default)(1).toRed(this.red);
    this.two = new (0, _bnJsDefault.default)(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new (0, _bnJsDefault.default)(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
var base = BaseCurve;
BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
};
BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$1(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        assert$1(z !== 0);
        if (p.type === "affine") {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === "affine" ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            p;
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === "affine") acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
};
BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils_1$1.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) assert$1(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07) assert$1(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    throw new Error("Unknown point format");
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len);
    if (compact) return [
        this.getY().isEven() ? 0x02 : 0x03
    ].concat(x);
    return [
        0x04
    ].concat(x, this.getY().toArray("be", len));
};
BasePoint.prototype.encode = function encode(enc, compact) {
    return utils_1$1.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};
var inherits_browser = createCommonjsModule(function(module) {
    if (typeof Object.create === "function") // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                    value: ctor,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
        }
    };
    else // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
        }
    };
});
var assert$2 = utils_1$1.assert;
function ShortCurve(conf) {
    base.call(this, "short", conf);
    this.a = new (0, _bnJsDefault.default)(conf.a, 16).toRed(this.red);
    this.b = new (0, _bnJsDefault.default)(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
inherits_browser(ShortCurve, base);
var short_1 = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new (0, _bnJsDefault.default)(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new (0, _bnJsDefault.default)(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new (0, _bnJsDefault.default)(vec.a, 16),
            b: new (0, _bnJsDefault.default)(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : (0, _bnJsDefault.default).mont(num);
    var tinv = new (0, _bnJsDefault.default)(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new (0, _bnJsDefault.default)(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new (0, _bnJsDefault.default)(1);
    var y1 = new (0, _bnJsDefault.default)(0);
    var x2 = new (0, _bnJsDefault.default)(0);
    var y2 = new (0, _bnJsDefault.default)(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }, 
    ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new (0, _bnJsDefault.default)(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function Point(curve, x, y, isRed) {
    base.BasePoint.call(this, curve, "affine");
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new (0, _bnJsDefault.default)(x, 16);
        this.y = new (0, _bnJsDefault.default)(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
inherits_browser(Point, base.BasePoint);
ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
Point.fromJSON = function fromJSON(curve, obj1, red) {
    if (typeof obj1 === "string") obj1 = JSON.parse(obj1);
    var res = curve.point(obj1[0], obj1[1], red);
    if (!obj1[2]) return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj1[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};
Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
Point.prototype.mul = function mul(k) {
    k = new (0, _bnJsDefault.default)(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function JPoint(curve, x, y, z) {
    base.BasePoint.call(this, curve, "jacobian");
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new (0, _bnJsDefault.default)(0);
    } else {
        this.x = new (0, _bnJsDefault.default)(x, 16);
        this.y = new (0, _bnJsDefault.default)(y, 16);
        this.z = new (0, _bnJsDefault.default)(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
inherits_browser(JPoint, base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
};
JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul(k, kbase) {
    k = new (0, _bnJsDefault.default)(k, kbase);
    return this.curve._wnafMul(this, k);
};
JPoint.prototype.eq = function eq(p) {
    if (p.type === "affine") return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};
JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
var curve_1 = createCommonjsModule(function(module, exports) {
    "use strict";
    var curve = exports;
    curve.base = base;
    curve.short = short_1;
    curve.mont = null;
    curve.edwards = null;
});
var curves_1 = createCommonjsModule(function(module, exports) {
    "use strict";
    var curves = exports;
    var assert1 = utils_1$1.assert;
    function PresetCurve(options) {
        if (options.type === "short") this.curve = new curve_1.short(options);
        else if (options.type === "edwards") this.curve = new curve_1.edwards(options);
        else this.curve = new curve_1.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;
        assert1(this.g.validate(), "Invalid curve");
        assert1(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
        Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            get: function() {
                var curve = new PresetCurve(options);
                Object.defineProperty(curves, name, {
                    configurable: true,
                    enumerable: true,
                    value: curve
                });
                return curve;
            }
        });
    }
    defineCurve("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: (0, _hashJsDefault.default).sha256,
        gRed: false,
        g: [
            "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
            "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811", 
        ]
    });
    defineCurve("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: (0, _hashJsDefault.default).sha256,
        gRed: false,
        g: [
            "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
            "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34", 
        ]
    });
    defineCurve("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: (0, _hashJsDefault.default).sha256,
        gRed: false,
        g: [
            "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
            "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5", 
        ]
    });
    defineCurve("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: (0, _hashJsDefault.default).sha384,
        gRed: false,
        g: [
            "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
            "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f", 
        ]
    });
    defineCurve("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: (0, _hashJsDefault.default).sha512,
        gRed: false,
        g: [
            "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
            "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650", 
        ]
    });
    defineCurve("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: (0, _hashJsDefault.default).sha256,
        gRed: false,
        g: [
            "9", 
        ]
    });
    defineCurve("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        // -121665 * (121666^(-1)) (mod P)
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: (0, _hashJsDefault.default).sha256,
        gRed: false,
        g: [
            "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
            // 4/5
            "6666666666666666666666666666666666666666666666666666666666666658", 
        ]
    });
    var pre;
    try {
        pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/ null.crash();
    } catch (e) {
        pre = undefined;
    }
    defineCurve("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: (0, _hashJsDefault.default).sha256,
        // Precomputed endomorphism
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
            {
                a: "3086d221a7d46bcde86c90e49284eb15",
                b: "-e4437ed6010e88286f547fa90abfe4c3"
            },
            {
                a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                b: "3086d221a7d46bcde86c90e49284eb15"
            }, 
        ],
        gRed: false,
        g: [
            "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
            "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
            pre, 
        ]
    });
});
function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
    minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._init(entropy, nonce, pers);
}
var hmacDrbg = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0x00;
        this.V[i] = 0x01;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000; // 2^48
};
HmacDRBG.prototype._hmac = function hmac() {
    return new (0, _hashJsDefault.default).hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0x00
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        0x01
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = utils_1.toArray(entropy, entropyEnc);
    add = utils_1.toArray(add, addEnc);
    minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
    // Optional encoding
    if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = utils_1.toArray(add, addEnc || "hex");
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils_1.encode(res, enc);
};
var assert$3 = utils_1$1.assert;
function KeyPair(ec1, options) {
    this.ec = ec1;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
var key = KeyPair;
KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(ec2, {
        pub: pub,
        pubEnc: enc
    });
};
KeyPair.fromPrivate = function fromPrivate(ec3, priv, enc) {
    if (priv instanceof KeyPair) return priv;
    return new KeyPair(ec3, {
        priv: priv,
        privEnc: enc
    });
};
KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: "Invalid public key"
    };
    if (!pub.validate()) return {
        result: false,
        reason: "Public key is not a point"
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: "Public key * N != O"
    };
    return {
        result: true,
        reason: null
    };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === "string") {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex") return this.priv.toString(16, 2);
    else return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
    this.priv = new (0, _bnJsDefault.default)(key2, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key3, enc) {
    if (key3.x || key3.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === "mont") assert$3(key3.x, "Need x coordinate");
        else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") assert$3(key3.x && key3.y, "Need both x and y coordinate");
        this.pub = this.ec.curve.point(key3.x, key3.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key3, enc);
};
// ECDH
KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) assert$3(pub.validate(), "public point not validated");
    return pub.mul(this.priv).getX();
};
// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature1) {
    return this.ec.verify(msg, signature1, this);
};
KeyPair.prototype.inspect = function inspect() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};
var assert$4 = utils_1$1.assert;
function Signature(options, enc) {
    if (options instanceof Signature) return options;
    if (this._importDER(options, enc)) return;
    assert$4(options.r && options.s, "Signature without r or s");
    this.r = new (0, _bnJsDefault.default)(options.r, 16);
    this.s = new (0, _bnJsDefault.default)(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
var signature = Signature;
function Position() {
    this.place = 0;
}
function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) return initial;
    var octetLen = initial & 0xf;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 0x7f) return false;
    p.place = off;
    return val;
}
function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils_1$1.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) return false;
    var len = getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 0x02) return false;
    var rlen = getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) return false;
    var slen = getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 0x80) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 0x80) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new (0, _bnJsDefault.default)(r);
    this.s = new (0, _bnJsDefault.default)(s);
    this.recoveryParam = null;
    return true;
};
function constructLength(arr, len) {
    if (len < 0x80) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while(--octets)arr.push(len >>> (octets << 3) & 0xff);
    arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    r = rmPadding(r);
    s = rmPadding(s);
    while(!s[0] && !(s[1] & 0x80))s = s.slice(1);
    var arr = [
        0x02
    ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        0x30
    ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils_1$1.encode(res, enc);
};
var rand = /*RicMoo:ethers:require(brorand)*/ function() {
    throw new Error("unsupported");
};
var assert$5 = utils_1$1.assert;
function EC(options) {
    if (!(this instanceof EC)) return new EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === "string") {
        assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), "Unknown curve " + options);
        options = curves_1[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof curves_1.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
var ec = EC;
EC.prototype.keyPair = function keyPair(options) {
    return new key(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return key.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return key.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};
    // Instantiate Hmac_DRBG
    var drbg = new hmacDrbg({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new (0, _bnJsDefault.default)(2));
    for(;;){
        var priv = new (0, _bnJsDefault.default)(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
EC.prototype.sign = function sign(msg, key4, enc, options) {
    if (typeof enc === "object") {
        options = enc;
        enc = null;
    }
    if (!options) options = {};
    key4 = this.keyFromPrivate(key4, enc);
    msg = this._truncateToN(new (0, _bnJsDefault.default)(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key4.getPrivate().toArray("be", bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray("be", bytes);
    // Instantiate Hmac_DRBG
    var drbg = new hmacDrbg({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new (0, _bnJsDefault.default)(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new (0, _bnJsDefault.default)(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key4.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new signature({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
EC.prototype.verify = function verify(msg, signature$1, key5, enc) {
    msg = this._truncateToN(new (0, _bnJsDefault.default)(msg, 16));
    key5 = this.keyFromPublic(key5, enc);
    signature$1 = new signature(signature$1, "hex");
    // Perform primitive values validation
    var r = signature$1.r;
    var s = signature$1.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key5.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key5.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
    assert$5((3 & j) === j, "The recovery param is more than two bits");
    signature$1 = new signature(signature$1, enc);
    var n = this.n;
    var e = new (0, _bnJsDefault.default)(msg);
    var r = signature$1.r;
    var s = signature$1.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature$1.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
    signature$1 = new signature(signature$1, enc);
    if (signature$1.recoveryParam !== null) return signature$1.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature$1, i);
        } catch (e) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error("Unable to find valid recovery factor");
};
var elliptic_1 = createCommonjsModule(function(module, exports) {
    "use strict";
    var elliptic = exports;
    elliptic.version = "6.5.4";
    elliptic.utils = utils_1$1;
    elliptic.rand = /*RicMoo:ethers:require(brorand)*/ function() {
        throw new Error("unsupported");
    };
    elliptic.curve = curve_1;
    elliptic.curves = curves_1;
    // Protocols
    elliptic.ec = ec;
    elliptic.eddsa = null;
});
var EC$1 = elliptic_1.ec;

},{"bn.js":"VopIn","hash.js":"gOEGU","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"gOEGU":[function(require,module,exports) {
var hash = exports;
hash.utils = require("./hash/utils");
hash.common = require("./hash/common");
hash.sha = require("./hash/sha");
hash.ripemd = require("./hash/ripemd");
hash.hmac = require("./hash/hmac");
// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/utils":"kfzn2","./hash/common":"ecAfF","./hash/sha":"8nbee","./hash/ripemd":"9kyRQ","./hash/hmac":"5KrrE"}],"kfzn2":[function(require,module,exports) {
"use strict";
var assert = require("minimalistic-assert");
var inherits = require("inherits");
exports.inherits = inherits;
function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === "string") {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if (isSurrogatePair(msg, i)) {
                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
exports.toArray = toArray;
function toHex(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
exports.toHex = toHex;
function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
    return res >>> 0;
}
exports.htonl = htonl;
function toHex32(msg, endian) {
    var res = "";
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === "little") w = htonl(w);
        res += zero8(w.toString(16));
    }
    return res;
}
exports.toHex32 = toHex32;
function zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
exports.zero2 = zero2;
function zero8(word) {
    if (word.length === 7) return "0" + word;
    else if (word.length === 6) return "00" + word;
    else if (word.length === 5) return "000" + word;
    else if (word.length === 4) return "0000" + word;
    else if (word.length === 3) return "00000" + word;
    else if (word.length === 2) return "000000" + word;
    else if (word.length === 1) return "0000000" + word;
    else return word;
}
exports.zero8 = zero8;
function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === "big") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
exports.join32 = join32;
function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === "big") {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 0xff;
            res[k + 2] = m >>> 8 & 0xff;
            res[k + 3] = m & 0xff;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 0xff;
            res[k + 1] = m >>> 8 & 0xff;
            res[k] = m & 0xff;
        }
    }
    return res;
}
exports.split32 = split32;
function rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
exports.rotr32 = rotr32;
function rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
exports.rotl32 = rotl32;
function sum32(a, b) {
    return a + b >>> 0;
}
exports.sum32 = sum32;
function sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
exports.sum32_3 = sum32_3;
function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
exports.sum32_4 = sum32_4;
function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
exports.sum32_5 = sum32_5;
function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
exports.sum64 = sum64;
function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
exports.sum64_hi = sum64_hi;
function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
exports.sum64_lo = sum64_lo;
function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;
function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;
function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;
function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;
function rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;
function rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;
function shr64_hi(ah, al, num) {
    return ah >>> num;
}
exports.shr64_hi = shr64_hi;
function shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"minimalistic-assert":"8OvWh","inherits":"bRL3M"}],"8OvWh":[function(require,module,exports) {
module.exports = assert;
function assert(val, msg) {
    if (!val) throw new Error(msg || "Assertion failed");
}
assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
};

},{}],"bRL3M":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"ecAfF":[function(require,module,exports) {
"use strict";
var utils = require("./utils");
var assert = require("minimalistic-assert");
function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;
BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
    return this._digest(enc);
};
BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === "big") {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len & 0xff;
    } else {
        res[i++] = len & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

},{"./utils":"kfzn2","minimalistic-assert":"8OvWh"}],"8nbee":[function(require,module,exports) {
"use strict";
exports.sha1 = require("./sha/1");
exports.sha224 = require("./sha/224");
exports.sha256 = require("./sha/256");
exports.sha384 = require("./sha/384");
exports.sha512 = require("./sha/512");

},{"./sha/1":"fnjyb","./sha/224":"9x7tY","./sha/256":"9bCbT","./sha/384":"lJMiS","./sha/512":"8y482"}],"fnjyb":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var common = require("../common");
var shaCommon = require("./common");
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;
var sha1_K = [
    0x5A827999,
    0x6ED9EBA1,
    0x8F1BBCDC,
    0xCA62C1D6
];
function SHA1() {
    if (!(this instanceof SHA1)) return new SHA1();
    BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.W = new Array(80);
}
utils.inherits(SHA1, BlockHash);
module.exports = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;
SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
};
SHA1.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};

},{"../utils":"kfzn2","../common":"ecAfF","./common":"gzrNi"}],"gzrNi":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var rotr32 = utils.rotr32;
function ft_1(s, x, y, z) {
    if (s === 0) return ch32(x, y, z);
    if (s === 1 || s === 3) return p32(x, y, z);
    if (s === 2) return maj32(x, y, z);
}
exports.ft_1 = ft_1;
function ch32(x, y, z) {
    return x & y ^ ~x & z;
}
exports.ch32 = ch32;
function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
exports.maj32 = maj32;
function p32(x, y, z) {
    return x ^ y ^ z;
}
exports.p32 = p32;
function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;
function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;
function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}
exports.g0_256 = g0_256;
function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}
exports.g1_256 = g1_256;

},{"../utils":"kfzn2"}],"9x7tY":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var SHA256 = require("./256");
function SHA224() {
    if (!(this instanceof SHA224)) return new SHA224();
    SHA256.call(this);
    this.h = [
        0xc1059ed8,
        0x367cd507,
        0x3070dd17,
        0xf70e5939,
        0xffc00b31,
        0x68581511,
        0x64f98fa7,
        0xbefa4fa4
    ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;
SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;
SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === "hex") return utils.toHex32(this.h.slice(0, 7), "big");
    else return utils.split32(this.h.slice(0, 7), "big");
};

},{"../utils":"kfzn2","./256":"9bCbT"}],"9bCbT":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var common = require("../common");
var shaCommon = require("./common");
var assert = require("minimalistic-assert");
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;
var BlockHash = common.BlockHash;
var sha256_K = [
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
];
function SHA256() {
    if (!(this instanceof SHA256)) return new SHA256();
    BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
    ];
    this.k = sha256_K;
    this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;
SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;
SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
};
SHA256.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};

},{"../utils":"kfzn2","../common":"ecAfF","./common":"gzrNi","minimalistic-assert":"8OvWh"}],"lJMiS":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var SHA512 = require("./512");
function SHA384() {
    if (!(this instanceof SHA384)) return new SHA384();
    SHA512.call(this);
    this.h = [
        0xcbbb9d5d,
        0xc1059ed8,
        0x629a292a,
        0x367cd507,
        0x9159015a,
        0x3070dd17,
        0x152fecd8,
        0xf70e5939,
        0x67332667,
        0xffc00b31,
        0x8eb44a87,
        0x68581511,
        0xdb0c2e0d,
        0x64f98fa7,
        0x47b5481d,
        0xbefa4fa4
    ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;
SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;
SHA384.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h.slice(0, 12), "big");
    else return utils.split32(this.h.slice(0, 12), "big");
};

},{"../utils":"kfzn2","./512":"8y482"}],"8y482":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
var common = require("../common");
var assert = require("minimalistic-assert");
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = common.BlockHash;
var sha512_K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
function SHA512() {
    if (!(this instanceof SHA512)) return new SHA512();
    BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xf3bcc908,
        0xbb67ae85,
        0x84caa73b,
        0x3c6ef372,
        0xfe94f82b,
        0xa54ff53a,
        0x5f1d36f1,
        0x510e527f,
        0xade682d1,
        0x9b05688c,
        0x2b3e6c1f,
        0x1f83d9ab,
        0xfb41bd6b,
        0x5be0cd19,
        0x137e2179
    ];
    this.k = sha512_K;
    this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;
SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;
SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
};
SHA512.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "big");
    else return utils.split32(this.h, "big");
};
function ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2); // 34
    var c2_hi = rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2); // 34
    var c2_lo = rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29); // 61
    var c2_hi = shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29); // 61
    var c2_lo = shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

},{"../utils":"kfzn2","../common":"ecAfF","minimalistic-assert":"8OvWh"}],"9kyRQ":[function(require,module,exports) {
"use strict";
var utils = require("./utils");
var common = require("./common");
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;
function RIPEMD160() {
    if (!(this instanceof RIPEMD160)) return new RIPEMD160();
    BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.endian = "little";
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;
RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex") return utils.toHex32(this.h, "little");
    else return utils.split32(this.h, "little");
};
function f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function K(j) {
    if (j <= 15) return 0x00000000;
    else if (j <= 31) return 0x5a827999;
    else if (j <= 47) return 0x6ed9eba1;
    else if (j <= 63) return 0x8f1bbcdc;
    else return 0xa953fd4e;
}
function Kh(j) {
    if (j <= 15) return 0x50a28be6;
    else if (j <= 31) return 0x5c4dd124;
    else if (j <= 47) return 0x6d703ef3;
    else if (j <= 63) return 0x7a6d76e9;
    else return 0x00000000;
}
var r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

},{"./utils":"kfzn2","./common":"ecAfF"}],"5KrrE":[function(require,module,exports) {
"use strict";
var utils = require("./utils");
var assert = require("minimalistic-assert");
function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key, enc));
}
module.exports = Hmac;
Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
};
Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

},{"./utils":"kfzn2","minimalistic-assert":"8OvWh"}],"dHyc2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "signing-key/5.6.2";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"7piXV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "transactions/5.6.2";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"6ewae":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "contracts/5.6.2";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"2DfhD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Wallet", ()=>Wallet);
parcelHelpers.export(exports, "verifyMessage", ()=>verifyMessage);
parcelHelpers.export(exports, "verifyTypedData", ()=>verifyTypedData);
var _address = require("@ethersproject/address");
var _abstractProvider = require("@ethersproject/abstract-provider");
var _abstractSigner = require("@ethersproject/abstract-signer");
var _bytes = require("@ethersproject/bytes");
var _hash = require("@ethersproject/hash");
var _hdnode = require("@ethersproject/hdnode");
var _keccak256 = require("@ethersproject/keccak256");
var _properties = require("@ethersproject/properties");
var _random = require("@ethersproject/random");
var _signingKey = require("@ethersproject/signing-key");
var _jsonWallets = require("@ethersproject/json-wallets");
var _transactions = require("@ethersproject/transactions");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
function isAccount(value) {
    return value != null && (0, _bytes.isHexString)(value.privateKey, 32) && value.address != null;
}
function hasMnemonic(value) {
    const mnemonic = value.mnemonic;
    return mnemonic && mnemonic.phrase;
}
class Wallet extends (0, _abstractSigner.Signer) {
    constructor(privateKey, provider){
        super();
        if (isAccount(privateKey)) {
            const signingKey = new (0, _signingKey.SigningKey)(privateKey.privateKey);
            (0, _properties.defineReadOnly)(this, "_signingKey", ()=>signingKey);
            (0, _properties.defineReadOnly)(this, "address", (0, _transactions.computeAddress)(this.publicKey));
            if (this.address !== (0, _address.getAddress)(privateKey.address)) logger.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
            if (hasMnemonic(privateKey)) {
                const srcMnemonic = privateKey.mnemonic;
                (0, _properties.defineReadOnly)(this, "_mnemonic", ()=>({
                        phrase: srcMnemonic.phrase,
                        path: srcMnemonic.path || (0, _hdnode.defaultPath),
                        locale: srcMnemonic.locale || "en"
                    }));
                const mnemonic = this.mnemonic;
                const node = (0, _hdnode.HDNode).fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
                if ((0, _transactions.computeAddress)(node.privateKey) !== this.address) logger.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
            } else (0, _properties.defineReadOnly)(this, "_mnemonic", ()=>null);
        } else {
            if ((0, _signingKey.SigningKey).isSigningKey(privateKey)) {
                /* istanbul ignore if */ if (privateKey.curve !== "secp256k1") logger.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
                (0, _properties.defineReadOnly)(this, "_signingKey", ()=>privateKey);
            } else {
                // A lot of common tools do not prefix private keys with a 0x (see: #1166)
                if (typeof privateKey === "string") {
                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) privateKey = "0x" + privateKey;
                }
                const signingKey = new (0, _signingKey.SigningKey)(privateKey);
                (0, _properties.defineReadOnly)(this, "_signingKey", ()=>signingKey);
            }
            (0, _properties.defineReadOnly)(this, "_mnemonic", ()=>null);
            (0, _properties.defineReadOnly)(this, "address", (0, _transactions.computeAddress)(this.publicKey));
        }
        /* istanbul ignore if */ if (provider && !(0, _abstractProvider.Provider).isProvider(provider)) logger.throwArgumentError("invalid provider", "provider", provider);
        (0, _properties.defineReadOnly)(this, "provider", provider || null);
    }
    get mnemonic() {
        return this._mnemonic();
    }
    get privateKey() {
        return this._signingKey().privateKey;
    }
    get publicKey() {
        return this._signingKey().publicKey;
    }
    getAddress() {
        return Promise.resolve(this.address);
    }
    connect(provider) {
        return new Wallet(this, provider);
    }
    signTransaction(transaction) {
        return (0, _properties.resolveProperties)(transaction).then((tx)=>{
            if (tx.from != null) {
                if ((0, _address.getAddress)(tx.from) !== this.address) logger.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
                delete tx.from;
            }
            const signature = this._signingKey().signDigest((0, _keccak256.keccak256)((0, _transactions.serialize)(tx)));
            return (0, _transactions.serialize)(tx, signature);
        });
    }
    signMessage(message) {
        return __awaiter(this, void 0, void 0, function*() {
            return (0, _bytes.joinSignature)(this._signingKey().signDigest((0, _hash.hashMessage)(message)));
        });
    }
    _signTypedData(domain, types, value) {
        return __awaiter(this, void 0, void 0, function*() {
            // Populate any ENS names
            const populated = yield (0, _hash._TypedDataEncoder).resolveNames(domain, types, value, (name)=>{
                if (this.provider == null) logger.throwError("cannot resolve ENS names without a provider", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                    operation: "resolveName",
                    value: name
                });
                return this.provider.resolveName(name);
            });
            return (0, _bytes.joinSignature)(this._signingKey().signDigest((0, _hash._TypedDataEncoder).hash(populated.domain, types, populated.value)));
        });
    }
    encrypt(password, options, progressCallback) {
        if (typeof options === "function" && !progressCallback) {
            progressCallback = options;
            options = {};
        }
        if (progressCallback && typeof progressCallback !== "function") throw new Error("invalid callback");
        if (!options) options = {};
        return (0, _jsonWallets.encryptKeystore)(this, password, options, progressCallback);
    }
    /**
     *  Static methods to create Wallet instances.
     */ static createRandom(options) {
        let entropy = (0, _random.randomBytes)(16);
        if (!options) options = {};
        if (options.extraEntropy) entropy = (0, _bytes.arrayify)((0, _bytes.hexDataSlice)((0, _keccak256.keccak256)((0, _bytes.concat)([
            entropy,
            options.extraEntropy
        ])), 0, 16));
        const mnemonic = (0, _hdnode.entropyToMnemonic)(entropy, options.locale);
        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
    }
    static fromEncryptedJson(json, password, progressCallback) {
        return (0, _jsonWallets.decryptJsonWallet)(json, password, progressCallback).then((account)=>{
            return new Wallet(account);
        });
    }
    static fromEncryptedJsonSync(json, password) {
        return new Wallet((0, _jsonWallets.decryptJsonWalletSync)(json, password));
    }
    static fromMnemonic(mnemonic, path, wordlist) {
        if (!path) path = (0, _hdnode.defaultPath);
        return new Wallet((0, _hdnode.HDNode).fromMnemonic(mnemonic, null, wordlist).derivePath(path));
    }
}
function verifyMessage(message, signature) {
    return (0, _transactions.recoverAddress)((0, _hash.hashMessage)(message), signature);
}
function verifyTypedData(domain, types, value, signature) {
    return (0, _transactions.recoverAddress)((0, _hash._TypedDataEncoder).hash(domain, types, value), signature);
}

},{"@ethersproject/address":"ggdAz","@ethersproject/abstract-provider":"g1jr1","@ethersproject/abstract-signer":"g9Ey5","@ethersproject/bytes":"htrqZ","@ethersproject/hash":"7JYPm","@ethersproject/hdnode":"8PpMD","@ethersproject/keccak256":"hXDEv","@ethersproject/properties":"h3GJb","@ethersproject/random":"7myQM","@ethersproject/signing-key":"krGB2","@ethersproject/json-wallets":"1qqTy","@ethersproject/transactions":"d1ust","@ethersproject/logger":"hLvB2","./_version":"ej99N","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"8PpMD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultPath", ()=>defaultPath);
parcelHelpers.export(exports, "HDNode", ()=>HDNode);
parcelHelpers.export(exports, "mnemonicToSeed", ()=>mnemonicToSeed);
parcelHelpers.export(exports, "mnemonicToEntropy", ()=>mnemonicToEntropy);
parcelHelpers.export(exports, "entropyToMnemonic", ()=>entropyToMnemonic);
parcelHelpers.export(exports, "isValidMnemonic", ()=>isValidMnemonic);
parcelHelpers.export(exports, "getAccountPath", ()=>getAccountPath);
var _basex = require("@ethersproject/basex");
var _bytes = require("@ethersproject/bytes");
var _bignumber = require("@ethersproject/bignumber");
var _strings = require("@ethersproject/strings");
var _pbkdf2 = require("@ethersproject/pbkdf2");
var _properties = require("@ethersproject/properties");
var _signingKey = require("@ethersproject/signing-key");
var _sha2 = require("@ethersproject/sha2");
var _transactions = require("@ethersproject/transactions");
var _wordlists = require("@ethersproject/wordlists");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
const N = (0, _bignumber.BigNumber).from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
// "Bitcoin seed"
const MasterSecret = (0, _strings.toUtf8Bytes)("Bitcoin seed");
const HardenedBit = 0x80000000;
// Returns a byte with the MSB bits set
function getUpperMask(bits) {
    return (1 << bits) - 1 << 8 - bits;
}
// Returns a byte with the LSB bits set
function getLowerMask(bits) {
    return (1 << bits) - 1;
}
function bytes32(value) {
    return (0, _bytes.hexZeroPad)((0, _bytes.hexlify)(value), 32);
}
function base58check(data) {
    return (0, _basex.Base58).encode((0, _bytes.concat)([
        data,
        (0, _bytes.hexDataSlice)((0, _sha2.sha256)((0, _sha2.sha256)(data)), 0, 4)
    ]));
}
function getWordlist(wordlist) {
    if (wordlist == null) return (0, _wordlists.wordlists)["en"];
    if (typeof wordlist === "string") {
        const words = (0, _wordlists.wordlists)[wordlist];
        if (words == null) logger.throwArgumentError("unknown locale", "wordlist", wordlist);
        return words;
    }
    return wordlist;
}
const _constructorGuard = {};
const defaultPath = "m/44'/60'/0'/0/0";
class HDNode {
    /**
     *  This constructor should not be called directly.
     *
     *  Please use:
     *   - fromMnemonic
     *   - fromSeed
     */ constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath){
        /* istanbul ignore if */ if (constructorGuard !== _constructorGuard) throw new Error("HDNode constructor cannot be called directly");
        if (privateKey) {
            const signingKey = new (0, _signingKey.SigningKey)(privateKey);
            (0, _properties.defineReadOnly)(this, "privateKey", signingKey.privateKey);
            (0, _properties.defineReadOnly)(this, "publicKey", signingKey.compressedPublicKey);
        } else {
            (0, _properties.defineReadOnly)(this, "privateKey", null);
            (0, _properties.defineReadOnly)(this, "publicKey", (0, _bytes.hexlify)(publicKey));
        }
        (0, _properties.defineReadOnly)(this, "parentFingerprint", parentFingerprint);
        (0, _properties.defineReadOnly)(this, "fingerprint", (0, _bytes.hexDataSlice)((0, _sha2.ripemd160)((0, _sha2.sha256)(this.publicKey)), 0, 4));
        (0, _properties.defineReadOnly)(this, "address", (0, _transactions.computeAddress)(this.publicKey));
        (0, _properties.defineReadOnly)(this, "chainCode", chainCode);
        (0, _properties.defineReadOnly)(this, "index", index);
        (0, _properties.defineReadOnly)(this, "depth", depth);
        if (mnemonicOrPath == null) {
            // From a source that does not preserve the path (e.g. extended keys)
            (0, _properties.defineReadOnly)(this, "mnemonic", null);
            (0, _properties.defineReadOnly)(this, "path", null);
        } else if (typeof mnemonicOrPath === "string") {
            // From a source that does not preserve the mnemonic (e.g. neutered)
            (0, _properties.defineReadOnly)(this, "mnemonic", null);
            (0, _properties.defineReadOnly)(this, "path", mnemonicOrPath);
        } else {
            // From a fully qualified source
            (0, _properties.defineReadOnly)(this, "mnemonic", mnemonicOrPath);
            (0, _properties.defineReadOnly)(this, "path", mnemonicOrPath.path);
        }
    }
    get extendedKey() {
        // We only support the mainnet values for now, but if anyone needs
        // testnet values, let me know. I believe current sentiment is that
        // we should always use mainnet, and use BIP-44 to derive the network
        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
        //   - Testnet: public=0x043587CF, private=0x04358394
        if (this.depth >= 256) throw new Error("Depth too large!");
        return base58check((0, _bytes.concat)([
            this.privateKey != null ? "0x0488ADE4" : "0x0488B21E",
            (0, _bytes.hexlify)(this.depth),
            this.parentFingerprint,
            (0, _bytes.hexZeroPad)((0, _bytes.hexlify)(this.index), 4),
            this.chainCode,
            this.privateKey != null ? (0, _bytes.concat)([
                "0x00",
                this.privateKey
            ]) : this.publicKey, 
        ]));
    }
    neuter() {
        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
    }
    _derive(index) {
        if (index > 0xffffffff) throw new Error("invalid index - " + String(index));
        // Base path
        let path = this.path;
        if (path) path += "/" + (index & ~HardenedBit);
        const data = new Uint8Array(37);
        if (index & HardenedBit) {
            if (!this.privateKey) throw new Error("cannot derive child of neutered node");
            // Data = 0x00 || ser_256(k_par)
            data.set((0, _bytes.arrayify)(this.privateKey), 1);
            // Hardened path
            if (path) path += "'";
        } else // Data = ser_p(point(k_par))
        data.set((0, _bytes.arrayify)(this.publicKey));
        // Data += ser_32(i)
        for(let i = 24; i >= 0; i -= 8)data[33 + (i >> 3)] = index >> 24 - i & 0xff;
        const I = (0, _bytes.arrayify)((0, _sha2.computeHmac)((0, _sha2.SupportedAlgorithm).sha512, this.chainCode, data));
        const IL = I.slice(0, 32);
        const IR = I.slice(32);
        // The private key
        let ki = null;
        // The public key
        let Ki = null;
        if (this.privateKey) ki = bytes32((0, _bignumber.BigNumber).from(IL).add(this.privateKey).mod(N));
        else {
            const ek = new (0, _signingKey.SigningKey)((0, _bytes.hexlify)(IL));
            Ki = ek._addPoint(this.publicKey);
        }
        let mnemonicOrPath = path;
        const srcMnemonic = this.mnemonic;
        if (srcMnemonic) mnemonicOrPath = Object.freeze({
            phrase: srcMnemonic.phrase,
            path: path,
            locale: srcMnemonic.locale || "en"
        });
        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
    }
    derivePath(path) {
        const components = path.split("/");
        if (components.length === 0 || components[0] === "m" && this.depth !== 0) throw new Error("invalid path - " + path);
        if (components[0] === "m") components.shift();
        let result = this;
        for(let i = 0; i < components.length; i++){
            const component = components[i];
            if (component.match(/^[0-9]+'$/)) {
                const index = parseInt(component.substring(0, component.length - 1));
                if (index >= HardenedBit) throw new Error("invalid path index - " + component);
                result = result._derive(HardenedBit + index);
            } else if (component.match(/^[0-9]+$/)) {
                const index = parseInt(component);
                if (index >= HardenedBit) throw new Error("invalid path index - " + component);
                result = result._derive(index);
            } else throw new Error("invalid path component - " + component);
        }
        return result;
    }
    static _fromSeed(seed, mnemonic) {
        const seedArray = (0, _bytes.arrayify)(seed);
        if (seedArray.length < 16 || seedArray.length > 64) throw new Error("invalid seed");
        const I = (0, _bytes.arrayify)((0, _sha2.computeHmac)((0, _sha2.SupportedAlgorithm).sha512, MasterSecret, seedArray));
        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
    }
    static fromMnemonic(mnemonic, password, wordlist) {
        // If a locale name was passed in, find the associated wordlist
        wordlist = getWordlist(wordlist);
        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)
        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
            phrase: mnemonic,
            path: "m",
            locale: wordlist.locale
        });
    }
    static fromSeed(seed) {
        return HDNode._fromSeed(seed, null);
    }
    static fromExtendedKey(extendedKey) {
        const bytes = (0, _basex.Base58).decode(extendedKey);
        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
        const depth = bytes[4];
        const parentFingerprint = (0, _bytes.hexlify)(bytes.slice(5, 9));
        const index = parseInt((0, _bytes.hexlify)(bytes.slice(9, 13)).substring(2), 16);
        const chainCode = (0, _bytes.hexlify)(bytes.slice(13, 45));
        const key = bytes.slice(45, 78);
        switch((0, _bytes.hexlify)(bytes.slice(0, 4))){
            // Public Key
            case "0x0488b21e":
            case "0x043587cf":
                return new HDNode(_constructorGuard, null, (0, _bytes.hexlify)(key), parentFingerprint, chainCode, index, depth, null);
            // Private Key
            case "0x0488ade4":
            case "0x04358394 ":
                if (key[0] !== 0) break;
                return new HDNode(_constructorGuard, (0, _bytes.hexlify)(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
        }
        return logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
    }
}
function mnemonicToSeed(mnemonic, password) {
    if (!password) password = "";
    const salt = (0, _strings.toUtf8Bytes)("mnemonic" + password, (0, _strings.UnicodeNormalizationForm).NFKD);
    return (0, _pbkdf2.pbkdf2)((0, _strings.toUtf8Bytes)(mnemonic, (0, _strings.UnicodeNormalizationForm).NFKD), salt, 2048, 64, "sha512");
}
function mnemonicToEntropy(mnemonic, wordlist) {
    wordlist = getWordlist(wordlist);
    logger.checkNormalize();
    const words = wordlist.split(mnemonic);
    if (words.length % 3 !== 0) throw new Error("invalid mnemonic");
    const entropy = (0, _bytes.arrayify)(new Uint8Array(Math.ceil(11 * words.length / 8)));
    let offset = 0;
    for(let i = 0; i < words.length; i++){
        let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
        if (index === -1) throw new Error("invalid mnemonic");
        for(let bit = 0; bit < 11; bit++){
            if (index & 1 << 10 - bit) entropy[offset >> 3] |= 1 << 7 - offset % 8;
            offset++;
        }
    }
    const entropyBits = 32 * words.length / 3;
    const checksumBits = words.length / 3;
    const checksumMask = getUpperMask(checksumBits);
    const checksum = (0, _bytes.arrayify)((0, _sha2.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) throw new Error("invalid checksum");
    return (0, _bytes.hexlify)(entropy.slice(0, entropyBits / 8));
}
function entropyToMnemonic(entropy, wordlist) {
    wordlist = getWordlist(wordlist);
    entropy = (0, _bytes.arrayify)(entropy);
    if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) throw new Error("invalid entropy");
    const indices = [
        0
    ];
    let remainingBits = 11;
    for(let i = 0; i < entropy.length; i++)// Consume the whole byte (with still more to go)
    if (remainingBits > 8) {
        indices[indices.length - 1] <<= 8;
        indices[indices.length - 1] |= entropy[i];
        remainingBits -= 8;
    // This byte will complete an 11-bit index
    } else {
        indices[indices.length - 1] <<= remainingBits;
        indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
        // Start the next word
        indices.push(entropy[i] & getLowerMask(8 - remainingBits));
        remainingBits += 3;
    }
    // Compute the checksum bits
    const checksumBits = entropy.length / 4;
    const checksum = (0, _bytes.arrayify)((0, _sha2.sha256)(entropy))[0] & getUpperMask(checksumBits);
    // Shift the checksum into the word indices
    indices[indices.length - 1] <<= checksumBits;
    indices[indices.length - 1] |= checksum >> 8 - checksumBits;
    return wordlist.join(indices.map((index)=>wordlist.getWord(index)));
}
function isValidMnemonic(mnemonic, wordlist) {
    try {
        mnemonicToEntropy(mnemonic, wordlist);
        return true;
    } catch (error) {}
    return false;
}
function getAccountPath(index) {
    if (typeof index !== "number" || index < 0 || index >= HardenedBit || index % 1) logger.throwArgumentError("invalid account index", "index", index);
    return `m/44'/60'/${index}'/0/0`;
}

},{"@ethersproject/basex":"dm2o4","@ethersproject/bytes":"htrqZ","@ethersproject/bignumber":"ckYYW","@ethersproject/strings":"5TGFZ","@ethersproject/pbkdf2":"ityKl","@ethersproject/properties":"h3GJb","@ethersproject/signing-key":"krGB2","@ethersproject/sha2":"k4R8k","@ethersproject/transactions":"d1ust","@ethersproject/wordlists":"czmoZ","@ethersproject/logger":"hLvB2","./_version":"7Gslh","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"dm2o4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseX", ()=>BaseX);
parcelHelpers.export(exports, "Base32", ()=>Base32) //console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
 //console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))
;
parcelHelpers.export(exports, "Base58", ()=>Base58);
/**
 * var basex = require("base-x");
 *
 * This implementation is heavily based on base-x. The main reason to
 * deviate was to prevent the dependency of Buffer.
 *
 * Contributors:
 *
 * base-x encoding
 * Forked from https://github.com/cryptocoinjs/bs58
 * Originally written by Mike Hearn for BitcoinJ
 * Copyright (c) 2011 Google Inc
 * Ported to JavaScript by Stefan Thomas
 * Merged Buffer refactorings from base58-native by Stephen Pair
 * Copyright (c) 2013 BitPay Inc
 *
 * The MIT License (MIT)
 *
 * Copyright base-x contributors (c) 2016
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 */ var _bytes = require("@ethersproject/bytes");
var _properties = require("@ethersproject/properties");
class BaseX {
    constructor(alphabet){
        (0, _properties.defineReadOnly)(this, "alphabet", alphabet);
        (0, _properties.defineReadOnly)(this, "base", alphabet.length);
        (0, _properties.defineReadOnly)(this, "_alphabetMap", {});
        (0, _properties.defineReadOnly)(this, "_leader", alphabet.charAt(0));
        // pre-compute lookup table
        for(let i = 0; i < alphabet.length; i++)this._alphabetMap[alphabet.charAt(i)] = i;
    }
    encode(value) {
        let source = (0, _bytes.arrayify)(value);
        if (source.length === 0) return "";
        let digits = [
            0
        ];
        for(let i = 0; i < source.length; ++i){
            let carry = source[i];
            for(let j = 0; j < digits.length; ++j){
                carry += digits[j] << 8;
                digits[j] = carry % this.base;
                carry = carry / this.base | 0;
            }
            while(carry > 0){
                digits.push(carry % this.base);
                carry = carry / this.base | 0;
            }
        }
        let string = "";
        // deal with leading zeros
        for(let k = 0; source[k] === 0 && k < source.length - 1; ++k)string += this._leader;
        // convert digits to a string
        for(let q = digits.length - 1; q >= 0; --q)string += this.alphabet[digits[q]];
        return string;
    }
    decode(value) {
        if (typeof value !== "string") throw new TypeError("Expected String");
        let bytes = [];
        if (value.length === 0) return new Uint8Array(bytes);
        bytes.push(0);
        for(let i = 0; i < value.length; i++){
            let byte = this._alphabetMap[value[i]];
            if (byte === undefined) throw new Error("Non-base" + this.base + " character");
            let carry = byte;
            for(let j = 0; j < bytes.length; ++j){
                carry += bytes[j] * this.base;
                bytes[j] = carry & 0xff;
                carry >>= 8;
            }
            while(carry > 0){
                bytes.push(carry & 0xff);
                carry >>= 8;
            }
        }
        // deal with leading zeros
        for(let k = 0; value[k] === this._leader && k < value.length - 1; ++k)bytes.push(0);
        return (0, _bytes.arrayify)(new Uint8Array(bytes.reverse()));
    }
}
const Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
const Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");

},{"@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"ityKl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pbkdf2", ()=>(0, _pbkdf2.pbkdf2));
var _pbkdf2 = require("./pbkdf2");

},{"./pbkdf2":"143Uh","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"143Uh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pbkdf2", ()=>pbkdf2);
var _bytes = require("@ethersproject/bytes");
var _sha2 = require("@ethersproject/sha2");
"use strict";
function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
    password = (0, _bytes.arrayify)(password);
    salt = (0, _bytes.arrayify)(salt);
    let hLen;
    let l = 1;
    const DK = new Uint8Array(keylen);
    const block1 = new Uint8Array(salt.length + 4);
    block1.set(salt);
    //salt.copy(block1, 0, 0, salt.length)
    let r;
    let T;
    for(let i = 1; i <= l; i++){
        //block1.writeUInt32BE(i, salt.length)
        block1[salt.length] = i >> 24 & 0xff;
        block1[salt.length + 1] = i >> 16 & 0xff;
        block1[salt.length + 2] = i >> 8 & 0xff;
        block1[salt.length + 3] = i & 0xff;
        //let U = createHmac(password).update(block1).digest();
        let U = (0, _bytes.arrayify)((0, _sha2.computeHmac)(hashAlgorithm, password, block1));
        if (!hLen) {
            hLen = U.length;
            T = new Uint8Array(hLen);
            l = Math.ceil(keylen / hLen);
            r = keylen - (l - 1) * hLen;
        }
        //U.copy(T, 0, 0, hLen)
        T.set(U);
        for(let j = 1; j < iterations; j++){
            //U = createHmac(password).update(U).digest();
            U = (0, _bytes.arrayify)((0, _sha2.computeHmac)(hashAlgorithm, password, U));
            for(let k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        const destPos = (i - 1) * hLen;
        const len = i === l ? r : hLen;
        //T.copy(DK, destPos, 0, len)
        DK.set((0, _bytes.arrayify)(T).slice(0, len), destPos);
    }
    return (0, _bytes.hexlify)(DK);
}

},{"@ethersproject/bytes":"htrqZ","@ethersproject/sha2":"k4R8k","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"k4R8k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "computeHmac", ()=>(0, _sha2.computeHmac));
parcelHelpers.export(exports, "ripemd160", ()=>(0, _sha2.ripemd160));
parcelHelpers.export(exports, "sha256", ()=>(0, _sha2.sha256));
parcelHelpers.export(exports, "sha512", ()=>(0, _sha2.sha512));
parcelHelpers.export(exports, "SupportedAlgorithm", ()=>(0, _types.SupportedAlgorithm));
var _sha2 = require("./sha2");
var _types = require("./types");

},{"./sha2":"gqduC","./types":"gUbat","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"gqduC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ripemd160", ()=>ripemd160);
parcelHelpers.export(exports, "sha256", ()=>sha256);
parcelHelpers.export(exports, "sha512", ()=>sha512);
parcelHelpers.export(exports, "computeHmac", ()=>computeHmac);
var _hashJs = require("hash.js");
var _hashJsDefault = parcelHelpers.interopDefault(_hashJs);
//const _ripemd160 = _hash.ripemd160;
var _bytes = require("@ethersproject/bytes");
var _types = require("./types");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
function ripemd160(data) {
    return "0x" + (0, _hashJsDefault.default).ripemd160().update((0, _bytes.arrayify)(data)).digest("hex");
}
function sha256(data) {
    return "0x" + (0, _hashJsDefault.default).sha256().update((0, _bytes.arrayify)(data)).digest("hex");
}
function sha512(data) {
    return "0x" + (0, _hashJsDefault.default).sha512().update((0, _bytes.arrayify)(data)).digest("hex");
}
function computeHmac(algorithm, key, data) {
    if (!(0, _types.SupportedAlgorithm)[algorithm]) logger.throwError("unsupported algorithm " + algorithm, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
        operation: "hmac",
        algorithm: algorithm
    });
    return "0x" + (0, _hashJsDefault.default).hmac((0, _hashJsDefault.default)[algorithm], (0, _bytes.arrayify)(key)).update((0, _bytes.arrayify)(data)).digest("hex");
}

},{"hash.js":"gOEGU","@ethersproject/bytes":"htrqZ","./types":"gUbat","@ethersproject/logger":"hLvB2","./_version":"c9Q6D","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"gUbat":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SupportedAlgorithm", ()=>SupportedAlgorithm);
var SupportedAlgorithm;
(function(SupportedAlgorithm1) {
    SupportedAlgorithm1["sha256"] = "sha256";
    SupportedAlgorithm1["sha512"] = "sha512";
})(SupportedAlgorithm || (SupportedAlgorithm = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"c9Q6D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "sha2/5.6.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"czmoZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logger", ()=>(0, _wordlist.logger));
parcelHelpers.export(exports, "Wordlist", ()=>(0, _wordlist.Wordlist));
parcelHelpers.export(exports, "wordlists", ()=>(0, _wordlists.wordlists));
// Wordlists
// See: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md
var _wordlist = require("./wordlist");
var _wordlists = require("./wordlists");
"use strict";

},{"./wordlist":"kXObs","./wordlists":"86SLu","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"kXObs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logger", ()=>logger);
parcelHelpers.export(exports, "Wordlist", ()=>Wordlist);
var _hash = require("@ethersproject/hash");
var _properties = require("@ethersproject/properties");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
// This gets overridden by rollup
const exportWordlist = false;
const logger = new (0, _logger.Logger)((0, _version.version));
class Wordlist {
    constructor(locale){
        logger.checkAbstract(new.target, Wordlist);
        (0, _properties.defineReadOnly)(this, "locale", locale);
    }
    // Subclasses may override this
    split(mnemonic) {
        return mnemonic.toLowerCase().split(/ +/g);
    }
    // Subclasses may override this
    join(words) {
        return words.join(" ");
    }
    static check(wordlist) {
        const words = [];
        for(let i = 0; i < 2048; i++){
            const word = wordlist.getWord(i);
            /* istanbul ignore if */ if (i !== wordlist.getWordIndex(word)) return "0x";
            words.push(word);
        }
        return (0, _hash.id)(words.join("\n") + "\n");
    }
    static register(lang, name) {
        if (!name) name = lang.locale;
        /* istanbul ignore if */ if (exportWordlist) try {
            const anyGlobal = window;
            if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {
                if (!anyGlobal._ethers.wordlists[name]) (0, _properties.defineReadOnly)(anyGlobal._ethers.wordlists, name, lang);
            }
        } catch (error) {}
    }
}

},{"@ethersproject/hash":"7JYPm","@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"7t5y5","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"7t5y5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "wordlists/5.6.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"86SLu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wordlists", ()=>wordlists);
var _langEn = require("./lang-en");
"use strict";
const wordlists = {
    en: (0, _langEn.langEn)
};

},{"./lang-en":"hahYq","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"hahYq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "langEn", ()=>langEn);
var _wordlist = require("./wordlist");
"use strict";
const words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
let wordlist = null;
function loadWords(lang) {
    if (wordlist != null) return;
    wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
    // Verify the computed list matches the official list
    /* istanbul ignore if */ if ((0, _wordlist.Wordlist).check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
        wordlist = null;
        throw new Error("BIP39 Wordlist for en (English) FAILED");
    }
}
class LangEn extends (0, _wordlist.Wordlist) {
    constructor(){
        super("en");
    }
    getWord(index) {
        loadWords(this);
        return wordlist[index];
    }
    getWordIndex(word) {
        loadWords(this);
        return wordlist.indexOf(word);
    }
}
const langEn = new LangEn();
(0, _wordlist.Wordlist).register(langEn);

},{"./wordlist":"kXObs","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"7Gslh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "hdnode/5.6.2";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"7myQM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomBytes", ()=>(0, _random.randomBytes));
parcelHelpers.export(exports, "shuffled", ()=>(0, _shuffle.shuffled));
var _random = require("./random");
var _shuffle = require("./shuffle");
"use strict";

},{"./random":"h26nx","./shuffle":"aDkFd","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"h26nx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomBytes", ()=>randomBytes);
var _bytes = require("@ethersproject/bytes");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
var global = arguments[3];
const logger = new (0, _logger.Logger)((0, _version.version));
// Debugging line for testing browser lib in node
//const window = { crypto: { getRandomValues: () => { } } };
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
function getGlobal() {
    if (typeof self !== "undefined") return self;
    if (typeof window !== "undefined") return window;
    if (typeof global !== "undefined") return global;
    throw new Error("unable to locate global object");
}
const anyGlobal = getGlobal();
let crypto = anyGlobal.crypto || anyGlobal.msCrypto;
if (!crypto || !crypto.getRandomValues) {
    logger.warn("WARNING: Missing strong random number source");
    crypto = {
        getRandomValues: function(buffer) {
            return logger.throwError("no secure random source avaialble", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: "crypto.getRandomValues"
            });
        }
    };
}
function randomBytes(length) {
    if (length <= 0 || length > 1024 || length % 1 || length != length) logger.throwArgumentError("invalid length", "length", length);
    const result = new Uint8Array(length);
    crypto.getRandomValues(result);
    return (0, _bytes.arrayify)(result);
}

},{"@ethersproject/bytes":"htrqZ","@ethersproject/logger":"hLvB2","./_version":"dxTsA","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"dxTsA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "random/5.6.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"aDkFd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shuffled", ()=>shuffled);
"use strict";
function shuffled(array) {
    array = array.slice();
    for(let i = array.length - 1; i > 0; i--){
        const j = Math.floor(Math.random() * (i + 1));
        const tmp = array[i];
        array[i] = array[j];
        array[j] = tmp;
    }
    return array;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"1qqTy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decryptCrowdsale", ()=>(0, _crowdsale.decrypt));
parcelHelpers.export(exports, "decryptKeystore", ()=>(0, _keystore.decrypt));
parcelHelpers.export(exports, "decryptKeystoreSync", ()=>(0, _keystore.decryptSync));
parcelHelpers.export(exports, "encryptKeystore", ()=>(0, _keystore.encrypt));
parcelHelpers.export(exports, "isCrowdsaleWallet", ()=>(0, _inspect.isCrowdsaleWallet));
parcelHelpers.export(exports, "isKeystoreWallet", ()=>(0, _inspect.isKeystoreWallet));
parcelHelpers.export(exports, "getJsonWalletAddress", ()=>(0, _inspect.getJsonWalletAddress));
parcelHelpers.export(exports, "decryptJsonWallet", ()=>decryptJsonWallet);
parcelHelpers.export(exports, "decryptJsonWalletSync", ()=>decryptJsonWalletSync);
var _crowdsale = require("./crowdsale");
var _inspect = require("./inspect");
var _keystore = require("./keystore");
"use strict";
function decryptJsonWallet(json, password, progressCallback) {
    if ((0, _inspect.isCrowdsaleWallet)(json)) {
        if (progressCallback) progressCallback(0);
        const account = (0, _crowdsale.decrypt)(json, password);
        if (progressCallback) progressCallback(1);
        return Promise.resolve(account);
    }
    if ((0, _inspect.isKeystoreWallet)(json)) return (0, _keystore.decrypt)(json, password, progressCallback);
    return Promise.reject(new Error("invalid JSON wallet"));
}
function decryptJsonWalletSync(json, password) {
    if ((0, _inspect.isCrowdsaleWallet)(json)) return (0, _crowdsale.decrypt)(json, password);
    if ((0, _inspect.isKeystoreWallet)(json)) return (0, _keystore.decryptSync)(json, password);
    throw new Error("invalid JSON wallet");
}

},{"./crowdsale":"61FHg","./inspect":"1ZcmH","./keystore":"cTqKv","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"61FHg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CrowdsaleAccount", ()=>CrowdsaleAccount);
// See: https://github.com/ethereum/pyethsaletool
parcelHelpers.export(exports, "decrypt", ()=>decrypt);
var _aesJs = require("aes-js");
var _aesJsDefault = parcelHelpers.interopDefault(_aesJs);
var _address = require("@ethersproject/address");
var _bytes = require("@ethersproject/bytes");
var _keccak256 = require("@ethersproject/keccak256");
var _pbkdf2 = require("@ethersproject/pbkdf2");
var _strings = require("@ethersproject/strings");
var _properties = require("@ethersproject/properties");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
var _utils = require("./utils");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
class CrowdsaleAccount extends (0, _properties.Description) {
    isCrowdsaleAccount(value) {
        return !!(value && value._isCrowdsaleAccount);
    }
}
function decrypt(json, password) {
    const data = JSON.parse(json);
    password = (0, _utils.getPassword)(password);
    // Ethereum Address
    const ethaddr = (0, _address.getAddress)((0, _utils.searchPath)(data, "ethaddr"));
    // Encrypted Seed
    const encseed = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "encseed"));
    if (!encseed || encseed.length % 16 !== 0) logger.throwArgumentError("invalid encseed", "json", json);
    const key = (0, _bytes.arrayify)((0, _pbkdf2.pbkdf2)(password, password, 2000, 32, "sha256")).slice(0, 16);
    const iv = encseed.slice(0, 16);
    const encryptedSeed = encseed.slice(16);
    // Decrypt the seed
    const aesCbc = new (0, _aesJsDefault.default).ModeOfOperation.cbc(key, iv);
    const seed = (0, _aesJsDefault.default).padding.pkcs7.strip((0, _bytes.arrayify)(aesCbc.decrypt(encryptedSeed)));
    // This wallet format is weird... Convert the binary encoded hex to a string.
    let seedHex = "";
    for(let i = 0; i < seed.length; i++)seedHex += String.fromCharCode(seed[i]);
    const seedHexBytes = (0, _strings.toUtf8Bytes)(seedHex);
    const privateKey = (0, _keccak256.keccak256)(seedHexBytes);
    return new CrowdsaleAccount({
        _isCrowdsaleAccount: true,
        address: ethaddr,
        privateKey: privateKey
    });
}

},{"aes-js":"6m1U5","@ethersproject/address":"ggdAz","@ethersproject/bytes":"htrqZ","@ethersproject/keccak256":"hXDEv","@ethersproject/pbkdf2":"ityKl","@ethersproject/strings":"5TGFZ","@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"ijo9y","./utils":"d3wDI","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"6m1U5":[function(require,module,exports) {
"use strict";
(function(root) {
    function checkInt(value) {
        return parseInt(value) === value;
    }
    function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) return false;
        for(var i = 0; i < arrayish.length; i++){
            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) return false;
        }
        return true;
    }
    function coerceArray(arg, copy) {
        // ArrayBuffer view
        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === "Uint8Array") {
            if (copy) {
                if (arg.slice) arg = arg.slice();
                else arg = Array.prototype.slice.call(arg);
            }
            return arg;
        }
        // It's an array; check it is a valid representation of a byte
        if (Array.isArray(arg)) {
            if (!checkInts(arg)) throw new Error("Array contains invalid value: " + arg);
            return new Uint8Array(arg);
        }
        // Something else, but behaves like an array (maybe a Buffer? Arguments?)
        if (checkInt(arg.length) && checkInts(arg)) return new Uint8Array(arg);
        throw new Error("unsupported array-like object");
    }
    function createArray(length) {
        return new Uint8Array(length);
    }
    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
            if (sourceArray.slice) sourceArray = sourceArray.slice(sourceStart, sourceEnd);
            else sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
        }
        targetArray.set(sourceArray, targetStart);
    }
    var convertUtf8 = function() {
        function toBytes(text) {
            var result = [], i = 0;
            text = encodeURI(text);
            while(i < text.length){
                var c = text.charCodeAt(i++);
                // if it is a % sign, encode the following 2 bytes as a hex value
                if (c === 37) {
                    result.push(parseInt(text.substr(i, 2), 16));
                    i += 2;
                // otherwise, just the actual byte
                } else result.push(c);
            }
            return coerceArray(result);
        }
        function fromBytes(bytes) {
            var result = [], i = 0;
            while(i < bytes.length){
                var c = bytes[i];
                if (c < 128) {
                    result.push(String.fromCharCode(c));
                    i++;
                } else if (c > 191 && c < 224) {
                    result.push(String.fromCharCode((c & 0x1f) << 6 | bytes[i + 1] & 0x3f));
                    i += 2;
                } else {
                    result.push(String.fromCharCode((c & 0x0f) << 12 | (bytes[i + 1] & 0x3f) << 6 | bytes[i + 2] & 0x3f));
                    i += 3;
                }
            }
            return result.join("");
        }
        return {
            toBytes: toBytes,
            fromBytes: fromBytes
        };
    }();
    var convertHex = function() {
        function toBytes(text) {
            var result = [];
            for(var i = 0; i < text.length; i += 2)result.push(parseInt(text.substr(i, 2), 16));
            return result;
        }
        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
        var Hex = "0123456789abcdef";
        function fromBytes(bytes) {
            var result = [];
            for(var i = 0; i < bytes.length; i++){
                var v = bytes[i];
                result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
            }
            return result.join("");
        }
        return {
            toBytes: toBytes,
            fromBytes: fromBytes
        };
    }();
    // Number of rounds by keysize
    var numberOfRounds = {
        16: 10,
        24: 12,
        32: 14
    };
    // Round constant words
    var rcon = [
        0x01,
        0x02,
        0x04,
        0x08,
        0x10,
        0x20,
        0x40,
        0x80,
        0x1b,
        0x36,
        0x6c,
        0xd8,
        0xab,
        0x4d,
        0x9a,
        0x2f,
        0x5e,
        0xbc,
        0x63,
        0xc6,
        0x97,
        0x35,
        0x6a,
        0xd4,
        0xb3,
        0x7d,
        0xfa,
        0xef,
        0xc5,
        0x91
    ];
    // S-box and Inverse S-box (S is for Substitution)
    var S = [
        0x63,
        0x7c,
        0x77,
        0x7b,
        0xf2,
        0x6b,
        0x6f,
        0xc5,
        0x30,
        0x01,
        0x67,
        0x2b,
        0xfe,
        0xd7,
        0xab,
        0x76,
        0xca,
        0x82,
        0xc9,
        0x7d,
        0xfa,
        0x59,
        0x47,
        0xf0,
        0xad,
        0xd4,
        0xa2,
        0xaf,
        0x9c,
        0xa4,
        0x72,
        0xc0,
        0xb7,
        0xfd,
        0x93,
        0x26,
        0x36,
        0x3f,
        0xf7,
        0xcc,
        0x34,
        0xa5,
        0xe5,
        0xf1,
        0x71,
        0xd8,
        0x31,
        0x15,
        0x04,
        0xc7,
        0x23,
        0xc3,
        0x18,
        0x96,
        0x05,
        0x9a,
        0x07,
        0x12,
        0x80,
        0xe2,
        0xeb,
        0x27,
        0xb2,
        0x75,
        0x09,
        0x83,
        0x2c,
        0x1a,
        0x1b,
        0x6e,
        0x5a,
        0xa0,
        0x52,
        0x3b,
        0xd6,
        0xb3,
        0x29,
        0xe3,
        0x2f,
        0x84,
        0x53,
        0xd1,
        0x00,
        0xed,
        0x20,
        0xfc,
        0xb1,
        0x5b,
        0x6a,
        0xcb,
        0xbe,
        0x39,
        0x4a,
        0x4c,
        0x58,
        0xcf,
        0xd0,
        0xef,
        0xaa,
        0xfb,
        0x43,
        0x4d,
        0x33,
        0x85,
        0x45,
        0xf9,
        0x02,
        0x7f,
        0x50,
        0x3c,
        0x9f,
        0xa8,
        0x51,
        0xa3,
        0x40,
        0x8f,
        0x92,
        0x9d,
        0x38,
        0xf5,
        0xbc,
        0xb6,
        0xda,
        0x21,
        0x10,
        0xff,
        0xf3,
        0xd2,
        0xcd,
        0x0c,
        0x13,
        0xec,
        0x5f,
        0x97,
        0x44,
        0x17,
        0xc4,
        0xa7,
        0x7e,
        0x3d,
        0x64,
        0x5d,
        0x19,
        0x73,
        0x60,
        0x81,
        0x4f,
        0xdc,
        0x22,
        0x2a,
        0x90,
        0x88,
        0x46,
        0xee,
        0xb8,
        0x14,
        0xde,
        0x5e,
        0x0b,
        0xdb,
        0xe0,
        0x32,
        0x3a,
        0x0a,
        0x49,
        0x06,
        0x24,
        0x5c,
        0xc2,
        0xd3,
        0xac,
        0x62,
        0x91,
        0x95,
        0xe4,
        0x79,
        0xe7,
        0xc8,
        0x37,
        0x6d,
        0x8d,
        0xd5,
        0x4e,
        0xa9,
        0x6c,
        0x56,
        0xf4,
        0xea,
        0x65,
        0x7a,
        0xae,
        0x08,
        0xba,
        0x78,
        0x25,
        0x2e,
        0x1c,
        0xa6,
        0xb4,
        0xc6,
        0xe8,
        0xdd,
        0x74,
        0x1f,
        0x4b,
        0xbd,
        0x8b,
        0x8a,
        0x70,
        0x3e,
        0xb5,
        0x66,
        0x48,
        0x03,
        0xf6,
        0x0e,
        0x61,
        0x35,
        0x57,
        0xb9,
        0x86,
        0xc1,
        0x1d,
        0x9e,
        0xe1,
        0xf8,
        0x98,
        0x11,
        0x69,
        0xd9,
        0x8e,
        0x94,
        0x9b,
        0x1e,
        0x87,
        0xe9,
        0xce,
        0x55,
        0x28,
        0xdf,
        0x8c,
        0xa1,
        0x89,
        0x0d,
        0xbf,
        0xe6,
        0x42,
        0x68,
        0x41,
        0x99,
        0x2d,
        0x0f,
        0xb0,
        0x54,
        0xbb,
        0x16
    ];
    var Si = [
        0x52,
        0x09,
        0x6a,
        0xd5,
        0x30,
        0x36,
        0xa5,
        0x38,
        0xbf,
        0x40,
        0xa3,
        0x9e,
        0x81,
        0xf3,
        0xd7,
        0xfb,
        0x7c,
        0xe3,
        0x39,
        0x82,
        0x9b,
        0x2f,
        0xff,
        0x87,
        0x34,
        0x8e,
        0x43,
        0x44,
        0xc4,
        0xde,
        0xe9,
        0xcb,
        0x54,
        0x7b,
        0x94,
        0x32,
        0xa6,
        0xc2,
        0x23,
        0x3d,
        0xee,
        0x4c,
        0x95,
        0x0b,
        0x42,
        0xfa,
        0xc3,
        0x4e,
        0x08,
        0x2e,
        0xa1,
        0x66,
        0x28,
        0xd9,
        0x24,
        0xb2,
        0x76,
        0x5b,
        0xa2,
        0x49,
        0x6d,
        0x8b,
        0xd1,
        0x25,
        0x72,
        0xf8,
        0xf6,
        0x64,
        0x86,
        0x68,
        0x98,
        0x16,
        0xd4,
        0xa4,
        0x5c,
        0xcc,
        0x5d,
        0x65,
        0xb6,
        0x92,
        0x6c,
        0x70,
        0x48,
        0x50,
        0xfd,
        0xed,
        0xb9,
        0xda,
        0x5e,
        0x15,
        0x46,
        0x57,
        0xa7,
        0x8d,
        0x9d,
        0x84,
        0x90,
        0xd8,
        0xab,
        0x00,
        0x8c,
        0xbc,
        0xd3,
        0x0a,
        0xf7,
        0xe4,
        0x58,
        0x05,
        0xb8,
        0xb3,
        0x45,
        0x06,
        0xd0,
        0x2c,
        0x1e,
        0x8f,
        0xca,
        0x3f,
        0x0f,
        0x02,
        0xc1,
        0xaf,
        0xbd,
        0x03,
        0x01,
        0x13,
        0x8a,
        0x6b,
        0x3a,
        0x91,
        0x11,
        0x41,
        0x4f,
        0x67,
        0xdc,
        0xea,
        0x97,
        0xf2,
        0xcf,
        0xce,
        0xf0,
        0xb4,
        0xe6,
        0x73,
        0x96,
        0xac,
        0x74,
        0x22,
        0xe7,
        0xad,
        0x35,
        0x85,
        0xe2,
        0xf9,
        0x37,
        0xe8,
        0x1c,
        0x75,
        0xdf,
        0x6e,
        0x47,
        0xf1,
        0x1a,
        0x71,
        0x1d,
        0x29,
        0xc5,
        0x89,
        0x6f,
        0xb7,
        0x62,
        0x0e,
        0xaa,
        0x18,
        0xbe,
        0x1b,
        0xfc,
        0x56,
        0x3e,
        0x4b,
        0xc6,
        0xd2,
        0x79,
        0x20,
        0x9a,
        0xdb,
        0xc0,
        0xfe,
        0x78,
        0xcd,
        0x5a,
        0xf4,
        0x1f,
        0xdd,
        0xa8,
        0x33,
        0x88,
        0x07,
        0xc7,
        0x31,
        0xb1,
        0x12,
        0x10,
        0x59,
        0x27,
        0x80,
        0xec,
        0x5f,
        0x60,
        0x51,
        0x7f,
        0xa9,
        0x19,
        0xb5,
        0x4a,
        0x0d,
        0x2d,
        0xe5,
        0x7a,
        0x9f,
        0x93,
        0xc9,
        0x9c,
        0xef,
        0xa0,
        0xe0,
        0x3b,
        0x4d,
        0xae,
        0x2a,
        0xf5,
        0xb0,
        0xc8,
        0xeb,
        0xbb,
        0x3c,
        0x83,
        0x53,
        0x99,
        0x61,
        0x17,
        0x2b,
        0x04,
        0x7e,
        0xba,
        0x77,
        0xd6,
        0x26,
        0xe1,
        0x69,
        0x14,
        0x63,
        0x55,
        0x21,
        0x0c,
        0x7d
    ];
    // Transformations for encryption
    var T1 = [
        0xc66363a5,
        0xf87c7c84,
        0xee777799,
        0xf67b7b8d,
        0xfff2f20d,
        0xd66b6bbd,
        0xde6f6fb1,
        0x91c5c554,
        0x60303050,
        0x02010103,
        0xce6767a9,
        0x562b2b7d,
        0xe7fefe19,
        0xb5d7d762,
        0x4dababe6,
        0xec76769a,
        0x8fcaca45,
        0x1f82829d,
        0x89c9c940,
        0xfa7d7d87,
        0xeffafa15,
        0xb25959eb,
        0x8e4747c9,
        0xfbf0f00b,
        0x41adadec,
        0xb3d4d467,
        0x5fa2a2fd,
        0x45afafea,
        0x239c9cbf,
        0x53a4a4f7,
        0xe4727296,
        0x9bc0c05b,
        0x75b7b7c2,
        0xe1fdfd1c,
        0x3d9393ae,
        0x4c26266a,
        0x6c36365a,
        0x7e3f3f41,
        0xf5f7f702,
        0x83cccc4f,
        0x6834345c,
        0x51a5a5f4,
        0xd1e5e534,
        0xf9f1f108,
        0xe2717193,
        0xabd8d873,
        0x62313153,
        0x2a15153f,
        0x0804040c,
        0x95c7c752,
        0x46232365,
        0x9dc3c35e,
        0x30181828,
        0x379696a1,
        0x0a05050f,
        0x2f9a9ab5,
        0x0e070709,
        0x24121236,
        0x1b80809b,
        0xdfe2e23d,
        0xcdebeb26,
        0x4e272769,
        0x7fb2b2cd,
        0xea75759f,
        0x1209091b,
        0x1d83839e,
        0x582c2c74,
        0x341a1a2e,
        0x361b1b2d,
        0xdc6e6eb2,
        0xb45a5aee,
        0x5ba0a0fb,
        0xa45252f6,
        0x763b3b4d,
        0xb7d6d661,
        0x7db3b3ce,
        0x5229297b,
        0xdde3e33e,
        0x5e2f2f71,
        0x13848497,
        0xa65353f5,
        0xb9d1d168,
        0x00000000,
        0xc1eded2c,
        0x40202060,
        0xe3fcfc1f,
        0x79b1b1c8,
        0xb65b5bed,
        0xd46a6abe,
        0x8dcbcb46,
        0x67bebed9,
        0x7239394b,
        0x944a4ade,
        0x984c4cd4,
        0xb05858e8,
        0x85cfcf4a,
        0xbbd0d06b,
        0xc5efef2a,
        0x4faaaae5,
        0xedfbfb16,
        0x864343c5,
        0x9a4d4dd7,
        0x66333355,
        0x11858594,
        0x8a4545cf,
        0xe9f9f910,
        0x04020206,
        0xfe7f7f81,
        0xa05050f0,
        0x783c3c44,
        0x259f9fba,
        0x4ba8a8e3,
        0xa25151f3,
        0x5da3a3fe,
        0x804040c0,
        0x058f8f8a,
        0x3f9292ad,
        0x219d9dbc,
        0x70383848,
        0xf1f5f504,
        0x63bcbcdf,
        0x77b6b6c1,
        0xafdada75,
        0x42212163,
        0x20101030,
        0xe5ffff1a,
        0xfdf3f30e,
        0xbfd2d26d,
        0x81cdcd4c,
        0x180c0c14,
        0x26131335,
        0xc3ecec2f,
        0xbe5f5fe1,
        0x359797a2,
        0x884444cc,
        0x2e171739,
        0x93c4c457,
        0x55a7a7f2,
        0xfc7e7e82,
        0x7a3d3d47,
        0xc86464ac,
        0xba5d5de7,
        0x3219192b,
        0xe6737395,
        0xc06060a0,
        0x19818198,
        0x9e4f4fd1,
        0xa3dcdc7f,
        0x44222266,
        0x542a2a7e,
        0x3b9090ab,
        0x0b888883,
        0x8c4646ca,
        0xc7eeee29,
        0x6bb8b8d3,
        0x2814143c,
        0xa7dede79,
        0xbc5e5ee2,
        0x160b0b1d,
        0xaddbdb76,
        0xdbe0e03b,
        0x64323256,
        0x743a3a4e,
        0x140a0a1e,
        0x924949db,
        0x0c06060a,
        0x4824246c,
        0xb85c5ce4,
        0x9fc2c25d,
        0xbdd3d36e,
        0x43acacef,
        0xc46262a6,
        0x399191a8,
        0x319595a4,
        0xd3e4e437,
        0xf279798b,
        0xd5e7e732,
        0x8bc8c843,
        0x6e373759,
        0xda6d6db7,
        0x018d8d8c,
        0xb1d5d564,
        0x9c4e4ed2,
        0x49a9a9e0,
        0xd86c6cb4,
        0xac5656fa,
        0xf3f4f407,
        0xcfeaea25,
        0xca6565af,
        0xf47a7a8e,
        0x47aeaee9,
        0x10080818,
        0x6fbabad5,
        0xf0787888,
        0x4a25256f,
        0x5c2e2e72,
        0x381c1c24,
        0x57a6a6f1,
        0x73b4b4c7,
        0x97c6c651,
        0xcbe8e823,
        0xa1dddd7c,
        0xe874749c,
        0x3e1f1f21,
        0x964b4bdd,
        0x61bdbddc,
        0x0d8b8b86,
        0x0f8a8a85,
        0xe0707090,
        0x7c3e3e42,
        0x71b5b5c4,
        0xcc6666aa,
        0x904848d8,
        0x06030305,
        0xf7f6f601,
        0x1c0e0e12,
        0xc26161a3,
        0x6a35355f,
        0xae5757f9,
        0x69b9b9d0,
        0x17868691,
        0x99c1c158,
        0x3a1d1d27,
        0x279e9eb9,
        0xd9e1e138,
        0xebf8f813,
        0x2b9898b3,
        0x22111133,
        0xd26969bb,
        0xa9d9d970,
        0x078e8e89,
        0x339494a7,
        0x2d9b9bb6,
        0x3c1e1e22,
        0x15878792,
        0xc9e9e920,
        0x87cece49,
        0xaa5555ff,
        0x50282878,
        0xa5dfdf7a,
        0x038c8c8f,
        0x59a1a1f8,
        0x09898980,
        0x1a0d0d17,
        0x65bfbfda,
        0xd7e6e631,
        0x844242c6,
        0xd06868b8,
        0x824141c3,
        0x299999b0,
        0x5a2d2d77,
        0x1e0f0f11,
        0x7bb0b0cb,
        0xa85454fc,
        0x6dbbbbd6,
        0x2c16163a
    ];
    var T2 = [
        0xa5c66363,
        0x84f87c7c,
        0x99ee7777,
        0x8df67b7b,
        0x0dfff2f2,
        0xbdd66b6b,
        0xb1de6f6f,
        0x5491c5c5,
        0x50603030,
        0x03020101,
        0xa9ce6767,
        0x7d562b2b,
        0x19e7fefe,
        0x62b5d7d7,
        0xe64dabab,
        0x9aec7676,
        0x458fcaca,
        0x9d1f8282,
        0x4089c9c9,
        0x87fa7d7d,
        0x15effafa,
        0xebb25959,
        0xc98e4747,
        0x0bfbf0f0,
        0xec41adad,
        0x67b3d4d4,
        0xfd5fa2a2,
        0xea45afaf,
        0xbf239c9c,
        0xf753a4a4,
        0x96e47272,
        0x5b9bc0c0,
        0xc275b7b7,
        0x1ce1fdfd,
        0xae3d9393,
        0x6a4c2626,
        0x5a6c3636,
        0x417e3f3f,
        0x02f5f7f7,
        0x4f83cccc,
        0x5c683434,
        0xf451a5a5,
        0x34d1e5e5,
        0x08f9f1f1,
        0x93e27171,
        0x73abd8d8,
        0x53623131,
        0x3f2a1515,
        0x0c080404,
        0x5295c7c7,
        0x65462323,
        0x5e9dc3c3,
        0x28301818,
        0xa1379696,
        0x0f0a0505,
        0xb52f9a9a,
        0x090e0707,
        0x36241212,
        0x9b1b8080,
        0x3ddfe2e2,
        0x26cdebeb,
        0x694e2727,
        0xcd7fb2b2,
        0x9fea7575,
        0x1b120909,
        0x9e1d8383,
        0x74582c2c,
        0x2e341a1a,
        0x2d361b1b,
        0xb2dc6e6e,
        0xeeb45a5a,
        0xfb5ba0a0,
        0xf6a45252,
        0x4d763b3b,
        0x61b7d6d6,
        0xce7db3b3,
        0x7b522929,
        0x3edde3e3,
        0x715e2f2f,
        0x97138484,
        0xf5a65353,
        0x68b9d1d1,
        0x00000000,
        0x2cc1eded,
        0x60402020,
        0x1fe3fcfc,
        0xc879b1b1,
        0xedb65b5b,
        0xbed46a6a,
        0x468dcbcb,
        0xd967bebe,
        0x4b723939,
        0xde944a4a,
        0xd4984c4c,
        0xe8b05858,
        0x4a85cfcf,
        0x6bbbd0d0,
        0x2ac5efef,
        0xe54faaaa,
        0x16edfbfb,
        0xc5864343,
        0xd79a4d4d,
        0x55663333,
        0x94118585,
        0xcf8a4545,
        0x10e9f9f9,
        0x06040202,
        0x81fe7f7f,
        0xf0a05050,
        0x44783c3c,
        0xba259f9f,
        0xe34ba8a8,
        0xf3a25151,
        0xfe5da3a3,
        0xc0804040,
        0x8a058f8f,
        0xad3f9292,
        0xbc219d9d,
        0x48703838,
        0x04f1f5f5,
        0xdf63bcbc,
        0xc177b6b6,
        0x75afdada,
        0x63422121,
        0x30201010,
        0x1ae5ffff,
        0x0efdf3f3,
        0x6dbfd2d2,
        0x4c81cdcd,
        0x14180c0c,
        0x35261313,
        0x2fc3ecec,
        0xe1be5f5f,
        0xa2359797,
        0xcc884444,
        0x392e1717,
        0x5793c4c4,
        0xf255a7a7,
        0x82fc7e7e,
        0x477a3d3d,
        0xacc86464,
        0xe7ba5d5d,
        0x2b321919,
        0x95e67373,
        0xa0c06060,
        0x98198181,
        0xd19e4f4f,
        0x7fa3dcdc,
        0x66442222,
        0x7e542a2a,
        0xab3b9090,
        0x830b8888,
        0xca8c4646,
        0x29c7eeee,
        0xd36bb8b8,
        0x3c281414,
        0x79a7dede,
        0xe2bc5e5e,
        0x1d160b0b,
        0x76addbdb,
        0x3bdbe0e0,
        0x56643232,
        0x4e743a3a,
        0x1e140a0a,
        0xdb924949,
        0x0a0c0606,
        0x6c482424,
        0xe4b85c5c,
        0x5d9fc2c2,
        0x6ebdd3d3,
        0xef43acac,
        0xa6c46262,
        0xa8399191,
        0xa4319595,
        0x37d3e4e4,
        0x8bf27979,
        0x32d5e7e7,
        0x438bc8c8,
        0x596e3737,
        0xb7da6d6d,
        0x8c018d8d,
        0x64b1d5d5,
        0xd29c4e4e,
        0xe049a9a9,
        0xb4d86c6c,
        0xfaac5656,
        0x07f3f4f4,
        0x25cfeaea,
        0xafca6565,
        0x8ef47a7a,
        0xe947aeae,
        0x18100808,
        0xd56fbaba,
        0x88f07878,
        0x6f4a2525,
        0x725c2e2e,
        0x24381c1c,
        0xf157a6a6,
        0xc773b4b4,
        0x5197c6c6,
        0x23cbe8e8,
        0x7ca1dddd,
        0x9ce87474,
        0x213e1f1f,
        0xdd964b4b,
        0xdc61bdbd,
        0x860d8b8b,
        0x850f8a8a,
        0x90e07070,
        0x427c3e3e,
        0xc471b5b5,
        0xaacc6666,
        0xd8904848,
        0x05060303,
        0x01f7f6f6,
        0x121c0e0e,
        0xa3c26161,
        0x5f6a3535,
        0xf9ae5757,
        0xd069b9b9,
        0x91178686,
        0x5899c1c1,
        0x273a1d1d,
        0xb9279e9e,
        0x38d9e1e1,
        0x13ebf8f8,
        0xb32b9898,
        0x33221111,
        0xbbd26969,
        0x70a9d9d9,
        0x89078e8e,
        0xa7339494,
        0xb62d9b9b,
        0x223c1e1e,
        0x92158787,
        0x20c9e9e9,
        0x4987cece,
        0xffaa5555,
        0x78502828,
        0x7aa5dfdf,
        0x8f038c8c,
        0xf859a1a1,
        0x80098989,
        0x171a0d0d,
        0xda65bfbf,
        0x31d7e6e6,
        0xc6844242,
        0xb8d06868,
        0xc3824141,
        0xb0299999,
        0x775a2d2d,
        0x111e0f0f,
        0xcb7bb0b0,
        0xfca85454,
        0xd66dbbbb,
        0x3a2c1616
    ];
    var T3 = [
        0x63a5c663,
        0x7c84f87c,
        0x7799ee77,
        0x7b8df67b,
        0xf20dfff2,
        0x6bbdd66b,
        0x6fb1de6f,
        0xc55491c5,
        0x30506030,
        0x01030201,
        0x67a9ce67,
        0x2b7d562b,
        0xfe19e7fe,
        0xd762b5d7,
        0xabe64dab,
        0x769aec76,
        0xca458fca,
        0x829d1f82,
        0xc94089c9,
        0x7d87fa7d,
        0xfa15effa,
        0x59ebb259,
        0x47c98e47,
        0xf00bfbf0,
        0xadec41ad,
        0xd467b3d4,
        0xa2fd5fa2,
        0xafea45af,
        0x9cbf239c,
        0xa4f753a4,
        0x7296e472,
        0xc05b9bc0,
        0xb7c275b7,
        0xfd1ce1fd,
        0x93ae3d93,
        0x266a4c26,
        0x365a6c36,
        0x3f417e3f,
        0xf702f5f7,
        0xcc4f83cc,
        0x345c6834,
        0xa5f451a5,
        0xe534d1e5,
        0xf108f9f1,
        0x7193e271,
        0xd873abd8,
        0x31536231,
        0x153f2a15,
        0x040c0804,
        0xc75295c7,
        0x23654623,
        0xc35e9dc3,
        0x18283018,
        0x96a13796,
        0x050f0a05,
        0x9ab52f9a,
        0x07090e07,
        0x12362412,
        0x809b1b80,
        0xe23ddfe2,
        0xeb26cdeb,
        0x27694e27,
        0xb2cd7fb2,
        0x759fea75,
        0x091b1209,
        0x839e1d83,
        0x2c74582c,
        0x1a2e341a,
        0x1b2d361b,
        0x6eb2dc6e,
        0x5aeeb45a,
        0xa0fb5ba0,
        0x52f6a452,
        0x3b4d763b,
        0xd661b7d6,
        0xb3ce7db3,
        0x297b5229,
        0xe33edde3,
        0x2f715e2f,
        0x84971384,
        0x53f5a653,
        0xd168b9d1,
        0x00000000,
        0xed2cc1ed,
        0x20604020,
        0xfc1fe3fc,
        0xb1c879b1,
        0x5bedb65b,
        0x6abed46a,
        0xcb468dcb,
        0xbed967be,
        0x394b7239,
        0x4ade944a,
        0x4cd4984c,
        0x58e8b058,
        0xcf4a85cf,
        0xd06bbbd0,
        0xef2ac5ef,
        0xaae54faa,
        0xfb16edfb,
        0x43c58643,
        0x4dd79a4d,
        0x33556633,
        0x85941185,
        0x45cf8a45,
        0xf910e9f9,
        0x02060402,
        0x7f81fe7f,
        0x50f0a050,
        0x3c44783c,
        0x9fba259f,
        0xa8e34ba8,
        0x51f3a251,
        0xa3fe5da3,
        0x40c08040,
        0x8f8a058f,
        0x92ad3f92,
        0x9dbc219d,
        0x38487038,
        0xf504f1f5,
        0xbcdf63bc,
        0xb6c177b6,
        0xda75afda,
        0x21634221,
        0x10302010,
        0xff1ae5ff,
        0xf30efdf3,
        0xd26dbfd2,
        0xcd4c81cd,
        0x0c14180c,
        0x13352613,
        0xec2fc3ec,
        0x5fe1be5f,
        0x97a23597,
        0x44cc8844,
        0x17392e17,
        0xc45793c4,
        0xa7f255a7,
        0x7e82fc7e,
        0x3d477a3d,
        0x64acc864,
        0x5de7ba5d,
        0x192b3219,
        0x7395e673,
        0x60a0c060,
        0x81981981,
        0x4fd19e4f,
        0xdc7fa3dc,
        0x22664422,
        0x2a7e542a,
        0x90ab3b90,
        0x88830b88,
        0x46ca8c46,
        0xee29c7ee,
        0xb8d36bb8,
        0x143c2814,
        0xde79a7de,
        0x5ee2bc5e,
        0x0b1d160b,
        0xdb76addb,
        0xe03bdbe0,
        0x32566432,
        0x3a4e743a,
        0x0a1e140a,
        0x49db9249,
        0x060a0c06,
        0x246c4824,
        0x5ce4b85c,
        0xc25d9fc2,
        0xd36ebdd3,
        0xacef43ac,
        0x62a6c462,
        0x91a83991,
        0x95a43195,
        0xe437d3e4,
        0x798bf279,
        0xe732d5e7,
        0xc8438bc8,
        0x37596e37,
        0x6db7da6d,
        0x8d8c018d,
        0xd564b1d5,
        0x4ed29c4e,
        0xa9e049a9,
        0x6cb4d86c,
        0x56faac56,
        0xf407f3f4,
        0xea25cfea,
        0x65afca65,
        0x7a8ef47a,
        0xaee947ae,
        0x08181008,
        0xbad56fba,
        0x7888f078,
        0x256f4a25,
        0x2e725c2e,
        0x1c24381c,
        0xa6f157a6,
        0xb4c773b4,
        0xc65197c6,
        0xe823cbe8,
        0xdd7ca1dd,
        0x749ce874,
        0x1f213e1f,
        0x4bdd964b,
        0xbddc61bd,
        0x8b860d8b,
        0x8a850f8a,
        0x7090e070,
        0x3e427c3e,
        0xb5c471b5,
        0x66aacc66,
        0x48d89048,
        0x03050603,
        0xf601f7f6,
        0x0e121c0e,
        0x61a3c261,
        0x355f6a35,
        0x57f9ae57,
        0xb9d069b9,
        0x86911786,
        0xc15899c1,
        0x1d273a1d,
        0x9eb9279e,
        0xe138d9e1,
        0xf813ebf8,
        0x98b32b98,
        0x11332211,
        0x69bbd269,
        0xd970a9d9,
        0x8e89078e,
        0x94a73394,
        0x9bb62d9b,
        0x1e223c1e,
        0x87921587,
        0xe920c9e9,
        0xce4987ce,
        0x55ffaa55,
        0x28785028,
        0xdf7aa5df,
        0x8c8f038c,
        0xa1f859a1,
        0x89800989,
        0x0d171a0d,
        0xbfda65bf,
        0xe631d7e6,
        0x42c68442,
        0x68b8d068,
        0x41c38241,
        0x99b02999,
        0x2d775a2d,
        0x0f111e0f,
        0xb0cb7bb0,
        0x54fca854,
        0xbbd66dbb,
        0x163a2c16
    ];
    var T4 = [
        0x6363a5c6,
        0x7c7c84f8,
        0x777799ee,
        0x7b7b8df6,
        0xf2f20dff,
        0x6b6bbdd6,
        0x6f6fb1de,
        0xc5c55491,
        0x30305060,
        0x01010302,
        0x6767a9ce,
        0x2b2b7d56,
        0xfefe19e7,
        0xd7d762b5,
        0xababe64d,
        0x76769aec,
        0xcaca458f,
        0x82829d1f,
        0xc9c94089,
        0x7d7d87fa,
        0xfafa15ef,
        0x5959ebb2,
        0x4747c98e,
        0xf0f00bfb,
        0xadadec41,
        0xd4d467b3,
        0xa2a2fd5f,
        0xafafea45,
        0x9c9cbf23,
        0xa4a4f753,
        0x727296e4,
        0xc0c05b9b,
        0xb7b7c275,
        0xfdfd1ce1,
        0x9393ae3d,
        0x26266a4c,
        0x36365a6c,
        0x3f3f417e,
        0xf7f702f5,
        0xcccc4f83,
        0x34345c68,
        0xa5a5f451,
        0xe5e534d1,
        0xf1f108f9,
        0x717193e2,
        0xd8d873ab,
        0x31315362,
        0x15153f2a,
        0x04040c08,
        0xc7c75295,
        0x23236546,
        0xc3c35e9d,
        0x18182830,
        0x9696a137,
        0x05050f0a,
        0x9a9ab52f,
        0x0707090e,
        0x12123624,
        0x80809b1b,
        0xe2e23ddf,
        0xebeb26cd,
        0x2727694e,
        0xb2b2cd7f,
        0x75759fea,
        0x09091b12,
        0x83839e1d,
        0x2c2c7458,
        0x1a1a2e34,
        0x1b1b2d36,
        0x6e6eb2dc,
        0x5a5aeeb4,
        0xa0a0fb5b,
        0x5252f6a4,
        0x3b3b4d76,
        0xd6d661b7,
        0xb3b3ce7d,
        0x29297b52,
        0xe3e33edd,
        0x2f2f715e,
        0x84849713,
        0x5353f5a6,
        0xd1d168b9,
        0x00000000,
        0xeded2cc1,
        0x20206040,
        0xfcfc1fe3,
        0xb1b1c879,
        0x5b5bedb6,
        0x6a6abed4,
        0xcbcb468d,
        0xbebed967,
        0x39394b72,
        0x4a4ade94,
        0x4c4cd498,
        0x5858e8b0,
        0xcfcf4a85,
        0xd0d06bbb,
        0xefef2ac5,
        0xaaaae54f,
        0xfbfb16ed,
        0x4343c586,
        0x4d4dd79a,
        0x33335566,
        0x85859411,
        0x4545cf8a,
        0xf9f910e9,
        0x02020604,
        0x7f7f81fe,
        0x5050f0a0,
        0x3c3c4478,
        0x9f9fba25,
        0xa8a8e34b,
        0x5151f3a2,
        0xa3a3fe5d,
        0x4040c080,
        0x8f8f8a05,
        0x9292ad3f,
        0x9d9dbc21,
        0x38384870,
        0xf5f504f1,
        0xbcbcdf63,
        0xb6b6c177,
        0xdada75af,
        0x21216342,
        0x10103020,
        0xffff1ae5,
        0xf3f30efd,
        0xd2d26dbf,
        0xcdcd4c81,
        0x0c0c1418,
        0x13133526,
        0xecec2fc3,
        0x5f5fe1be,
        0x9797a235,
        0x4444cc88,
        0x1717392e,
        0xc4c45793,
        0xa7a7f255,
        0x7e7e82fc,
        0x3d3d477a,
        0x6464acc8,
        0x5d5de7ba,
        0x19192b32,
        0x737395e6,
        0x6060a0c0,
        0x81819819,
        0x4f4fd19e,
        0xdcdc7fa3,
        0x22226644,
        0x2a2a7e54,
        0x9090ab3b,
        0x8888830b,
        0x4646ca8c,
        0xeeee29c7,
        0xb8b8d36b,
        0x14143c28,
        0xdede79a7,
        0x5e5ee2bc,
        0x0b0b1d16,
        0xdbdb76ad,
        0xe0e03bdb,
        0x32325664,
        0x3a3a4e74,
        0x0a0a1e14,
        0x4949db92,
        0x06060a0c,
        0x24246c48,
        0x5c5ce4b8,
        0xc2c25d9f,
        0xd3d36ebd,
        0xacacef43,
        0x6262a6c4,
        0x9191a839,
        0x9595a431,
        0xe4e437d3,
        0x79798bf2,
        0xe7e732d5,
        0xc8c8438b,
        0x3737596e,
        0x6d6db7da,
        0x8d8d8c01,
        0xd5d564b1,
        0x4e4ed29c,
        0xa9a9e049,
        0x6c6cb4d8,
        0x5656faac,
        0xf4f407f3,
        0xeaea25cf,
        0x6565afca,
        0x7a7a8ef4,
        0xaeaee947,
        0x08081810,
        0xbabad56f,
        0x787888f0,
        0x25256f4a,
        0x2e2e725c,
        0x1c1c2438,
        0xa6a6f157,
        0xb4b4c773,
        0xc6c65197,
        0xe8e823cb,
        0xdddd7ca1,
        0x74749ce8,
        0x1f1f213e,
        0x4b4bdd96,
        0xbdbddc61,
        0x8b8b860d,
        0x8a8a850f,
        0x707090e0,
        0x3e3e427c,
        0xb5b5c471,
        0x6666aacc,
        0x4848d890,
        0x03030506,
        0xf6f601f7,
        0x0e0e121c,
        0x6161a3c2,
        0x35355f6a,
        0x5757f9ae,
        0xb9b9d069,
        0x86869117,
        0xc1c15899,
        0x1d1d273a,
        0x9e9eb927,
        0xe1e138d9,
        0xf8f813eb,
        0x9898b32b,
        0x11113322,
        0x6969bbd2,
        0xd9d970a9,
        0x8e8e8907,
        0x9494a733,
        0x9b9bb62d,
        0x1e1e223c,
        0x87879215,
        0xe9e920c9,
        0xcece4987,
        0x5555ffaa,
        0x28287850,
        0xdfdf7aa5,
        0x8c8c8f03,
        0xa1a1f859,
        0x89898009,
        0x0d0d171a,
        0xbfbfda65,
        0xe6e631d7,
        0x4242c684,
        0x6868b8d0,
        0x4141c382,
        0x9999b029,
        0x2d2d775a,
        0x0f0f111e,
        0xb0b0cb7b,
        0x5454fca8,
        0xbbbbd66d,
        0x16163a2c
    ];
    // Transformations for decryption
    var T5 = [
        0x51f4a750,
        0x7e416553,
        0x1a17a4c3,
        0x3a275e96,
        0x3bab6bcb,
        0x1f9d45f1,
        0xacfa58ab,
        0x4be30393,
        0x2030fa55,
        0xad766df6,
        0x88cc7691,
        0xf5024c25,
        0x4fe5d7fc,
        0xc52acbd7,
        0x26354480,
        0xb562a38f,
        0xdeb15a49,
        0x25ba1b67,
        0x45ea0e98,
        0x5dfec0e1,
        0xc32f7502,
        0x814cf012,
        0x8d4697a3,
        0x6bd3f9c6,
        0x038f5fe7,
        0x15929c95,
        0xbf6d7aeb,
        0x955259da,
        0xd4be832d,
        0x587421d3,
        0x49e06929,
        0x8ec9c844,
        0x75c2896a,
        0xf48e7978,
        0x99583e6b,
        0x27b971dd,
        0xbee14fb6,
        0xf088ad17,
        0xc920ac66,
        0x7dce3ab4,
        0x63df4a18,
        0xe51a3182,
        0x97513360,
        0x62537f45,
        0xb16477e0,
        0xbb6bae84,
        0xfe81a01c,
        0xf9082b94,
        0x70486858,
        0x8f45fd19,
        0x94de6c87,
        0x527bf8b7,
        0xab73d323,
        0x724b02e2,
        0xe31f8f57,
        0x6655ab2a,
        0xb2eb2807,
        0x2fb5c203,
        0x86c57b9a,
        0xd33708a5,
        0x302887f2,
        0x23bfa5b2,
        0x02036aba,
        0xed16825c,
        0x8acf1c2b,
        0xa779b492,
        0xf307f2f0,
        0x4e69e2a1,
        0x65daf4cd,
        0x0605bed5,
        0xd134621f,
        0xc4a6fe8a,
        0x342e539d,
        0xa2f355a0,
        0x058ae132,
        0xa4f6eb75,
        0x0b83ec39,
        0x4060efaa,
        0x5e719f06,
        0xbd6e1051,
        0x3e218af9,
        0x96dd063d,
        0xdd3e05ae,
        0x4de6bd46,
        0x91548db5,
        0x71c45d05,
        0x0406d46f,
        0x605015ff,
        0x1998fb24,
        0xd6bde997,
        0x894043cc,
        0x67d99e77,
        0xb0e842bd,
        0x07898b88,
        0xe7195b38,
        0x79c8eedb,
        0xa17c0a47,
        0x7c420fe9,
        0xf8841ec9,
        0x00000000,
        0x09808683,
        0x322bed48,
        0x1e1170ac,
        0x6c5a724e,
        0xfd0efffb,
        0x0f853856,
        0x3daed51e,
        0x362d3927,
        0x0a0fd964,
        0x685ca621,
        0x9b5b54d1,
        0x24362e3a,
        0x0c0a67b1,
        0x9357e70f,
        0xb4ee96d2,
        0x1b9b919e,
        0x80c0c54f,
        0x61dc20a2,
        0x5a774b69,
        0x1c121a16,
        0xe293ba0a,
        0xc0a02ae5,
        0x3c22e043,
        0x121b171d,
        0x0e090d0b,
        0xf28bc7ad,
        0x2db6a8b9,
        0x141ea9c8,
        0x57f11985,
        0xaf75074c,
        0xee99ddbb,
        0xa37f60fd,
        0xf701269f,
        0x5c72f5bc,
        0x44663bc5,
        0x5bfb7e34,
        0x8b432976,
        0xcb23c6dc,
        0xb6edfc68,
        0xb8e4f163,
        0xd731dcca,
        0x42638510,
        0x13972240,
        0x84c61120,
        0x854a247d,
        0xd2bb3df8,
        0xaef93211,
        0xc729a16d,
        0x1d9e2f4b,
        0xdcb230f3,
        0x0d8652ec,
        0x77c1e3d0,
        0x2bb3166c,
        0xa970b999,
        0x119448fa,
        0x47e96422,
        0xa8fc8cc4,
        0xa0f03f1a,
        0x567d2cd8,
        0x223390ef,
        0x87494ec7,
        0xd938d1c1,
        0x8ccaa2fe,
        0x98d40b36,
        0xa6f581cf,
        0xa57ade28,
        0xdab78e26,
        0x3fadbfa4,
        0x2c3a9de4,
        0x5078920d,
        0x6a5fcc9b,
        0x547e4662,
        0xf68d13c2,
        0x90d8b8e8,
        0x2e39f75e,
        0x82c3aff5,
        0x9f5d80be,
        0x69d0937c,
        0x6fd52da9,
        0xcf2512b3,
        0xc8ac993b,
        0x10187da7,
        0xe89c636e,
        0xdb3bbb7b,
        0xcd267809,
        0x6e5918f4,
        0xec9ab701,
        0x834f9aa8,
        0xe6956e65,
        0xaaffe67e,
        0x21bccf08,
        0xef15e8e6,
        0xbae79bd9,
        0x4a6f36ce,
        0xea9f09d4,
        0x29b07cd6,
        0x31a4b2af,
        0x2a3f2331,
        0xc6a59430,
        0x35a266c0,
        0x744ebc37,
        0xfc82caa6,
        0xe090d0b0,
        0x33a7d815,
        0xf104984a,
        0x41ecdaf7,
        0x7fcd500e,
        0x1791f62f,
        0x764dd68d,
        0x43efb04d,
        0xccaa4d54,
        0xe49604df,
        0x9ed1b5e3,
        0x4c6a881b,
        0xc12c1fb8,
        0x4665517f,
        0x9d5eea04,
        0x018c355d,
        0xfa877473,
        0xfb0b412e,
        0xb3671d5a,
        0x92dbd252,
        0xe9105633,
        0x6dd64713,
        0x9ad7618c,
        0x37a10c7a,
        0x59f8148e,
        0xeb133c89,
        0xcea927ee,
        0xb761c935,
        0xe11ce5ed,
        0x7a47b13c,
        0x9cd2df59,
        0x55f2733f,
        0x1814ce79,
        0x73c737bf,
        0x53f7cdea,
        0x5ffdaa5b,
        0xdf3d6f14,
        0x7844db86,
        0xcaaff381,
        0xb968c43e,
        0x3824342c,
        0xc2a3405f,
        0x161dc372,
        0xbce2250c,
        0x283c498b,
        0xff0d9541,
        0x39a80171,
        0x080cb3de,
        0xd8b4e49c,
        0x6456c190,
        0x7bcb8461,
        0xd532b670,
        0x486c5c74,
        0xd0b85742
    ];
    var T6 = [
        0x5051f4a7,
        0x537e4165,
        0xc31a17a4,
        0x963a275e,
        0xcb3bab6b,
        0xf11f9d45,
        0xabacfa58,
        0x934be303,
        0x552030fa,
        0xf6ad766d,
        0x9188cc76,
        0x25f5024c,
        0xfc4fe5d7,
        0xd7c52acb,
        0x80263544,
        0x8fb562a3,
        0x49deb15a,
        0x6725ba1b,
        0x9845ea0e,
        0xe15dfec0,
        0x02c32f75,
        0x12814cf0,
        0xa38d4697,
        0xc66bd3f9,
        0xe7038f5f,
        0x9515929c,
        0xebbf6d7a,
        0xda955259,
        0x2dd4be83,
        0xd3587421,
        0x2949e069,
        0x448ec9c8,
        0x6a75c289,
        0x78f48e79,
        0x6b99583e,
        0xdd27b971,
        0xb6bee14f,
        0x17f088ad,
        0x66c920ac,
        0xb47dce3a,
        0x1863df4a,
        0x82e51a31,
        0x60975133,
        0x4562537f,
        0xe0b16477,
        0x84bb6bae,
        0x1cfe81a0,
        0x94f9082b,
        0x58704868,
        0x198f45fd,
        0x8794de6c,
        0xb7527bf8,
        0x23ab73d3,
        0xe2724b02,
        0x57e31f8f,
        0x2a6655ab,
        0x07b2eb28,
        0x032fb5c2,
        0x9a86c57b,
        0xa5d33708,
        0xf2302887,
        0xb223bfa5,
        0xba02036a,
        0x5ced1682,
        0x2b8acf1c,
        0x92a779b4,
        0xf0f307f2,
        0xa14e69e2,
        0xcd65daf4,
        0xd50605be,
        0x1fd13462,
        0x8ac4a6fe,
        0x9d342e53,
        0xa0a2f355,
        0x32058ae1,
        0x75a4f6eb,
        0x390b83ec,
        0xaa4060ef,
        0x065e719f,
        0x51bd6e10,
        0xf93e218a,
        0x3d96dd06,
        0xaedd3e05,
        0x464de6bd,
        0xb591548d,
        0x0571c45d,
        0x6f0406d4,
        0xff605015,
        0x241998fb,
        0x97d6bde9,
        0xcc894043,
        0x7767d99e,
        0xbdb0e842,
        0x8807898b,
        0x38e7195b,
        0xdb79c8ee,
        0x47a17c0a,
        0xe97c420f,
        0xc9f8841e,
        0x00000000,
        0x83098086,
        0x48322bed,
        0xac1e1170,
        0x4e6c5a72,
        0xfbfd0eff,
        0x560f8538,
        0x1e3daed5,
        0x27362d39,
        0x640a0fd9,
        0x21685ca6,
        0xd19b5b54,
        0x3a24362e,
        0xb10c0a67,
        0x0f9357e7,
        0xd2b4ee96,
        0x9e1b9b91,
        0x4f80c0c5,
        0xa261dc20,
        0x695a774b,
        0x161c121a,
        0x0ae293ba,
        0xe5c0a02a,
        0x433c22e0,
        0x1d121b17,
        0x0b0e090d,
        0xadf28bc7,
        0xb92db6a8,
        0xc8141ea9,
        0x8557f119,
        0x4caf7507,
        0xbbee99dd,
        0xfda37f60,
        0x9ff70126,
        0xbc5c72f5,
        0xc544663b,
        0x345bfb7e,
        0x768b4329,
        0xdccb23c6,
        0x68b6edfc,
        0x63b8e4f1,
        0xcad731dc,
        0x10426385,
        0x40139722,
        0x2084c611,
        0x7d854a24,
        0xf8d2bb3d,
        0x11aef932,
        0x6dc729a1,
        0x4b1d9e2f,
        0xf3dcb230,
        0xec0d8652,
        0xd077c1e3,
        0x6c2bb316,
        0x99a970b9,
        0xfa119448,
        0x2247e964,
        0xc4a8fc8c,
        0x1aa0f03f,
        0xd8567d2c,
        0xef223390,
        0xc787494e,
        0xc1d938d1,
        0xfe8ccaa2,
        0x3698d40b,
        0xcfa6f581,
        0x28a57ade,
        0x26dab78e,
        0xa43fadbf,
        0xe42c3a9d,
        0x0d507892,
        0x9b6a5fcc,
        0x62547e46,
        0xc2f68d13,
        0xe890d8b8,
        0x5e2e39f7,
        0xf582c3af,
        0xbe9f5d80,
        0x7c69d093,
        0xa96fd52d,
        0xb3cf2512,
        0x3bc8ac99,
        0xa710187d,
        0x6ee89c63,
        0x7bdb3bbb,
        0x09cd2678,
        0xf46e5918,
        0x01ec9ab7,
        0xa8834f9a,
        0x65e6956e,
        0x7eaaffe6,
        0x0821bccf,
        0xe6ef15e8,
        0xd9bae79b,
        0xce4a6f36,
        0xd4ea9f09,
        0xd629b07c,
        0xaf31a4b2,
        0x312a3f23,
        0x30c6a594,
        0xc035a266,
        0x37744ebc,
        0xa6fc82ca,
        0xb0e090d0,
        0x1533a7d8,
        0x4af10498,
        0xf741ecda,
        0x0e7fcd50,
        0x2f1791f6,
        0x8d764dd6,
        0x4d43efb0,
        0x54ccaa4d,
        0xdfe49604,
        0xe39ed1b5,
        0x1b4c6a88,
        0xb8c12c1f,
        0x7f466551,
        0x049d5eea,
        0x5d018c35,
        0x73fa8774,
        0x2efb0b41,
        0x5ab3671d,
        0x5292dbd2,
        0x33e91056,
        0x136dd647,
        0x8c9ad761,
        0x7a37a10c,
        0x8e59f814,
        0x89eb133c,
        0xeecea927,
        0x35b761c9,
        0xede11ce5,
        0x3c7a47b1,
        0x599cd2df,
        0x3f55f273,
        0x791814ce,
        0xbf73c737,
        0xea53f7cd,
        0x5b5ffdaa,
        0x14df3d6f,
        0x867844db,
        0x81caaff3,
        0x3eb968c4,
        0x2c382434,
        0x5fc2a340,
        0x72161dc3,
        0x0cbce225,
        0x8b283c49,
        0x41ff0d95,
        0x7139a801,
        0xde080cb3,
        0x9cd8b4e4,
        0x906456c1,
        0x617bcb84,
        0x70d532b6,
        0x74486c5c,
        0x42d0b857
    ];
    var T7 = [
        0xa75051f4,
        0x65537e41,
        0xa4c31a17,
        0x5e963a27,
        0x6bcb3bab,
        0x45f11f9d,
        0x58abacfa,
        0x03934be3,
        0xfa552030,
        0x6df6ad76,
        0x769188cc,
        0x4c25f502,
        0xd7fc4fe5,
        0xcbd7c52a,
        0x44802635,
        0xa38fb562,
        0x5a49deb1,
        0x1b6725ba,
        0x0e9845ea,
        0xc0e15dfe,
        0x7502c32f,
        0xf012814c,
        0x97a38d46,
        0xf9c66bd3,
        0x5fe7038f,
        0x9c951592,
        0x7aebbf6d,
        0x59da9552,
        0x832dd4be,
        0x21d35874,
        0x692949e0,
        0xc8448ec9,
        0x896a75c2,
        0x7978f48e,
        0x3e6b9958,
        0x71dd27b9,
        0x4fb6bee1,
        0xad17f088,
        0xac66c920,
        0x3ab47dce,
        0x4a1863df,
        0x3182e51a,
        0x33609751,
        0x7f456253,
        0x77e0b164,
        0xae84bb6b,
        0xa01cfe81,
        0x2b94f908,
        0x68587048,
        0xfd198f45,
        0x6c8794de,
        0xf8b7527b,
        0xd323ab73,
        0x02e2724b,
        0x8f57e31f,
        0xab2a6655,
        0x2807b2eb,
        0xc2032fb5,
        0x7b9a86c5,
        0x08a5d337,
        0x87f23028,
        0xa5b223bf,
        0x6aba0203,
        0x825ced16,
        0x1c2b8acf,
        0xb492a779,
        0xf2f0f307,
        0xe2a14e69,
        0xf4cd65da,
        0xbed50605,
        0x621fd134,
        0xfe8ac4a6,
        0x539d342e,
        0x55a0a2f3,
        0xe132058a,
        0xeb75a4f6,
        0xec390b83,
        0xefaa4060,
        0x9f065e71,
        0x1051bd6e,
        0x8af93e21,
        0x063d96dd,
        0x05aedd3e,
        0xbd464de6,
        0x8db59154,
        0x5d0571c4,
        0xd46f0406,
        0x15ff6050,
        0xfb241998,
        0xe997d6bd,
        0x43cc8940,
        0x9e7767d9,
        0x42bdb0e8,
        0x8b880789,
        0x5b38e719,
        0xeedb79c8,
        0x0a47a17c,
        0x0fe97c42,
        0x1ec9f884,
        0x00000000,
        0x86830980,
        0xed48322b,
        0x70ac1e11,
        0x724e6c5a,
        0xfffbfd0e,
        0x38560f85,
        0xd51e3dae,
        0x3927362d,
        0xd9640a0f,
        0xa621685c,
        0x54d19b5b,
        0x2e3a2436,
        0x67b10c0a,
        0xe70f9357,
        0x96d2b4ee,
        0x919e1b9b,
        0xc54f80c0,
        0x20a261dc,
        0x4b695a77,
        0x1a161c12,
        0xba0ae293,
        0x2ae5c0a0,
        0xe0433c22,
        0x171d121b,
        0x0d0b0e09,
        0xc7adf28b,
        0xa8b92db6,
        0xa9c8141e,
        0x198557f1,
        0x074caf75,
        0xddbbee99,
        0x60fda37f,
        0x269ff701,
        0xf5bc5c72,
        0x3bc54466,
        0x7e345bfb,
        0x29768b43,
        0xc6dccb23,
        0xfc68b6ed,
        0xf163b8e4,
        0xdccad731,
        0x85104263,
        0x22401397,
        0x112084c6,
        0x247d854a,
        0x3df8d2bb,
        0x3211aef9,
        0xa16dc729,
        0x2f4b1d9e,
        0x30f3dcb2,
        0x52ec0d86,
        0xe3d077c1,
        0x166c2bb3,
        0xb999a970,
        0x48fa1194,
        0x642247e9,
        0x8cc4a8fc,
        0x3f1aa0f0,
        0x2cd8567d,
        0x90ef2233,
        0x4ec78749,
        0xd1c1d938,
        0xa2fe8cca,
        0x0b3698d4,
        0x81cfa6f5,
        0xde28a57a,
        0x8e26dab7,
        0xbfa43fad,
        0x9de42c3a,
        0x920d5078,
        0xcc9b6a5f,
        0x4662547e,
        0x13c2f68d,
        0xb8e890d8,
        0xf75e2e39,
        0xaff582c3,
        0x80be9f5d,
        0x937c69d0,
        0x2da96fd5,
        0x12b3cf25,
        0x993bc8ac,
        0x7da71018,
        0x636ee89c,
        0xbb7bdb3b,
        0x7809cd26,
        0x18f46e59,
        0xb701ec9a,
        0x9aa8834f,
        0x6e65e695,
        0xe67eaaff,
        0xcf0821bc,
        0xe8e6ef15,
        0x9bd9bae7,
        0x36ce4a6f,
        0x09d4ea9f,
        0x7cd629b0,
        0xb2af31a4,
        0x23312a3f,
        0x9430c6a5,
        0x66c035a2,
        0xbc37744e,
        0xcaa6fc82,
        0xd0b0e090,
        0xd81533a7,
        0x984af104,
        0xdaf741ec,
        0x500e7fcd,
        0xf62f1791,
        0xd68d764d,
        0xb04d43ef,
        0x4d54ccaa,
        0x04dfe496,
        0xb5e39ed1,
        0x881b4c6a,
        0x1fb8c12c,
        0x517f4665,
        0xea049d5e,
        0x355d018c,
        0x7473fa87,
        0x412efb0b,
        0x1d5ab367,
        0xd25292db,
        0x5633e910,
        0x47136dd6,
        0x618c9ad7,
        0x0c7a37a1,
        0x148e59f8,
        0x3c89eb13,
        0x27eecea9,
        0xc935b761,
        0xe5ede11c,
        0xb13c7a47,
        0xdf599cd2,
        0x733f55f2,
        0xce791814,
        0x37bf73c7,
        0xcdea53f7,
        0xaa5b5ffd,
        0x6f14df3d,
        0xdb867844,
        0xf381caaf,
        0xc43eb968,
        0x342c3824,
        0x405fc2a3,
        0xc372161d,
        0x250cbce2,
        0x498b283c,
        0x9541ff0d,
        0x017139a8,
        0xb3de080c,
        0xe49cd8b4,
        0xc1906456,
        0x84617bcb,
        0xb670d532,
        0x5c74486c,
        0x5742d0b8
    ];
    var T8 = [
        0xf4a75051,
        0x4165537e,
        0x17a4c31a,
        0x275e963a,
        0xab6bcb3b,
        0x9d45f11f,
        0xfa58abac,
        0xe303934b,
        0x30fa5520,
        0x766df6ad,
        0xcc769188,
        0x024c25f5,
        0xe5d7fc4f,
        0x2acbd7c5,
        0x35448026,
        0x62a38fb5,
        0xb15a49de,
        0xba1b6725,
        0xea0e9845,
        0xfec0e15d,
        0x2f7502c3,
        0x4cf01281,
        0x4697a38d,
        0xd3f9c66b,
        0x8f5fe703,
        0x929c9515,
        0x6d7aebbf,
        0x5259da95,
        0xbe832dd4,
        0x7421d358,
        0xe0692949,
        0xc9c8448e,
        0xc2896a75,
        0x8e7978f4,
        0x583e6b99,
        0xb971dd27,
        0xe14fb6be,
        0x88ad17f0,
        0x20ac66c9,
        0xce3ab47d,
        0xdf4a1863,
        0x1a3182e5,
        0x51336097,
        0x537f4562,
        0x6477e0b1,
        0x6bae84bb,
        0x81a01cfe,
        0x082b94f9,
        0x48685870,
        0x45fd198f,
        0xde6c8794,
        0x7bf8b752,
        0x73d323ab,
        0x4b02e272,
        0x1f8f57e3,
        0x55ab2a66,
        0xeb2807b2,
        0xb5c2032f,
        0xc57b9a86,
        0x3708a5d3,
        0x2887f230,
        0xbfa5b223,
        0x036aba02,
        0x16825ced,
        0xcf1c2b8a,
        0x79b492a7,
        0x07f2f0f3,
        0x69e2a14e,
        0xdaf4cd65,
        0x05bed506,
        0x34621fd1,
        0xa6fe8ac4,
        0x2e539d34,
        0xf355a0a2,
        0x8ae13205,
        0xf6eb75a4,
        0x83ec390b,
        0x60efaa40,
        0x719f065e,
        0x6e1051bd,
        0x218af93e,
        0xdd063d96,
        0x3e05aedd,
        0xe6bd464d,
        0x548db591,
        0xc45d0571,
        0x06d46f04,
        0x5015ff60,
        0x98fb2419,
        0xbde997d6,
        0x4043cc89,
        0xd99e7767,
        0xe842bdb0,
        0x898b8807,
        0x195b38e7,
        0xc8eedb79,
        0x7c0a47a1,
        0x420fe97c,
        0x841ec9f8,
        0x00000000,
        0x80868309,
        0x2bed4832,
        0x1170ac1e,
        0x5a724e6c,
        0x0efffbfd,
        0x8538560f,
        0xaed51e3d,
        0x2d392736,
        0x0fd9640a,
        0x5ca62168,
        0x5b54d19b,
        0x362e3a24,
        0x0a67b10c,
        0x57e70f93,
        0xee96d2b4,
        0x9b919e1b,
        0xc0c54f80,
        0xdc20a261,
        0x774b695a,
        0x121a161c,
        0x93ba0ae2,
        0xa02ae5c0,
        0x22e0433c,
        0x1b171d12,
        0x090d0b0e,
        0x8bc7adf2,
        0xb6a8b92d,
        0x1ea9c814,
        0xf1198557,
        0x75074caf,
        0x99ddbbee,
        0x7f60fda3,
        0x01269ff7,
        0x72f5bc5c,
        0x663bc544,
        0xfb7e345b,
        0x4329768b,
        0x23c6dccb,
        0xedfc68b6,
        0xe4f163b8,
        0x31dccad7,
        0x63851042,
        0x97224013,
        0xc6112084,
        0x4a247d85,
        0xbb3df8d2,
        0xf93211ae,
        0x29a16dc7,
        0x9e2f4b1d,
        0xb230f3dc,
        0x8652ec0d,
        0xc1e3d077,
        0xb3166c2b,
        0x70b999a9,
        0x9448fa11,
        0xe9642247,
        0xfc8cc4a8,
        0xf03f1aa0,
        0x7d2cd856,
        0x3390ef22,
        0x494ec787,
        0x38d1c1d9,
        0xcaa2fe8c,
        0xd40b3698,
        0xf581cfa6,
        0x7ade28a5,
        0xb78e26da,
        0xadbfa43f,
        0x3a9de42c,
        0x78920d50,
        0x5fcc9b6a,
        0x7e466254,
        0x8d13c2f6,
        0xd8b8e890,
        0x39f75e2e,
        0xc3aff582,
        0x5d80be9f,
        0xd0937c69,
        0xd52da96f,
        0x2512b3cf,
        0xac993bc8,
        0x187da710,
        0x9c636ee8,
        0x3bbb7bdb,
        0x267809cd,
        0x5918f46e,
        0x9ab701ec,
        0x4f9aa883,
        0x956e65e6,
        0xffe67eaa,
        0xbccf0821,
        0x15e8e6ef,
        0xe79bd9ba,
        0x6f36ce4a,
        0x9f09d4ea,
        0xb07cd629,
        0xa4b2af31,
        0x3f23312a,
        0xa59430c6,
        0xa266c035,
        0x4ebc3774,
        0x82caa6fc,
        0x90d0b0e0,
        0xa7d81533,
        0x04984af1,
        0xecdaf741,
        0xcd500e7f,
        0x91f62f17,
        0x4dd68d76,
        0xefb04d43,
        0xaa4d54cc,
        0x9604dfe4,
        0xd1b5e39e,
        0x6a881b4c,
        0x2c1fb8c1,
        0x65517f46,
        0x5eea049d,
        0x8c355d01,
        0x877473fa,
        0x0b412efb,
        0x671d5ab3,
        0xdbd25292,
        0x105633e9,
        0xd647136d,
        0xd7618c9a,
        0xa10c7a37,
        0xf8148e59,
        0x133c89eb,
        0xa927eece,
        0x61c935b7,
        0x1ce5ede1,
        0x47b13c7a,
        0xd2df599c,
        0xf2733f55,
        0x14ce7918,
        0xc737bf73,
        0xf7cdea53,
        0xfdaa5b5f,
        0x3d6f14df,
        0x44db8678,
        0xaff381ca,
        0x68c43eb9,
        0x24342c38,
        0xa3405fc2,
        0x1dc37216,
        0xe2250cbc,
        0x3c498b28,
        0x0d9541ff,
        0xa8017139,
        0x0cb3de08,
        0xb4e49cd8,
        0x56c19064,
        0xcb84617b,
        0x32b670d5,
        0x6c5c7448,
        0xb85742d0
    ];
    // Transformations for decryption key expansion
    var U1 = [
        0x00000000,
        0x0e090d0b,
        0x1c121a16,
        0x121b171d,
        0x3824342c,
        0x362d3927,
        0x24362e3a,
        0x2a3f2331,
        0x70486858,
        0x7e416553,
        0x6c5a724e,
        0x62537f45,
        0x486c5c74,
        0x4665517f,
        0x547e4662,
        0x5a774b69,
        0xe090d0b0,
        0xee99ddbb,
        0xfc82caa6,
        0xf28bc7ad,
        0xd8b4e49c,
        0xd6bde997,
        0xc4a6fe8a,
        0xcaaff381,
        0x90d8b8e8,
        0x9ed1b5e3,
        0x8ccaa2fe,
        0x82c3aff5,
        0xa8fc8cc4,
        0xa6f581cf,
        0xb4ee96d2,
        0xbae79bd9,
        0xdb3bbb7b,
        0xd532b670,
        0xc729a16d,
        0xc920ac66,
        0xe31f8f57,
        0xed16825c,
        0xff0d9541,
        0xf104984a,
        0xab73d323,
        0xa57ade28,
        0xb761c935,
        0xb968c43e,
        0x9357e70f,
        0x9d5eea04,
        0x8f45fd19,
        0x814cf012,
        0x3bab6bcb,
        0x35a266c0,
        0x27b971dd,
        0x29b07cd6,
        0x038f5fe7,
        0x0d8652ec,
        0x1f9d45f1,
        0x119448fa,
        0x4be30393,
        0x45ea0e98,
        0x57f11985,
        0x59f8148e,
        0x73c737bf,
        0x7dce3ab4,
        0x6fd52da9,
        0x61dc20a2,
        0xad766df6,
        0xa37f60fd,
        0xb16477e0,
        0xbf6d7aeb,
        0x955259da,
        0x9b5b54d1,
        0x894043cc,
        0x87494ec7,
        0xdd3e05ae,
        0xd33708a5,
        0xc12c1fb8,
        0xcf2512b3,
        0xe51a3182,
        0xeb133c89,
        0xf9082b94,
        0xf701269f,
        0x4de6bd46,
        0x43efb04d,
        0x51f4a750,
        0x5ffdaa5b,
        0x75c2896a,
        0x7bcb8461,
        0x69d0937c,
        0x67d99e77,
        0x3daed51e,
        0x33a7d815,
        0x21bccf08,
        0x2fb5c203,
        0x058ae132,
        0x0b83ec39,
        0x1998fb24,
        0x1791f62f,
        0x764dd68d,
        0x7844db86,
        0x6a5fcc9b,
        0x6456c190,
        0x4e69e2a1,
        0x4060efaa,
        0x527bf8b7,
        0x5c72f5bc,
        0x0605bed5,
        0x080cb3de,
        0x1a17a4c3,
        0x141ea9c8,
        0x3e218af9,
        0x302887f2,
        0x223390ef,
        0x2c3a9de4,
        0x96dd063d,
        0x98d40b36,
        0x8acf1c2b,
        0x84c61120,
        0xaef93211,
        0xa0f03f1a,
        0xb2eb2807,
        0xbce2250c,
        0xe6956e65,
        0xe89c636e,
        0xfa877473,
        0xf48e7978,
        0xdeb15a49,
        0xd0b85742,
        0xc2a3405f,
        0xccaa4d54,
        0x41ecdaf7,
        0x4fe5d7fc,
        0x5dfec0e1,
        0x53f7cdea,
        0x79c8eedb,
        0x77c1e3d0,
        0x65daf4cd,
        0x6bd3f9c6,
        0x31a4b2af,
        0x3fadbfa4,
        0x2db6a8b9,
        0x23bfa5b2,
        0x09808683,
        0x07898b88,
        0x15929c95,
        0x1b9b919e,
        0xa17c0a47,
        0xaf75074c,
        0xbd6e1051,
        0xb3671d5a,
        0x99583e6b,
        0x97513360,
        0x854a247d,
        0x8b432976,
        0xd134621f,
        0xdf3d6f14,
        0xcd267809,
        0xc32f7502,
        0xe9105633,
        0xe7195b38,
        0xf5024c25,
        0xfb0b412e,
        0x9ad7618c,
        0x94de6c87,
        0x86c57b9a,
        0x88cc7691,
        0xa2f355a0,
        0xacfa58ab,
        0xbee14fb6,
        0xb0e842bd,
        0xea9f09d4,
        0xe49604df,
        0xf68d13c2,
        0xf8841ec9,
        0xd2bb3df8,
        0xdcb230f3,
        0xcea927ee,
        0xc0a02ae5,
        0x7a47b13c,
        0x744ebc37,
        0x6655ab2a,
        0x685ca621,
        0x42638510,
        0x4c6a881b,
        0x5e719f06,
        0x5078920d,
        0x0a0fd964,
        0x0406d46f,
        0x161dc372,
        0x1814ce79,
        0x322bed48,
        0x3c22e043,
        0x2e39f75e,
        0x2030fa55,
        0xec9ab701,
        0xe293ba0a,
        0xf088ad17,
        0xfe81a01c,
        0xd4be832d,
        0xdab78e26,
        0xc8ac993b,
        0xc6a59430,
        0x9cd2df59,
        0x92dbd252,
        0x80c0c54f,
        0x8ec9c844,
        0xa4f6eb75,
        0xaaffe67e,
        0xb8e4f163,
        0xb6edfc68,
        0x0c0a67b1,
        0x02036aba,
        0x10187da7,
        0x1e1170ac,
        0x342e539d,
        0x3a275e96,
        0x283c498b,
        0x26354480,
        0x7c420fe9,
        0x724b02e2,
        0x605015ff,
        0x6e5918f4,
        0x44663bc5,
        0x4a6f36ce,
        0x587421d3,
        0x567d2cd8,
        0x37a10c7a,
        0x39a80171,
        0x2bb3166c,
        0x25ba1b67,
        0x0f853856,
        0x018c355d,
        0x13972240,
        0x1d9e2f4b,
        0x47e96422,
        0x49e06929,
        0x5bfb7e34,
        0x55f2733f,
        0x7fcd500e,
        0x71c45d05,
        0x63df4a18,
        0x6dd64713,
        0xd731dcca,
        0xd938d1c1,
        0xcb23c6dc,
        0xc52acbd7,
        0xef15e8e6,
        0xe11ce5ed,
        0xf307f2f0,
        0xfd0efffb,
        0xa779b492,
        0xa970b999,
        0xbb6bae84,
        0xb562a38f,
        0x9f5d80be,
        0x91548db5,
        0x834f9aa8,
        0x8d4697a3
    ];
    var U2 = [
        0x00000000,
        0x0b0e090d,
        0x161c121a,
        0x1d121b17,
        0x2c382434,
        0x27362d39,
        0x3a24362e,
        0x312a3f23,
        0x58704868,
        0x537e4165,
        0x4e6c5a72,
        0x4562537f,
        0x74486c5c,
        0x7f466551,
        0x62547e46,
        0x695a774b,
        0xb0e090d0,
        0xbbee99dd,
        0xa6fc82ca,
        0xadf28bc7,
        0x9cd8b4e4,
        0x97d6bde9,
        0x8ac4a6fe,
        0x81caaff3,
        0xe890d8b8,
        0xe39ed1b5,
        0xfe8ccaa2,
        0xf582c3af,
        0xc4a8fc8c,
        0xcfa6f581,
        0xd2b4ee96,
        0xd9bae79b,
        0x7bdb3bbb,
        0x70d532b6,
        0x6dc729a1,
        0x66c920ac,
        0x57e31f8f,
        0x5ced1682,
        0x41ff0d95,
        0x4af10498,
        0x23ab73d3,
        0x28a57ade,
        0x35b761c9,
        0x3eb968c4,
        0x0f9357e7,
        0x049d5eea,
        0x198f45fd,
        0x12814cf0,
        0xcb3bab6b,
        0xc035a266,
        0xdd27b971,
        0xd629b07c,
        0xe7038f5f,
        0xec0d8652,
        0xf11f9d45,
        0xfa119448,
        0x934be303,
        0x9845ea0e,
        0x8557f119,
        0x8e59f814,
        0xbf73c737,
        0xb47dce3a,
        0xa96fd52d,
        0xa261dc20,
        0xf6ad766d,
        0xfda37f60,
        0xe0b16477,
        0xebbf6d7a,
        0xda955259,
        0xd19b5b54,
        0xcc894043,
        0xc787494e,
        0xaedd3e05,
        0xa5d33708,
        0xb8c12c1f,
        0xb3cf2512,
        0x82e51a31,
        0x89eb133c,
        0x94f9082b,
        0x9ff70126,
        0x464de6bd,
        0x4d43efb0,
        0x5051f4a7,
        0x5b5ffdaa,
        0x6a75c289,
        0x617bcb84,
        0x7c69d093,
        0x7767d99e,
        0x1e3daed5,
        0x1533a7d8,
        0x0821bccf,
        0x032fb5c2,
        0x32058ae1,
        0x390b83ec,
        0x241998fb,
        0x2f1791f6,
        0x8d764dd6,
        0x867844db,
        0x9b6a5fcc,
        0x906456c1,
        0xa14e69e2,
        0xaa4060ef,
        0xb7527bf8,
        0xbc5c72f5,
        0xd50605be,
        0xde080cb3,
        0xc31a17a4,
        0xc8141ea9,
        0xf93e218a,
        0xf2302887,
        0xef223390,
        0xe42c3a9d,
        0x3d96dd06,
        0x3698d40b,
        0x2b8acf1c,
        0x2084c611,
        0x11aef932,
        0x1aa0f03f,
        0x07b2eb28,
        0x0cbce225,
        0x65e6956e,
        0x6ee89c63,
        0x73fa8774,
        0x78f48e79,
        0x49deb15a,
        0x42d0b857,
        0x5fc2a340,
        0x54ccaa4d,
        0xf741ecda,
        0xfc4fe5d7,
        0xe15dfec0,
        0xea53f7cd,
        0xdb79c8ee,
        0xd077c1e3,
        0xcd65daf4,
        0xc66bd3f9,
        0xaf31a4b2,
        0xa43fadbf,
        0xb92db6a8,
        0xb223bfa5,
        0x83098086,
        0x8807898b,
        0x9515929c,
        0x9e1b9b91,
        0x47a17c0a,
        0x4caf7507,
        0x51bd6e10,
        0x5ab3671d,
        0x6b99583e,
        0x60975133,
        0x7d854a24,
        0x768b4329,
        0x1fd13462,
        0x14df3d6f,
        0x09cd2678,
        0x02c32f75,
        0x33e91056,
        0x38e7195b,
        0x25f5024c,
        0x2efb0b41,
        0x8c9ad761,
        0x8794de6c,
        0x9a86c57b,
        0x9188cc76,
        0xa0a2f355,
        0xabacfa58,
        0xb6bee14f,
        0xbdb0e842,
        0xd4ea9f09,
        0xdfe49604,
        0xc2f68d13,
        0xc9f8841e,
        0xf8d2bb3d,
        0xf3dcb230,
        0xeecea927,
        0xe5c0a02a,
        0x3c7a47b1,
        0x37744ebc,
        0x2a6655ab,
        0x21685ca6,
        0x10426385,
        0x1b4c6a88,
        0x065e719f,
        0x0d507892,
        0x640a0fd9,
        0x6f0406d4,
        0x72161dc3,
        0x791814ce,
        0x48322bed,
        0x433c22e0,
        0x5e2e39f7,
        0x552030fa,
        0x01ec9ab7,
        0x0ae293ba,
        0x17f088ad,
        0x1cfe81a0,
        0x2dd4be83,
        0x26dab78e,
        0x3bc8ac99,
        0x30c6a594,
        0x599cd2df,
        0x5292dbd2,
        0x4f80c0c5,
        0x448ec9c8,
        0x75a4f6eb,
        0x7eaaffe6,
        0x63b8e4f1,
        0x68b6edfc,
        0xb10c0a67,
        0xba02036a,
        0xa710187d,
        0xac1e1170,
        0x9d342e53,
        0x963a275e,
        0x8b283c49,
        0x80263544,
        0xe97c420f,
        0xe2724b02,
        0xff605015,
        0xf46e5918,
        0xc544663b,
        0xce4a6f36,
        0xd3587421,
        0xd8567d2c,
        0x7a37a10c,
        0x7139a801,
        0x6c2bb316,
        0x6725ba1b,
        0x560f8538,
        0x5d018c35,
        0x40139722,
        0x4b1d9e2f,
        0x2247e964,
        0x2949e069,
        0x345bfb7e,
        0x3f55f273,
        0x0e7fcd50,
        0x0571c45d,
        0x1863df4a,
        0x136dd647,
        0xcad731dc,
        0xc1d938d1,
        0xdccb23c6,
        0xd7c52acb,
        0xe6ef15e8,
        0xede11ce5,
        0xf0f307f2,
        0xfbfd0eff,
        0x92a779b4,
        0x99a970b9,
        0x84bb6bae,
        0x8fb562a3,
        0xbe9f5d80,
        0xb591548d,
        0xa8834f9a,
        0xa38d4697
    ];
    var U3 = [
        0x00000000,
        0x0d0b0e09,
        0x1a161c12,
        0x171d121b,
        0x342c3824,
        0x3927362d,
        0x2e3a2436,
        0x23312a3f,
        0x68587048,
        0x65537e41,
        0x724e6c5a,
        0x7f456253,
        0x5c74486c,
        0x517f4665,
        0x4662547e,
        0x4b695a77,
        0xd0b0e090,
        0xddbbee99,
        0xcaa6fc82,
        0xc7adf28b,
        0xe49cd8b4,
        0xe997d6bd,
        0xfe8ac4a6,
        0xf381caaf,
        0xb8e890d8,
        0xb5e39ed1,
        0xa2fe8cca,
        0xaff582c3,
        0x8cc4a8fc,
        0x81cfa6f5,
        0x96d2b4ee,
        0x9bd9bae7,
        0xbb7bdb3b,
        0xb670d532,
        0xa16dc729,
        0xac66c920,
        0x8f57e31f,
        0x825ced16,
        0x9541ff0d,
        0x984af104,
        0xd323ab73,
        0xde28a57a,
        0xc935b761,
        0xc43eb968,
        0xe70f9357,
        0xea049d5e,
        0xfd198f45,
        0xf012814c,
        0x6bcb3bab,
        0x66c035a2,
        0x71dd27b9,
        0x7cd629b0,
        0x5fe7038f,
        0x52ec0d86,
        0x45f11f9d,
        0x48fa1194,
        0x03934be3,
        0x0e9845ea,
        0x198557f1,
        0x148e59f8,
        0x37bf73c7,
        0x3ab47dce,
        0x2da96fd5,
        0x20a261dc,
        0x6df6ad76,
        0x60fda37f,
        0x77e0b164,
        0x7aebbf6d,
        0x59da9552,
        0x54d19b5b,
        0x43cc8940,
        0x4ec78749,
        0x05aedd3e,
        0x08a5d337,
        0x1fb8c12c,
        0x12b3cf25,
        0x3182e51a,
        0x3c89eb13,
        0x2b94f908,
        0x269ff701,
        0xbd464de6,
        0xb04d43ef,
        0xa75051f4,
        0xaa5b5ffd,
        0x896a75c2,
        0x84617bcb,
        0x937c69d0,
        0x9e7767d9,
        0xd51e3dae,
        0xd81533a7,
        0xcf0821bc,
        0xc2032fb5,
        0xe132058a,
        0xec390b83,
        0xfb241998,
        0xf62f1791,
        0xd68d764d,
        0xdb867844,
        0xcc9b6a5f,
        0xc1906456,
        0xe2a14e69,
        0xefaa4060,
        0xf8b7527b,
        0xf5bc5c72,
        0xbed50605,
        0xb3de080c,
        0xa4c31a17,
        0xa9c8141e,
        0x8af93e21,
        0x87f23028,
        0x90ef2233,
        0x9de42c3a,
        0x063d96dd,
        0x0b3698d4,
        0x1c2b8acf,
        0x112084c6,
        0x3211aef9,
        0x3f1aa0f0,
        0x2807b2eb,
        0x250cbce2,
        0x6e65e695,
        0x636ee89c,
        0x7473fa87,
        0x7978f48e,
        0x5a49deb1,
        0x5742d0b8,
        0x405fc2a3,
        0x4d54ccaa,
        0xdaf741ec,
        0xd7fc4fe5,
        0xc0e15dfe,
        0xcdea53f7,
        0xeedb79c8,
        0xe3d077c1,
        0xf4cd65da,
        0xf9c66bd3,
        0xb2af31a4,
        0xbfa43fad,
        0xa8b92db6,
        0xa5b223bf,
        0x86830980,
        0x8b880789,
        0x9c951592,
        0x919e1b9b,
        0x0a47a17c,
        0x074caf75,
        0x1051bd6e,
        0x1d5ab367,
        0x3e6b9958,
        0x33609751,
        0x247d854a,
        0x29768b43,
        0x621fd134,
        0x6f14df3d,
        0x7809cd26,
        0x7502c32f,
        0x5633e910,
        0x5b38e719,
        0x4c25f502,
        0x412efb0b,
        0x618c9ad7,
        0x6c8794de,
        0x7b9a86c5,
        0x769188cc,
        0x55a0a2f3,
        0x58abacfa,
        0x4fb6bee1,
        0x42bdb0e8,
        0x09d4ea9f,
        0x04dfe496,
        0x13c2f68d,
        0x1ec9f884,
        0x3df8d2bb,
        0x30f3dcb2,
        0x27eecea9,
        0x2ae5c0a0,
        0xb13c7a47,
        0xbc37744e,
        0xab2a6655,
        0xa621685c,
        0x85104263,
        0x881b4c6a,
        0x9f065e71,
        0x920d5078,
        0xd9640a0f,
        0xd46f0406,
        0xc372161d,
        0xce791814,
        0xed48322b,
        0xe0433c22,
        0xf75e2e39,
        0xfa552030,
        0xb701ec9a,
        0xba0ae293,
        0xad17f088,
        0xa01cfe81,
        0x832dd4be,
        0x8e26dab7,
        0x993bc8ac,
        0x9430c6a5,
        0xdf599cd2,
        0xd25292db,
        0xc54f80c0,
        0xc8448ec9,
        0xeb75a4f6,
        0xe67eaaff,
        0xf163b8e4,
        0xfc68b6ed,
        0x67b10c0a,
        0x6aba0203,
        0x7da71018,
        0x70ac1e11,
        0x539d342e,
        0x5e963a27,
        0x498b283c,
        0x44802635,
        0x0fe97c42,
        0x02e2724b,
        0x15ff6050,
        0x18f46e59,
        0x3bc54466,
        0x36ce4a6f,
        0x21d35874,
        0x2cd8567d,
        0x0c7a37a1,
        0x017139a8,
        0x166c2bb3,
        0x1b6725ba,
        0x38560f85,
        0x355d018c,
        0x22401397,
        0x2f4b1d9e,
        0x642247e9,
        0x692949e0,
        0x7e345bfb,
        0x733f55f2,
        0x500e7fcd,
        0x5d0571c4,
        0x4a1863df,
        0x47136dd6,
        0xdccad731,
        0xd1c1d938,
        0xc6dccb23,
        0xcbd7c52a,
        0xe8e6ef15,
        0xe5ede11c,
        0xf2f0f307,
        0xfffbfd0e,
        0xb492a779,
        0xb999a970,
        0xae84bb6b,
        0xa38fb562,
        0x80be9f5d,
        0x8db59154,
        0x9aa8834f,
        0x97a38d46
    ];
    var U4 = [
        0x00000000,
        0x090d0b0e,
        0x121a161c,
        0x1b171d12,
        0x24342c38,
        0x2d392736,
        0x362e3a24,
        0x3f23312a,
        0x48685870,
        0x4165537e,
        0x5a724e6c,
        0x537f4562,
        0x6c5c7448,
        0x65517f46,
        0x7e466254,
        0x774b695a,
        0x90d0b0e0,
        0x99ddbbee,
        0x82caa6fc,
        0x8bc7adf2,
        0xb4e49cd8,
        0xbde997d6,
        0xa6fe8ac4,
        0xaff381ca,
        0xd8b8e890,
        0xd1b5e39e,
        0xcaa2fe8c,
        0xc3aff582,
        0xfc8cc4a8,
        0xf581cfa6,
        0xee96d2b4,
        0xe79bd9ba,
        0x3bbb7bdb,
        0x32b670d5,
        0x29a16dc7,
        0x20ac66c9,
        0x1f8f57e3,
        0x16825ced,
        0x0d9541ff,
        0x04984af1,
        0x73d323ab,
        0x7ade28a5,
        0x61c935b7,
        0x68c43eb9,
        0x57e70f93,
        0x5eea049d,
        0x45fd198f,
        0x4cf01281,
        0xab6bcb3b,
        0xa266c035,
        0xb971dd27,
        0xb07cd629,
        0x8f5fe703,
        0x8652ec0d,
        0x9d45f11f,
        0x9448fa11,
        0xe303934b,
        0xea0e9845,
        0xf1198557,
        0xf8148e59,
        0xc737bf73,
        0xce3ab47d,
        0xd52da96f,
        0xdc20a261,
        0x766df6ad,
        0x7f60fda3,
        0x6477e0b1,
        0x6d7aebbf,
        0x5259da95,
        0x5b54d19b,
        0x4043cc89,
        0x494ec787,
        0x3e05aedd,
        0x3708a5d3,
        0x2c1fb8c1,
        0x2512b3cf,
        0x1a3182e5,
        0x133c89eb,
        0x082b94f9,
        0x01269ff7,
        0xe6bd464d,
        0xefb04d43,
        0xf4a75051,
        0xfdaa5b5f,
        0xc2896a75,
        0xcb84617b,
        0xd0937c69,
        0xd99e7767,
        0xaed51e3d,
        0xa7d81533,
        0xbccf0821,
        0xb5c2032f,
        0x8ae13205,
        0x83ec390b,
        0x98fb2419,
        0x91f62f17,
        0x4dd68d76,
        0x44db8678,
        0x5fcc9b6a,
        0x56c19064,
        0x69e2a14e,
        0x60efaa40,
        0x7bf8b752,
        0x72f5bc5c,
        0x05bed506,
        0x0cb3de08,
        0x17a4c31a,
        0x1ea9c814,
        0x218af93e,
        0x2887f230,
        0x3390ef22,
        0x3a9de42c,
        0xdd063d96,
        0xd40b3698,
        0xcf1c2b8a,
        0xc6112084,
        0xf93211ae,
        0xf03f1aa0,
        0xeb2807b2,
        0xe2250cbc,
        0x956e65e6,
        0x9c636ee8,
        0x877473fa,
        0x8e7978f4,
        0xb15a49de,
        0xb85742d0,
        0xa3405fc2,
        0xaa4d54cc,
        0xecdaf741,
        0xe5d7fc4f,
        0xfec0e15d,
        0xf7cdea53,
        0xc8eedb79,
        0xc1e3d077,
        0xdaf4cd65,
        0xd3f9c66b,
        0xa4b2af31,
        0xadbfa43f,
        0xb6a8b92d,
        0xbfa5b223,
        0x80868309,
        0x898b8807,
        0x929c9515,
        0x9b919e1b,
        0x7c0a47a1,
        0x75074caf,
        0x6e1051bd,
        0x671d5ab3,
        0x583e6b99,
        0x51336097,
        0x4a247d85,
        0x4329768b,
        0x34621fd1,
        0x3d6f14df,
        0x267809cd,
        0x2f7502c3,
        0x105633e9,
        0x195b38e7,
        0x024c25f5,
        0x0b412efb,
        0xd7618c9a,
        0xde6c8794,
        0xc57b9a86,
        0xcc769188,
        0xf355a0a2,
        0xfa58abac,
        0xe14fb6be,
        0xe842bdb0,
        0x9f09d4ea,
        0x9604dfe4,
        0x8d13c2f6,
        0x841ec9f8,
        0xbb3df8d2,
        0xb230f3dc,
        0xa927eece,
        0xa02ae5c0,
        0x47b13c7a,
        0x4ebc3774,
        0x55ab2a66,
        0x5ca62168,
        0x63851042,
        0x6a881b4c,
        0x719f065e,
        0x78920d50,
        0x0fd9640a,
        0x06d46f04,
        0x1dc37216,
        0x14ce7918,
        0x2bed4832,
        0x22e0433c,
        0x39f75e2e,
        0x30fa5520,
        0x9ab701ec,
        0x93ba0ae2,
        0x88ad17f0,
        0x81a01cfe,
        0xbe832dd4,
        0xb78e26da,
        0xac993bc8,
        0xa59430c6,
        0xd2df599c,
        0xdbd25292,
        0xc0c54f80,
        0xc9c8448e,
        0xf6eb75a4,
        0xffe67eaa,
        0xe4f163b8,
        0xedfc68b6,
        0x0a67b10c,
        0x036aba02,
        0x187da710,
        0x1170ac1e,
        0x2e539d34,
        0x275e963a,
        0x3c498b28,
        0x35448026,
        0x420fe97c,
        0x4b02e272,
        0x5015ff60,
        0x5918f46e,
        0x663bc544,
        0x6f36ce4a,
        0x7421d358,
        0x7d2cd856,
        0xa10c7a37,
        0xa8017139,
        0xb3166c2b,
        0xba1b6725,
        0x8538560f,
        0x8c355d01,
        0x97224013,
        0x9e2f4b1d,
        0xe9642247,
        0xe0692949,
        0xfb7e345b,
        0xf2733f55,
        0xcd500e7f,
        0xc45d0571,
        0xdf4a1863,
        0xd647136d,
        0x31dccad7,
        0x38d1c1d9,
        0x23c6dccb,
        0x2acbd7c5,
        0x15e8e6ef,
        0x1ce5ede1,
        0x07f2f0f3,
        0x0efffbfd,
        0x79b492a7,
        0x70b999a9,
        0x6bae84bb,
        0x62a38fb5,
        0x5d80be9f,
        0x548db591,
        0x4f9aa883,
        0x4697a38d
    ];
    function convertToInt32(bytes) {
        var result = [];
        for(var i = 0; i < bytes.length; i += 4)result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
        return result;
    }
    var AES = function(key) {
        if (!(this instanceof AES)) throw Error("AES must be instanitated with `new`");
        Object.defineProperty(this, "key", {
            value: coerceArray(key, true)
        });
        this._prepare();
    };
    AES.prototype._prepare = function() {
        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
        // encryption round keys
        this._Ke = [];
        // decryption round keys
        this._Kd = [];
        for(var i = 0; i <= rounds; i++){
            this._Ke.push([
                0,
                0,
                0,
                0
            ]);
            this._Kd.push([
                0,
                0,
                0,
                0
            ]);
        }
        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;
        // convert the key into ints
        var tk = convertToInt32(this.key);
        // copy values into round key arrays
        var index;
        for(var i = 0; i < KC; i++){
            index = i >> 2;
            this._Ke[index][i % 4] = tk[i];
            this._Kd[rounds - index][i % 4] = tk[i];
        }
        // key expansion (fips-197 section 5.2)
        var rconpointer = 0;
        var t = KC, tt;
        while(t < roundKeyCount){
            tt = tk[KC - 1];
            tk[0] ^= S[tt >> 16 & 0xFF] << 24 ^ S[tt >> 8 & 0xFF] << 16 ^ S[tt & 0xFF] << 8 ^ S[tt >> 24 & 0xFF] ^ rcon[rconpointer] << 24;
            rconpointer += 1;
            // key expansion (for non-256 bit)
            if (KC != 8) for(var i = 1; i < KC; i++)tk[i] ^= tk[i - 1];
            else {
                for(var i = 1; i < KC / 2; i++)tk[i] ^= tk[i - 1];
                tt = tk[KC / 2 - 1];
                tk[KC / 2] ^= S[tt & 0xFF] ^ S[tt >> 8 & 0xFF] << 8 ^ S[tt >> 16 & 0xFF] << 16 ^ S[tt >> 24 & 0xFF] << 24;
                for(var i = KC / 2 + 1; i < KC; i++)tk[i] ^= tk[i - 1];
            }
            // copy values into round key arrays
            var i = 0, r, c;
            while(i < KC && t < roundKeyCount){
                r = t >> 2;
                c = t % 4;
                this._Ke[r][c] = tk[i];
                this._Kd[rounds - r][c] = tk[i++];
                t++;
            }
        }
        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
        for(var r = 1; r < rounds; r++)for(var c = 0; c < 4; c++){
            tt = this._Kd[r][c];
            this._Kd[r][c] = U1[tt >> 24 & 0xFF] ^ U2[tt >> 16 & 0xFF] ^ U3[tt >> 8 & 0xFF] ^ U4[tt & 0xFF];
        }
    };
    AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) throw new Error("invalid plaintext size (must be 16 bytes)");
        var rounds = this._Ke.length - 1;
        var a = [
            0,
            0,
            0,
            0
        ];
        // convert plaintext to (ints ^ key)
        var t = convertToInt32(plaintext);
        for(var i = 0; i < 4; i++)t[i] ^= this._Ke[0][i];
        // apply round transforms
        for(var r = 1; r < rounds; r++){
            for(var i = 0; i < 4; i++)a[i] = T1[t[i] >> 24 & 0xff] ^ T2[t[(i + 1) % 4] >> 16 & 0xff] ^ T3[t[(i + 2) % 4] >> 8 & 0xff] ^ T4[t[(i + 3) % 4] & 0xff] ^ this._Ke[r][i];
            t = a.slice();
        }
        // the last round is special
        var result = createArray(16), tt;
        for(var i = 0; i < 4; i++){
            tt = this._Ke[rounds][i];
            result[4 * i] = (S[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;
            result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;
            result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;
            result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;
        }
        return result;
    };
    AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) throw new Error("invalid ciphertext size (must be 16 bytes)");
        var rounds = this._Kd.length - 1;
        var a = [
            0,
            0,
            0,
            0
        ];
        // convert plaintext to (ints ^ key)
        var t = convertToInt32(ciphertext);
        for(var i = 0; i < 4; i++)t[i] ^= this._Kd[0][i];
        // apply round transforms
        for(var r = 1; r < rounds; r++){
            for(var i = 0; i < 4; i++)a[i] = T5[t[i] >> 24 & 0xff] ^ T6[t[(i + 3) % 4] >> 16 & 0xff] ^ T7[t[(i + 2) % 4] >> 8 & 0xff] ^ T8[t[(i + 1) % 4] & 0xff] ^ this._Kd[r][i];
            t = a.slice();
        }
        // the last round is special
        var result = createArray(16), tt;
        for(var i = 0; i < 4; i++){
            tt = this._Kd[rounds][i];
            result[4 * i] = (Si[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;
            result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;
            result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;
            result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;
        }
        return result;
    };
    /**
     *  Mode Of Operation - Electonic Codebook (ECB)
     */ var ModeOfOperationECB = function(key) {
        if (!(this instanceof ModeOfOperationECB)) throw Error("AES must be instanitated with `new`");
        this.description = "Electronic Code Block";
        this.name = "ecb";
        this._aes = new AES(key);
    };
    ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for(var i = 0; i < plaintext.length; i += 16){
            copyArray(plaintext, block, 0, i, i + 16);
            block = this._aes.encrypt(block);
            copyArray(block, ciphertext, i);
        }
        return ciphertext;
    };
    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for(var i = 0; i < ciphertext.length; i += 16){
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);
            copyArray(block, plaintext, i);
        }
        return plaintext;
    };
    /**
     *  Mode Of Operation - Cipher Block Chaining (CBC)
     */ var ModeOfOperationCBC = function(key, iv) {
        if (!(this instanceof ModeOfOperationCBC)) throw Error("AES must be instanitated with `new`");
        this.description = "Cipher Block Chaining";
        this.name = "cbc";
        if (!iv) iv = createArray(16);
        else if (iv.length != 16) throw new Error("invalid initialation vector size (must be 16 bytes)");
        this._lastCipherblock = coerceArray(iv, true);
        this._aes = new AES(key);
    };
    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);
        if (plaintext.length % 16 !== 0) throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);
        for(var i = 0; i < plaintext.length; i += 16){
            copyArray(plaintext, block, 0, i, i + 16);
            for(var j = 0; j < 16; j++)block[j] ^= this._lastCipherblock[j];
            this._lastCipherblock = this._aes.encrypt(block);
            copyArray(this._lastCipherblock, ciphertext, i);
        }
        return ciphertext;
    };
    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);
        if (ciphertext.length % 16 !== 0) throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);
        for(var i = 0; i < ciphertext.length; i += 16){
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);
            for(var j = 0; j < 16; j++)plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
        }
        return plaintext;
    };
    /**
     *  Mode Of Operation - Cipher Feedback (CFB)
     */ var ModeOfOperationCFB = function(key, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) throw Error("AES must be instanitated with `new`");
        this.description = "Cipher Feedback";
        this.name = "cfb";
        if (!iv) iv = createArray(16);
        else if (iv.length != 16) throw new Error("invalid initialation vector size (must be 16 size)");
        if (!segmentSize) segmentSize = 1;
        this.segmentSize = segmentSize;
        this._shiftRegister = coerceArray(iv, true);
        this._aes = new AES(key);
    };
    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if (plaintext.length % this.segmentSize != 0) throw new Error("invalid plaintext size (must be segmentSize bytes)");
        var encrypted = coerceArray(plaintext, true);
        var xorSegment;
        for(var i = 0; i < encrypted.length; i += this.segmentSize){
            xorSegment = this._aes.encrypt(this._shiftRegister);
            for(var j = 0; j < this.segmentSize; j++)encrypted[i + j] ^= xorSegment[j];
            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return encrypted;
    };
    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length % this.segmentSize != 0) throw new Error("invalid ciphertext size (must be segmentSize bytes)");
        var plaintext = coerceArray(ciphertext, true);
        var xorSegment;
        for(var i = 0; i < plaintext.length; i += this.segmentSize){
            xorSegment = this._aes.encrypt(this._shiftRegister);
            for(var j = 0; j < this.segmentSize; j++)plaintext[i + j] ^= xorSegment[j];
            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }
        return plaintext;
    };
    /**
     *  Mode Of Operation - Output Feedback (OFB)
     */ var ModeOfOperationOFB = function(key, iv) {
        if (!(this instanceof ModeOfOperationOFB)) throw Error("AES must be instanitated with `new`");
        this.description = "Output Feedback";
        this.name = "ofb";
        if (!iv) iv = createArray(16);
        else if (iv.length != 16) throw new Error("invalid initialation vector size (must be 16 bytes)");
        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;
        this._aes = new AES(key);
    };
    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for(var i = 0; i < encrypted.length; i++){
            if (this._lastPrecipherIndex === 16) {
                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                this._lastPrecipherIndex = 0;
            }
            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }
        return encrypted;
    };
    // Decryption is symetric
    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
    /**
     *  Counter object for CTR common mode of operation
     */ var Counter = function(initialValue) {
        if (!(this instanceof Counter)) throw Error("Counter must be instanitated with `new`");
        // We allow 0, but anything false-ish uses the default 1
        if (initialValue !== 0 && !initialValue) initialValue = 1;
        if (typeof initialValue === "number") {
            this._counter = createArray(16);
            this.setValue(initialValue);
        } else this.setBytes(initialValue);
    };
    Counter.prototype.setValue = function(value) {
        if (typeof value !== "number" || parseInt(value) != value) throw new Error("invalid counter value (must be an integer)");
        for(var index = 15; index >= 0; --index){
            this._counter[index] = value % 256;
            value = value >> 8;
        }
    };
    Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);
        if (bytes.length != 16) throw new Error("invalid counter bytes size (must be 16 bytes)");
        this._counter = bytes;
    };
    Counter.prototype.increment = function() {
        for(var i = 15; i >= 0; i--)if (this._counter[i] === 255) this._counter[i] = 0;
        else {
            this._counter[i]++;
            break;
        }
    };
    /**
     *  Mode Of Operation - Counter (CTR)
     */ var ModeOfOperationCTR = function(key, counter) {
        if (!(this instanceof ModeOfOperationCTR)) throw Error("AES must be instanitated with `new`");
        this.description = "Counter";
        this.name = "ctr";
        if (!(counter instanceof Counter)) counter = new Counter(counter);
        this._counter = counter;
        this._remainingCounter = null;
        this._remainingCounterIndex = 16;
        this._aes = new AES(key);
    };
    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);
        for(var i = 0; i < encrypted.length; i++){
            if (this._remainingCounterIndex === 16) {
                this._remainingCounter = this._aes.encrypt(this._counter._counter);
                this._remainingCounterIndex = 0;
                this._counter.increment();
            }
            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }
        return encrypted;
    };
    // Decryption is symetric
    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
    ///////////////////////
    // Padding
    // See:https://tools.ietf.org/html/rfc2315
    function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - data.length % 16;
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for(var i = data.length; i < result.length; i++)result[i] = padder;
        return result;
    }
    function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) throw new Error("PKCS#7 invalid length");
        var padder = data[data.length - 1];
        if (padder > 16) throw new Error("PKCS#7 padding byte out of range");
        var length = data.length - padder;
        for(var i = 0; i < padder; i++){
            if (data[length + i] !== padder) throw new Error("PKCS#7 invalid padding byte");
        }
        var result = createArray(length);
        copyArray(data, result, 0, 0, length);
        return result;
    }
    ///////////////////////
    // Exporting
    // The block cipher
    var aesjs = {
        AES: AES,
        Counter: Counter,
        ModeOfOperation: {
            ecb: ModeOfOperationECB,
            cbc: ModeOfOperationCBC,
            cfb: ModeOfOperationCFB,
            ofb: ModeOfOperationOFB,
            ctr: ModeOfOperationCTR
        },
        utils: {
            hex: convertHex,
            utf8: convertUtf8
        },
        padding: {
            pkcs7: {
                pad: pkcs7pad,
                strip: pkcs7strip
            }
        },
        _arrayTest: {
            coerceArray: coerceArray,
            createArray: createArray,
            copyArray: copyArray
        }
    };
    module.exports = aesjs;
})(this);

},{}],"ijo9y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "json-wallets/5.6.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"d3wDI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "looseArrayify", ()=>looseArrayify);
parcelHelpers.export(exports, "zpad", ()=>zpad);
parcelHelpers.export(exports, "getPassword", ()=>getPassword);
parcelHelpers.export(exports, "searchPath", ()=>searchPath);
// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
parcelHelpers.export(exports, "uuidV4", ()=>uuidV4);
var _bytes = require("@ethersproject/bytes");
var _strings = require("@ethersproject/strings");
"use strict";
function looseArrayify(hexString) {
    if (typeof hexString === "string" && hexString.substring(0, 2) !== "0x") hexString = "0x" + hexString;
    return (0, _bytes.arrayify)(hexString);
}
function zpad(value, length) {
    value = String(value);
    while(value.length < length)value = "0" + value;
    return value;
}
function getPassword(password) {
    if (typeof password === "string") return (0, _strings.toUtf8Bytes)(password, (0, _strings.UnicodeNormalizationForm).NFKC);
    return (0, _bytes.arrayify)(password);
}
function searchPath(object, path) {
    let currentChild = object;
    const comps = path.toLowerCase().split("/");
    for(let i = 0; i < comps.length; i++){
        // Search for a child object with a case-insensitive matching key
        let matchingChild = null;
        for(const key in currentChild)if (key.toLowerCase() === comps[i]) {
            matchingChild = currentChild[key];
            break;
        }
        // Didn't find one. :'(
        if (matchingChild === null) return null;
        // Now check this child...
        currentChild = matchingChild;
    }
    return currentChild;
}
function uuidV4(randomBytes) {
    const bytes = (0, _bytes.arrayify)(randomBytes);
    // Section: 4.1.3:
    // - time_hi_and_version[12:16] = 0b0100
    bytes[6] = bytes[6] & 0x0f | 0x40;
    // Section 4.4
    // - clock_seq_hi_and_reserved[6] = 0b0
    // - clock_seq_hi_and_reserved[7] = 0b1
    bytes[8] = bytes[8] & 0x3f | 0x80;
    const value = (0, _bytes.hexlify)(bytes);
    return [
        value.substring(2, 10),
        value.substring(10, 14),
        value.substring(14, 18),
        value.substring(18, 22),
        value.substring(22, 34), 
    ].join("-");
}

},{"@ethersproject/bytes":"htrqZ","@ethersproject/strings":"5TGFZ","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"1ZcmH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isCrowdsaleWallet", ()=>isCrowdsaleWallet);
parcelHelpers.export(exports, "isKeystoreWallet", ()=>isKeystoreWallet);
//export function isJsonWallet(json: string): boolean {
//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
//}
parcelHelpers.export(exports, "getJsonWalletAddress", ()=>getJsonWalletAddress);
var _address = require("@ethersproject/address");
"use strict";
function isCrowdsaleWallet(json) {
    let data = null;
    try {
        data = JSON.parse(json);
    } catch (error) {
        return false;
    }
    return data.encseed && data.ethaddr;
}
function isKeystoreWallet(json) {
    let data = null;
    try {
        data = JSON.parse(json);
    } catch (error) {
        return false;
    }
    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) return false;
    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
    return true;
}
function getJsonWalletAddress(json) {
    if (isCrowdsaleWallet(json)) try {
        return (0, _address.getAddress)(JSON.parse(json).ethaddr);
    } catch (error) {
        return null;
    }
    if (isKeystoreWallet(json)) try {
        return (0, _address.getAddress)(JSON.parse(json).address);
    } catch (error1) {
        return null;
    }
    return null;
}

},{"@ethersproject/address":"ggdAz","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"cTqKv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "KeystoreAccount", ()=>KeystoreAccount);
parcelHelpers.export(exports, "decryptSync", ()=>decryptSync);
parcelHelpers.export(exports, "decrypt", ()=>decrypt);
parcelHelpers.export(exports, "encrypt", ()=>encrypt);
var _aesJs = require("aes-js");
var _aesJsDefault = parcelHelpers.interopDefault(_aesJs);
var _scryptJs = require("scrypt-js");
var _scryptJsDefault = parcelHelpers.interopDefault(_scryptJs);
var _address = require("@ethersproject/address");
var _bytes = require("@ethersproject/bytes");
var _hdnode = require("@ethersproject/hdnode");
var _keccak256 = require("@ethersproject/keccak256");
var _pbkdf2 = require("@ethersproject/pbkdf2");
var _random = require("@ethersproject/random");
var _properties = require("@ethersproject/properties");
var _transactions = require("@ethersproject/transactions");
var _utils = require("./utils");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
// Exported Types
function hasMnemonic(value) {
    return value != null && value.mnemonic && value.mnemonic.phrase;
}
class KeystoreAccount extends (0, _properties.Description) {
    isKeystoreAccount(value) {
        return !!(value && value._isKeystoreAccount);
    }
}
function _decrypt(data, key, ciphertext) {
    const cipher = (0, _utils.searchPath)(data, "crypto/cipher");
    if (cipher === "aes-128-ctr") {
        const iv = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "crypto/cipherparams/iv"));
        const counter = new (0, _aesJsDefault.default).Counter(iv);
        const aesCtr = new (0, _aesJsDefault.default).ModeOfOperation.ctr(key, counter);
        return (0, _bytes.arrayify)(aesCtr.decrypt(ciphertext));
    }
    return null;
}
function _getAccount(data, key) {
    const ciphertext = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "crypto/ciphertext"));
    const computedMAC = (0, _bytes.hexlify)((0, _keccak256.keccak256)((0, _bytes.concat)([
        key.slice(16, 32),
        ciphertext
    ]))).substring(2);
    if (computedMAC !== (0, _utils.searchPath)(data, "crypto/mac").toLowerCase()) throw new Error("invalid password");
    const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
    if (!privateKey) logger.throwError("unsupported cipher", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
        operation: "decrypt"
    });
    const mnemonicKey = key.slice(32, 64);
    const address = (0, _transactions.computeAddress)(privateKey);
    if (data.address) {
        let check = data.address.toLowerCase();
        if (check.substring(0, 2) !== "0x") check = "0x" + check;
        if ((0, _address.getAddress)(check) !== address) throw new Error("address mismatch");
    }
    const account = {
        _isKeystoreAccount: true,
        address: address,
        privateKey: (0, _bytes.hexlify)(privateKey)
    };
    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
    if ((0, _utils.searchPath)(data, "x-ethers/version") === "0.1") {
        const mnemonicCiphertext = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "x-ethers/mnemonicCiphertext"));
        const mnemonicIv = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "x-ethers/mnemonicCounter"));
        const mnemonicCounter = new (0, _aesJsDefault.default).Counter(mnemonicIv);
        const mnemonicAesCtr = new (0, _aesJsDefault.default).ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
        const path = (0, _utils.searchPath)(data, "x-ethers/path") || (0, _hdnode.defaultPath);
        const locale = (0, _utils.searchPath)(data, "x-ethers/locale") || "en";
        const entropy = (0, _bytes.arrayify)(mnemonicAesCtr.decrypt(mnemonicCiphertext));
        try {
            const mnemonic = (0, _hdnode.entropyToMnemonic)(entropy, locale);
            const node = (0, _hdnode.HDNode).fromMnemonic(mnemonic, null, locale).derivePath(path);
            if (node.privateKey != account.privateKey) throw new Error("mnemonic mismatch");
            account.mnemonic = node.mnemonic;
        } catch (error) {
            // If we don't have the locale wordlist installed to
            // read this mnemonic, just bail and don't set the
            // mnemonic
            if (error.code !== (0, _logger.Logger).errors.INVALID_ARGUMENT || error.argument !== "wordlist") throw error;
        }
    }
    return new KeystoreAccount(account);
}
function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
    return (0, _bytes.arrayify)((0, _pbkdf2.pbkdf2)(passwordBytes, salt, count, dkLen, prfFunc));
}
function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
}
function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
    const passwordBytes = (0, _utils.getPassword)(password);
    const kdf = (0, _utils.searchPath)(data, "crypto/kdf");
    if (kdf && typeof kdf === "string") {
        const throwError = function(name, value) {
            return logger.throwArgumentError("invalid key-derivation function parameters", name, value);
        };
        if (kdf.toLowerCase() === "scrypt") {
            const salt = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "crypto/kdfparams/salt"));
            const N = parseInt((0, _utils.searchPath)(data, "crypto/kdfparams/n"));
            const r = parseInt((0, _utils.searchPath)(data, "crypto/kdfparams/r"));
            const p = parseInt((0, _utils.searchPath)(data, "crypto/kdfparams/p"));
            // Check for all required parameters
            if (!N || !r || !p) throwError("kdf", kdf);
            // Make sure N is a power of 2
            if ((N & N - 1) !== 0) throwError("N", N);
            const dkLen = parseInt((0, _utils.searchPath)(data, "crypto/kdfparams/dklen"));
            if (dkLen !== 32) throwError("dklen", dkLen);
            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
        } else if (kdf.toLowerCase() === "pbkdf2") {
            const salt = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "crypto/kdfparams/salt"));
            let prfFunc = null;
            const prf = (0, _utils.searchPath)(data, "crypto/kdfparams/prf");
            if (prf === "hmac-sha256") prfFunc = "sha256";
            else if (prf === "hmac-sha512") prfFunc = "sha512";
            else throwError("prf", prf);
            const count = parseInt((0, _utils.searchPath)(data, "crypto/kdfparams/c"));
            const dkLen = parseInt((0, _utils.searchPath)(data, "crypto/kdfparams/dklen"));
            if (dkLen !== 32) throwError("dklen", dkLen);
            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
        }
    }
    return logger.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
}
function decryptSync(json, password) {
    const data = JSON.parse(json);
    const key = _computeKdfKey(data, password, pbkdf2Sync, (0, _scryptJsDefault.default).syncScrypt);
    return _getAccount(data, key);
}
function decrypt(json, password, progressCallback) {
    return __awaiter(this, void 0, void 0, function*() {
        const data = JSON.parse(json);
        const key = yield _computeKdfKey(data, password, pbkdf2, (0, _scryptJsDefault.default).scrypt, progressCallback);
        return _getAccount(data, key);
    });
}
function encrypt(account, password, options, progressCallback) {
    try {
        // Check the address matches the private key
        if ((0, _address.getAddress)(account.address) !== (0, _transactions.computeAddress)(account.privateKey)) throw new Error("address/privateKey mismatch");
        // Check the mnemonic (if any) matches the private key
        if (hasMnemonic(account)) {
            const mnemonic = account.mnemonic;
            const node = (0, _hdnode.HDNode).fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || (0, _hdnode.defaultPath));
            if (node.privateKey != account.privateKey) throw new Error("mnemonic mismatch");
        }
    } catch (e) {
        return Promise.reject(e);
    }
    // The options are optional, so adjust the call as needed
    if (typeof options === "function" && !progressCallback) {
        progressCallback = options;
        options = {};
    }
    if (!options) options = {};
    const privateKey = (0, _bytes.arrayify)(account.privateKey);
    const passwordBytes = (0, _utils.getPassword)(password);
    let entropy = null;
    let path = null;
    let locale = null;
    if (hasMnemonic(account)) {
        const srcMnemonic = account.mnemonic;
        entropy = (0, _bytes.arrayify)((0, _hdnode.mnemonicToEntropy)(srcMnemonic.phrase, srcMnemonic.locale || "en"));
        path = srcMnemonic.path || (0, _hdnode.defaultPath);
        locale = srcMnemonic.locale || "en";
    }
    let client = options.client;
    if (!client) client = "ethers.js";
    // Check/generate the salt
    let salt = null;
    if (options.salt) salt = (0, _bytes.arrayify)(options.salt);
    else salt = (0, _random.randomBytes)(32);
    // Override initialization vector
    let iv = null;
    if (options.iv) {
        iv = (0, _bytes.arrayify)(options.iv);
        if (iv.length !== 16) throw new Error("invalid iv");
    } else iv = (0, _random.randomBytes)(16);
    // Override the uuid
    let uuidRandom = null;
    if (options.uuid) {
        uuidRandom = (0, _bytes.arrayify)(options.uuid);
        if (uuidRandom.length !== 16) throw new Error("invalid uuid");
    } else uuidRandom = (0, _random.randomBytes)(16);
    // Override the scrypt password-based key derivation function parameters
    let N = 131072, r = 8, p = 1;
    if (options.scrypt) {
        if (options.scrypt.N) N = options.scrypt.N;
        if (options.scrypt.r) r = options.scrypt.r;
        if (options.scrypt.p) p = options.scrypt.p;
    }
    // We take 64 bytes:
    //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
    //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
    return (0, _scryptJsDefault.default).scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key)=>{
        key = (0, _bytes.arrayify)(key);
        // This will be used to encrypt the wallet (as per Web3 secret storage)
        const derivedKey = key.slice(0, 16);
        const macPrefix = key.slice(16, 32);
        // This will be used to encrypt the mnemonic phrase (if any)
        const mnemonicKey = key.slice(32, 64);
        // Encrypt the private key
        const counter = new (0, _aesJsDefault.default).Counter(iv);
        const aesCtr = new (0, _aesJsDefault.default).ModeOfOperation.ctr(derivedKey, counter);
        const ciphertext = (0, _bytes.arrayify)(aesCtr.encrypt(privateKey));
        // Compute the message authentication code, used to check the password
        const mac = (0, _keccak256.keccak256)((0, _bytes.concat)([
            macPrefix,
            ciphertext
        ]));
        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
        const data = {
            address: account.address.substring(2).toLowerCase(),
            id: (0, _utils.uuidV4)(uuidRandom),
            version: 3,
            Crypto: {
                cipher: "aes-128-ctr",
                cipherparams: {
                    iv: (0, _bytes.hexlify)(iv).substring(2)
                },
                ciphertext: (0, _bytes.hexlify)(ciphertext).substring(2),
                kdf: "scrypt",
                kdfparams: {
                    salt: (0, _bytes.hexlify)(salt).substring(2),
                    n: N,
                    dklen: 32,
                    p: p,
                    r: r
                },
                mac: mac.substring(2)
            }
        };
        // If we have a mnemonic, encrypt it into the JSON wallet
        if (entropy) {
            const mnemonicIv = (0, _random.randomBytes)(16);
            const mnemonicCounter = new (0, _aesJsDefault.default).Counter(mnemonicIv);
            const mnemonicAesCtr = new (0, _aesJsDefault.default).ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
            const mnemonicCiphertext = (0, _bytes.arrayify)(mnemonicAesCtr.encrypt(entropy));
            const now = new Date();
            const timestamp = now.getUTCFullYear() + "-" + (0, _utils.zpad)(now.getUTCMonth() + 1, 2) + "-" + (0, _utils.zpad)(now.getUTCDate(), 2) + "T" + (0, _utils.zpad)(now.getUTCHours(), 2) + "-" + (0, _utils.zpad)(now.getUTCMinutes(), 2) + "-" + (0, _utils.zpad)(now.getUTCSeconds(), 2) + ".0Z";
            data["x-ethers"] = {
                client: client,
                gethFilename: "UTC--" + timestamp + "--" + data.address,
                mnemonicCounter: (0, _bytes.hexlify)(mnemonicIv).substring(2),
                mnemonicCiphertext: (0, _bytes.hexlify)(mnemonicCiphertext).substring(2),
                path: path,
                locale: locale,
                version: "0.1"
            };
        }
        return JSON.stringify(data);
    });
}

},{"aes-js":"6m1U5","scrypt-js":"5vTk0","@ethersproject/address":"ggdAz","@ethersproject/bytes":"htrqZ","@ethersproject/hdnode":"8PpMD","@ethersproject/keccak256":"hXDEv","@ethersproject/pbkdf2":"ityKl","@ethersproject/random":"7myQM","@ethersproject/properties":"h3GJb","@ethersproject/transactions":"d1ust","./utils":"d3wDI","@ethersproject/logger":"hLvB2","./_version":"ijo9y","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"5vTk0":[function(require,module,exports) {
"use strict";
(function(root) {
    const MAX_VALUE = 0x7fffffff;
    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
    // See: https://github.com/dchest/scrypt-async-js
    function SHA256(m) {
        const K = new Uint32Array([
            0x428a2f98,
            0x71374491,
            0xb5c0fbcf,
            0xe9b5dba5,
            0x3956c25b,
            0x59f111f1,
            0x923f82a4,
            0xab1c5ed5,
            0xd807aa98,
            0x12835b01,
            0x243185be,
            0x550c7dc3,
            0x72be5d74,
            0x80deb1fe,
            0x9bdc06a7,
            0xc19bf174,
            0xe49b69c1,
            0xefbe4786,
            0x0fc19dc6,
            0x240ca1cc,
            0x2de92c6f,
            0x4a7484aa,
            0x5cb0a9dc,
            0x76f988da,
            0x983e5152,
            0xa831c66d,
            0xb00327c8,
            0xbf597fc7,
            0xc6e00bf3,
            0xd5a79147,
            0x06ca6351,
            0x14292967,
            0x27b70a85,
            0x2e1b2138,
            0x4d2c6dfc,
            0x53380d13,
            0x650a7354,
            0x766a0abb,
            0x81c2c92e,
            0x92722c85,
            0xa2bfe8a1,
            0xa81a664b,
            0xc24b8b70,
            0xc76c51a3,
            0xd192e819,
            0xd6990624,
            0xf40e3585,
            0x106aa070,
            0x19a4c116,
            0x1e376c08,
            0x2748774c,
            0x34b0bcb5,
            0x391c0cb3,
            0x4ed8aa4a,
            0x5b9cca4f,
            0x682e6ff3,
            0x748f82ee,
            0x78a5636f,
            0x84c87814,
            0x8cc70208,
            0x90befffa,
            0xa4506ceb,
            0xbef9a3f7,
            0xc67178f2
        ]);
        let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
        let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
        const w = new Uint32Array(64);
        function blocks(p) {
            let off = 0, len = p.length;
            while(len >= 64){
                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;
                for(i = 0; i < 16; i++){
                    j = off + i * 4;
                    w[i] = (p[j] & 0xff) << 24 | (p[j + 1] & 0xff) << 16 | (p[j + 2] & 0xff) << 8 | p[j + 3] & 0xff;
                }
                for(i = 16; i < 64; i++){
                    u = w[i - 2];
                    t1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
                    u = w[i - 15];
                    t2 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
                    w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0) | 0;
                }
                for(i = 0; i < 64; i++){
                    t1 = (((e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;
                    t2 = ((a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10)) + (a & b ^ a & c ^ b & c) | 0;
                    h = g;
                    g = f;
                    f = e;
                    e = d + t1 | 0;
                    d = c;
                    c = b;
                    b = a;
                    a = t1 + t2 | 0;
                }
                h0 = h0 + a | 0;
                h1 = h1 + b | 0;
                h2 = h2 + c | 0;
                h3 = h3 + d | 0;
                h4 = h4 + e | 0;
                h5 = h5 + f | 0;
                h6 = h6 + g | 0;
                h7 = h7 + h | 0;
                off += 64;
                len -= 64;
            }
        }
        blocks(m);
        let i1, bytesLeft = m.length % 64, bitLenHi = m.length / 0x20000000 | 0, bitLenLo = m.length << 3, numZeros = bytesLeft < 56 ? 56 : 120, p1 = m.slice(m.length - bytesLeft, m.length);
        p1.push(0x80);
        for(i1 = bytesLeft + 1; i1 < numZeros; i1++)p1.push(0);
        p1.push(bitLenHi >>> 24 & 0xff);
        p1.push(bitLenHi >>> 16 & 0xff);
        p1.push(bitLenHi >>> 8 & 0xff);
        p1.push(bitLenHi >>> 0 & 0xff);
        p1.push(bitLenLo >>> 24 & 0xff);
        p1.push(bitLenLo >>> 16 & 0xff);
        p1.push(bitLenLo >>> 8 & 0xff);
        p1.push(bitLenLo >>> 0 & 0xff);
        blocks(p1);
        return [
            h0 >>> 24 & 0xff,
            h0 >>> 16 & 0xff,
            h0 >>> 8 & 0xff,
            h0 >>> 0 & 0xff,
            h1 >>> 24 & 0xff,
            h1 >>> 16 & 0xff,
            h1 >>> 8 & 0xff,
            h1 >>> 0 & 0xff,
            h2 >>> 24 & 0xff,
            h2 >>> 16 & 0xff,
            h2 >>> 8 & 0xff,
            h2 >>> 0 & 0xff,
            h3 >>> 24 & 0xff,
            h3 >>> 16 & 0xff,
            h3 >>> 8 & 0xff,
            h3 >>> 0 & 0xff,
            h4 >>> 24 & 0xff,
            h4 >>> 16 & 0xff,
            h4 >>> 8 & 0xff,
            h4 >>> 0 & 0xff,
            h5 >>> 24 & 0xff,
            h5 >>> 16 & 0xff,
            h5 >>> 8 & 0xff,
            h5 >>> 0 & 0xff,
            h6 >>> 24 & 0xff,
            h6 >>> 16 & 0xff,
            h6 >>> 8 & 0xff,
            h6 >>> 0 & 0xff,
            h7 >>> 24 & 0xff,
            h7 >>> 16 & 0xff,
            h7 >>> 8 & 0xff,
            h7 >>> 0 & 0xff
        ];
    }
    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
        // compress password if it's longer than hash block length
        password = password.length <= 64 ? password : SHA256(password);
        const innerLen = 64 + salt.length + 4;
        const inner = new Array(innerLen);
        const outerKey = new Array(64);
        let i2;
        let dk = [];
        // inner = (password ^ ipad) || salt || counter
        for(i2 = 0; i2 < 64; i2++)inner[i2] = 0x36;
        for(i2 = 0; i2 < password.length; i2++)inner[i2] ^= password[i2];
        for(i2 = 0; i2 < salt.length; i2++)inner[64 + i2] = salt[i2];
        for(i2 = innerLen - 4; i2 < innerLen; i2++)inner[i2] = 0;
        // outerKey = password ^ opad
        for(i2 = 0; i2 < 64; i2++)outerKey[i2] = 0x5c;
        for(i2 = 0; i2 < password.length; i2++)outerKey[i2] ^= password[i2];
        // increments counter inside inner
        function incrementCounter() {
            for(let i = innerLen - 1; i >= innerLen - 4; i--){
                inner[i]++;
                if (inner[i] <= 0xff) return;
                inner[i] = 0;
            }
        }
        // output blocks = SHA256(outerKey || SHA256(inner)) ...
        while(dkLen >= 32){
            incrementCounter();
            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
            dkLen -= 32;
        }
        if (dkLen > 0) {
            incrementCounter();
            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
        }
        return dk;
    }
    // The following is an adaptation of scryptsy
    // See: https://www.npmjs.com/package/scryptsy
    function blockmix_salsa8(BY, Yi, r, x, _X) {
        let i;
        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
        for(i = 0; i < 2 * r; i++){
            blockxor(BY, i * 16, _X, 16);
            salsa20_8(_X, x);
            arraycopy(_X, 0, BY, Yi + i * 16, 16);
        }
        for(i = 0; i < r; i++)arraycopy(BY, Yi + i * 32, BY, i * 16, 16);
        for(i = 0; i < r; i++)arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
    }
    function R(a, b) {
        return a << b | a >>> 32 - b;
    }
    function salsa20_8(B, x) {
        arraycopy(B, 0, x, 0, 16);
        for(let i = 8; i > 0; i -= 2){
            x[4] ^= R(x[0] + x[12], 7);
            x[8] ^= R(x[4] + x[0], 9);
            x[12] ^= R(x[8] + x[4], 13);
            x[0] ^= R(x[12] + x[8], 18);
            x[9] ^= R(x[5] + x[1], 7);
            x[13] ^= R(x[9] + x[5], 9);
            x[1] ^= R(x[13] + x[9], 13);
            x[5] ^= R(x[1] + x[13], 18);
            x[14] ^= R(x[10] + x[6], 7);
            x[2] ^= R(x[14] + x[10], 9);
            x[6] ^= R(x[2] + x[14], 13);
            x[10] ^= R(x[6] + x[2], 18);
            x[3] ^= R(x[15] + x[11], 7);
            x[7] ^= R(x[3] + x[15], 9);
            x[11] ^= R(x[7] + x[3], 13);
            x[15] ^= R(x[11] + x[7], 18);
            x[1] ^= R(x[0] + x[3], 7);
            x[2] ^= R(x[1] + x[0], 9);
            x[3] ^= R(x[2] + x[1], 13);
            x[0] ^= R(x[3] + x[2], 18);
            x[6] ^= R(x[5] + x[4], 7);
            x[7] ^= R(x[6] + x[5], 9);
            x[4] ^= R(x[7] + x[6], 13);
            x[5] ^= R(x[4] + x[7], 18);
            x[11] ^= R(x[10] + x[9], 7);
            x[8] ^= R(x[11] + x[10], 9);
            x[9] ^= R(x[8] + x[11], 13);
            x[10] ^= R(x[9] + x[8], 18);
            x[12] ^= R(x[15] + x[14], 7);
            x[13] ^= R(x[12] + x[15], 9);
            x[14] ^= R(x[13] + x[12], 13);
            x[15] ^= R(x[14] + x[13], 18);
        }
        for(let i3 = 0; i3 < 16; ++i3)B[i3] += x[i3];
    }
    // naive approach... going back to loop unrolling may yield additional performance
    function blockxor(S, Si, D, len) {
        for(let i = 0; i < len; i++)D[i] ^= S[Si + i];
    }
    function arraycopy(src, srcPos, dest, destPos, length) {
        while(length--)dest[destPos++] = src[srcPos++];
    }
    function checkBufferish(o) {
        if (!o || typeof o.length !== "number") return false;
        for(let i = 0; i < o.length; i++){
            const v = o[i];
            if (typeof v !== "number" || v % 1 || v < 0 || v >= 256) return false;
        }
        return true;
    }
    function ensureInteger(value, name) {
        if (typeof value !== "number" || value % 1) throw new Error("invalid " + name);
        return value;
    }
    // N = Cpu cost, r = Memory cost, p = parallelization cost
    // callback(error, progress, key)
    function _scrypt(password, salt, N, r, p, dkLen, callback) {
        N = ensureInteger(N, "N");
        r = ensureInteger(r, "r");
        p = ensureInteger(p, "p");
        dkLen = ensureInteger(dkLen, "dkLen");
        if (N === 0 || (N & N - 1) !== 0) throw new Error("N must be power of 2");
        if (N > MAX_VALUE / 128 / r) throw new Error("N too large");
        if (r > MAX_VALUE / 128 / p) throw new Error("r too large");
        if (!checkBufferish(password)) throw new Error("password must be an array or buffer");
        password = Array.prototype.slice.call(password);
        if (!checkBufferish(salt)) throw new Error("salt must be an array or buffer");
        salt = Array.prototype.slice.call(salt);
        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
        const B = new Uint32Array(p * 32 * r);
        for(let i6 = 0; i6 < B.length; i6++){
            const j = i6 * 4;
            B[i6] = (b[j + 3] & 0xff) << 24 | (b[j + 2] & 0xff) << 16 | (b[j + 1] & 0xff) << 8 | (b[j + 0] & 0xff) << 0;
        }
        const XY = new Uint32Array(64 * r);
        const V = new Uint32Array(32 * r * N);
        const Yi = 32 * r;
        // scratch space
        const x = new Uint32Array(16); // salsa20_8
        const _X = new Uint32Array(16); // blockmix_salsa8
        const totalOps = p * N * 2;
        let currentOp = 0;
        let lastPercent10 = null;
        // Set this to true to abandon the scrypt on the next step
        let stop = false;
        // State information
        let state = 0;
        let i0 = 0, i1;
        let Bi;
        // How many blockmix_salsa8 can we do per step?
        const limit = callback ? parseInt(1000 / r) : 0xffffffff;
        // Trick from scrypt-async; if there is a setImmediate shim in place, use it
        const nextTick = typeof setImmediate !== "undefined" ? setImmediate : setTimeout;
        // This is really all I changed; making scryptsy a state machine so we occasionally
        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
        const incrementalSMix = function() {
            if (stop) return callback(new Error("cancelled"), currentOp / totalOps);
            let steps;
            switch(state){
                case 0:
                    // for (var i = 0; i < p; i++)...
                    Bi = i0 * 32 * r;
                    arraycopy(B, Bi, XY, 0, Yi); // ROMix - 1
                    state = 1; // Move to ROMix 2
                    i1 = 0;
                // Fall through
                case 1:
                    // Run up to 1000 steps of the first inner smix loop
                    steps = N - i1;
                    if (steps > limit) steps = limit;
                    for(let i = 0; i < steps; i++){
                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi) // ROMix - 3
                        ;
                        blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 4
                    }
                    // for (var i = 0; i < N; i++)
                    i1 += steps;
                    currentOp += steps;
                    if (callback) {
                        // Call the callback with the progress (optionally stopping us)
                        const percent10 = parseInt(1000 * currentOp / totalOps);
                        if (percent10 !== lastPercent10) {
                            stop = callback(null, currentOp / totalOps);
                            if (stop) break;
                            lastPercent10 = percent10;
                        }
                    }
                    if (i1 < N) break;
                    i1 = 0; // Move to ROMix 6
                    state = 2;
                // Fall through
                case 2:
                    // Run up to 1000 steps of the second inner smix loop
                    steps = N - i1;
                    if (steps > limit) steps = limit;
                    for(let i4 = 0; i4 < steps; i4++){
                        const offset = (2 * r - 1) * 16; // ROMix - 7
                        const j = XY[offset] & N - 1;
                        blockxor(V, j * Yi, XY, Yi); // ROMix - 8 (inner)
                        blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 9 (outer)
                    }
                    // for (var i = 0; i < N; i++)...
                    i1 += steps;
                    currentOp += steps;
                    // Call the callback with the progress (optionally stopping us)
                    if (callback) {
                        const percent10 = parseInt(1000 * currentOp / totalOps);
                        if (percent10 !== lastPercent10) {
                            stop = callback(null, currentOp / totalOps);
                            if (stop) break;
                            lastPercent10 = percent10;
                        }
                    }
                    if (i1 < N) break;
                    arraycopy(XY, 0, B, Bi, Yi); // ROMix - 10
                    // for (var i = 0; i < p; i++)...
                    i0++;
                    if (i0 < p) {
                        state = 0;
                        break;
                    }
                    b = [];
                    for(let i5 = 0; i5 < B.length; i5++){
                        b.push(B[i5] >> 0 & 0xff);
                        b.push(B[i5] >> 8 & 0xff);
                        b.push(B[i5] >> 16 & 0xff);
                        b.push(B[i5] >> 24 & 0xff);
                    }
                    const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);
                    // Send the result to the callback
                    if (callback) callback(null, 1.0, derivedKey);
                    // Done; don't break (which would reschedule)
                    return derivedKey;
            }
            // Schedule the next steps
            if (callback) nextTick(incrementalSMix);
        };
        // Run the smix state machine until completion
        if (!callback) while(true){
            const derivedKey = incrementalSMix();
            if (derivedKey != undefined) return derivedKey;
        }
        // Bootstrap the async incremental smix
        incrementalSMix();
    }
    const lib = {
        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
            return new Promise(function(resolve, reject) {
                let lastProgress = 0;
                if (progressCallback) progressCallback(0);
                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
                    if (error) reject(error);
                    else if (key) {
                        if (progressCallback && lastProgress !== 1) progressCallback(1);
                        resolve(new Uint8Array(key));
                    } else if (progressCallback && progress !== lastProgress) {
                        lastProgress = progress;
                        return progressCallback(progress);
                    }
                });
            });
        },
        syncScrypt: function(password, salt, N, r, p, dkLen) {
            return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
        }
    };
    // node.js
    if (typeof exports !== "undefined") module.exports = lib;
    else if (typeof define === "function" && define.amd) define(lib);
    else if (root) {
        // If there was an existing library "scrypt", make sure it is still available
        if (root.scrypt) root._scrypt = root.scrypt;
        root.scrypt = lib;
    }
})(this);

},{}],"ej99N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "wallet/5.6.2";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"bErvj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
////////////////////////
// Exports
parcelHelpers.export(exports, "Provider", ()=>// Abstract Providers (or Abstract-ish)
    (0, _abstractProvider.Provider));
parcelHelpers.export(exports, "BaseProvider", ()=>(0, _baseProvider.BaseProvider));
parcelHelpers.export(exports, "Resolver", ()=>(0, _baseProvider.Resolver));
parcelHelpers.export(exports, "UrlJsonRpcProvider", ()=>(0, _urlJsonRpcProvider.UrlJsonRpcProvider));
parcelHelpers.export(exports, "FallbackProvider", ()=>///////////////////////
    // Concrete Providers
    (0, _fallbackProvider.FallbackProvider));
parcelHelpers.export(exports, "AlchemyProvider", ()=>(0, _alchemyProvider.AlchemyProvider));
parcelHelpers.export(exports, "AlchemyWebSocketProvider", ()=>(0, _alchemyProvider.AlchemyWebSocketProvider));
parcelHelpers.export(exports, "AnkrProvider", ()=>(0, _ankrProvider.AnkrProvider));
parcelHelpers.export(exports, "CloudflareProvider", ()=>(0, _cloudflareProvider.CloudflareProvider));
parcelHelpers.export(exports, "EtherscanProvider", ()=>(0, _etherscanProvider.EtherscanProvider));
parcelHelpers.export(exports, "InfuraProvider", ()=>(0, _infuraProvider.InfuraProvider));
parcelHelpers.export(exports, "InfuraWebSocketProvider", ()=>(0, _infuraProvider.InfuraWebSocketProvider));
parcelHelpers.export(exports, "JsonRpcProvider", ()=>(0, _jsonRpcProvider.JsonRpcProvider));
parcelHelpers.export(exports, "JsonRpcBatchProvider", ()=>(0, _jsonRpcBatchProvider.JsonRpcBatchProvider));
parcelHelpers.export(exports, "NodesmithProvider", ()=>(0, _nodesmithProvider.NodesmithProvider));
parcelHelpers.export(exports, "PocketProvider", ()=>(0, _pocketProvider.PocketProvider));
parcelHelpers.export(exports, "StaticJsonRpcProvider", ()=>(0, _urlJsonRpcProvider.StaticJsonRpcProvider));
parcelHelpers.export(exports, "Web3Provider", ()=>(0, _web3Provider.Web3Provider));
parcelHelpers.export(exports, "WebSocketProvider", ()=>(0, _websocketProvider.WebSocketProvider));
parcelHelpers.export(exports, "IpcProvider", ()=>(0, _ipcProvider.IpcProvider));
parcelHelpers.export(exports, "JsonRpcSigner", ()=>///////////////////////
    // Signer
    (0, _jsonRpcProvider.JsonRpcSigner));
parcelHelpers.export(exports, "getDefaultProvider", ()=>///////////////////////
    // Functions
    getDefaultProvider);
parcelHelpers.export(exports, "getNetwork", ()=>(0, _networks.getNetwork));
parcelHelpers.export(exports, "isCommunityResource", ()=>(0, _formatter.isCommunityResource));
parcelHelpers.export(exports, "isCommunityResourcable", ()=>(0, _formatter.isCommunityResourcable));
parcelHelpers.export(exports, "showThrottleMessage", ()=>(0, _formatter.showThrottleMessage));
parcelHelpers.export(exports, "Formatter", ()=>///////////////////////
    // Objects
    (0, _formatter.Formatter));
var _abstractProvider = require("@ethersproject/abstract-provider");
var _networks = require("@ethersproject/networks");
var _baseProvider = require("./base-provider");
var _alchemyProvider = require("./alchemy-provider");
var _ankrProvider = require("./ankr-provider");
var _cloudflareProvider = require("./cloudflare-provider");
var _etherscanProvider = require("./etherscan-provider");
var _fallbackProvider = require("./fallback-provider");
var _ipcProvider = require("./ipc-provider");
var _infuraProvider = require("./infura-provider");
var _jsonRpcProvider = require("./json-rpc-provider");
var _jsonRpcBatchProvider = require("./json-rpc-batch-provider");
var _nodesmithProvider = require("./nodesmith-provider");
var _pocketProvider = require("./pocket-provider");
var _urlJsonRpcProvider = require("./url-json-rpc-provider");
var _web3Provider = require("./web3-provider");
var _websocketProvider = require("./websocket-provider");
var _formatter = require("./formatter");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
////////////////////////
// Helper Functions
function getDefaultProvider(network, options) {
    if (network == null) network = "homestead";
    // If passed a URL, figure out the right type of provider based on the scheme
    if (typeof network === "string") {
        // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
        // Handle http and ws (and their secure variants)
        const match = network.match(/^(ws|http)s?:/i);
        if (match) switch(match[1].toLowerCase()){
            case "http":
            case "https":
                return new (0, _jsonRpcProvider.JsonRpcProvider)(network);
            case "ws":
            case "wss":
                return new (0, _websocketProvider.WebSocketProvider)(network);
            default:
                logger.throwArgumentError("unsupported URL scheme", "network", network);
        }
    }
    const n = (0, _networks.getNetwork)(network);
    if (!n || !n._defaultProvider) logger.throwError("unsupported getDefaultProvider network", (0, _logger.Logger).errors.NETWORK_ERROR, {
        operation: "getDefaultProvider",
        network: network
    });
    return n._defaultProvider({
        FallbackProvider: (0, _fallbackProvider.FallbackProvider),
        AlchemyProvider: (0, _alchemyProvider.AlchemyProvider),
        AnkrProvider: (0, _ankrProvider.AnkrProvider),
        CloudflareProvider: (0, _cloudflareProvider.CloudflareProvider),
        EtherscanProvider: (0, _etherscanProvider.EtherscanProvider),
        InfuraProvider: (0, _infuraProvider.InfuraProvider),
        JsonRpcProvider: (0, _jsonRpcProvider.JsonRpcProvider),
        NodesmithProvider: (0, _nodesmithProvider.NodesmithProvider),
        PocketProvider: (0, _pocketProvider.PocketProvider),
        Web3Provider: (0, _web3Provider.Web3Provider),
        IpcProvider: (0, _ipcProvider.IpcProvider)
    }, options);
}

},{"@ethersproject/abstract-provider":"g1jr1","@ethersproject/networks":"6JNhW","./base-provider":"7OFAa","./alchemy-provider":"jD4Nf","./ankr-provider":"cKap1","./cloudflare-provider":"9VKg2","./etherscan-provider":"arYKc","./fallback-provider":"2wNFK","./ipc-provider":"6WQjk","./infura-provider":"iqlOM","./json-rpc-provider":"1sWtk","./json-rpc-batch-provider":"hGNo4","./nodesmith-provider":"8l5lW","./pocket-provider":"3a8Ys","./url-json-rpc-provider":"9CTqA","./web3-provider":"cIjQb","./websocket-provider":"9KF9f","./formatter":"ZfOHh","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"6JNhW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 *  getNetwork
 *
 *  Converts a named common networks or chain ID (network ID) to a Network
 *  and verifies a network is a valid Network..
 */ parcelHelpers.export(exports, "getNetwork", ()=>getNetwork);
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
function isRenetworkable(value) {
    return value && typeof value.renetwork === "function";
}
function ethDefaultProvider(network1) {
    const func = function(providers, options) {
        if (options == null) options = {};
        const providerList = [];
        if (providers.InfuraProvider && options.infura !== "-") try {
            providerList.push(new providers.InfuraProvider(network1, options.infura));
        } catch (error) {}
        if (providers.EtherscanProvider && options.etherscan !== "-") try {
            providerList.push(new providers.EtherscanProvider(network1, options.etherscan));
        } catch (error1) {}
        if (providers.AlchemyProvider && options.alchemy !== "-") try {
            providerList.push(new providers.AlchemyProvider(network1, options.alchemy));
        } catch (error2) {}
        if (providers.PocketProvider && options.pocket !== "-") {
            // These networks are currently faulty on Pocket as their
            // network does not handle the Berlin hardfork, which is
            // live on these ones.
            // @TODO: This goes away once Pocket has upgraded their nodes
            const skip = [
                "goerli",
                "ropsten",
                "rinkeby"
            ];
            try {
                const provider = new providers.PocketProvider(network1, options.pocket);
                if (provider.network && skip.indexOf(provider.network.name) === -1) providerList.push(provider);
            } catch (error) {}
        }
        if (providers.CloudflareProvider && options.cloudflare !== "-") try {
            providerList.push(new providers.CloudflareProvider(network1));
        } catch (error3) {}
        if (providers.AnkrProvider && options.ankr !== "-") try {
            const skip = [
                "ropsten"
            ];
            const provider = new providers.AnkrProvider(network1, options.ankr);
            if (provider.network && skip.indexOf(provider.network.name) === -1) providerList.push(provider);
        } catch (error4) {}
        if (providerList.length === 0) return null;
        if (providers.FallbackProvider) {
            let quorum = 1;
            if (options.quorum != null) quorum = options.quorum;
            else if (network1 === "homestead") quorum = 2;
            return new providers.FallbackProvider(providerList, quorum);
        }
        return providerList[0];
    };
    func.renetwork = function(network) {
        return ethDefaultProvider(network);
    };
    return func;
}
function etcDefaultProvider(url, network2) {
    const func = function(providers, options) {
        if (providers.JsonRpcProvider) return new providers.JsonRpcProvider(url, network2);
        return null;
    };
    func.renetwork = function(network) {
        return etcDefaultProvider(url, network);
    };
    return func;
}
const homestead = {
    chainId: 1,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "homestead",
    _defaultProvider: ethDefaultProvider("homestead")
};
const ropsten = {
    chainId: 3,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "ropsten",
    _defaultProvider: ethDefaultProvider("ropsten")
};
const classicMordor = {
    chainId: 63,
    name: "classicMordor",
    _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
};
// See: https://chainlist.org
const networks = {
    unspecified: {
        chainId: 0,
        name: "unspecified"
    },
    homestead: homestead,
    mainnet: homestead,
    morden: {
        chainId: 2,
        name: "morden"
    },
    ropsten: ropsten,
    testnet: ropsten,
    rinkeby: {
        chainId: 4,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "rinkeby",
        _defaultProvider: ethDefaultProvider("rinkeby")
    },
    kovan: {
        chainId: 42,
        name: "kovan",
        _defaultProvider: ethDefaultProvider("kovan")
    },
    goerli: {
        chainId: 5,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "goerli",
        _defaultProvider: ethDefaultProvider("goerli")
    },
    kintsugi: {
        chainId: 1337702,
        name: "kintsugi"
    },
    // ETC (See: #351)
    classic: {
        chainId: 61,
        name: "classic",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic")
    },
    classicMorden: {
        chainId: 62,
        name: "classicMorden"
    },
    classicMordor: classicMordor,
    classicTestnet: classicMordor,
    classicKotti: {
        chainId: 6,
        name: "classicKotti",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti")
    },
    xdai: {
        chainId: 100,
        name: "xdai"
    },
    matic: {
        chainId: 137,
        name: "matic",
        _defaultProvider: ethDefaultProvider("matic")
    },
    maticmum: {
        chainId: 80001,
        name: "maticmum"
    },
    optimism: {
        chainId: 10,
        name: "optimism",
        _defaultProvider: ethDefaultProvider("optimism")
    },
    "optimism-kovan": {
        chainId: 69,
        name: "optimism-kovan"
    },
    "optimism-goerli": {
        chainId: 420,
        name: "optimism-goerli"
    },
    arbitrum: {
        chainId: 42161,
        name: "arbitrum"
    },
    "arbitrum-rinkeby": {
        chainId: 421611,
        name: "arbitrum-rinkeby"
    },
    bnb: {
        chainId: 56,
        name: "bnb"
    },
    bnbt: {
        chainId: 97,
        name: "bnbt"
    }
};
function getNetwork(network) {
    // No network (null)
    if (network == null) return null;
    if (typeof network === "number") {
        for(const name in networks){
            const standard = networks[name];
            if (standard.chainId === network) return {
                name: standard.name,
                chainId: standard.chainId,
                ensAddress: standard.ensAddress || null,
                _defaultProvider: standard._defaultProvider || null
            };
        }
        return {
            chainId: network,
            name: "unknown"
        };
    }
    if (typeof network === "string") {
        const standard = networks[network];
        if (standard == null) return null;
        return {
            name: standard.name,
            chainId: standard.chainId,
            ensAddress: standard.ensAddress,
            _defaultProvider: standard._defaultProvider || null
        };
    }
    const standard = networks[network.name];
    // Not a standard network; check that it is a valid network in general
    if (!standard) {
        if (typeof network.chainId !== "number") logger.throwArgumentError("invalid network chainId", "network", network);
        return network;
    }
    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
    if (network.chainId !== 0 && network.chainId !== standard.chainId) logger.throwArgumentError("network chainId mismatch", "network", network);
    // @TODO: In the next major version add an attach function to a defaultProvider
    // class and move the _defaultProvider internal to this file (extend Network)
    let defaultProvider = network._defaultProvider || null;
    if (defaultProvider == null && standard._defaultProvider) {
        if (isRenetworkable(standard._defaultProvider)) defaultProvider = standard._defaultProvider.renetwork(network);
        else defaultProvider = standard._defaultProvider;
    }
    // Standard Network (allow overriding the ENS address)
    return {
        name: network.name,
        chainId: standard.chainId,
        ensAddress: network.ensAddress || standard.ensAddress || null,
        _defaultProvider: defaultProvider
    };
}

},{"@ethersproject/logger":"hLvB2","./_version":"9eROf","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"9eROf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "networks/5.6.4";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"7OFAa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Event", ()=>Event);
parcelHelpers.export(exports, "Resolver", ()=>Resolver);
parcelHelpers.export(exports, "BaseProvider", ()=>BaseProvider);
var _abstractProvider = require("@ethersproject/abstract-provider");
var _base64 = require("@ethersproject/base64");
var _basex = require("@ethersproject/basex");
var _bignumber = require("@ethersproject/bignumber");
var _bytes = require("@ethersproject/bytes");
var _constants = require("@ethersproject/constants");
var _hash = require("@ethersproject/hash");
var _networks = require("@ethersproject/networks");
var _properties = require("@ethersproject/properties");
var _sha2 = require("@ethersproject/sha2");
var _strings = require("@ethersproject/strings");
var _web = require("@ethersproject/web");
var _bech32 = require("bech32");
var _bech32Default = parcelHelpers.interopDefault(_bech32);
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
var _formatter = require("./formatter");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
const MAX_CCIP_REDIRECTS = 10;
//////////////////////////////
// Event Serializeing
function checkTopic(topic) {
    if (topic == null) return "null";
    if ((0, _bytes.hexDataLength)(topic) !== 32) logger.throwArgumentError("invalid topic", "topic", topic);
    return topic.toLowerCase();
}
function serializeTopics(topics) {
    // Remove trailing null AND-topics; they are redundant
    topics = topics.slice();
    while(topics.length > 0 && topics[topics.length - 1] == null)topics.pop();
    return topics.map((topic1)=>{
        if (Array.isArray(topic1)) {
            // Only track unique OR-topics
            const unique = {};
            topic1.forEach((topic)=>{
                unique[checkTopic(topic)] = true;
            });
            // The order of OR-topics does not matter
            const sorted = Object.keys(unique);
            sorted.sort();
            return sorted.join("|");
        } else return checkTopic(topic1);
    }).join("&");
}
function deserializeTopics(data) {
    if (data === "") return [];
    return data.split(/&/g).map((topic2)=>{
        if (topic2 === "") return [];
        const comps = topic2.split("|").map((topic)=>{
            return topic === "null" ? null : topic;
        });
        return comps.length === 1 ? comps[0] : comps;
    });
}
function getEventTag(eventName) {
    if (typeof eventName === "string") {
        eventName = eventName.toLowerCase();
        if ((0, _bytes.hexDataLength)(eventName) === 32) return "tx:" + eventName;
        if (eventName.indexOf(":") === -1) return eventName;
    } else if (Array.isArray(eventName)) return "filter:*:" + serializeTopics(eventName);
    else if ((0, _abstractProvider.ForkEvent).isForkEvent(eventName)) {
        logger.warn("not implemented");
        throw new Error("not implemented");
    } else if (eventName && typeof eventName === "object") return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
    throw new Error("invalid event - " + eventName);
}
//////////////////////////////
// Helper Object
function getTime() {
    return new Date().getTime();
}
function stall(duration) {
    return new Promise((resolve)=>{
        setTimeout(resolve, duration);
    });
}
//////////////////////////////
// Provider Object
/**
 *  EventType
 *   - "block"
 *   - "poll"
 *   - "didPoll"
 *   - "pending"
 *   - "error"
 *   - "network"
 *   - filter
 *   - topics array
 *   - transaction hash
 */ const PollableEvents = [
    "block",
    "network",
    "pending",
    "poll"
];
class Event {
    constructor(tag, listener, once){
        (0, _properties.defineReadOnly)(this, "tag", tag);
        (0, _properties.defineReadOnly)(this, "listener", listener);
        (0, _properties.defineReadOnly)(this, "once", once);
        this._lastBlockNumber = -2;
        this._inflight = false;
    }
    get event() {
        switch(this.type){
            case "tx":
                return this.hash;
            case "filter":
                return this.filter;
        }
        return this.tag;
    }
    get type() {
        return this.tag.split(":")[0];
    }
    get hash() {
        const comps = this.tag.split(":");
        if (comps[0] !== "tx") return null;
        return comps[1];
    }
    get filter() {
        const comps = this.tag.split(":");
        if (comps[0] !== "filter") return null;
        const address = comps[1];
        const topics = deserializeTopics(comps[2]);
        const filter = {};
        if (topics.length > 0) filter.topics = topics;
        if (address && address !== "*") filter.address = address;
        return filter;
    }
    pollable() {
        return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
    }
}
// https://github.com/satoshilabs/slips/blob/master/slip-0044.md
const coinInfos = {
    "0": {
        symbol: "btc",
        p2pkh: 0x00,
        p2sh: 0x05,
        prefix: "bc"
    },
    "2": {
        symbol: "ltc",
        p2pkh: 0x30,
        p2sh: 0x32,
        prefix: "ltc"
    },
    "3": {
        symbol: "doge",
        p2pkh: 0x1e,
        p2sh: 0x16
    },
    "60": {
        symbol: "eth",
        ilk: "eth"
    },
    "61": {
        symbol: "etc",
        ilk: "eth"
    },
    "700": {
        symbol: "xdai",
        ilk: "eth"
    }
};
function bytes32ify(value) {
    return (0, _bytes.hexZeroPad)((0, _bignumber.BigNumber).from(value).toHexString(), 32);
}
// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)
function base58Encode(data) {
    return (0, _basex.Base58).encode((0, _bytes.concat)([
        data,
        (0, _bytes.hexDataSlice)((0, _sha2.sha256)((0, _sha2.sha256)(data)), 0, 4)
    ]));
}
const matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
const matchers = [
    new RegExp("^(https)://(.*)$", "i"),
    new RegExp("^(data):(.*)$", "i"),
    matcherIpfs,
    new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"), 
];
function _parseString(result, start) {
    try {
        return (0, _strings.toUtf8String)(_parseBytes(result, start));
    } catch (error) {}
    return null;
}
function _parseBytes(result, start) {
    if (result === "0x") return null;
    const offset = (0, _bignumber.BigNumber).from((0, _bytes.hexDataSlice)(result, start, start + 32)).toNumber();
    const length = (0, _bignumber.BigNumber).from((0, _bytes.hexDataSlice)(result, offset, offset + 32)).toNumber();
    return (0, _bytes.hexDataSlice)(result, offset + 32, offset + 32 + length);
}
// Trim off the ipfs:// prefix and return the default gateway URL
function getIpfsLink(link) {
    if (link.match(/^ipfs:\/\/ipfs\//i)) link = link.substring(12);
    else if (link.match(/^ipfs:\/\//i)) link = link.substring(7);
    else logger.throwArgumentError("unsupported IPFS format", "link", link);
    return `https:/\/gateway.ipfs.io/ipfs/${link}`;
}
function numPad(value) {
    const result = (0, _bytes.arrayify)(value);
    if (result.length > 32) throw new Error("internal; should not happen");
    const padded = new Uint8Array(32);
    padded.set(result, 32 - result.length);
    return padded;
}
function bytesPad(value) {
    if (value.length % 32 === 0) return value;
    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
    result.set(value);
    return result;
}
// ABI Encodes a series of (bytes, bytes, ...)
function encodeBytes(datas) {
    const result = [];
    let byteCount = 0;
    // Add place-holders for pointers as we add items
    for(let i = 0; i < datas.length; i++){
        result.push(null);
        byteCount += 32;
    }
    for(let i1 = 0; i1 < datas.length; i1++){
        const data = (0, _bytes.arrayify)(datas[i1]);
        // Update the bytes offset
        result[i1] = numPad(byteCount);
        // The length and padded value of data
        result.push(numPad(data.length));
        result.push(bytesPad(data));
        byteCount += 32 + Math.ceil(data.length / 32) * 32;
    }
    return (0, _bytes.hexConcat)(result);
}
class Resolver {
    // The resolvedAddress is only for creating a ReverseLookup resolver
    constructor(provider, address, name, resolvedAddress){
        (0, _properties.defineReadOnly)(this, "provider", provider);
        (0, _properties.defineReadOnly)(this, "name", name);
        (0, _properties.defineReadOnly)(this, "address", provider.formatter.address(address));
        (0, _properties.defineReadOnly)(this, "_resolvedAddress", resolvedAddress);
    }
    supportsWildcard() {
        if (!this._supportsEip2544) // supportsInterface(bytes4 = selector("resolve(bytes,bytes)"))
        this._supportsEip2544 = this.provider.call({
            to: this.address,
            data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
        }).then((result)=>{
            return (0, _bignumber.BigNumber).from(result).eq(1);
        }).catch((error)=>{
            if (error.code === (0, _logger.Logger).errors.CALL_EXCEPTION) return false;
            // Rethrow the error: link is down, etc. Let future attempts retry.
            this._supportsEip2544 = null;
            throw error;
        });
        return this._supportsEip2544;
    }
    _fetch(selector, parameters) {
        return __awaiter(this, void 0, void 0, function*() {
            // e.g. keccak256("addr(bytes32,uint256)")
            const tx = {
                to: this.address,
                ccipReadEnabled: true,
                data: (0, _bytes.hexConcat)([
                    selector,
                    (0, _hash.namehash)(this.name),
                    parameters || "0x"
                ])
            };
            // Wildcard support; use EIP-2544 to resolve the request
            let parseBytes = false;
            if (yield this.supportsWildcard()) {
                parseBytes = true;
                // selector("resolve(bytes,bytes)")
                tx.data = (0, _bytes.hexConcat)([
                    "0x9061b923",
                    encodeBytes([
                        (0, _hash.dnsEncode)(this.name),
                        tx.data
                    ])
                ]);
            }
            try {
                let result = yield this.provider.call(tx);
                if ((0, _bytes.arrayify)(result).length % 32 === 4) logger.throwError("resolver threw error", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                    transaction: tx,
                    data: result
                });
                if (parseBytes) result = _parseBytes(result, 0);
                return result;
            } catch (error) {
                if (error.code === (0, _logger.Logger).errors.CALL_EXCEPTION) return null;
                throw error;
            }
        });
    }
    _fetchBytes(selector, parameters) {
        return __awaiter(this, void 0, void 0, function*() {
            const result = yield this._fetch(selector, parameters);
            if (result != null) return _parseBytes(result, 0);
            return null;
        });
    }
    _getAddress(coinType, hexBytes) {
        const coinInfo = coinInfos[String(coinType)];
        if (coinInfo == null) logger.throwError(`unsupported coin type: ${coinType}`, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: `getAddress(${coinType})`
        });
        if (coinInfo.ilk === "eth") return this.provider.formatter.address(hexBytes);
        const bytes = (0, _bytes.arrayify)(hexBytes);
        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
        if (coinInfo.p2pkh != null) {
            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
            if (p2pkh) {
                const length = parseInt(p2pkh[1], 16);
                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) return base58Encode((0, _bytes.concat)([
                    [
                        coinInfo.p2pkh
                    ],
                    "0x" + p2pkh[2]
                ]));
            }
        }
        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL
        if (coinInfo.p2sh != null) {
            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
            if (p2sh) {
                const length = parseInt(p2sh[1], 16);
                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) return base58Encode((0, _bytes.concat)([
                    [
                        coinInfo.p2sh
                    ],
                    "0x" + p2sh[2]
                ]));
            }
        }
        // Bech32
        if (coinInfo.prefix != null) {
            const length = bytes[1];
            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program
            let version = bytes[0];
            if (version === 0x00) {
                if (length !== 20 && length !== 32) version = -1;
            } else version = -1;
            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
                const words = (0, _bech32Default.default).toWords(bytes.slice(2));
                words.unshift(version);
                return (0, _bech32Default.default).encode(coinInfo.prefix, words);
            }
        }
        return null;
    }
    getAddress(coinType) {
        return __awaiter(this, void 0, void 0, function*() {
            if (coinType == null) coinType = 60;
            // If Ethereum, use the standard `addr(bytes32)`
            if (coinType === 60) try {
                // keccak256("addr(bytes32)")
                const result = yield this._fetch("0x3b3b57de");
                // No address
                if (result === "0x" || result === (0, _constants.HashZero)) return null;
                return this.provider.formatter.callAddress(result);
            } catch (error) {
                if (error.code === (0, _logger.Logger).errors.CALL_EXCEPTION) return null;
                throw error;
            }
            // keccak256("addr(bytes32,uint256")
            const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
            // No address
            if (hexBytes == null || hexBytes === "0x") return null;
            // Compute the address
            const address = this._getAddress(coinType, hexBytes);
            if (address == null) logger.throwError(`invalid or unsupported coin data`, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: `getAddress(${coinType})`,
                coinType: coinType,
                data: hexBytes
            });
            return address;
        });
    }
    getAvatar() {
        return __awaiter(this, void 0, void 0, function*() {
            const linkage = [
                {
                    type: "name",
                    content: this.name
                }
            ];
            try {
                // test data for ricmoo.eth
                //const avatar = "eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233";
                const avatar = yield this.getText("avatar");
                if (avatar == null) return null;
                for(let i = 0; i < matchers.length; i++){
                    const match = avatar.match(matchers[i]);
                    if (match == null) continue;
                    const scheme = match[1].toLowerCase();
                    switch(scheme){
                        case "https":
                            linkage.push({
                                type: "url",
                                content: avatar
                            });
                            return {
                                linkage,
                                url: avatar
                            };
                        case "data":
                            linkage.push({
                                type: "data",
                                content: avatar
                            });
                            return {
                                linkage,
                                url: avatar
                            };
                        case "ipfs":
                            linkage.push({
                                type: "ipfs",
                                content: avatar
                            });
                            return {
                                linkage,
                                url: getIpfsLink(avatar)
                            };
                        case "erc721":
                        case "erc1155":
                            {
                                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)
                                const selector = scheme === "erc721" ? "0xc87b56dd" : "0x0e89341c";
                                linkage.push({
                                    type: scheme,
                                    content: avatar
                                });
                                // The owner of this name
                                const owner = this._resolvedAddress || (yield this.getAddress());
                                const comps = (match[2] || "").split("/");
                                if (comps.length !== 2) return null;
                                const addr = yield this.provider.formatter.address(comps[0]);
                                const tokenId = (0, _bytes.hexZeroPad)((0, _bignumber.BigNumber).from(comps[1]).toHexString(), 32);
                                // Check that this account owns the token
                                if (scheme === "erc721") {
                                    // ownerOf(uint256 tokenId)
                                    const tokenOwner = this.provider.formatter.callAddress((yield this.provider.call({
                                        to: addr,
                                        data: (0, _bytes.hexConcat)([
                                            "0x6352211e",
                                            tokenId
                                        ])
                                    })));
                                    if (owner !== tokenOwner) return null;
                                    linkage.push({
                                        type: "owner",
                                        content: tokenOwner
                                    });
                                } else if (scheme === "erc1155") {
                                    // balanceOf(address owner, uint256 tokenId)
                                    const balance = (0, _bignumber.BigNumber).from((yield this.provider.call({
                                        to: addr,
                                        data: (0, _bytes.hexConcat)([
                                            "0x00fdd58e",
                                            (0, _bytes.hexZeroPad)(owner, 32),
                                            tokenId
                                        ])
                                    })));
                                    if (balance.isZero()) return null;
                                    linkage.push({
                                        type: "balance",
                                        content: balance.toString()
                                    });
                                }
                                // Call the token contract for the metadata URL
                                const tx = {
                                    to: this.provider.formatter.address(comps[0]),
                                    data: (0, _bytes.hexConcat)([
                                        selector,
                                        tokenId
                                    ])
                                };
                                let metadataUrl = _parseString((yield this.provider.call(tx)), 0);
                                if (metadataUrl == null) return null;
                                linkage.push({
                                    type: "metadata-url-base",
                                    content: metadataUrl
                                });
                                // ERC-1155 allows a generic {id} in the URL
                                if (scheme === "erc1155") {
                                    metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                                    linkage.push({
                                        type: "metadata-url-expanded",
                                        content: metadataUrl
                                    });
                                }
                                // Transform IPFS metadata links
                                if (metadataUrl.match(/^ipfs:/i)) metadataUrl = getIpfsLink(metadataUrl);
                                linkage.push({
                                    type: "metadata-url",
                                    content: metadataUrl
                                });
                                // Get the token metadata
                                const metadata = yield (0, _web.fetchJson)(metadataUrl);
                                if (!metadata) return null;
                                linkage.push({
                                    type: "metadata",
                                    content: JSON.stringify(metadata)
                                });
                                // Pull the image URL out
                                let imageUrl = metadata.image;
                                if (typeof imageUrl !== "string") return null;
                                if (imageUrl.match(/^(https:\/\/|data:)/i)) ;
                                else {
                                    // Transform IPFS link to gateway
                                    const ipfs = imageUrl.match(matcherIpfs);
                                    if (ipfs == null) return null;
                                    linkage.push({
                                        type: "url-ipfs",
                                        content: imageUrl
                                    });
                                    imageUrl = getIpfsLink(imageUrl);
                                }
                                linkage.push({
                                    type: "url",
                                    content: imageUrl
                                });
                                return {
                                    linkage,
                                    url: imageUrl
                                };
                            }
                    }
                }
            } catch (error) {}
            return null;
        });
    }
    getContentHash() {
        return __awaiter(this, void 0, void 0, function*() {
            // keccak256("contenthash()")
            const hexBytes = yield this._fetchBytes("0xbc1c58d1");
            // No contenthash
            if (hexBytes == null || hexBytes === "0x") return null;
            // IPFS (CID: 1, Type: DAG-PB)
            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
            if (ipfs) {
                const length = parseInt(ipfs[3], 16);
                if (ipfs[4].length === length * 2) return "ipfs://" + (0, _basex.Base58).encode("0x" + ipfs[1]);
            }
            // IPNS (CID: 1, Type: libp2p-key)
            const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
            if (ipns) {
                const length = parseInt(ipns[3], 16);
                if (ipns[4].length === length * 2) return "ipns://" + (0, _basex.Base58).encode("0x" + ipns[1]);
            }
            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)
            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
            if (swarm) {
                if (swarm[1].length === 64) return "bzz://" + swarm[1];
            }
            const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
            if (skynet) {
                if (skynet[1].length === 68) {
                    // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5
                    const urlSafe = {
                        "=": "",
                        "+": "-",
                        "/": "_"
                    };
                    const hash = (0, _base64.encode)("0x" + skynet[1]).replace(/[=+\/]/g, (a)=>urlSafe[a]);
                    return "sia://" + hash;
                }
            }
            return logger.throwError(`invalid or unsupported content hash data`, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: "getContentHash()",
                data: hexBytes
            });
        });
    }
    getText(key) {
        return __awaiter(this, void 0, void 0, function*() {
            // The key encoded as parameter to fetchBytes
            let keyBytes = (0, _strings.toUtf8Bytes)(key);
            // The nodehash consumes the first slot, so the string pointer targets
            // offset 64, with the length at offset 64 and data starting at offset 96
            keyBytes = (0, _bytes.concat)([
                bytes32ify(64),
                bytes32ify(keyBytes.length),
                keyBytes
            ]);
            // Pad to word-size (32 bytes)
            if (keyBytes.length % 32 !== 0) keyBytes = (0, _bytes.concat)([
                keyBytes,
                (0, _bytes.hexZeroPad)("0x", 32 - key.length % 32)
            ]);
            const hexBytes = yield this._fetchBytes("0x59d1d43c", (0, _bytes.hexlify)(keyBytes));
            if (hexBytes == null || hexBytes === "0x") return null;
            return (0, _strings.toUtf8String)(hexBytes);
        });
    }
}
let defaultFormatter = null;
let nextPollId = 1;
class BaseProvider extends (0, _abstractProvider.Provider) {
    /**
     *  ready
     *
     *  A Promise<Network> that resolves only once the provider is ready.
     *
     *  Sub-classes that call the super with a network without a chainId
     *  MUST set this. Standard named networks have a known chainId.
     *
     */ constructor(network){
        super();
        // Events being listened to
        this._events = [];
        this._emitted = {
            block: -2
        };
        this.disableCcipRead = false;
        this.formatter = new.target.getFormatter();
        // If network is any, this Provider allows the underlying
        // network to change dynamically, and we auto-detect the
        // current network
        (0, _properties.defineReadOnly)(this, "anyNetwork", network === "any");
        if (this.anyNetwork) network = this.detectNetwork();
        if (network instanceof Promise) {
            this._networkPromise = network;
            // Squash any "unhandled promise" errors; that do not need to be handled
            network.catch((error)=>{});
            // Trigger initial network setting (async)
            this._ready().catch((error)=>{});
        } else {
            const knownNetwork = (0, _properties.getStatic)(new.target, "getNetwork")(network);
            if (knownNetwork) {
                (0, _properties.defineReadOnly)(this, "_network", knownNetwork);
                this.emit("network", knownNetwork, null);
            } else logger.throwArgumentError("invalid network", "network", network);
        }
        this._maxInternalBlockNumber = -1024;
        this._lastBlockNumber = -2;
        this._maxFilterBlockRange = 10;
        this._pollingInterval = 4000;
        this._fastQueryDate = 0;
    }
    _ready() {
        return __awaiter(this, void 0, void 0, function*() {
            if (this._network == null) {
                let network = null;
                if (this._networkPromise) try {
                    network = yield this._networkPromise;
                } catch (error) {}
                // Try the Provider's network detection (this MUST throw if it cannot)
                if (network == null) network = yield this.detectNetwork();
                // This should never happen; every Provider sub-class should have
                // suggested a network by here (or have thrown).
                if (!network) logger.throwError("no network detected", (0, _logger.Logger).errors.UNKNOWN_ERROR, {});
                // Possible this call stacked so do not call defineReadOnly again
                if (this._network == null) {
                    if (this.anyNetwork) this._network = network;
                    else (0, _properties.defineReadOnly)(this, "_network", network);
                    this.emit("network", network, null);
                }
            }
            return this._network;
        });
    }
    // This will always return the most recently established network.
    // For "any", this can change (a "network" event is emitted before
    // any change is reflected); otherwise this cannot change
    get ready() {
        return (0, _web.poll)(()=>{
            return this._ready().then((network)=>{
                return network;
            }, (error)=>{
                // If the network isn't running yet, we will wait
                if (error.code === (0, _logger.Logger).errors.NETWORK_ERROR && error.event === "noNetwork") return undefined;
                throw error;
            });
        });
    }
    // @TODO: Remove this and just create a singleton formatter
    static getFormatter() {
        if (defaultFormatter == null) defaultFormatter = new (0, _formatter.Formatter)();
        return defaultFormatter;
    }
    // @TODO: Remove this and just use getNetwork
    static getNetwork(network) {
        return (0, _networks.getNetwork)(network == null ? "homestead" : network);
    }
    ccipReadFetch(tx, calldata, urls) {
        return __awaiter(this, void 0, void 0, function*() {
            if (this.disableCcipRead || urls.length === 0) return null;
            const sender = tx.to.toLowerCase();
            const data = calldata.toLowerCase();
            const errorMessages = [];
            for(let i = 0; i < urls.length; i++){
                const url = urls[i];
                // URL expansion
                const href = url.replace("{sender}", sender).replace("{data}", data);
                // If no {data} is present, use POST; otherwise GET
                const json = url.indexOf("{data}") >= 0 ? null : JSON.stringify({
                    data,
                    sender
                });
                const result = yield (0, _web.fetchJson)({
                    url: href,
                    errorPassThrough: true
                }, json, (value, response)=>{
                    value.status = response.statusCode;
                    return value;
                });
                if (result.data) return result.data;
                const errorMessage = result.message || "unknown error";
                // 4xx indicates the result is not present; stop
                if (result.status >= 400 && result.status < 500) return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, (0, _logger.Logger).errors.SERVER_ERROR, {
                    url,
                    errorMessage
                });
                // 5xx indicates server issue; try the next url
                errorMessages.push(errorMessage);
            }
            return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m)=>JSON.stringify(m)).join(", ")}`, (0, _logger.Logger).errors.SERVER_ERROR, {
                urls,
                errorMessages
            });
        });
    }
    // Fetches the blockNumber, but will reuse any result that is less
    // than maxAge old or has been requested since the last request
    _getInternalBlockNumber(maxAge) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this._ready();
            // Allowing stale data up to maxAge old
            if (maxAge > 0) // While there are pending internal block requests...
            while(this._internalBlockNumber){
                // ..."remember" which fetch we started with
                const internalBlockNumber = this._internalBlockNumber;
                try {
                    // Check the result is not too stale
                    const result = yield internalBlockNumber;
                    if (getTime() - result.respTime <= maxAge) return result.blockNumber;
                    break;
                } catch (error) {
                    // The fetch rejected; if we are the first to get the
                    // rejection, drop through so we replace it with a new
                    // fetch; all others blocked will then get that fetch
                    // which won't match the one they "remembered" and loop
                    if (this._internalBlockNumber === internalBlockNumber) break;
                }
            }
            const reqTime = getTime();
            const checkInternalBlockNumber = (0, _properties.resolveProperties)({
                blockNumber: this.perform("getBlockNumber", {}),
                networkError: this.getNetwork().then((network)=>null, (error)=>error)
            }).then(({ blockNumber , networkError  })=>{
                if (networkError) {
                    // Unremember this bad internal block number
                    if (this._internalBlockNumber === checkInternalBlockNumber) this._internalBlockNumber = null;
                    throw networkError;
                }
                const respTime = getTime();
                blockNumber = (0, _bignumber.BigNumber).from(blockNumber).toNumber();
                if (blockNumber < this._maxInternalBlockNumber) blockNumber = this._maxInternalBlockNumber;
                this._maxInternalBlockNumber = blockNumber;
                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?
                return {
                    blockNumber,
                    reqTime,
                    respTime
                };
            });
            this._internalBlockNumber = checkInternalBlockNumber;
            // Swallow unhandled exceptions; if needed they are handled else where
            checkInternalBlockNumber.catch((error)=>{
                // Don't null the dead (rejected) fetch, if it has already been updated
                if (this._internalBlockNumber === checkInternalBlockNumber) this._internalBlockNumber = null;
            });
            return (yield checkInternalBlockNumber).blockNumber;
        });
    }
    poll() {
        return __awaiter(this, void 0, void 0, function*() {
            const pollId = nextPollId++;
            // Track all running promises, so we can trigger a post-poll once they are complete
            const runners = [];
            let blockNumber = null;
            try {
                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
            } catch (error1) {
                this.emit("error", error1);
                return;
            }
            this._setFastBlockNumber(blockNumber);
            // Emit a poll event after we have the latest (fast) block number
            this.emit("poll", pollId, blockNumber);
            // If the block has not changed, meh.
            if (blockNumber === this._lastBlockNumber) {
                this.emit("didPoll", pollId);
                return;
            }
            // First polling cycle, trigger a "block" events
            if (this._emitted.block === -2) this._emitted.block = blockNumber - 1;
            if (Math.abs(this._emitted.block - blockNumber) > 1000) {
                logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
                this.emit("error", logger.makeError("network block skew detected", (0, _logger.Logger).errors.NETWORK_ERROR, {
                    blockNumber: blockNumber,
                    event: "blockSkew",
                    previousBlockNumber: this._emitted.block
                }));
                this.emit("block", blockNumber);
            } else // Notify all listener for each block that has passed
            for(let i = this._emitted.block + 1; i <= blockNumber; i++)this.emit("block", i);
            // The emitted block was updated, check for obsolete events
            if (this._emitted.block !== blockNumber) {
                this._emitted.block = blockNumber;
                Object.keys(this._emitted).forEach((key)=>{
                    // The block event does not expire
                    if (key === "block") return;
                    // The block we were at when we emitted this event
                    const eventBlockNumber = this._emitted[key];
                    // We cannot garbage collect pending transactions or blocks here
                    // They should be garbage collected by the Provider when setting
                    // "pending" events
                    if (eventBlockNumber === "pending") return;
                    // Evict any transaction hashes or block hashes over 12 blocks
                    // old, since they should not return null anyways
                    if (blockNumber - eventBlockNumber > 12) delete this._emitted[key];
                });
            }
            // First polling cycle
            if (this._lastBlockNumber === -2) this._lastBlockNumber = blockNumber - 1;
            // Find all transaction hashes we are waiting on
            this._events.forEach((event)=>{
                switch(event.type){
                    case "tx":
                        {
                            const hash = event.hash;
                            let runner = this.getTransactionReceipt(hash).then((receipt)=>{
                                if (!receipt || receipt.blockNumber == null) return null;
                                this._emitted["t:" + hash] = receipt.blockNumber;
                                this.emit(hash, receipt);
                                return null;
                            }).catch((error)=>{
                                this.emit("error", error);
                            });
                            runners.push(runner);
                            break;
                        }
                    case "filter":
                        // We only allow a single getLogs to be in-flight at a time
                        if (!event._inflight) {
                            event._inflight = true;
                            // Filter from the last known event; due to load-balancing
                            // and some nodes returning updated block numbers before
                            // indexing events, a logs result with 0 entries cannot be
                            // trusted and we must retry a range which includes it again
                            const filter = event.filter;
                            filter.fromBlock = event._lastBlockNumber + 1;
                            filter.toBlock = blockNumber;
                            // Prevent fitler ranges from growing too wild
                            if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;
                            const runner = this.getLogs(filter).then((logs)=>{
                                // Allow the next getLogs
                                event._inflight = false;
                                if (logs.length === 0) return;
                                logs.forEach((log)=>{
                                    // Only when we get an event for a given block number
                                    // can we trust the events are indexed
                                    if (log.blockNumber > event._lastBlockNumber) event._lastBlockNumber = log.blockNumber;
                                    // Make sure we stall requests to fetch blocks and txs
                                    this._emitted["b:" + log.blockHash] = log.blockNumber;
                                    this._emitted["t:" + log.transactionHash] = log.blockNumber;
                                    this.emit(filter, log);
                                });
                            }).catch((error)=>{
                                this.emit("error", error);
                                // Allow another getLogs (the range was not updated)
                                event._inflight = false;
                            });
                            runners.push(runner);
                        }
                        break;
                }
            });
            this._lastBlockNumber = blockNumber;
            // Once all events for this loop have been processed, emit "didPoll"
            Promise.all(runners).then(()=>{
                this.emit("didPoll", pollId);
            }).catch((error)=>{
                this.emit("error", error);
            });
            return;
        });
    }
    // Deprecated; do not use this
    resetEventsBlock(blockNumber) {
        this._lastBlockNumber = blockNumber - 1;
        if (this.polling) this.poll();
    }
    get network() {
        return this._network;
    }
    // This method should query the network if the underlying network
    // can change, such as when connected to a JSON-RPC backend
    detectNetwork() {
        return __awaiter(this, void 0, void 0, function*() {
            return logger.throwError("provider does not support network detection", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: "provider.detectNetwork"
            });
        });
    }
    getNetwork() {
        return __awaiter(this, void 0, void 0, function*() {
            const network = yield this._ready();
            // Make sure we are still connected to the same network; this is
            // only an external call for backends which can have the underlying
            // network change spontaneously
            const currentNetwork = yield this.detectNetwork();
            if (network.chainId !== currentNetwork.chainId) {
                // We are allowing network changes, things can get complex fast;
                // make sure you know what you are doing if you use "any"
                if (this.anyNetwork) {
                    this._network = currentNetwork;
                    // Reset all internal block number guards and caches
                    this._lastBlockNumber = -2;
                    this._fastBlockNumber = null;
                    this._fastBlockNumberPromise = null;
                    this._fastQueryDate = 0;
                    this._emitted.block = -2;
                    this._maxInternalBlockNumber = -1024;
                    this._internalBlockNumber = null;
                    // The "network" event MUST happen before this method resolves
                    // so any events have a chance to unregister, so we stall an
                    // additional event loop before returning from /this/ call
                    this.emit("network", currentNetwork, network);
                    yield stall(0);
                    return this._network;
                }
                const error = logger.makeError("underlying network changed", (0, _logger.Logger).errors.NETWORK_ERROR, {
                    event: "changed",
                    network: network,
                    detectedNetwork: currentNetwork
                });
                this.emit("error", error);
                throw error;
            }
            return network;
        });
    }
    get blockNumber() {
        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber)=>{
            this._setFastBlockNumber(blockNumber);
        }, (error)=>{});
        return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
    }
    get polling() {
        return this._poller != null;
    }
    set polling(value) {
        if (value && !this._poller) {
            this._poller = setInterval(()=>{
                this.poll();
            }, this.pollingInterval);
            if (!this._bootstrapPoll) this._bootstrapPoll = setTimeout(()=>{
                this.poll();
                // We block additional polls until the polling interval
                // is done, to prevent overwhelming the poll function
                this._bootstrapPoll = setTimeout(()=>{
                    // If polling was disabled, something may require a poke
                    // since starting the bootstrap poll and it was disabled
                    if (!this._poller) this.poll();
                    // Clear out the bootstrap so we can do another
                    this._bootstrapPoll = null;
                }, this.pollingInterval);
            }, 0);
        } else if (!value && this._poller) {
            clearInterval(this._poller);
            this._poller = null;
        }
    }
    get pollingInterval() {
        return this._pollingInterval;
    }
    set pollingInterval(value) {
        if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) throw new Error("invalid polling interval");
        this._pollingInterval = value;
        if (this._poller) {
            clearInterval(this._poller);
            this._poller = setInterval(()=>{
                this.poll();
            }, this._pollingInterval);
        }
    }
    _getFastBlockNumber() {
        const now = getTime();
        // Stale block number, request a newer value
        if (now - this._fastQueryDate > 2 * this._pollingInterval) {
            this._fastQueryDate = now;
            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber)=>{
                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) this._fastBlockNumber = blockNumber;
                return this._fastBlockNumber;
            });
        }
        return this._fastBlockNumberPromise;
    }
    _setFastBlockNumber(blockNumber) {
        // Older block, maybe a stale request
        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) return;
        // Update the time we updated the blocknumber
        this._fastQueryDate = getTime();
        // Newer block number, use  it
        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
            this._fastBlockNumber = blockNumber;
            this._fastBlockNumberPromise = Promise.resolve(blockNumber);
        }
    }
    waitForTransaction(transactionHash, confirmations, timeout) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);
        });
    }
    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
        return __awaiter(this, void 0, void 0, function*() {
            const receipt1 = yield this.getTransactionReceipt(transactionHash);
            // Receipt is already good
            if ((receipt1 ? receipt1.confirmations : 0) >= confirmations) return receipt1;
            // Poll until the receipt is good...
            return new Promise((resolve, reject)=>{
                const cancelFuncs = [];
                let done = false;
                const alreadyDone = function() {
                    if (done) return true;
                    done = true;
                    cancelFuncs.forEach((func)=>{
                        func();
                    });
                    return false;
                };
                const minedHandler = (receipt)=>{
                    if (receipt.confirmations < confirmations) return;
                    if (alreadyDone()) return;
                    resolve(receipt);
                };
                this.on(transactionHash, minedHandler);
                cancelFuncs.push(()=>{
                    this.removeListener(transactionHash, minedHandler);
                });
                if (replaceable) {
                    let lastBlockNumber = replaceable.startBlock;
                    let scannedBlock = null;
                    const replaceHandler = (blockNumber)=>__awaiter(this, void 0, void 0, function*() {
                            if (done) return;
                            // Wait 1 second; this is only used in the case of a fault, so
                            // we will trade off a little bit of latency for more consistent
                            // results and fewer JSON-RPC calls
                            yield stall(1000);
                            this.getTransactionCount(replaceable.from).then((nonce)=>__awaiter(this, void 0, void 0, function*() {
                                    if (done) return;
                                    if (nonce <= replaceable.nonce) lastBlockNumber = blockNumber;
                                    else {
                                        // First check if the transaction was mined
                                        {
                                            const mined = yield this.getTransaction(transactionHash);
                                            if (mined && mined.blockNumber != null) return;
                                        }
                                        // First time scanning. We start a little earlier for some
                                        // wiggle room here to handle the eventually consistent nature
                                        // of blockchain (e.g. the getTransactionCount was for a
                                        // different block)
                                        if (scannedBlock == null) {
                                            scannedBlock = lastBlockNumber - 3;
                                            if (scannedBlock < replaceable.startBlock) scannedBlock = replaceable.startBlock;
                                        }
                                        while(scannedBlock <= blockNumber){
                                            if (done) return;
                                            const block = yield this.getBlockWithTransactions(scannedBlock);
                                            for(let ti = 0; ti < block.transactions.length; ti++){
                                                const tx = block.transactions[ti];
                                                // Successfully mined!
                                                if (tx.hash === transactionHash) return;
                                                // Matches our transaction from and nonce; its a replacement
                                                if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                                                    if (done) return;
                                                    // Get the receipt of the replacement
                                                    const receipt = yield this.waitForTransaction(tx.hash, confirmations);
                                                    // Already resolved or rejected (prolly a timeout)
                                                    if (alreadyDone()) return;
                                                    // The reason we were replaced
                                                    let reason = "replaced";
                                                    if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) reason = "repriced";
                                                    else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) reason = "cancelled";
                                                    // Explain why we were replaced
                                                    reject(logger.makeError("transaction was replaced", (0, _logger.Logger).errors.TRANSACTION_REPLACED, {
                                                        cancelled: reason === "replaced" || reason === "cancelled",
                                                        reason,
                                                        replacement: this._wrapTransaction(tx),
                                                        hash: transactionHash,
                                                        receipt
                                                    }));
                                                    return;
                                                }
                                            }
                                            scannedBlock++;
                                        }
                                    }
                                    if (done) return;
                                    this.once("block", replaceHandler);
                                }), (error)=>{
                                if (done) return;
                                this.once("block", replaceHandler);
                            });
                        });
                    if (done) return;
                    this.once("block", replaceHandler);
                    cancelFuncs.push(()=>{
                        this.removeListener("block", replaceHandler);
                    });
                }
                if (typeof timeout === "number" && timeout > 0) {
                    const timer = setTimeout(()=>{
                        if (alreadyDone()) return;
                        reject(logger.makeError("timeout exceeded", (0, _logger.Logger).errors.TIMEOUT, {
                            timeout: timeout
                        }));
                    }, timeout);
                    if (timer.unref) timer.unref();
                    cancelFuncs.push(()=>{
                        clearTimeout(timer);
                    });
                }
            });
        });
    }
    getBlockNumber() {
        return __awaiter(this, void 0, void 0, function*() {
            return this._getInternalBlockNumber(0);
        });
    }
    getGasPrice() {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const result = yield this.perform("getGasPrice", {});
            try {
                return (0, _bignumber.BigNumber).from(result);
            } catch (error) {
                return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                    method: "getGasPrice",
                    result,
                    error
                });
            }
        });
    }
    getBalance(addressOrName, blockTag) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const params = yield (0, _properties.resolveProperties)({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag)
            });
            const result = yield this.perform("getBalance", params);
            try {
                return (0, _bignumber.BigNumber).from(result);
            } catch (error) {
                return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                    method: "getBalance",
                    params,
                    result,
                    error
                });
            }
        });
    }
    getTransactionCount(addressOrName, blockTag) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const params = yield (0, _properties.resolveProperties)({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag)
            });
            const result = yield this.perform("getTransactionCount", params);
            try {
                return (0, _bignumber.BigNumber).from(result).toNumber();
            } catch (error) {
                return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                    method: "getTransactionCount",
                    params,
                    result,
                    error
                });
            }
        });
    }
    getCode(addressOrName, blockTag) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const params = yield (0, _properties.resolveProperties)({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag)
            });
            const result = yield this.perform("getCode", params);
            try {
                return (0, _bytes.hexlify)(result);
            } catch (error) {
                return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                    method: "getCode",
                    params,
                    result,
                    error
                });
            }
        });
    }
    getStorageAt(addressOrName, position, blockTag) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const params = yield (0, _properties.resolveProperties)({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag),
                position: Promise.resolve(position).then((p)=>(0, _bytes.hexValue)(p))
            });
            const result = yield this.perform("getStorageAt", params);
            try {
                return (0, _bytes.hexlify)(result);
            } catch (error) {
                return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                    method: "getStorageAt",
                    params,
                    result,
                    error
                });
            }
        });
    }
    // This should be called by any subclass wrapping a TransactionResponse
    _wrapTransaction(tx, hash, startBlock) {
        if (hash != null && (0, _bytes.hexDataLength)(hash) !== 32) throw new Error("invalid response - sendTransaction");
        const result = tx;
        // Check the hash we expect is the same as the hash the server reported
        if (hash != null && tx.hash !== hash) logger.throwError("Transaction hash mismatch from Provider.sendTransaction.", (0, _logger.Logger).errors.UNKNOWN_ERROR, {
            expectedHash: tx.hash,
            returnedHash: hash
        });
        result.wait = (confirms, timeout)=>__awaiter(this, void 0, void 0, function*() {
                if (confirms == null) confirms = 1;
                if (timeout == null) timeout = 0;
                // Get the details to detect replacement
                let replacement = undefined;
                if (confirms !== 0 && startBlock != null) replacement = {
                    data: tx.data,
                    from: tx.from,
                    nonce: tx.nonce,
                    to: tx.to,
                    value: tx.value,
                    startBlock
                };
                const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
                if (receipt == null && confirms === 0) return null;
                // No longer pending, allow the polling loop to garbage collect this
                this._emitted["t:" + tx.hash] = receipt.blockNumber;
                if (receipt.status === 0) logger.throwError("transaction failed", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                    transactionHash: tx.hash,
                    transaction: tx,
                    receipt: receipt
                });
                return receipt;
            });
        return result;
    }
    sendTransaction(signedTransaction) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const hexTx = yield Promise.resolve(signedTransaction).then((t)=>(0, _bytes.hexlify)(t));
            const tx = this.formatter.transaction(signedTransaction);
            if (tx.confirmations == null) tx.confirmations = 0;
            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
            try {
                const hash = yield this.perform("sendTransaction", {
                    signedTransaction: hexTx
                });
                return this._wrapTransaction(tx, hash, blockNumber);
            } catch (error) {
                error.transaction = tx;
                error.transactionHash = tx.hash;
                throw error;
            }
        });
    }
    _getTransactionRequest(transaction) {
        return __awaiter(this, void 0, void 0, function*() {
            const values = yield transaction;
            const tx = {};
            [
                "from",
                "to"
            ].forEach((key)=>{
                if (values[key] == null) return;
                tx[key] = Promise.resolve(values[key]).then((v)=>v ? this._getAddress(v) : null);
            });
            [
                "gasLimit",
                "gasPrice",
                "maxFeePerGas",
                "maxPriorityFeePerGas",
                "value"
            ].forEach((key)=>{
                if (values[key] == null) return;
                tx[key] = Promise.resolve(values[key]).then((v)=>v ? (0, _bignumber.BigNumber).from(v) : null);
            });
            [
                "type"
            ].forEach((key)=>{
                if (values[key] == null) return;
                tx[key] = Promise.resolve(values[key]).then((v)=>v != null ? v : null);
            });
            if (values.accessList) tx.accessList = this.formatter.accessList(values.accessList);
            [
                "data"
            ].forEach((key)=>{
                if (values[key] == null) return;
                tx[key] = Promise.resolve(values[key]).then((v)=>v ? (0, _bytes.hexlify)(v) : null);
            });
            return this.formatter.transactionRequest((yield (0, _properties.resolveProperties)(tx)));
        });
    }
    _getFilter(filter) {
        return __awaiter(this, void 0, void 0, function*() {
            filter = yield filter;
            const result = {};
            if (filter.address != null) result.address = this._getAddress(filter.address);
            [
                "blockHash",
                "topics"
            ].forEach((key)=>{
                if (filter[key] == null) return;
                result[key] = filter[key];
            });
            [
                "fromBlock",
                "toBlock"
            ].forEach((key)=>{
                if (filter[key] == null) return;
                result[key] = this._getBlockTag(filter[key]);
            });
            return this.formatter.filter((yield (0, _properties.resolveProperties)(result)));
        });
    }
    _call(transaction, blockTag, attempt) {
        return __awaiter(this, void 0, void 0, function*() {
            if (attempt >= MAX_CCIP_REDIRECTS) logger.throwError("CCIP read exceeded maximum redirections", (0, _logger.Logger).errors.SERVER_ERROR, {
                redirects: attempt,
                transaction
            });
            const txSender = transaction.to;
            const result = yield this.perform("call", {
                transaction,
                blockTag
            });
            // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)
            if (attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && (0, _bytes.hexDataLength)(result) % 32 === 4) try {
                const data = (0, _bytes.hexDataSlice)(result, 4);
                // Check the sender of the OffchainLookup matches the transaction
                const sender = (0, _bytes.hexDataSlice)(data, 0, 32);
                if (!(0, _bignumber.BigNumber).from(sender).eq(txSender)) logger.throwError("CCIP Read sender did not match", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                    name: "OffchainLookup",
                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                    transaction,
                    data: result
                });
                // Read the URLs from the response
                const urls = [];
                const urlsOffset = (0, _bignumber.BigNumber).from((0, _bytes.hexDataSlice)(data, 32, 64)).toNumber();
                const urlsLength = (0, _bignumber.BigNumber).from((0, _bytes.hexDataSlice)(data, urlsOffset, urlsOffset + 32)).toNumber();
                const urlsData = (0, _bytes.hexDataSlice)(data, urlsOffset + 32);
                for(let u = 0; u < urlsLength; u++){
                    const url = _parseString(urlsData, u * 32);
                    if (url == null) logger.throwError("CCIP Read contained corrupt URL string", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                        name: "OffchainLookup",
                        signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                        transaction,
                        data: result
                    });
                    urls.push(url);
                }
                // Get the CCIP calldata to forward
                const calldata = _parseBytes(data, 64);
                // Get the callbackSelector (bytes4)
                if (!(0, _bignumber.BigNumber).from((0, _bytes.hexDataSlice)(data, 100, 128)).isZero()) logger.throwError("CCIP Read callback selector included junk", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                    name: "OffchainLookup",
                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                    transaction,
                    data: result
                });
                const callbackSelector = (0, _bytes.hexDataSlice)(data, 96, 100);
                // Get the extra data to send back to the contract as context
                const extraData = _parseBytes(data, 128);
                const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);
                if (ccipResult == null) logger.throwError("CCIP Read disabled or provided no URLs", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                    name: "OffchainLookup",
                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                    transaction,
                    data: result
                });
                const tx = {
                    to: txSender,
                    data: (0, _bytes.hexConcat)([
                        callbackSelector,
                        encodeBytes([
                            ccipResult,
                            extraData
                        ])
                    ])
                };
                return this._call(tx, blockTag, attempt + 1);
            } catch (error) {
                if (error.code === (0, _logger.Logger).errors.SERVER_ERROR) throw error;
            }
            try {
                return (0, _bytes.hexlify)(result);
            } catch (error2) {
                return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                    method: "call",
                    params: {
                        transaction,
                        blockTag
                    },
                    result,
                    error: error2
                });
            }
        });
    }
    call(transaction, blockTag) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const resolved = yield (0, _properties.resolveProperties)({
                transaction: this._getTransactionRequest(transaction),
                blockTag: this._getBlockTag(blockTag),
                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
            });
            return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);
        });
    }
    estimateGas(transaction) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const params = yield (0, _properties.resolveProperties)({
                transaction: this._getTransactionRequest(transaction)
            });
            const result = yield this.perform("estimateGas", params);
            try {
                return (0, _bignumber.BigNumber).from(result);
            } catch (error) {
                return logger.throwError("bad result from backend", (0, _logger.Logger).errors.SERVER_ERROR, {
                    method: "estimateGas",
                    params,
                    result,
                    error
                });
            }
        });
    }
    _getAddress(addressOrName) {
        return __awaiter(this, void 0, void 0, function*() {
            addressOrName = yield addressOrName;
            if (typeof addressOrName !== "string") logger.throwArgumentError("invalid address or ENS name", "name", addressOrName);
            const address = yield this.resolveName(addressOrName);
            if (address == null) logger.throwError("ENS name not configured", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: `resolveName(${JSON.stringify(addressOrName)})`
            });
            return address;
        });
    }
    _getBlock(blockHashOrBlockTag, includeTransactions) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.getNetwork();
            blockHashOrBlockTag = yield blockHashOrBlockTag;
            // If blockTag is a number (not "latest", etc), this is the block number
            let blockNumber1 = -128;
            const params = {
                includeTransactions: !!includeTransactions
            };
            if ((0, _bytes.isHexString)(blockHashOrBlockTag, 32)) params.blockHash = blockHashOrBlockTag;
            else try {
                params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
                if ((0, _bytes.isHexString)(params.blockTag)) blockNumber1 = parseInt(params.blockTag.substring(2), 16);
            } catch (error) {
                logger.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
            }
            return (0, _web.poll)(()=>__awaiter(this, void 0, void 0, function*() {
                    const block = yield this.perform("getBlock", params);
                    // Block was not found
                    if (block == null) {
                        // For blockhashes, if we didn't say it existed, that blockhash may
                        // not exist. If we did see it though, perhaps from a log, we know
                        // it exists, and this node is just not caught up yet.
                        if (params.blockHash != null) {
                            if (this._emitted["b:" + params.blockHash] == null) return null;
                        }
                        // For block tags, if we are asking for a future block, we return null
                        if (params.blockTag != null) {
                            if (blockNumber1 > this._emitted.block) return null;
                        }
                        // Retry on the next block
                        return undefined;
                    }
                    // Add transactions
                    if (includeTransactions) {
                        let blockNumber = null;
                        for(let i = 0; i < block.transactions.length; i++){
                            const tx = block.transactions[i];
                            if (tx.blockNumber == null) tx.confirmations = 0;
                            else if (tx.confirmations == null) {
                                if (blockNumber == null) blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                                // Add the confirmations using the fast block number (pessimistic)
                                let confirmations = blockNumber - tx.blockNumber + 1;
                                if (confirmations <= 0) confirmations = 1;
                                tx.confirmations = confirmations;
                            }
                        }
                        const blockWithTxs = this.formatter.blockWithTransactions(block);
                        blockWithTxs.transactions = blockWithTxs.transactions.map((tx)=>this._wrapTransaction(tx));
                        return blockWithTxs;
                    }
                    return this.formatter.block(block);
                }), {
                oncePoll: this
            });
        });
    }
    getBlock(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, false);
    }
    getBlockWithTransactions(blockHashOrBlockTag) {
        return this._getBlock(blockHashOrBlockTag, true);
    }
    getTransaction(transactionHash) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.getNetwork();
            transactionHash = yield transactionHash;
            const params = {
                transactionHash: this.formatter.hash(transactionHash, true)
            };
            return (0, _web.poll)(()=>__awaiter(this, void 0, void 0, function*() {
                    const result = yield this.perform("getTransaction", params);
                    if (result == null) {
                        if (this._emitted["t:" + transactionHash] == null) return null;
                        return undefined;
                    }
                    const tx = this.formatter.transactionResponse(result);
                    if (tx.blockNumber == null) tx.confirmations = 0;
                    else if (tx.confirmations == null) {
                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        // Add the confirmations using the fast block number (pessimistic)
                        let confirmations = blockNumber - tx.blockNumber + 1;
                        if (confirmations <= 0) confirmations = 1;
                        tx.confirmations = confirmations;
                    }
                    return this._wrapTransaction(tx);
                }), {
                oncePoll: this
            });
        });
    }
    getTransactionReceipt(transactionHash) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.getNetwork();
            transactionHash = yield transactionHash;
            const params = {
                transactionHash: this.formatter.hash(transactionHash, true)
            };
            return (0, _web.poll)(()=>__awaiter(this, void 0, void 0, function*() {
                    const result = yield this.perform("getTransactionReceipt", params);
                    if (result == null) {
                        if (this._emitted["t:" + transactionHash] == null) return null;
                        return undefined;
                    }
                    // "geth-etc" returns receipts before they are ready
                    if (result.blockHash == null) return undefined;
                    const receipt = this.formatter.receipt(result);
                    if (receipt.blockNumber == null) receipt.confirmations = 0;
                    else if (receipt.confirmations == null) {
                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        // Add the confirmations using the fast block number (pessimistic)
                        let confirmations = blockNumber - receipt.blockNumber + 1;
                        if (confirmations <= 0) confirmations = 1;
                        receipt.confirmations = confirmations;
                    }
                    return receipt;
                }), {
                oncePoll: this
            });
        });
    }
    getLogs(filter) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.getNetwork();
            const params = yield (0, _properties.resolveProperties)({
                filter: this._getFilter(filter)
            });
            const logs = yield this.perform("getLogs", params);
            logs.forEach((log)=>{
                if (log.removed == null) log.removed = false;
            });
            return (0, _formatter.Formatter).arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
        });
    }
    getEtherPrice() {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.getNetwork();
            return this.perform("getEtherPrice", {});
        });
    }
    _getBlockTag(blockTag) {
        return __awaiter(this, void 0, void 0, function*() {
            blockTag = yield blockTag;
            if (typeof blockTag === "number" && blockTag < 0) {
                if (blockTag % 1) logger.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                blockNumber += blockTag;
                if (blockNumber < 0) blockNumber = 0;
                return this.formatter.blockTag(blockNumber);
            }
            return this.formatter.blockTag(blockTag);
        });
    }
    getResolver(name) {
        return __awaiter(this, void 0, void 0, function*() {
            let currentName = name;
            while(true){
                if (currentName === "" || currentName === ".") return null;
                // Optimization since the eth node cannot change and does
                // not have a wildcard resolver
                if (name !== "eth" && currentName === "eth") return null;
                // Check the current node for a resolver
                const addr = yield this._getResolver(currentName, "getResolver");
                // Found a resolver!
                if (addr != null) {
                    const resolver = new Resolver(this, addr, name);
                    // Legacy resolver found, using EIP-2544 so it isn't safe to use
                    if (currentName !== name && !(yield resolver.supportsWildcard())) return null;
                    return resolver;
                }
                // Get the parent node
                currentName = currentName.split(".").slice(1).join(".");
            }
        });
    }
    _getResolver(name, operation) {
        return __awaiter(this, void 0, void 0, function*() {
            if (operation == null) operation = "ENS";
            const network = yield this.getNetwork();
            // No ENS...
            if (!network.ensAddress) logger.throwError("network does not support ENS", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation,
                network: network.name
            });
            try {
                // keccak256("resolver(bytes32)")
                const addrData = yield this.call({
                    to: network.ensAddress,
                    data: "0x0178b8bf" + (0, _hash.namehash)(name).substring(2)
                });
                return this.formatter.callAddress(addrData);
            } catch (error) {
            // ENS registry cannot throw errors on resolver(bytes32)
            }
            return null;
        });
    }
    resolveName(name) {
        return __awaiter(this, void 0, void 0, function*() {
            name = yield name;
            // If it is already an address, nothing to resolve
            try {
                return Promise.resolve(this.formatter.address(name));
            } catch (error) {
                // If is is a hexstring, the address is bad (See #694)
                if ((0, _bytes.isHexString)(name)) throw error;
            }
            if (typeof name !== "string") logger.throwArgumentError("invalid ENS name", "name", name);
            // Get the addr from the resolver
            const resolver = yield this.getResolver(name);
            if (!resolver) return null;
            return yield resolver.getAddress();
        });
    }
    lookupAddress(address) {
        return __awaiter(this, void 0, void 0, function*() {
            address = yield address;
            address = this.formatter.address(address);
            const node = address.substring(2).toLowerCase() + ".addr.reverse";
            const resolverAddr = yield this._getResolver(node, "lookupAddress");
            if (resolverAddr == null) return null;
            // keccak("name(bytes32)")
            const name = _parseString((yield this.call({
                to: resolverAddr,
                data: "0x691f3431" + (0, _hash.namehash)(node).substring(2)
            })), 0);
            const addr = yield this.resolveName(name);
            if (addr != address) return null;
            return name;
        });
    }
    getAvatar(nameOrAddress) {
        return __awaiter(this, void 0, void 0, function*() {
            let resolver = null;
            if ((0, _bytes.isHexString)(nameOrAddress)) {
                // Address; reverse lookup
                const address = this.formatter.address(nameOrAddress);
                const node = address.substring(2).toLowerCase() + ".addr.reverse";
                const resolverAddress = yield this._getResolver(node, "getAvatar");
                if (!resolverAddress) return null;
                // Try resolving the avatar against the addr.reverse resolver
                resolver = new Resolver(this, resolverAddress, node);
                try {
                    const avatar = yield resolver.getAvatar();
                    if (avatar) return avatar.url;
                } catch (error) {
                    if (error.code !== (0, _logger.Logger).errors.CALL_EXCEPTION) throw error;
                }
                // Try getting the name and performing forward lookup; allowing wildcards
                try {
                    // keccak("name(bytes32)")
                    const name = _parseString((yield this.call({
                        to: resolverAddress,
                        data: "0x691f3431" + (0, _hash.namehash)(node).substring(2)
                    })), 0);
                    resolver = yield this.getResolver(name);
                } catch (error3) {
                    if (error3.code !== (0, _logger.Logger).errors.CALL_EXCEPTION) throw error3;
                    return null;
                }
            } else {
                // ENS name; forward lookup with wildcard
                resolver = yield this.getResolver(nameOrAddress);
                if (!resolver) return null;
            }
            const avatar = yield resolver.getAvatar();
            if (avatar == null) return null;
            return avatar.url;
        });
    }
    perform(method, params) {
        return logger.throwError(method + " not implemented", (0, _logger.Logger).errors.NOT_IMPLEMENTED, {
            operation: method
        });
    }
    _startEvent(event) {
        this.polling = this._events.filter((e)=>e.pollable()).length > 0;
    }
    _stopEvent(event) {
        this.polling = this._events.filter((e)=>e.pollable()).length > 0;
    }
    _addEventListener(eventName, listener, once) {
        const event = new Event(getEventTag(eventName), listener, once);
        this._events.push(event);
        this._startEvent(event);
        return this;
    }
    on(eventName, listener) {
        return this._addEventListener(eventName, listener, false);
    }
    once(eventName, listener) {
        return this._addEventListener(eventName, listener, true);
    }
    emit(eventName, ...args) {
        let result = false;
        let stopped = [];
        let eventTag = getEventTag(eventName);
        this._events = this._events.filter((event)=>{
            if (event.tag !== eventTag) return true;
            setTimeout(()=>{
                event.listener.apply(this, args);
            }, 0);
            result = true;
            if (event.once) {
                stopped.push(event);
                return false;
            }
            return true;
        });
        stopped.forEach((event)=>{
            this._stopEvent(event);
        });
        return result;
    }
    listenerCount(eventName) {
        if (!eventName) return this._events.length;
        let eventTag = getEventTag(eventName);
        return this._events.filter((event)=>{
            return event.tag === eventTag;
        }).length;
    }
    listeners(eventName) {
        if (eventName == null) return this._events.map((event)=>event.listener);
        let eventTag = getEventTag(eventName);
        return this._events.filter((event)=>event.tag === eventTag).map((event)=>event.listener);
    }
    off(eventName, listener) {
        if (listener == null) return this.removeAllListeners(eventName);
        const stopped = [];
        let found = false;
        let eventTag = getEventTag(eventName);
        this._events = this._events.filter((event)=>{
            if (event.tag !== eventTag || event.listener != listener) return true;
            if (found) return true;
            found = true;
            stopped.push(event);
            return false;
        });
        stopped.forEach((event)=>{
            this._stopEvent(event);
        });
        return this;
    }
    removeAllListeners(eventName) {
        let stopped = [];
        if (eventName == null) {
            stopped = this._events;
            this._events = [];
        } else {
            const eventTag = getEventTag(eventName);
            this._events = this._events.filter((event)=>{
                if (event.tag !== eventTag) return true;
                stopped.push(event);
                return false;
            });
        }
        stopped.forEach((event)=>{
            this._stopEvent(event);
        });
        return this;
    }
}

},{"@ethersproject/abstract-provider":"g1jr1","@ethersproject/base64":"329Wu","@ethersproject/basex":"dm2o4","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/constants":"gKbDE","@ethersproject/hash":"7JYPm","@ethersproject/networks":"6JNhW","@ethersproject/properties":"h3GJb","@ethersproject/sha2":"k4R8k","@ethersproject/strings":"5TGFZ","@ethersproject/web":"5yjI3","bech32":"2C5n6","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./formatter":"ZfOHh","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"329Wu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decode", ()=>(0, _base64.decode));
parcelHelpers.export(exports, "encode", ()=>(0, _base64.encode));
var _base64 = require("./base64");
"use strict";

},{"./base64":"cgzIg","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"cgzIg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decode", ()=>decode);
parcelHelpers.export(exports, "encode", ()=>encode);
var _bytes = require("@ethersproject/bytes");
"use strict";
function decode(textData) {
    textData = atob(textData);
    const data = [];
    for(let i = 0; i < textData.length; i++)data.push(textData.charCodeAt(i));
    return (0, _bytes.arrayify)(data);
}
function encode(data) {
    data = (0, _bytes.arrayify)(data);
    let textData = "";
    for(let i = 0; i < data.length; i++)textData += String.fromCharCode(data[i]);
    return btoa(textData);
}

},{"@ethersproject/bytes":"htrqZ","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"5yjI3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// This API is still a work in progress; the future changes will likely be:
// - ConnectionInfo => FetchDataRequest<T = any>
// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
// For this reason, it should be considered internal until the API is finalized
parcelHelpers.export(exports, "_fetchData", ()=>_fetchData);
parcelHelpers.export(exports, "fetchJson", ()=>fetchJson);
parcelHelpers.export(exports, "poll", ()=>poll);
var _base64 = require("@ethersproject/base64");
var _bytes = require("@ethersproject/bytes");
var _properties = require("@ethersproject/properties");
var _strings = require("@ethersproject/strings");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
var _geturl = require("./geturl");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
function staller(duration) {
    return new Promise((resolve)=>{
        setTimeout(resolve, duration);
    });
}
function bodyify(value, type) {
    if (value == null) return null;
    if (typeof value === "string") return value;
    if ((0, _bytes.isBytesLike)(value)) {
        if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) try {
            return (0, _strings.toUtf8String)(value);
        } catch (error) {}
        return (0, _bytes.hexlify)(value);
    }
    return value;
}
function _fetchData(connection, body1, processFunc) {
    // How many times to retry in the event of a throttle
    const attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
    logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
    const throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
    const throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
    logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
    const errorPassThrough = typeof connection === "object" ? !!connection.errorPassThrough : false;
    const headers = {};
    let url = null;
    // @TODO: Allow ConnectionInfo to override some of these values
    const options = {
        method: "GET"
    };
    let allow304 = false;
    let timeout1 = 120000;
    if (typeof connection === "string") url = connection;
    else if (typeof connection === "object") {
        if (connection == null || connection.url == null) logger.throwArgumentError("missing URL", "connection.url", connection);
        url = connection.url;
        if (typeof connection.timeout === "number" && connection.timeout > 0) timeout1 = connection.timeout;
        if (connection.headers) for(const key in connection.headers){
            headers[key.toLowerCase()] = {
                key: key,
                value: String(connection.headers[key])
            };
            if ([
                "if-none-match",
                "if-modified-since"
            ].indexOf(key.toLowerCase()) >= 0) allow304 = true;
        }
        options.allowGzip = !!connection.allowGzip;
        if (connection.user != null && connection.password != null) {
            if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) logger.throwError("basic authentication requires a secure https url", (0, _logger.Logger).errors.INVALID_ARGUMENT, {
                argument: "url",
                url: url,
                user: connection.user,
                password: "[REDACTED]"
            });
            const authorization = connection.user + ":" + connection.password;
            headers["authorization"] = {
                key: "Authorization",
                value: "Basic " + (0, _base64.encode)((0, _strings.toUtf8Bytes)(authorization))
            };
        }
        if (connection.skipFetchSetup != null) options.skipFetchSetup = !!connection.skipFetchSetup;
    }
    const reData = new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$", "i");
    const dataMatch = url ? url.match(reData) : null;
    if (dataMatch) try {
        const response = {
            statusCode: 200,
            statusMessage: "OK",
            headers: {
                "content-type": dataMatch[1]
            },
            body: (0, _base64.decode)(dataMatch[2])
        };
        let result = response.body;
        if (processFunc) result = processFunc(response.body, response);
        return Promise.resolve(result);
    } catch (error1) {
        logger.throwError("processing response error", (0, _logger.Logger).errors.SERVER_ERROR, {
            body: bodyify(dataMatch[1], dataMatch[2]),
            error: error1,
            requestBody: null,
            requestMethod: "GET",
            url: url
        });
    }
    if (body1) {
        options.method = "POST";
        options.body = body1;
        if (headers["content-type"] == null) headers["content-type"] = {
            key: "Content-Type",
            value: "application/octet-stream"
        };
        if (headers["content-length"] == null) headers["content-length"] = {
            key: "Content-Length",
            value: String(body1.length)
        };
    }
    const flatHeaders = {};
    Object.keys(headers).forEach((key)=>{
        const header = headers[key];
        flatHeaders[header.key] = header.value;
    });
    options.headers = flatHeaders;
    const runningTimeout = function() {
        let timer = null;
        const promise = new Promise(function(resolve, reject) {
            if (timeout1) timer = setTimeout(()=>{
                if (timer == null) return;
                timer = null;
                reject(logger.makeError("timeout", (0, _logger.Logger).errors.TIMEOUT, {
                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                    requestMethod: options.method,
                    timeout: timeout1,
                    url: url
                }));
            }, timeout1);
        });
        const cancel = function() {
            if (timer == null) return;
            clearTimeout(timer);
            timer = null;
        };
        return {
            promise,
            cancel
        };
    }();
    const runningFetch = function() {
        return __awaiter(this, void 0, void 0, function*() {
            for(let attempt = 0; attempt < attemptLimit; attempt++){
                let response = null;
                try {
                    response = yield (0, _geturl.getUrl)(url, options);
                    if (attempt < attemptLimit) {
                        if (response.statusCode === 301 || response.statusCode === 302) {
                            // Redirection; for now we only support absolute locataions
                            const location = response.headers.location || "";
                            if (options.method === "GET" && location.match(/^https:/)) {
                                url = response.headers.location;
                                continue;
                            }
                        } else if (response.statusCode === 429) {
                            // Exponential back-off throttling
                            let tryAgain = true;
                            if (throttleCallback) tryAgain = yield throttleCallback(attempt, url);
                            if (tryAgain) {
                                let stall = 0;
                                const retryAfter = response.headers["retry-after"];
                                if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) stall = parseInt(retryAfter) * 1000;
                                else stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                //console.log("Stalling 429");
                                yield staller(stall);
                                continue;
                            }
                        }
                    }
                } catch (error) {
                    response = error.response;
                    if (response == null) {
                        runningTimeout.cancel();
                        logger.throwError("missing response", (0, _logger.Logger).errors.SERVER_ERROR, {
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            serverError: error,
                            url: url
                        });
                    }
                }
                let body = response.body;
                if (allow304 && response.statusCode === 304) body = null;
                else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
                    runningTimeout.cancel();
                    logger.throwError("bad response", (0, _logger.Logger).errors.SERVER_ERROR, {
                        status: response.statusCode,
                        headers: response.headers,
                        body: bodyify(body, response.headers ? response.headers["content-type"] : null),
                        requestBody: bodyify(options.body, flatHeaders["content-type"]),
                        requestMethod: options.method,
                        url: url
                    });
                }
                if (processFunc) try {
                    const result = yield processFunc(body, response);
                    runningTimeout.cancel();
                    return result;
                } catch (error2) {
                    // Allow the processFunc to trigger a throttle
                    if (error2.throttleRetry && attempt < attemptLimit) {
                        let tryAgain = true;
                        if (throttleCallback) tryAgain = yield throttleCallback(attempt, url);
                        if (tryAgain) {
                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                            //console.log("Stalling callback");
                            yield staller(timeout);
                            continue;
                        }
                    }
                    runningTimeout.cancel();
                    logger.throwError("processing response error", (0, _logger.Logger).errors.SERVER_ERROR, {
                        body: bodyify(body, response.headers ? response.headers["content-type"] : null),
                        error: error2,
                        requestBody: bodyify(options.body, flatHeaders["content-type"]),
                        requestMethod: options.method,
                        url: url
                    });
                }
                runningTimeout.cancel();
                // If we had a processFunc, it either returned a T or threw above.
                // The "body" is now a Uint8Array.
                return body;
            }
            return logger.throwError("failed response", (0, _logger.Logger).errors.SERVER_ERROR, {
                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                requestMethod: options.method,
                url: url
            });
        });
    }();
    return Promise.race([
        runningTimeout.promise,
        runningFetch
    ]);
}
function fetchJson(connection, json, processFunc) {
    let processJsonFunc = (value, response)=>{
        let result = null;
        if (value != null) try {
            result = JSON.parse((0, _strings.toUtf8String)(value));
        } catch (error) {
            logger.throwError("invalid JSON", (0, _logger.Logger).errors.SERVER_ERROR, {
                body: value,
                error: error
            });
        }
        if (processFunc) result = processFunc(result, response);
        return result;
    };
    // If we have json to send, we must
    // - add content-type of application/json (unless already overridden)
    // - convert the json to bytes
    let body = null;
    if (json != null) {
        body = (0, _strings.toUtf8Bytes)(json);
        // Create a connection with the content-type set for JSON
        const updated = typeof connection === "string" ? {
            url: connection
        } : (0, _properties.shallowCopy)(connection);
        if (updated.headers) {
            const hasContentType = Object.keys(updated.headers).filter((k)=>k.toLowerCase() === "content-type").length !== 0;
            if (!hasContentType) {
                updated.headers = (0, _properties.shallowCopy)(updated.headers);
                updated.headers["content-type"] = "application/json";
            }
        } else updated.headers = {
            "content-type": "application/json"
        };
        connection = updated;
    }
    return _fetchData(connection, body, processJsonFunc);
}
function poll(func, options) {
    if (!options) options = {};
    options = (0, _properties.shallowCopy)(options);
    if (options.floor == null) options.floor = 0;
    if (options.ceiling == null) options.ceiling = 10000;
    if (options.interval == null) options.interval = 250;
    return new Promise(function(resolve, reject) {
        let timer = null;
        let done = false;
        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
        const cancel = ()=>{
            if (done) return false;
            done = true;
            if (timer) clearTimeout(timer);
            return true;
        };
        if (options.timeout) timer = setTimeout(()=>{
            if (cancel()) reject(new Error("timeout"));
        }, options.timeout);
        const retryLimit = options.retryLimit;
        let attempt = 0;
        function check() {
            return func().then(function(result) {
                // If we have a result, or are allowed null then we're done
                if (result !== undefined) {
                    if (cancel()) resolve(result);
                } else if (options.oncePoll) options.oncePoll.once("poll", check);
                else if (options.onceBlock) options.onceBlock.once("block", check);
                else if (!done) {
                    attempt++;
                    if (attempt > retryLimit) {
                        if (cancel()) reject(new Error("retry limit reached"));
                        return;
                    }
                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                    if (timeout < options.floor) timeout = options.floor;
                    if (timeout > options.ceiling) timeout = options.ceiling;
                    setTimeout(check, timeout);
                }
                return null;
            }, function(error) {
                if (cancel()) reject(error);
            });
        }
        check();
    });
}

},{"@ethersproject/base64":"329Wu","@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@ethersproject/strings":"5TGFZ","@ethersproject/logger":"hLvB2","./_version":"6HtXu","./geturl":"gsrWY","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"6HtXu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "web/5.6.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"gsrWY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getUrl", ()=>getUrl);
var _bytes = require("@ethersproject/bytes");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function getUrl(href, options) {
    return __awaiter(this, void 0, void 0, function*() {
        if (options == null) options = {};
        const request = {
            method: options.method || "GET",
            headers: options.headers || {},
            body: options.body || undefined
        };
        if (options.skipFetchSetup !== true) {
            request.mode = "cors"; // no-cors, cors, *same-origin
            request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached
            request.credentials = "same-origin"; // include, *same-origin, omit
            request.redirect = "follow"; // manual, *follow, error
            request.referrer = "client"; // no-referrer, *client
        }
        const response = yield fetch(href, request);
        const body = yield response.arrayBuffer();
        const headers = {};
        if (response.headers.forEach) response.headers.forEach((value, key)=>{
            headers[key.toLowerCase()] = value;
        });
        else response.headers.keys().forEach((key)=>{
            headers[key.toLowerCase()] = response.headers.get(key);
        });
        return {
            headers: headers,
            statusCode: response.status,
            statusMessage: response.statusText,
            body: (0, _bytes.arrayify)(new Uint8Array(body))
        };
    });
}

},{"@ethersproject/bytes":"htrqZ","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"2C5n6":[function(require,module,exports) {
"use strict";
var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
// pre-compute lookup table
var ALPHABET_MAP = {};
for(var z = 0; z < ALPHABET.length; z++){
    var x = ALPHABET.charAt(z);
    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + " is ambiguous");
    ALPHABET_MAP[x] = z;
}
function polymodStep(pre) {
    var b = pre >> 25;
    return (pre & 0x1FFFFFF) << 5 ^ -(b >> 0 & 1) & 0x3b6a57b2 ^ -(b >> 1 & 1) & 0x26508e6d ^ -(b >> 2 & 1) & 0x1ea119fa ^ -(b >> 3 & 1) & 0x3d4233dd ^ -(b >> 4 & 1) & 0x2a1462b3;
}
function prefixChk(prefix) {
    var chk = 1;
    for(var i = 0; i < prefix.length; ++i){
        var c = prefix.charCodeAt(i);
        if (c < 33 || c > 126) return "Invalid prefix (" + prefix + ")";
        chk = polymodStep(chk) ^ c >> 5;
    }
    chk = polymodStep(chk);
    for(i = 0; i < prefix.length; ++i){
        var v = prefix.charCodeAt(i);
        chk = polymodStep(chk) ^ v & 0x1f;
    }
    return chk;
}
function encode(prefix, words, LIMIT) {
    LIMIT = LIMIT || 90;
    if (prefix.length + 7 + words.length > LIMIT) throw new TypeError("Exceeds length limit");
    prefix = prefix.toLowerCase();
    // determine chk mod
    var chk = prefixChk(prefix);
    if (typeof chk === "string") throw new Error(chk);
    var result = prefix + "1";
    for(var i = 0; i < words.length; ++i){
        var x = words[i];
        if (x >> 5 !== 0) throw new Error("Non 5-bit word");
        chk = polymodStep(chk) ^ x;
        result += ALPHABET.charAt(x);
    }
    for(i = 0; i < 6; ++i)chk = polymodStep(chk);
    chk ^= 1;
    for(i = 0; i < 6; ++i){
        var v = chk >> (5 - i) * 5 & 0x1f;
        result += ALPHABET.charAt(v);
    }
    return result;
}
function __decode(str, LIMIT) {
    LIMIT = LIMIT || 90;
    if (str.length < 8) return str + " too short";
    if (str.length > LIMIT) return "Exceeds length limit";
    // don't allow mixed case
    var lowered = str.toLowerCase();
    var uppered = str.toUpperCase();
    if (str !== lowered && str !== uppered) return "Mixed-case string " + str;
    str = lowered;
    var split = str.lastIndexOf("1");
    if (split === -1) return "No separator character for " + str;
    if (split === 0) return "Missing prefix for " + str;
    var prefix = str.slice(0, split);
    var wordChars = str.slice(split + 1);
    if (wordChars.length < 6) return "Data too short";
    var chk = prefixChk(prefix);
    if (typeof chk === "string") return chk;
    var words = [];
    for(var i = 0; i < wordChars.length; ++i){
        var c = wordChars.charAt(i);
        var v = ALPHABET_MAP[c];
        if (v === undefined) return "Unknown character " + c;
        chk = polymodStep(chk) ^ v;
        // not in the checksum?
        if (i + 6 >= wordChars.length) continue;
        words.push(v);
    }
    if (chk !== 1) return "Invalid checksum for " + str;
    return {
        prefix: prefix,
        words: words
    };
}
function decodeUnsafe() {
    var res = __decode.apply(null, arguments);
    if (typeof res === "object") return res;
}
function decode(str) {
    var res = __decode.apply(null, arguments);
    if (typeof res === "object") return res;
    throw new Error(res);
}
function convert(data, inBits, outBits, pad) {
    var value = 0;
    var bits = 0;
    var maxV = (1 << outBits) - 1;
    var result = [];
    for(var i = 0; i < data.length; ++i){
        value = value << inBits | data[i];
        bits += inBits;
        while(bits >= outBits){
            bits -= outBits;
            result.push(value >> bits & maxV);
        }
    }
    if (pad) {
        if (bits > 0) result.push(value << outBits - bits & maxV);
    } else {
        if (bits >= inBits) return "Excess padding";
        if (value << outBits - bits & maxV) return "Non-zero padding";
    }
    return result;
}
function toWordsUnsafe(bytes) {
    var res = convert(bytes, 8, 5, true);
    if (Array.isArray(res)) return res;
}
function toWords(bytes) {
    var res = convert(bytes, 8, 5, true);
    if (Array.isArray(res)) return res;
    throw new Error(res);
}
function fromWordsUnsafe(words) {
    var res = convert(words, 5, 8, false);
    if (Array.isArray(res)) return res;
}
function fromWords(words) {
    var res = convert(words, 5, 8, false);
    if (Array.isArray(res)) return res;
    throw new Error(res);
}
module.exports = {
    decodeUnsafe: decodeUnsafe,
    decode: decode,
    encode: encode,
    toWordsUnsafe: toWordsUnsafe,
    toWords: toWords,
    fromWordsUnsafe: fromWordsUnsafe,
    fromWords: fromWords
};

},{}],"6PYAk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "providers/5.6.8";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"ZfOHh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Formatter", ()=>Formatter);
parcelHelpers.export(exports, "isCommunityResourcable", ()=>isCommunityResourcable);
parcelHelpers.export(exports, "isCommunityResource", ()=>isCommunityResource);
parcelHelpers.export(exports, "showThrottleMessage", ()=>showThrottleMessage);
var _address = require("@ethersproject/address");
var _bignumber = require("@ethersproject/bignumber");
var _bytes = require("@ethersproject/bytes");
var _constants = require("@ethersproject/constants");
var _properties = require("@ethersproject/properties");
var _transactions = require("@ethersproject/transactions");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
class Formatter {
    constructor(){
        this.formats = this.getDefaultFormats();
    }
    getDefaultFormats() {
        const formats = {};
        const address = this.address.bind(this);
        const bigNumber = this.bigNumber.bind(this);
        const blockTag = this.blockTag.bind(this);
        const data = this.data.bind(this);
        const hash = this.hash.bind(this);
        const hex = this.hex.bind(this);
        const number = this.number.bind(this);
        const type = this.type.bind(this);
        const strictData = (v)=>{
            return this.data(v, true);
        };
        formats.transaction = {
            hash: hash,
            type: type,
            accessList: Formatter.allowNull(this.accessList.bind(this), null),
            blockHash: Formatter.allowNull(hash, null),
            blockNumber: Formatter.allowNull(number, null),
            transactionIndex: Formatter.allowNull(number, null),
            confirmations: Formatter.allowNull(number, null),
            from: address,
            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
            // must be set
            gasPrice: Formatter.allowNull(bigNumber),
            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
            maxFeePerGas: Formatter.allowNull(bigNumber),
            gasLimit: bigNumber,
            to: Formatter.allowNull(address, null),
            value: bigNumber,
            nonce: number,
            data: data,
            r: Formatter.allowNull(this.uint256),
            s: Formatter.allowNull(this.uint256),
            v: Formatter.allowNull(number),
            creates: Formatter.allowNull(address, null),
            raw: Formatter.allowNull(data)
        };
        formats.transactionRequest = {
            from: Formatter.allowNull(address),
            nonce: Formatter.allowNull(number),
            gasLimit: Formatter.allowNull(bigNumber),
            gasPrice: Formatter.allowNull(bigNumber),
            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
            maxFeePerGas: Formatter.allowNull(bigNumber),
            to: Formatter.allowNull(address),
            value: Formatter.allowNull(bigNumber),
            data: Formatter.allowNull(strictData),
            type: Formatter.allowNull(number),
            accessList: Formatter.allowNull(this.accessList.bind(this), null)
        };
        formats.receiptLog = {
            transactionIndex: number,
            blockNumber: number,
            transactionHash: hash,
            address: address,
            topics: Formatter.arrayOf(hash),
            data: data,
            logIndex: number,
            blockHash: hash
        };
        formats.receipt = {
            to: Formatter.allowNull(this.address, null),
            from: Formatter.allowNull(this.address, null),
            contractAddress: Formatter.allowNull(address, null),
            transactionIndex: number,
            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
            root: Formatter.allowNull(hex),
            gasUsed: bigNumber,
            logsBloom: Formatter.allowNull(data),
            blockHash: hash,
            transactionHash: hash,
            logs: Formatter.arrayOf(this.receiptLog.bind(this)),
            blockNumber: number,
            confirmations: Formatter.allowNull(number, null),
            cumulativeGasUsed: bigNumber,
            effectiveGasPrice: Formatter.allowNull(bigNumber),
            status: Formatter.allowNull(number),
            type: type
        };
        formats.block = {
            hash: Formatter.allowNull(hash),
            parentHash: hash,
            number: number,
            timestamp: number,
            nonce: Formatter.allowNull(hex),
            difficulty: this.difficulty.bind(this),
            gasLimit: bigNumber,
            gasUsed: bigNumber,
            miner: Formatter.allowNull(address),
            extraData: data,
            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),
            baseFeePerGas: Formatter.allowNull(bigNumber)
        };
        formats.blockWithTransactions = (0, _properties.shallowCopy)(formats.block);
        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
        formats.filter = {
            fromBlock: Formatter.allowNull(blockTag, undefined),
            toBlock: Formatter.allowNull(blockTag, undefined),
            blockHash: Formatter.allowNull(hash, undefined),
            address: Formatter.allowNull(address, undefined),
            topics: Formatter.allowNull(this.topics.bind(this), undefined)
        };
        formats.filterLog = {
            blockNumber: Formatter.allowNull(number),
            blockHash: Formatter.allowNull(hash),
            transactionIndex: number,
            removed: Formatter.allowNull(this.boolean.bind(this)),
            address: address,
            data: Formatter.allowFalsish(data, "0x"),
            topics: Formatter.arrayOf(hash),
            transactionHash: hash,
            logIndex: number
        };
        return formats;
    }
    accessList(accessList) {
        return (0, _transactions.accessListify)(accessList || []);
    }
    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
    // Strict! Used on input.
    number(number) {
        if (number === "0x") return 0;
        return (0, _bignumber.BigNumber).from(number).toNumber();
    }
    type(number) {
        if (number === "0x" || number == null) return 0;
        return (0, _bignumber.BigNumber).from(number).toNumber();
    }
    // Strict! Used on input.
    bigNumber(value) {
        return (0, _bignumber.BigNumber).from(value);
    }
    // Requires a boolean, "true" or  "false"; returns a boolean
    boolean(value) {
        if (typeof value === "boolean") return value;
        if (typeof value === "string") {
            value = value.toLowerCase();
            if (value === "true") return true;
            if (value === "false") return false;
        }
        throw new Error("invalid boolean - " + value);
    }
    hex(value, strict) {
        if (typeof value === "string") {
            if (!strict && value.substring(0, 2) !== "0x") value = "0x" + value;
            if ((0, _bytes.isHexString)(value)) return value.toLowerCase();
        }
        return logger.throwArgumentError("invalid hash", "value", value);
    }
    data(value, strict) {
        const result = this.hex(value, strict);
        if (result.length % 2 !== 0) throw new Error("invalid data; odd-length - " + value);
        return result;
    }
    // Requires an address
    // Strict! Used on input.
    address(value) {
        return (0, _address.getAddress)(value);
    }
    callAddress(value) {
        if (!(0, _bytes.isHexString)(value, 32)) return null;
        const address = (0, _address.getAddress)((0, _bytes.hexDataSlice)(value, 12));
        return address === (0, _constants.AddressZero) ? null : address;
    }
    contractAddress(value) {
        return (0, _address.getContractAddress)(value);
    }
    // Strict! Used on input.
    blockTag(blockTag) {
        if (blockTag == null) return "latest";
        if (blockTag === "earliest") return "0x0";
        if (blockTag === "latest" || blockTag === "pending") return blockTag;
        if (typeof blockTag === "number" || (0, _bytes.isHexString)(blockTag)) return (0, _bytes.hexValue)(blockTag);
        throw new Error("invalid blockTag");
    }
    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
    hash(value, strict) {
        const result = this.hex(value, strict);
        if ((0, _bytes.hexDataLength)(result) !== 32) return logger.throwArgumentError("invalid hash", "value", value);
        return result;
    }
    // Returns the difficulty as a number, or if too large (i.e. PoA network) null
    difficulty(value) {
        if (value == null) return null;
        const v = (0, _bignumber.BigNumber).from(value);
        try {
            return v.toNumber();
        } catch (error) {}
        return null;
    }
    uint256(value) {
        if (!(0, _bytes.isHexString)(value)) throw new Error("invalid uint256");
        return (0, _bytes.hexZeroPad)(value, 32);
    }
    _block(value, format) {
        if (value.author != null && value.miner == null) value.miner = value.author;
        // The difficulty may need to come from _difficulty in recursed blocks
        const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;
        const result = Formatter.check(format, value);
        result._difficulty = difficulty == null ? null : (0, _bignumber.BigNumber).from(difficulty);
        return result;
    }
    block(value) {
        return this._block(value, this.formats.block);
    }
    blockWithTransactions(value) {
        return this._block(value, this.formats.blockWithTransactions);
    }
    // Strict! Used on input.
    transactionRequest(value) {
        return Formatter.check(this.formats.transactionRequest, value);
    }
    transactionResponse(transaction) {
        // Rename gas to gasLimit
        if (transaction.gas != null && transaction.gasLimit == null) transaction.gasLimit = transaction.gas;
        // Some clients (TestRPC) do strange things like return 0x0 for the
        // 0 address; correct this to be a real address
        if (transaction.to && (0, _bignumber.BigNumber).from(transaction.to).isZero()) transaction.to = "0x0000000000000000000000000000000000000000";
        // Rename input to data
        if (transaction.input != null && transaction.data == null) transaction.data = transaction.input;
        // If to and creates are empty, populate the creates from the transaction
        if (transaction.to == null && transaction.creates == null) transaction.creates = this.contractAddress(transaction);
        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) transaction.accessList = [];
        const result = Formatter.check(this.formats.transaction, transaction);
        if (transaction.chainId != null) {
            let chainId = transaction.chainId;
            if ((0, _bytes.isHexString)(chainId)) chainId = (0, _bignumber.BigNumber).from(chainId).toNumber();
            result.chainId = chainId;
        } else {
            let chainId = transaction.networkId;
            // geth-etc returns chainId
            if (chainId == null && result.v == null) chainId = transaction.chainId;
            if ((0, _bytes.isHexString)(chainId)) chainId = (0, _bignumber.BigNumber).from(chainId).toNumber();
            if (typeof chainId !== "number" && result.v != null) {
                chainId = (result.v - 35) / 2;
                if (chainId < 0) chainId = 0;
                chainId = parseInt(chainId);
            }
            if (typeof chainId !== "number") chainId = 0;
            result.chainId = chainId;
        }
        // 0x0000... should actually be null
        if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") result.blockHash = null;
        return result;
    }
    transaction(value) {
        return (0, _transactions.parse)(value);
    }
    receiptLog(value) {
        return Formatter.check(this.formats.receiptLog, value);
    }
    receipt(value) {
        const result = Formatter.check(this.formats.receipt, value);
        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it
        if (result.root != null) {
            if (result.root.length <= 4) {
                // Could be 0x00, 0x0, 0x01 or 0x1
                const value = (0, _bignumber.BigNumber).from(result.root).toNumber();
                if (value === 0 || value === 1) {
                    // Make sure if both are specified, they match
                    if (result.status != null && result.status !== value) logger.throwArgumentError("alt-root-status/status mismatch", "value", {
                        root: result.root,
                        status: result.status
                    });
                    result.status = value;
                    delete result.root;
                } else logger.throwArgumentError("invalid alt-root-status", "value.root", result.root);
            } else if (result.root.length !== 66) // Must be a valid bytes32
            logger.throwArgumentError("invalid root hash", "value.root", result.root);
        }
        if (result.status != null) result.byzantium = true;
        return result;
    }
    topics(value) {
        if (Array.isArray(value)) return value.map((v)=>this.topics(v));
        else if (value != null) return this.hash(value, true);
        return null;
    }
    filter(value) {
        return Formatter.check(this.formats.filter, value);
    }
    filterLog(value) {
        return Formatter.check(this.formats.filterLog, value);
    }
    static check(format, object) {
        const result = {};
        for(const key in format)try {
            const value = format[key](object[key]);
            if (value !== undefined) result[key] = value;
        } catch (error) {
            error.checkKey = key;
            error.checkValue = object[key];
            throw error;
        }
        return result;
    }
    // if value is null-ish, nullValue is returned
    static allowNull(format, nullValue) {
        return function(value) {
            if (value == null) return nullValue;
            return format(value);
        };
    }
    // If value is false-ish, replaceValue is returned
    static allowFalsish(format, replaceValue) {
        return function(value) {
            if (!value) return replaceValue;
            return format(value);
        };
    }
    // Requires an Array satisfying check
    static arrayOf(format) {
        return function(array) {
            if (!Array.isArray(array)) throw new Error("not an array");
            const result = [];
            array.forEach(function(value) {
                result.push(format(value));
            });
            return result;
        };
    }
}
function isCommunityResourcable(value) {
    return value && typeof value.isCommunityResource === "function";
}
function isCommunityResource(value) {
    return isCommunityResourcable(value) && value.isCommunityResource();
}
// Show the throttle message only once
let throttleMessage = false;
function showThrottleMessage() {
    if (throttleMessage) return;
    throttleMessage = true;
    console.log("========= NOTICE =========");
    console.log("Request-Rate Exceeded  (this message will not be repeated)");
    console.log("");
    console.log("The default API keys for each service are provided as a highly-throttled,");
    console.log("community resource for low-traffic projects and early prototyping.");
    console.log("");
    console.log("While your application will continue to function, we highly recommended");
    console.log("signing up for your own API keys to improve performance, increase your");
    console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
    console.log("");
    console.log("For more details: https://docs.ethers.io/api-keys/");
    console.log("==========================");
}

},{"@ethersproject/address":"ggdAz","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/constants":"gKbDE","@ethersproject/properties":"h3GJb","@ethersproject/transactions":"d1ust","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"jD4Nf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AlchemyWebSocketProvider", ()=>AlchemyWebSocketProvider);
parcelHelpers.export(exports, "AlchemyProvider", ()=>AlchemyProvider);
var _properties = require("@ethersproject/properties");
var _formatter = require("./formatter");
var _websocketProvider = require("./websocket-provider");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
var _urlJsonRpcProvider = require("./url-json-rpc-provider");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
// This key was provided to ethers.js by Alchemy to be used by the
// default provider, but it is recommended that for your own
// production environments, that you acquire your own API key at:
//   https://dashboard.alchemyapi.io
const defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
class AlchemyWebSocketProvider extends (0, _websocketProvider.WebSocketProvider) {
    constructor(network, apiKey){
        const provider = new AlchemyProvider(network, apiKey);
        const url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
        super(url, provider.network);
        (0, _properties.defineReadOnly)(this, "apiKey", provider.apiKey);
    }
    isCommunityResource() {
        return this.apiKey === defaultApiKey;
    }
}
class AlchemyProvider extends (0, _urlJsonRpcProvider.UrlJsonRpcProvider) {
    static getWebSocketProvider(network, apiKey) {
        return new AlchemyWebSocketProvider(network, apiKey);
    }
    static getApiKey(apiKey) {
        if (apiKey == null) return defaultApiKey;
        if (apiKey && typeof apiKey !== "string") logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
        return apiKey;
    }
    static getUrl(network, apiKey) {
        let host = null;
        switch(network.name){
            case "homestead":
                host = "eth-mainnet.alchemyapi.io/v2/";
                break;
            case "ropsten":
                host = "eth-ropsten.alchemyapi.io/v2/";
                break;
            case "rinkeby":
                host = "eth-rinkeby.alchemyapi.io/v2/";
                break;
            case "goerli":
                host = "eth-goerli.alchemyapi.io/v2/";
                break;
            case "kovan":
                host = "eth-kovan.alchemyapi.io/v2/";
                break;
            case "matic":
                host = "polygon-mainnet.g.alchemy.com/v2/";
                break;
            case "maticmum":
                host = "polygon-mumbai.g.alchemy.com/v2/";
                break;
            case "arbitrum":
                host = "arb-mainnet.g.alchemy.com/v2/";
                break;
            case "arbitrum-rinkeby":
                host = "arb-rinkeby.g.alchemy.com/v2/";
                break;
            case "optimism":
                host = "opt-mainnet.g.alchemy.com/v2/";
                break;
            case "optimism-kovan":
                host = "opt-kovan.g.alchemy.com/v2/";
                break;
            default:
                logger.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return {
            allowGzip: true,
            url: "https://" + host + apiKey,
            throttleCallback: (attempt, url)=>{
                if (apiKey === defaultApiKey) (0, _formatter.showThrottleMessage)();
                return Promise.resolve(true);
            }
        };
    }
    isCommunityResource() {
        return this.apiKey === defaultApiKey;
    }
}

},{"@ethersproject/properties":"h3GJb","./formatter":"ZfOHh","./websocket-provider":"9KF9f","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./url-json-rpc-provider":"9CTqA","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"9KF9f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// For more info about the Real-time Event API see:
//   https://geth.ethereum.org/docs/rpc/pubsub
parcelHelpers.export(exports, "WebSocketProvider", ()=>WebSocketProvider);
var _bignumber = require("@ethersproject/bignumber");
var _properties = require("@ethersproject/properties");
var _jsonRpcProvider = require("./json-rpc-provider");
var _ws = require("./ws");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
/**
 *  Notes:
 *
 *  This provider differs a bit from the polling providers. One main
 *  difference is how it handles consistency. The polling providers
 *  will stall responses to ensure a consistent state, while this
 *  WebSocket provider assumes the connected backend will manage this.
 *
 *  For example, if a polling provider emits an event which indicates
 *  the event occurred in blockhash XXX, a call to fetch that block by
 *  its hash XXX, if not present will retry until it is present. This
 *  can occur when querying a pool of nodes that are mildly out of sync
 *  with each other.
 */ let NextId = 1;
class WebSocketProvider extends (0, _jsonRpcProvider.JsonRpcProvider) {
    constructor(url, network){
        // This will be added in the future; please open an issue to expedite
        if (network === "any") logger.throwError("WebSocketProvider does not support 'any' network yet", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "network:any"
        });
        if (typeof url === "string") super(url, network);
        else super("_websocket", network);
        this._pollingInterval = -1;
        this._wsReady = false;
        if (typeof url === "string") (0, _properties.defineReadOnly)(this, "_websocket", new (0, _ws.WebSocket)(this.connection.url));
        else (0, _properties.defineReadOnly)(this, "_websocket", url);
        (0, _properties.defineReadOnly)(this, "_requests", {});
        (0, _properties.defineReadOnly)(this, "_subs", {});
        (0, _properties.defineReadOnly)(this, "_subIds", {});
        (0, _properties.defineReadOnly)(this, "_detectNetwork", super.detectNetwork());
        // Stall sending requests until the socket is open...
        this.websocket.onopen = ()=>{
            this._wsReady = true;
            Object.keys(this._requests).forEach((id)=>{
                this.websocket.send(this._requests[id].payload);
            });
        };
        this.websocket.onmessage = (messageEvent)=>{
            const data = messageEvent.data;
            const result = JSON.parse(data);
            if (result.id != null) {
                const id = String(result.id);
                const request = this._requests[id];
                delete this._requests[id];
                if (result.result !== undefined) {
                    request.callback(null, result.result);
                    this.emit("debug", {
                        action: "response",
                        request: JSON.parse(request.payload),
                        response: result.result,
                        provider: this
                    });
                } else {
                    let error = null;
                    if (result.error) {
                        error = new Error(result.error.message || "unknown error");
                        (0, _properties.defineReadOnly)(error, "code", result.error.code || null);
                        (0, _properties.defineReadOnly)(error, "response", data);
                    } else error = new Error("unknown error");
                    request.callback(error, undefined);
                    this.emit("debug", {
                        action: "response",
                        error: error,
                        request: JSON.parse(request.payload),
                        provider: this
                    });
                }
            } else if (result.method === "eth_subscription") {
                // Subscription...
                const sub = this._subs[result.params.subscription];
                if (sub) //this.emit.apply(this,                  );
                sub.processFunc(result.params.result);
            } else console.warn("this should not happen");
        };
        // This Provider does not actually poll, but we want to trigger
        // poll events for things that depend on them (like stalling for
        // block and transaction lookups)
        const fauxPoll = setInterval(()=>{
            this.emit("poll");
        }, 1000);
        if (fauxPoll.unref) fauxPoll.unref();
    }
    // Cannot narrow the type of _websocket, as that is not backwards compatible
    // so we add a getter and let the WebSocket be a public API.
    get websocket() {
        return this._websocket;
    }
    detectNetwork() {
        return this._detectNetwork;
    }
    get pollingInterval() {
        return 0;
    }
    resetEventsBlock(blockNumber) {
        logger.throwError("cannot reset events block on WebSocketProvider", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "resetEventBlock"
        });
    }
    set pollingInterval(value) {
        logger.throwError("cannot set polling interval on WebSocketProvider", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "setPollingInterval"
        });
    }
    poll() {
        return __awaiter(this, void 0, void 0, function*() {
            return null;
        });
    }
    set polling(value) {
        if (!value) return;
        logger.throwError("cannot set polling on WebSocketProvider", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "setPolling"
        });
    }
    send(method, params) {
        const rid = NextId++;
        return new Promise((resolve, reject)=>{
            function callback(error, result) {
                if (error) return reject(error);
                return resolve(result);
            }
            const payload = JSON.stringify({
                method: method,
                params: params,
                id: rid,
                jsonrpc: "2.0"
            });
            this.emit("debug", {
                action: "request",
                request: JSON.parse(payload),
                provider: this
            });
            this._requests[String(rid)] = {
                callback,
                payload
            };
            if (this._wsReady) this.websocket.send(payload);
        });
    }
    static defaultUrl() {
        return "ws://localhost:8546";
    }
    _subscribe(tag, param1, processFunc) {
        return __awaiter(this, void 0, void 0, function*() {
            let subIdPromise = this._subIds[tag];
            if (subIdPromise == null) {
                subIdPromise = Promise.all(param1).then((param)=>{
                    return this.send("eth_subscribe", param);
                });
                this._subIds[tag] = subIdPromise;
            }
            const subId = yield subIdPromise;
            this._subs[subId] = {
                tag,
                processFunc
            };
        });
    }
    _startEvent(event1) {
        switch(event1.type){
            case "block":
                this._subscribe("block", [
                    "newHeads"
                ], (result)=>{
                    const blockNumber = (0, _bignumber.BigNumber).from(result.number).toNumber();
                    this._emitted.block = blockNumber;
                    this.emit("block", blockNumber);
                });
                break;
            case "pending":
                this._subscribe("pending", [
                    "newPendingTransactions"
                ], (result)=>{
                    this.emit("pending", result);
                });
                break;
            case "filter":
                this._subscribe(event1.tag, [
                    "logs",
                    this._getFilter(event1.filter)
                ], (result)=>{
                    if (result.removed == null) result.removed = false;
                    this.emit(event1.filter, this.formatter.filterLog(result));
                });
                break;
            case "tx":
                {
                    const emitReceipt = (event)=>{
                        const hash = event.hash;
                        this.getTransactionReceipt(hash).then((receipt)=>{
                            if (!receipt) return;
                            this.emit(hash, receipt);
                        });
                    };
                    // In case it is already mined
                    emitReceipt(event1);
                    // To keep things simple, we start up a single newHeads subscription
                    // to keep an eye out for transactions we are watching for.
                    // Starting a subscription for an event (i.e. "tx") that is already
                    // running is (basically) a nop.
                    this._subscribe("tx", [
                        "newHeads"
                    ], (result)=>{
                        this._events.filter((e)=>e.type === "tx").forEach(emitReceipt);
                    });
                    break;
                }
            // Nothing is needed
            case "debug":
            case "poll":
            case "willPoll":
            case "didPoll":
            case "error":
                break;
            default:
                console.log("unhandled:", event1);
                break;
        }
    }
    _stopEvent(event) {
        let tag = event.tag;
        if (event.type === "tx") {
            // There are remaining transaction event listeners
            if (this._events.filter((e)=>e.type === "tx").length) return;
            tag = "tx";
        } else if (this.listenerCount(event.event)) // There are remaining event listeners
        return;
        const subId1 = this._subIds[tag];
        if (!subId1) return;
        delete this._subIds[tag];
        subId1.then((subId)=>{
            if (!this._subs[subId]) return;
            delete this._subs[subId];
            this.send("eth_unsubscribe", [
                subId
            ]);
        });
    }
    destroy() {
        return __awaiter(this, void 0, void 0, function*() {
            // Wait until we have connected before trying to disconnect
            if (this.websocket.readyState === (0, _ws.WebSocket).CONNECTING) yield new Promise((resolve)=>{
                this.websocket.onopen = function() {
                    resolve(true);
                };
                this.websocket.onerror = function() {
                    resolve(false);
                };
            });
            // Hangup
            // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes
            this.websocket.close(1000);
        });
    }
}

},{"@ethersproject/bignumber":"ckYYW","@ethersproject/properties":"h3GJb","./json-rpc-provider":"1sWtk","./ws":"d41Wa","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"1sWtk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "JsonRpcSigner", ()=>JsonRpcSigner);
parcelHelpers.export(exports, "JsonRpcProvider", ()=>JsonRpcProvider);
var _abstractSigner = require("@ethersproject/abstract-signer");
var _bignumber = require("@ethersproject/bignumber");
var _bytes = require("@ethersproject/bytes");
var _hash = require("@ethersproject/hash");
var _properties = require("@ethersproject/properties");
var _strings = require("@ethersproject/strings");
var _transactions = require("@ethersproject/transactions");
var _web = require("@ethersproject/web");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
var _baseProvider = require("./base-provider");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
const errorGas = [
    "call",
    "estimateGas"
];
function spelunk(value, requireData) {
    if (value == null) return null;
    // These *are* the droids we're looking for.
    if (typeof value.message === "string" && value.message.match("reverted")) {
        const data = (0, _bytes.isHexString)(value.data) ? value.data : null;
        if (!requireData || data) return {
            message: value.message,
            data
        };
    }
    // Spelunk further...
    if (typeof value === "object") {
        for(const key in value){
            const result = spelunk(value[key], requireData);
            if (result) return result;
        }
        return null;
    }
    // Might be a JSON string we can further descend...
    if (typeof value === "string") try {
        return spelunk(JSON.parse(value), requireData);
    } catch (error) {}
    return null;
}
function checkError(method, error, params) {
    const transaction = params.transaction || params.signedTransaction;
    // Undo the "convenience" some nodes are attempting to prevent backwards
    // incompatibility; maybe for v6 consider forwarding reverts as errors
    if (method === "call") {
        const result = spelunk(error, true);
        if (result) return result.data;
        // Nothing descriptive..
        logger.throwError("missing revert data in call exception; Transaction reverted without a reason string", (0, _logger.Logger).errors.CALL_EXCEPTION, {
            data: "0x",
            transaction,
            error
        });
    }
    if (method === "estimateGas") {
        // Try to find something, with a preference on SERVER_ERROR body
        let result = spelunk(error.body, false);
        if (result == null) result = spelunk(error, false);
        // Found "reverted", this is a CALL_EXCEPTION
        if (result) logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", (0, _logger.Logger).errors.UNPREDICTABLE_GAS_LIMIT, {
            reason: result.message,
            method,
            transaction,
            error
        });
    }
    // @TODO: Should we spelunk for message too?
    let message = error.message;
    if (error.code === (0, _logger.Logger).errors.SERVER_ERROR && error.error && typeof error.error.message === "string") message = error.error.message;
    else if (typeof error.body === "string") message = error.body;
    else if (typeof error.responseText === "string") message = error.responseText;
    message = (message || "").toLowerCase();
    // "insufficient funds for gas * price + value + cost(data)"
    if (message.match(/insufficient funds|base fee exceeds gas limit/i)) logger.throwError("insufficient funds for intrinsic transaction cost", (0, _logger.Logger).errors.INSUFFICIENT_FUNDS, {
        error,
        method,
        transaction
    });
    // "nonce too low"
    if (message.match(/nonce (is )?too low/i)) logger.throwError("nonce has already been used", (0, _logger.Logger).errors.NONCE_EXPIRED, {
        error,
        method,
        transaction
    });
    // "replacement transaction underpriced"
    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) logger.throwError("replacement fee too low", (0, _logger.Logger).errors.REPLACEMENT_UNDERPRICED, {
        error,
        method,
        transaction
    });
    // "replacement transaction underpriced"
    if (message.match(/only replay-protected/i)) logger.throwError("legacy pre-eip-155 transactions not supported", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
        error,
        method,
        transaction
    });
    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", (0, _logger.Logger).errors.UNPREDICTABLE_GAS_LIMIT, {
        error,
        method,
        transaction
    });
    throw error;
}
function timer(timeout) {
    return new Promise(function(resolve) {
        setTimeout(resolve, timeout);
    });
}
function getResult(payload) {
    if (payload.error) {
        // @TODO: not any
        const error = new Error(payload.error.message);
        error.code = payload.error.code;
        error.data = payload.error.data;
        throw error;
    }
    return payload.result;
}
function getLowerCase(value) {
    if (value) return value.toLowerCase();
    return value;
}
const _constructorGuard = {};
class JsonRpcSigner extends (0, _abstractSigner.Signer) {
    constructor(constructorGuard, provider, addressOrIndex){
        super();
        if (constructorGuard !== _constructorGuard) throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
        (0, _properties.defineReadOnly)(this, "provider", provider);
        if (addressOrIndex == null) addressOrIndex = 0;
        if (typeof addressOrIndex === "string") {
            (0, _properties.defineReadOnly)(this, "_address", this.provider.formatter.address(addressOrIndex));
            (0, _properties.defineReadOnly)(this, "_index", null);
        } else if (typeof addressOrIndex === "number") {
            (0, _properties.defineReadOnly)(this, "_index", addressOrIndex);
            (0, _properties.defineReadOnly)(this, "_address", null);
        } else logger.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
    }
    connect(provider) {
        return logger.throwError("cannot alter JSON-RPC Signer connection", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "connect"
        });
    }
    connectUnchecked() {
        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
    }
    getAddress() {
        if (this._address) return Promise.resolve(this._address);
        return this.provider.send("eth_accounts", []).then((accounts)=>{
            if (accounts.length <= this._index) logger.throwError("unknown account #" + this._index, (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                operation: "getAddress"
            });
            return this.provider.formatter.address(accounts[this._index]);
        });
    }
    sendUncheckedTransaction(transaction) {
        transaction = (0, _properties.shallowCopy)(transaction);
        const fromAddress = this.getAddress().then((address)=>{
            if (address) address = address.toLowerCase();
            return address;
        });
        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
        // wishes to use this, it is easy to specify explicitly, otherwise
        // we look it up for them.
        if (transaction.gasLimit == null) {
            const estimate = (0, _properties.shallowCopy)(transaction);
            estimate.from = fromAddress;
            transaction.gasLimit = this.provider.estimateGas(estimate);
        }
        if (transaction.to != null) transaction.to = Promise.resolve(transaction.to).then((to)=>__awaiter(this, void 0, void 0, function*() {
                if (to == null) return null;
                const address = yield this.provider.resolveName(to);
                if (address == null) logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                return address;
            }));
        return (0, _properties.resolveProperties)({
            tx: (0, _properties.resolveProperties)(transaction),
            sender: fromAddress
        }).then(({ tx , sender  })=>{
            if (tx.from != null) {
                if (tx.from.toLowerCase() !== sender) logger.throwArgumentError("from address mismatch", "transaction", transaction);
            } else tx.from = sender;
            const hexTx = this.provider.constructor.hexlifyTransaction(tx, {
                from: true
            });
            return this.provider.send("eth_sendTransaction", [
                hexTx
            ]).then((hash)=>{
                return hash;
            }, (error)=>{
                return checkError("sendTransaction", error, hexTx);
            });
        });
    }
    signTransaction(transaction) {
        return logger.throwError("signing transactions is unsupported", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "signTransaction"
        });
    }
    sendTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function*() {
            // This cannot be mined any earlier than any recent block
            const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
            // Send the transaction
            const hash = yield this.sendUncheckedTransaction(transaction);
            try {
                // Unfortunately, JSON-RPC only provides and opaque transaction hash
                // for a response, and we need the actual transaction, so we poll
                // for it; it should show up very quickly
                return yield (0, _web.poll)(()=>__awaiter(this, void 0, void 0, function*() {
                        const tx = yield this.provider.getTransaction(hash);
                        if (tx === null) return undefined;
                        return this.provider._wrapTransaction(tx, hash, blockNumber);
                    }), {
                    oncePoll: this.provider
                });
            } catch (error) {
                error.transactionHash = hash;
                throw error;
            }
        });
    }
    signMessage(message) {
        return __awaiter(this, void 0, void 0, function*() {
            const data = typeof message === "string" ? (0, _strings.toUtf8Bytes)(message) : message;
            const address = yield this.getAddress();
            return yield this.provider.send("personal_sign", [
                (0, _bytes.hexlify)(data),
                address.toLowerCase()
            ]);
        });
    }
    _legacySignMessage(message) {
        return __awaiter(this, void 0, void 0, function*() {
            const data = typeof message === "string" ? (0, _strings.toUtf8Bytes)(message) : message;
            const address = yield this.getAddress();
            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
            return yield this.provider.send("eth_sign", [
                address.toLowerCase(),
                (0, _bytes.hexlify)(data)
            ]);
        });
    }
    _signTypedData(domain, types, value) {
        return __awaiter(this, void 0, void 0, function*() {
            // Populate any ENS names (in-place)
            const populated = yield (0, _hash._TypedDataEncoder).resolveNames(domain, types, value, (name)=>{
                return this.provider.resolveName(name);
            });
            const address = yield this.getAddress();
            return yield this.provider.send("eth_signTypedData_v4", [
                address.toLowerCase(),
                JSON.stringify((0, _hash._TypedDataEncoder).getPayload(populated.domain, types, populated.value))
            ]);
        });
    }
    unlock(password) {
        return __awaiter(this, void 0, void 0, function*() {
            const provider = this.provider;
            const address = yield this.getAddress();
            return provider.send("personal_unlockAccount", [
                address.toLowerCase(),
                password,
                null
            ]);
        });
    }
}
class UncheckedJsonRpcSigner extends JsonRpcSigner {
    sendTransaction(transaction) {
        return this.sendUncheckedTransaction(transaction).then((hash)=>{
            return {
                hash: hash,
                nonce: null,
                gasLimit: null,
                gasPrice: null,
                data: null,
                value: null,
                chainId: null,
                confirmations: 0,
                from: null,
                wait: (confirmations)=>{
                    return this.provider.waitForTransaction(hash, confirmations);
                }
            };
        });
    }
}
const allowedTransactionKeys = {
    chainId: true,
    data: true,
    gasLimit: true,
    gasPrice: true,
    nonce: true,
    to: true,
    value: true,
    type: true,
    accessList: true,
    maxFeePerGas: true,
    maxPriorityFeePerGas: true
};
class JsonRpcProvider extends (0, _baseProvider.BaseProvider) {
    constructor(url, network1){
        let networkOrReady = network1;
        // The network is unknown, query the JSON-RPC for it
        if (networkOrReady == null) networkOrReady = new Promise((resolve, reject)=>{
            setTimeout(()=>{
                this.detectNetwork().then((network)=>{
                    resolve(network);
                }, (error)=>{
                    reject(error);
                });
            }, 0);
        });
        super(networkOrReady);
        // Default URL
        if (!url) url = (0, _properties.getStatic)(this.constructor, "defaultUrl")();
        if (typeof url === "string") (0, _properties.defineReadOnly)(this, "connection", Object.freeze({
            url: url
        }));
        else (0, _properties.defineReadOnly)(this, "connection", Object.freeze((0, _properties.shallowCopy)(url)));
        this._nextId = 42;
    }
    get _cache() {
        if (this._eventLoopCache == null) this._eventLoopCache = {};
        return this._eventLoopCache;
    }
    static defaultUrl() {
        return "http://localhost:8545";
    }
    detectNetwork() {
        if (!this._cache["detectNetwork"]) {
            this._cache["detectNetwork"] = this._uncachedDetectNetwork();
            // Clear this cache at the beginning of the next event loop
            setTimeout(()=>{
                this._cache["detectNetwork"] = null;
            }, 0);
        }
        return this._cache["detectNetwork"];
    }
    _uncachedDetectNetwork() {
        return __awaiter(this, void 0, void 0, function*() {
            yield timer(0);
            let chainId = null;
            try {
                chainId = yield this.send("eth_chainId", []);
            } catch (error) {
                try {
                    chainId = yield this.send("net_version", []);
                } catch (error) {}
            }
            if (chainId != null) {
                const getNetwork = (0, _properties.getStatic)(this.constructor, "getNetwork");
                try {
                    return getNetwork((0, _bignumber.BigNumber).from(chainId).toNumber());
                } catch (error) {
                    return logger.throwError("could not detect network", (0, _logger.Logger).errors.NETWORK_ERROR, {
                        chainId: chainId,
                        event: "invalidNetwork",
                        serverError: error
                    });
                }
            }
            return logger.throwError("could not detect network", (0, _logger.Logger).errors.NETWORK_ERROR, {
                event: "noNetwork"
            });
        });
    }
    getSigner(addressOrIndex) {
        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
    }
    getUncheckedSigner(addressOrIndex) {
        return this.getSigner(addressOrIndex).connectUnchecked();
    }
    listAccounts() {
        return this.send("eth_accounts", []).then((accounts)=>{
            return accounts.map((a)=>this.formatter.address(a));
        });
    }
    send(method, params) {
        const request = {
            method: method,
            params: params,
            id: this._nextId++,
            jsonrpc: "2.0"
        };
        this.emit("debug", {
            action: "request",
            request: (0, _properties.deepCopy)(request),
            provider: this
        });
        // We can expand this in the future to any call, but for now these
        // are the biggest wins and do not require any serializing parameters.
        const cache = [
            "eth_chainId",
            "eth_blockNumber"
        ].indexOf(method) >= 0;
        if (cache && this._cache[method]) return this._cache[method];
        const result1 = (0, _web.fetchJson)(this.connection, JSON.stringify(request), getResult).then((result)=>{
            this.emit("debug", {
                action: "response",
                request: request,
                response: result,
                provider: this
            });
            return result;
        }, (error)=>{
            this.emit("debug", {
                action: "response",
                error: error,
                request: request,
                provider: this
            });
            throw error;
        });
        // Cache the fetch, but clear it on the next event loop
        if (cache) {
            this._cache[method] = result1;
            setTimeout(()=>{
                this._cache[method] = null;
            }, 0);
        }
        return result1;
    }
    prepareRequest(method, params) {
        switch(method){
            case "getBlockNumber":
                return [
                    "eth_blockNumber",
                    []
                ];
            case "getGasPrice":
                return [
                    "eth_gasPrice",
                    []
                ];
            case "getBalance":
                return [
                    "eth_getBalance",
                    [
                        getLowerCase(params.address),
                        params.blockTag
                    ]
                ];
            case "getTransactionCount":
                return [
                    "eth_getTransactionCount",
                    [
                        getLowerCase(params.address),
                        params.blockTag
                    ]
                ];
            case "getCode":
                return [
                    "eth_getCode",
                    [
                        getLowerCase(params.address),
                        params.blockTag
                    ]
                ];
            case "getStorageAt":
                return [
                    "eth_getStorageAt",
                    [
                        getLowerCase(params.address),
                        (0, _bytes.hexZeroPad)(params.position, 32),
                        params.blockTag
                    ]
                ];
            case "sendTransaction":
                return [
                    "eth_sendRawTransaction",
                    [
                        params.signedTransaction
                    ]
                ];
            case "getBlock":
                if (params.blockTag) return [
                    "eth_getBlockByNumber",
                    [
                        params.blockTag,
                        !!params.includeTransactions
                    ]
                ];
                else if (params.blockHash) return [
                    "eth_getBlockByHash",
                    [
                        params.blockHash,
                        !!params.includeTransactions
                    ]
                ];
                return null;
            case "getTransaction":
                return [
                    "eth_getTransactionByHash",
                    [
                        params.transactionHash
                    ]
                ];
            case "getTransactionReceipt":
                return [
                    "eth_getTransactionReceipt",
                    [
                        params.transactionHash
                    ]
                ];
            case "call":
                {
                    const hexlifyTransaction = (0, _properties.getStatic)(this.constructor, "hexlifyTransaction");
                    return [
                        "eth_call",
                        [
                            hexlifyTransaction(params.transaction, {
                                from: true
                            }),
                            params.blockTag
                        ]
                    ];
                }
            case "estimateGas":
                {
                    const hexlifyTransaction = (0, _properties.getStatic)(this.constructor, "hexlifyTransaction");
                    return [
                        "eth_estimateGas",
                        [
                            hexlifyTransaction(params.transaction, {
                                from: true
                            })
                        ]
                    ];
                }
            case "getLogs":
                if (params.filter && params.filter.address != null) params.filter.address = getLowerCase(params.filter.address);
                return [
                    "eth_getLogs",
                    [
                        params.filter
                    ]
                ];
            default:
                break;
        }
        return null;
    }
    perform(method, params) {
        return __awaiter(this, void 0, void 0, function*() {
            // Legacy networks do not like the type field being passed along (which
            // is fair), so we delete type if it is 0 and a non-EIP-1559 network
            if (method === "call" || method === "estimateGas") {
                const tx = params.transaction;
                if (tx && tx.type != null && (0, _bignumber.BigNumber).from(tx.type).isZero()) // If there are no EIP-1559 properties, it might be non-EIP-1559
                {
                    if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                        const feeData = yield this.getFeeData();
                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                            // Network doesn't know about EIP-1559 (and hence type)
                            params = (0, _properties.shallowCopy)(params);
                            params.transaction = (0, _properties.shallowCopy)(tx);
                            delete params.transaction.type;
                        }
                    }
                }
            }
            const args = this.prepareRequest(method, params);
            if (args == null) logger.throwError(method + " not implemented", (0, _logger.Logger).errors.NOT_IMPLEMENTED, {
                operation: method
            });
            try {
                return yield this.send(args[0], args[1]);
            } catch (error) {
                return checkError(method, error, params);
            }
        });
    }
    _startEvent(event) {
        if (event.tag === "pending") this._startPending();
        super._startEvent(event);
    }
    _startPending() {
        if (this._pendingFilter != null) return;
        const self = this;
        const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
        this._pendingFilter = pendingFilter;
        pendingFilter.then(function(filterId) {
            function poll() {
                self.send("eth_getFilterChanges", [
                    filterId
                ]).then(function(hashes) {
                    if (self._pendingFilter != pendingFilter) return null;
                    let seq = Promise.resolve();
                    hashes.forEach(function(hash) {
                        // @TODO: This should be garbage collected at some point... How? When?
                        self._emitted["t:" + hash.toLowerCase()] = "pending";
                        seq = seq.then(function() {
                            return self.getTransaction(hash).then(function(tx) {
                                self.emit("pending", tx);
                                return null;
                            });
                        });
                    });
                    return seq.then(function() {
                        return timer(1000);
                    });
                }).then(function() {
                    if (self._pendingFilter != pendingFilter) {
                        self.send("eth_uninstallFilter", [
                            filterId
                        ]);
                        return;
                    }
                    setTimeout(function() {
                        poll();
                    }, 0);
                    return null;
                }).catch((error)=>{});
            }
            poll();
            return filterId;
        }).catch((error)=>{});
    }
    _stopEvent(event) {
        if (event.tag === "pending" && this.listenerCount("pending") === 0) this._pendingFilter = null;
        super._stopEvent(event);
    }
    // Convert an ethers.js transaction into a JSON-RPC transaction
    //  - gasLimit => gas
    //  - All values hexlified
    //  - All numeric values zero-striped
    //  - All addresses are lowercased
    // NOTE: This allows a TransactionRequest, but all values should be resolved
    //       before this is called
    // @TODO: This will likely be removed in future versions and prepareRequest
    //        will be the preferred method for this.
    static hexlifyTransaction(transaction, allowExtra) {
        // Check only allowed properties are given
        const allowed = (0, _properties.shallowCopy)(allowedTransactionKeys);
        if (allowExtra) {
            for(const key in allowExtra)if (allowExtra[key]) allowed[key] = true;
        }
        (0, _properties.checkProperties)(transaction, allowed);
        const result = {};
        // JSON-RPC now requires numeric values to be "quantity" values
        [
            "chainId",
            "gasLimit",
            "gasPrice",
            "type",
            "maxFeePerGas",
            "maxPriorityFeePerGas",
            "nonce",
            "value"
        ].forEach(function(key) {
            if (transaction[key] == null) return;
            const value = (0, _bytes.hexValue)((0, _bignumber.BigNumber).from(transaction[key]));
            if (key === "gasLimit") key = "gas";
            result[key] = value;
        });
        [
            "from",
            "to",
            "data"
        ].forEach(function(key) {
            if (transaction[key] == null) return;
            result[key] = (0, _bytes.hexlify)(transaction[key]);
        });
        if (transaction.accessList) result["accessList"] = (0, _transactions.accessListify)(transaction.accessList);
        return result;
    }
}

},{"@ethersproject/abstract-signer":"g9Ey5","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/hash":"7JYPm","@ethersproject/properties":"h3GJb","@ethersproject/strings":"5TGFZ","@ethersproject/transactions":"d1ust","@ethersproject/web":"5yjI3","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./base-provider":"7OFAa","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"d41Wa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//export default WS;
//module.exports = WS;
parcelHelpers.export(exports, "WebSocket", ()=>WS);
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
let WS = null;
try {
    WS = WebSocket;
    if (WS == null) throw new Error("inject please");
} catch (error) {
    const logger = new (0, _logger.Logger)((0, _version.version));
    WS = function() {
        logger.throwError("WebSockets not supported in this environment", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "new WebSocket()"
        });
    };
}

},{"@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"9CTqA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// A StaticJsonRpcProvider is useful when you *know* for certain that
// the backend will never change, as it never calls eth_chainId to
// verify its backend. However, if the backend does change, the effects
// are undefined and may include:
// - inconsistent results
// - locking up the UI
// - block skew warnings
// - wrong results
// If the network is not explicit (i.e. auto-detection is expected), the
// node MUST be running and available to respond to requests BEFORE this
// is instantiated.
parcelHelpers.export(exports, "StaticJsonRpcProvider", ()=>StaticJsonRpcProvider);
parcelHelpers.export(exports, "UrlJsonRpcProvider", ()=>UrlJsonRpcProvider);
var _properties = require("@ethersproject/properties");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
var _jsonRpcProvider = require("./json-rpc-provider");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
class StaticJsonRpcProvider extends (0, _jsonRpcProvider.JsonRpcProvider) {
    detectNetwork() {
        const _super = Object.create(null, {
            detectNetwork: {
                get: ()=>super.detectNetwork
            }
        });
        return __awaiter(this, void 0, void 0, function*() {
            let network = this.network;
            if (network == null) {
                network = yield _super.detectNetwork.call(this);
                if (!network) logger.throwError("no network detected", (0, _logger.Logger).errors.UNKNOWN_ERROR, {});
                // If still not set, set it
                if (this._network == null) {
                    // A static network does not support "any"
                    (0, _properties.defineReadOnly)(this, "_network", network);
                    this.emit("network", network, null);
                }
            }
            return network;
        });
    }
}
class UrlJsonRpcProvider extends StaticJsonRpcProvider {
    constructor(network, apiKey){
        logger.checkAbstract(new.target, UrlJsonRpcProvider);
        // Normalize the Network and API Key
        network = (0, _properties.getStatic)(new.target, "getNetwork")(network);
        apiKey = (0, _properties.getStatic)(new.target, "getApiKey")(apiKey);
        const connection = (0, _properties.getStatic)(new.target, "getUrl")(network, apiKey);
        super(connection, network);
        if (typeof apiKey === "string") (0, _properties.defineReadOnly)(this, "apiKey", apiKey);
        else if (apiKey != null) Object.keys(apiKey).forEach((key)=>{
            (0, _properties.defineReadOnly)(this, key, apiKey[key]);
        });
    }
    _startPending() {
        logger.warn("WARNING: API provider does not support pending filters");
    }
    isCommunityResource() {
        return false;
    }
    getSigner(address) {
        return logger.throwError("API provider does not support signing", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "getSigner"
        });
    }
    listAccounts() {
        return Promise.resolve([]);
    }
    // Return a defaultApiKey if null, otherwise validate the API key
    static getApiKey(apiKey) {
        return apiKey;
    }
    // Returns the url or connection for the given network and API key. The
    // API key will have been sanitized by the getApiKey first, so any validation
    // or transformations can be done there.
    static getUrl(network, apiKey) {
        return logger.throwError("not implemented; sub-classes must override getUrl", (0, _logger.Logger).errors.NOT_IMPLEMENTED, {
            operation: "getUrl"
        });
    }
}

},{"@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./json-rpc-provider":"1sWtk","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"cKap1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AnkrProvider", ()=>AnkrProvider);
var _formatter = require("./formatter");
var _urlJsonRpcProvider = require("./url-json-rpc-provider");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
const logger = new (0, _logger.Logger)((0, _version.version));
const defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
function getHost(name) {
    switch(name){
        case "homestead":
            return "rpc.ankr.com/eth/";
        case "ropsten":
            return "rpc.ankr.com/eth_ropsten/";
        case "rinkeby":
            return "rpc.ankr.com/eth_rinkeby/";
        case "goerli":
            return "rpc.ankr.com/eth_goerli/";
        case "matic":
            return "rpc.ankr.com/polygon/";
        case "arbitrum":
            return "rpc.ankr.com/arbitrum/";
    }
    return logger.throwArgumentError("unsupported network", "name", name);
}
class AnkrProvider extends (0, _urlJsonRpcProvider.UrlJsonRpcProvider) {
    isCommunityResource() {
        return this.apiKey === defaultApiKey;
    }
    static getApiKey(apiKey) {
        if (apiKey == null) return defaultApiKey;
        return apiKey;
    }
    static getUrl(network, apiKey) {
        if (apiKey == null) apiKey = defaultApiKey;
        const connection = {
            allowGzip: true,
            url: "https://" + getHost(network.name) + apiKey,
            throttleCallback: (attempt, url)=>{
                if (apiKey.apiKey === defaultApiKey) (0, _formatter.showThrottleMessage)();
                return Promise.resolve(true);
            }
        };
        if (apiKey.projectSecret != null) {
            connection.user = "";
            connection.password = apiKey.projectSecret;
        }
        return connection;
    }
}

},{"./formatter":"ZfOHh","./url-json-rpc-provider":"9CTqA","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"9VKg2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CloudflareProvider", ()=>CloudflareProvider);
var _urlJsonRpcProvider = require("./url-json-rpc-provider");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
class CloudflareProvider extends (0, _urlJsonRpcProvider.UrlJsonRpcProvider) {
    static getApiKey(apiKey) {
        if (apiKey != null) logger.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
        return null;
    }
    static getUrl(network, apiKey) {
        let host = null;
        switch(network.name){
            case "homestead":
                host = "https://cloudflare-eth.com/";
                break;
            default:
                logger.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return host;
    }
    perform(method, params) {
        const _super = Object.create(null, {
            perform: {
                get: ()=>super.perform
            }
        });
        return __awaiter(this, void 0, void 0, function*() {
            // The Cloudflare provider does not support eth_blockNumber,
            // so we get the latest block and pull it from that
            if (method === "getBlockNumber") {
                const block = yield _super.perform.call(this, "getBlock", {
                    blockTag: "latest"
                });
                return block.number;
            }
            return _super.perform.call(this, method, params);
        });
    }
}

},{"./url-json-rpc-provider":"9CTqA","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"arYKc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EtherscanProvider", ()=>EtherscanProvider);
var _bytes = require("@ethersproject/bytes");
var _properties = require("@ethersproject/properties");
var _transactions = require("@ethersproject/transactions");
var _web = require("@ethersproject/web");
var _formatter = require("./formatter");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
var _baseProvider = require("./base-provider");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
// The transaction has already been sanitized by the calls in Provider
function getTransactionPostData(transaction) {
    const result = {};
    for(let key in transaction){
        if (transaction[key] == null) continue;
        let value = transaction[key];
        if (key === "type" && value === 0) continue;
        // Quantity-types require no leading zero, unless 0
        if (({
            type: true,
            gasLimit: true,
            gasPrice: true,
            maxFeePerGs: true,
            maxPriorityFeePerGas: true,
            nonce: true,
            value: true
        })[key]) value = (0, _bytes.hexValue)((0, _bytes.hexlify)(value));
        else if (key === "accessList") value = "[" + (0, _transactions.accessListify)(value).map((set)=>{
            return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
        }).join(",") + "]";
        else value = (0, _bytes.hexlify)(value);
        result[key] = value;
    }
    return result;
}
function getResult(result) {
    // getLogs, getHistory have weird success responses
    if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) return result.result;
    if (result.status != 1 || result.message != "OK") {
        const error = new Error("invalid response");
        error.result = JSON.stringify(result);
        if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) error.throttleRetry = true;
        throw error;
    }
    return result.result;
}
function getJsonResult(result) {
    // This response indicates we are being throttled
    if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
        const error = new Error("throttled response");
        error.result = JSON.stringify(result);
        error.throttleRetry = true;
        throw error;
    }
    if (result.jsonrpc != "2.0") {
        // @TODO: not any
        const error = new Error("invalid response");
        error.result = JSON.stringify(result);
        throw error;
    }
    if (result.error) {
        // @TODO: not any
        const error = new Error(result.error.message || "unknown error");
        if (result.error.code) error.code = result.error.code;
        if (result.error.data) error.data = result.error.data;
        throw error;
    }
    return result.result;
}
// The blockTag was normalized as a string by the Provider pre-perform operations
function checkLogTag(blockTag) {
    if (blockTag === "pending") throw new Error("pending not supported");
    if (blockTag === "latest") return blockTag;
    return parseInt(blockTag.substring(2), 16);
}
const defaultApiKey = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
function checkError(method, error, transaction) {
    // Undo the "convenience" some nodes are attempting to prevent backwards
    // incompatibility; maybe for v6 consider forwarding reverts as errors
    if (method === "call" && error.code === (0, _logger.Logger).errors.SERVER_ERROR) {
        const e = error.error;
        // Etherscan keeps changing their string
        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
            // Etherscan prefixes the data like "Reverted 0x1234"
            let data = e.data;
            if (data) data = "0x" + data.replace(/^.*0x/i, "");
            if ((0, _bytes.isHexString)(data)) return data;
            logger.throwError("missing revert data in call exception", (0, _logger.Logger).errors.CALL_EXCEPTION, {
                error,
                data: "0x"
            });
        }
    }
    // Get the message from any nested error structure
    let message = error.message;
    if (error.code === (0, _logger.Logger).errors.SERVER_ERROR) {
        if (error.error && typeof error.error.message === "string") message = error.error.message;
        else if (typeof error.body === "string") message = error.body;
        else if (typeof error.responseText === "string") message = error.responseText;
    }
    message = (message || "").toLowerCase();
    // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"
    if (message.match(/insufficient funds/)) logger.throwError("insufficient funds for intrinsic transaction cost", (0, _logger.Logger).errors.INSUFFICIENT_FUNDS, {
        error,
        method,
        transaction
    });
    // "Transaction with the same hash was already imported."
    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) logger.throwError("nonce has already been used", (0, _logger.Logger).errors.NONCE_EXPIRED, {
        error,
        method,
        transaction
    });
    // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."
    if (message.match(/another transaction with same nonce/)) logger.throwError("replacement fee too low", (0, _logger.Logger).errors.REPLACEMENT_UNDERPRICED, {
        error,
        method,
        transaction
    });
    if (message.match(/execution failed due to an exception|execution reverted/)) logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", (0, _logger.Logger).errors.UNPREDICTABLE_GAS_LIMIT, {
        error,
        method,
        transaction
    });
    throw error;
}
class EtherscanProvider extends (0, _baseProvider.BaseProvider) {
    constructor(network, apiKey){
        super(network);
        (0, _properties.defineReadOnly)(this, "baseUrl", this.getBaseUrl());
        (0, _properties.defineReadOnly)(this, "apiKey", apiKey || defaultApiKey);
    }
    getBaseUrl() {
        switch(this.network ? this.network.name : "invalid"){
            case "homestead":
                return "https://api.etherscan.io";
            case "ropsten":
                return "https://api-ropsten.etherscan.io";
            case "rinkeby":
                return "https://api-rinkeby.etherscan.io";
            case "kovan":
                return "https://api-kovan.etherscan.io";
            case "goerli":
                return "https://api-goerli.etherscan.io";
            case "optimism":
                return "https://api-optimistic.etherscan.io";
            default:
        }
        return logger.throwArgumentError("unsupported network", "network", this.network.name);
    }
    getUrl(module, params) {
        const query = Object.keys(params).reduce((accum, key)=>{
            const value = params[key];
            if (value != null) accum += `&${key}=${value}`;
            return accum;
        }, "");
        const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
        return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
    }
    getPostUrl() {
        return `${this.baseUrl}/api`;
    }
    getPostData(module, params) {
        params.module = module;
        params.apikey = this.apiKey;
        return params;
    }
    fetch(module, params, post) {
        return __awaiter(this, void 0, void 0, function*() {
            const url = post ? this.getPostUrl() : this.getUrl(module, params);
            const payload = post ? this.getPostData(module, params) : null;
            const procFunc = module === "proxy" ? getJsonResult : getResult;
            this.emit("debug", {
                action: "request",
                request: url,
                provider: this
            });
            const connection = {
                url: url,
                throttleSlotInterval: 1000,
                throttleCallback: (attempt, url)=>{
                    if (this.isCommunityResource()) (0, _formatter.showThrottleMessage)();
                    return Promise.resolve(true);
                }
            };
            let payloadStr = null;
            if (payload) {
                connection.headers = {
                    "content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                };
                payloadStr = Object.keys(payload).map((key)=>{
                    return `${key}=${payload[key]}`;
                }).join("&");
            }
            const result = yield (0, _web.fetchJson)(connection, payloadStr, procFunc || getJsonResult);
            this.emit("debug", {
                action: "response",
                request: url,
                response: (0, _properties.deepCopy)(result),
                provider: this
            });
            return result;
        });
    }
    detectNetwork() {
        return __awaiter(this, void 0, void 0, function*() {
            return this.network;
        });
    }
    perform(method, params) {
        const _super = Object.create(null, {
            perform: {
                get: ()=>super.perform
            }
        });
        return __awaiter(this, void 0, void 0, function*() {
            switch(method){
                case "getBlockNumber":
                    return this.fetch("proxy", {
                        action: "eth_blockNumber"
                    });
                case "getGasPrice":
                    return this.fetch("proxy", {
                        action: "eth_gasPrice"
                    });
                case "getBalance":
                    // Returns base-10 result
                    return this.fetch("account", {
                        action: "balance",
                        address: params.address,
                        tag: params.blockTag
                    });
                case "getTransactionCount":
                    return this.fetch("proxy", {
                        action: "eth_getTransactionCount",
                        address: params.address,
                        tag: params.blockTag
                    });
                case "getCode":
                    return this.fetch("proxy", {
                        action: "eth_getCode",
                        address: params.address,
                        tag: params.blockTag
                    });
                case "getStorageAt":
                    return this.fetch("proxy", {
                        action: "eth_getStorageAt",
                        address: params.address,
                        position: params.position,
                        tag: params.blockTag
                    });
                case "sendTransaction":
                    return this.fetch("proxy", {
                        action: "eth_sendRawTransaction",
                        hex: params.signedTransaction
                    }, true).catch((error)=>{
                        return checkError("sendTransaction", error, params.signedTransaction);
                    });
                case "getBlock":
                    if (params.blockTag) return this.fetch("proxy", {
                        action: "eth_getBlockByNumber",
                        tag: params.blockTag,
                        boolean: params.includeTransactions ? "true" : "false"
                    });
                    throw new Error("getBlock by blockHash not implemented");
                case "getTransaction":
                    return this.fetch("proxy", {
                        action: "eth_getTransactionByHash",
                        txhash: params.transactionHash
                    });
                case "getTransactionReceipt":
                    return this.fetch("proxy", {
                        action: "eth_getTransactionReceipt",
                        txhash: params.transactionHash
                    });
                case "call":
                    {
                        if (params.blockTag !== "latest") throw new Error("EtherscanProvider does not support blockTag for call");
                        const postData = getTransactionPostData(params.transaction);
                        postData.module = "proxy";
                        postData.action = "eth_call";
                        try {
                            return yield this.fetch("proxy", postData, true);
                        } catch (error) {
                            return checkError("call", error, params.transaction);
                        }
                    }
                case "estimateGas":
                    {
                        const postData = getTransactionPostData(params.transaction);
                        postData.module = "proxy";
                        postData.action = "eth_estimateGas";
                        try {
                            return yield this.fetch("proxy", postData, true);
                        } catch (error) {
                            return checkError("estimateGas", error, params.transaction);
                        }
                    }
                case "getLogs":
                    {
                        const args = {
                            action: "getLogs"
                        };
                        if (params.filter.fromBlock) args.fromBlock = checkLogTag(params.filter.fromBlock);
                        if (params.filter.toBlock) args.toBlock = checkLogTag(params.filter.toBlock);
                        if (params.filter.address) args.address = params.filter.address;
                        // @TODO: We can handle slightly more complicated logs using the logs API
                        if (params.filter.topics && params.filter.topics.length > 0) {
                            if (params.filter.topics.length > 1) logger.throwError("unsupported topic count", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                                topics: params.filter.topics
                            });
                            if (params.filter.topics.length === 1) {
                                const topic0 = params.filter.topics[0];
                                if (typeof topic0 !== "string" || topic0.length !== 66) logger.throwError("unsupported topic format", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
                                    topic0: topic0
                                });
                                args.topic0 = topic0;
                            }
                        }
                        const logs = yield this.fetch("logs", args);
                        // Cache txHash => blockHash
                        let blocks = {};
                        // Add any missing blockHash to the logs
                        for(let i = 0; i < logs.length; i++){
                            const log = logs[i];
                            if (log.blockHash != null) continue;
                            if (blocks[log.blockNumber] == null) {
                                const block = yield this.getBlock(log.blockNumber);
                                if (block) blocks[log.blockNumber] = block.hash;
                            }
                            log.blockHash = blocks[log.blockNumber];
                        }
                        return logs;
                    }
                case "getEtherPrice":
                    if (this.network.name !== "homestead") return 0.0;
                    return parseFloat((yield this.fetch("stats", {
                        action: "ethprice"
                    })).ethusd);
                default:
                    break;
            }
            return _super.perform.call(this, method, params);
        });
    }
    // Note: The `page` page parameter only allows pagination within the
    //       10,000 window available without a page and offset parameter
    //       Error: Result window is too large, PageNo x Offset size must
    //              be less than or equal to 10000
    getHistory(addressOrName, startBlock, endBlock) {
        return __awaiter(this, void 0, void 0, function*() {
            const params = {
                action: "txlist",
                address: yield this.resolveName(addressOrName),
                startblock: startBlock == null ? 0 : startBlock,
                endblock: endBlock == null ? 99999999 : endBlock,
                sort: "asc"
            };
            const result = yield this.fetch("account", params);
            return result.map((tx)=>{
                [
                    "contractAddress",
                    "to"
                ].forEach(function(key) {
                    if (tx[key] == "") delete tx[key];
                });
                if (tx.creates == null && tx.contractAddress != null) tx.creates = tx.contractAddress;
                const item = this.formatter.transactionResponse(tx);
                if (tx.timeStamp) item.timestamp = parseInt(tx.timeStamp);
                return item;
            });
        });
    }
    isCommunityResource() {
        return this.apiKey === defaultApiKey;
    }
}

},{"@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@ethersproject/transactions":"d1ust","@ethersproject/web":"5yjI3","./formatter":"ZfOHh","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./base-provider":"7OFAa","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"2wNFK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FallbackProvider", ()=>FallbackProvider);
var _abstractProvider = require("@ethersproject/abstract-provider");
var _bignumber = require("@ethersproject/bignumber");
var _bytes = require("@ethersproject/bytes");
var _properties = require("@ethersproject/properties");
var _random = require("@ethersproject/random");
var _web = require("@ethersproject/web");
var _baseProvider = require("./base-provider");
var _formatter = require("./formatter");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const logger = new (0, _logger.Logger)((0, _version.version));
function now() {
    return new Date().getTime();
}
// Returns to network as long as all agree, or null if any is null.
// Throws an error if any two networks do not match.
function checkNetworks(networks) {
    let result = null;
    for(let i = 0; i < networks.length; i++){
        const network = networks[i];
        // Null! We do not know our network; bail.
        if (network == null) return null;
        if (result) // Make sure the network matches the previous networks
        {
            if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) logger.throwArgumentError("provider mismatch", "networks", networks);
        } else result = network;
    }
    return result;
}
function median(values, maxDelta) {
    values = values.slice().sort();
    const middle = Math.floor(values.length / 2);
    // Odd length; take the middle
    if (values.length % 2) return values[middle];
    // Even length; take the average of the two middle
    const a = values[middle - 1], b = values[middle];
    if (maxDelta != null && Math.abs(a - b) > maxDelta) return null;
    return (a + b) / 2;
}
function serialize(value) {
    if (value === null) return "null";
    else if (typeof value === "number" || typeof value === "boolean") return JSON.stringify(value);
    else if (typeof value === "string") return value;
    else if ((0, _bignumber.BigNumber).isBigNumber(value)) return value.toString();
    else if (Array.isArray(value)) return JSON.stringify(value.map((i)=>serialize(i)));
    else if (typeof value === "object") {
        const keys = Object.keys(value);
        keys.sort();
        return "{" + keys.map((key)=>{
            let v = value[key];
            if (typeof v === "function") v = "[function]";
            else v = serialize(v);
            return JSON.stringify(key) + ":" + v;
        }).join(",") + "}";
    }
    throw new Error("unknown value type: " + typeof value);
}
// Next request ID to use for emitting debug info
let nextRid = 1;
function stall(duration) {
    let cancel = null;
    let timer = null;
    let promise = new Promise((resolve)=>{
        cancel = function() {
            if (timer) {
                clearTimeout(timer);
                timer = null;
            }
            resolve();
        };
        timer = setTimeout(cancel, duration);
    });
    const wait = (func)=>{
        promise = promise.then(func);
        return promise;
    };
    function getPromise() {
        return promise;
    }
    return {
        cancel,
        getPromise,
        wait
    };
}
const ForwardErrors = [
    (0, _logger.Logger).errors.CALL_EXCEPTION,
    (0, _logger.Logger).errors.INSUFFICIENT_FUNDS,
    (0, _logger.Logger).errors.NONCE_EXPIRED,
    (0, _logger.Logger).errors.REPLACEMENT_UNDERPRICED,
    (0, _logger.Logger).errors.UNPREDICTABLE_GAS_LIMIT
];
const ForwardProperties = [
    "address",
    "args",
    "errorArgs",
    "errorSignature",
    "method",
    "transaction", 
];
function exposeDebugConfig(config, now1) {
    const result = {
        weight: config.weight
    };
    Object.defineProperty(result, "provider", {
        get: ()=>config.provider
    });
    if (config.start) result.start = config.start;
    if (now1) result.duration = now1 - config.start;
    if (config.done) {
        if (config.error) result.error = config.error;
        else result.result = config.result || null;
    }
    return result;
}
function normalizedTally(normalize, quorum) {
    return function(configs) {
        // Count the votes for each result
        const tally = {};
        configs.forEach((c)=>{
            const value = normalize(c.result);
            if (!tally[value]) tally[value] = {
                count: 0,
                result: c.result
            };
            tally[value].count++;
        });
        // Check for a quorum on any given result
        const keys = Object.keys(tally);
        for(let i = 0; i < keys.length; i++){
            const check = tally[keys[i]];
            if (check.count >= quorum) return check.result;
        }
        // No quroum
        return undefined;
    };
}
function getProcessFunc(provider, method, params) {
    let normalize = serialize;
    switch(method){
        case "getBlockNumber":
            // Return the median value, unless there is (median + 1) is also
            // present, in which case that is probably true and the median
            // is going to be stale soon. In the event of a malicious node,
            // the lie will be true soon enough.
            return function(configs) {
                const values = configs.map((c)=>c.result);
                // Get the median block number
                let blockNumber = median(configs.map((c)=>c.result), 2);
                if (blockNumber == null) return undefined;
                blockNumber = Math.ceil(blockNumber);
                // If the next block height is present, its prolly safe to use
                if (values.indexOf(blockNumber + 1) >= 0) blockNumber++;
                // Don't ever roll back the blockNumber
                if (blockNumber >= provider._highestBlockNumber) provider._highestBlockNumber = blockNumber;
                return provider._highestBlockNumber;
            };
        case "getGasPrice":
            // Return the middle (round index up) value, similar to median
            // but do not average even entries and choose the higher.
            // Malicious actors must compromise 50% of the nodes to lie.
            return function(configs) {
                const values = configs.map((c)=>c.result);
                values.sort();
                return values[Math.floor(values.length / 2)];
            };
        case "getEtherPrice":
            // Returns the median price. Malicious actors must compromise at
            // least 50% of the nodes to lie (in a meaningful way).
            return function(configs) {
                return median(configs.map((c)=>c.result));
            };
        // No additional normalizing required; serialize is enough
        case "getBalance":
        case "getTransactionCount":
        case "getCode":
        case "getStorageAt":
        case "call":
        case "estimateGas":
        case "getLogs":
            break;
        // We drop the confirmations from transactions as it is approximate
        case "getTransaction":
        case "getTransactionReceipt":
            normalize = function(tx) {
                if (tx == null) return null;
                tx = (0, _properties.shallowCopy)(tx);
                tx.confirmations = -1;
                return serialize(tx);
            };
            break;
        // We drop the confirmations from transactions as it is approximate
        case "getBlock":
            // We drop the confirmations from transactions as it is approximate
            if (params.includeTransactions) normalize = function(block) {
                if (block == null) return null;
                block = (0, _properties.shallowCopy)(block);
                block.transactions = block.transactions.map((tx)=>{
                    tx = (0, _properties.shallowCopy)(tx);
                    tx.confirmations = -1;
                    return tx;
                });
                return serialize(block);
            };
            else normalize = function(block) {
                if (block == null) return null;
                return serialize(block);
            };
            break;
        default:
            throw new Error("unknown method: " + method);
    }
    // Return the result if and only if the expected quorum is
    // satisfied and agreed upon for the final result.
    return normalizedTally(normalize, provider.quorum);
}
// If we are doing a blockTag query, we need to make sure the backend is
// caught up to the FallbackProvider, before sending a request to it.
function waitForSync(config, blockNumber) {
    return __awaiter(this, void 0, void 0, function*() {
        const provider = config.provider;
        if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) return provider;
        return (0, _web.poll)(()=>{
            return new Promise((resolve, reject)=>{
                setTimeout(function() {
                    // We are synced
                    if (provider.blockNumber >= blockNumber) return resolve(provider);
                    // We're done; just quit
                    if (config.cancelled) return resolve(null);
                    // Try again, next block
                    return resolve(undefined);
                }, 0);
            });
        }, {
            oncePoll: provider
        });
    });
}
function getRunner(config, currentBlockNumber, method, params) {
    return __awaiter(this, void 0, void 0, function*() {
        let provider = config.provider;
        switch(method){
            case "getBlockNumber":
            case "getGasPrice":
                return provider[method]();
            case "getEtherPrice":
                if (provider.getEtherPrice) return provider.getEtherPrice();
                break;
            case "getBalance":
            case "getTransactionCount":
            case "getCode":
                if (params.blockTag && (0, _bytes.isHexString)(params.blockTag)) provider = yield waitForSync(config, currentBlockNumber);
                return provider[method](params.address, params.blockTag || "latest");
            case "getStorageAt":
                if (params.blockTag && (0, _bytes.isHexString)(params.blockTag)) provider = yield waitForSync(config, currentBlockNumber);
                return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
            case "getBlock":
                if (params.blockTag && (0, _bytes.isHexString)(params.blockTag)) provider = yield waitForSync(config, currentBlockNumber);
                return provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash);
            case "call":
            case "estimateGas":
                if (params.blockTag && (0, _bytes.isHexString)(params.blockTag)) provider = yield waitForSync(config, currentBlockNumber);
                return provider[method](params.transaction);
            case "getTransaction":
            case "getTransactionReceipt":
                return provider[method](params.transactionHash);
            case "getLogs":
                {
                    let filter = params.filter;
                    if (filter.fromBlock && (0, _bytes.isHexString)(filter.fromBlock) || filter.toBlock && (0, _bytes.isHexString)(filter.toBlock)) provider = yield waitForSync(config, currentBlockNumber);
                    return provider.getLogs(filter);
                }
        }
        return logger.throwError("unknown method error", (0, _logger.Logger).errors.UNKNOWN_ERROR, {
            method: method,
            params: params
        });
    });
}
class FallbackProvider extends (0, _baseProvider.BaseProvider) {
    constructor(providers, quorum){
        if (providers.length === 0) logger.throwArgumentError("missing providers", "providers", providers);
        const providerConfigs = providers.map((configOrProvider, index)=>{
            if ((0, _abstractProvider.Provider).isProvider(configOrProvider)) {
                const stallTimeout = (0, _formatter.isCommunityResource)(configOrProvider) ? 2000 : 750;
                const priority = 1;
                return Object.freeze({
                    provider: configOrProvider,
                    weight: 1,
                    stallTimeout,
                    priority
                });
            }
            const config = (0, _properties.shallowCopy)(configOrProvider);
            if (config.priority == null) config.priority = 1;
            if (config.stallTimeout == null) config.stallTimeout = (0, _formatter.isCommunityResource)(configOrProvider) ? 2000 : 750;
            if (config.weight == null) config.weight = 1;
            const weight = config.weight;
            if (weight % 1 || weight > 512 || weight < 1) logger.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index}].weight`, weight);
            return Object.freeze(config);
        });
        const total = providerConfigs.reduce((accum, c)=>accum + c.weight, 0);
        if (quorum == null) quorum = total / 2;
        else if (quorum > total) logger.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
        // Are all providers' networks are known
        let networkOrReady = checkNetworks(providerConfigs.map((c)=>c.provider.network));
        // Not all networks are known; we must stall
        if (networkOrReady == null) networkOrReady = new Promise((resolve, reject)=>{
            setTimeout(()=>{
                this.detectNetwork().then(resolve, reject);
            }, 0);
        });
        super(networkOrReady);
        // Preserve a copy, so we do not get mutated
        (0, _properties.defineReadOnly)(this, "providerConfigs", Object.freeze(providerConfigs));
        (0, _properties.defineReadOnly)(this, "quorum", quorum);
        this._highestBlockNumber = -1;
    }
    detectNetwork() {
        return __awaiter(this, void 0, void 0, function*() {
            const networks = yield Promise.all(this.providerConfigs.map((c)=>c.provider.getNetwork()));
            return checkNetworks(networks);
        });
    }
    perform(method, params) {
        return __awaiter(this, void 0, void 0, function*() {
            // Sending transactions is special; always broadcast it to all backends
            if (method === "sendTransaction") {
                const results = yield Promise.all(this.providerConfigs.map((c)=>{
                    return c.provider.sendTransaction(params.signedTransaction).then((result)=>{
                        return result.hash;
                    }, (error)=>{
                        return error;
                    });
                }));
                // Any success is good enough (other errors are likely "already seen" errors
                for(let i = 0; i < results.length; i++){
                    const result = results[i];
                    if (typeof result === "string") return result;
                }
                // They were all an error; pick the first error
                throw results[0];
            }
            // We need to make sure we are in sync with our backends, so we need
            // to know this before we can make a lot of calls
            if (this._highestBlockNumber === -1 && method !== "getBlockNumber") yield this.getBlockNumber();
            const processFunc = getProcessFunc(this, method, params);
            // Shuffle the providers and then sort them by their priority; we
            // shallowCopy them since we will store the result in them too
            const configs = (0, _random.shuffled)(this.providerConfigs.map((0, _properties.shallowCopy)));
            configs.sort((a, b)=>a.priority - b.priority);
            const currentBlockNumber = this._highestBlockNumber;
            let i = 0;
            let first = true;
            while(true){
                const t0 = now();
                // Compute the inflight weight (exclude anything past)
                let inflightWeight = configs.filter((c)=>c.runner && t0 - c.start < c.stallTimeout).reduce((accum, c)=>accum + c.weight, 0);
                // Start running enough to meet quorum
                while(inflightWeight < this.quorum && i < configs.length){
                    const config = configs[i++];
                    const rid = nextRid++;
                    config.start = now();
                    config.staller = stall(config.stallTimeout);
                    config.staller.wait(()=>{
                        config.staller = null;
                    });
                    config.runner = getRunner(config, currentBlockNumber, method, params).then((result)=>{
                        config.done = true;
                        config.result = result;
                        if (this.listenerCount("debug")) this.emit("debug", {
                            action: "request",
                            rid: rid,
                            backend: exposeDebugConfig(config, now()),
                            request: {
                                method: method,
                                params: (0, _properties.deepCopy)(params)
                            },
                            provider: this
                        });
                    }, (error)=>{
                        config.done = true;
                        config.error = error;
                        if (this.listenerCount("debug")) this.emit("debug", {
                            action: "request",
                            rid: rid,
                            backend: exposeDebugConfig(config, now()),
                            request: {
                                method: method,
                                params: (0, _properties.deepCopy)(params)
                            },
                            provider: this
                        });
                    });
                    if (this.listenerCount("debug")) this.emit("debug", {
                        action: "request",
                        rid: rid,
                        backend: exposeDebugConfig(config, null),
                        request: {
                            method: method,
                            params: (0, _properties.deepCopy)(params)
                        },
                        provider: this
                    });
                    inflightWeight += config.weight;
                }
                // Wait for anything meaningful to finish or stall out
                const waiting = [];
                configs.forEach((c)=>{
                    if (c.done || !c.runner) return;
                    waiting.push(c.runner);
                    if (c.staller) waiting.push(c.staller.getPromise());
                });
                if (waiting.length) yield Promise.race(waiting);
                // Check the quorum and process the results; the process function
                // may additionally decide the quorum is not met
                const results = configs.filter((c)=>c.done && c.error == null);
                if (results.length >= this.quorum) {
                    const result = processFunc(results);
                    if (result !== undefined) {
                        // Shut down any stallers
                        configs.forEach((c)=>{
                            if (c.staller) c.staller.cancel();
                            c.cancelled = true;
                        });
                        return result;
                    }
                    if (!first) yield stall(100).getPromise();
                    first = false;
                }
                // No result, check for errors that should be forwarded
                const errors = configs.reduce((accum, c)=>{
                    if (!c.done || c.error == null) return accum;
                    const code = c.error.code;
                    if (ForwardErrors.indexOf(code) >= 0) {
                        if (!accum[code]) accum[code] = {
                            error: c.error,
                            weight: 0
                        };
                        accum[code].weight += c.weight;
                    }
                    return accum;
                }, {});
                Object.keys(errors).forEach((errorCode)=>{
                    const tally = errors[errorCode];
                    if (tally.weight < this.quorum) return;
                    // Shut down any stallers
                    configs.forEach((c)=>{
                        if (c.staller) c.staller.cancel();
                        c.cancelled = true;
                    });
                    const e = tally.error;
                    const props = {};
                    ForwardProperties.forEach((name)=>{
                        if (e[name] == null) return;
                        props[name] = e[name];
                    });
                    logger.throwError(e.reason || e.message, errorCode, props);
                });
                // All configs have run to completion; we will never get more data
                if (configs.filter((c)=>!c.done).length === 0) break;
            }
            // Shut down any stallers; shouldn't be any
            configs.forEach((c)=>{
                if (c.staller) c.staller.cancel();
                c.cancelled = true;
            });
            return logger.throwError("failed to meet quorum", (0, _logger.Logger).errors.SERVER_ERROR, {
                method: method,
                params: params,
                //results: configs.map((c) => c.result),
                //errors: configs.map((c) => c.error),
                results: configs.map((c)=>exposeDebugConfig(c)),
                provider: this
            });
        });
    }
}

},{"@ethersproject/abstract-provider":"g1jr1","@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/properties":"h3GJb","@ethersproject/random":"7myQM","@ethersproject/web":"5yjI3","./base-provider":"7OFAa","./formatter":"ZfOHh","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"6WQjk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IpcProvider", ()=>IpcProvider);
"use strict";
const IpcProvider = null;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"iqlOM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InfuraWebSocketProvider", ()=>InfuraWebSocketProvider);
parcelHelpers.export(exports, "InfuraProvider", ()=>InfuraProvider);
var _properties = require("@ethersproject/properties");
var _websocketProvider = require("./websocket-provider");
var _formatter = require("./formatter");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
var _urlJsonRpcProvider = require("./url-json-rpc-provider");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
const defaultProjectId = "84842078b09946638c03157f83405213";
class InfuraWebSocketProvider extends (0, _websocketProvider.WebSocketProvider) {
    constructor(network, apiKey){
        const provider = new InfuraProvider(network, apiKey);
        const connection = provider.connection;
        if (connection.password) logger.throwError("INFURA WebSocket project secrets unsupported", (0, _logger.Logger).errors.UNSUPPORTED_OPERATION, {
            operation: "InfuraProvider.getWebSocketProvider()"
        });
        const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
        super(url, network);
        (0, _properties.defineReadOnly)(this, "apiKey", provider.projectId);
        (0, _properties.defineReadOnly)(this, "projectId", provider.projectId);
        (0, _properties.defineReadOnly)(this, "projectSecret", provider.projectSecret);
    }
    isCommunityResource() {
        return this.projectId === defaultProjectId;
    }
}
class InfuraProvider extends (0, _urlJsonRpcProvider.UrlJsonRpcProvider) {
    static getWebSocketProvider(network, apiKey) {
        return new InfuraWebSocketProvider(network, apiKey);
    }
    static getApiKey(apiKey) {
        const apiKeyObj = {
            apiKey: defaultProjectId,
            projectId: defaultProjectId,
            projectSecret: null
        };
        if (apiKey == null) return apiKeyObj;
        if (typeof apiKey === "string") apiKeyObj.projectId = apiKey;
        else if (apiKey.projectSecret != null) {
            logger.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
            logger.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
            apiKeyObj.projectId = apiKey.projectId;
            apiKeyObj.projectSecret = apiKey.projectSecret;
        } else if (apiKey.projectId) apiKeyObj.projectId = apiKey.projectId;
        apiKeyObj.apiKey = apiKeyObj.projectId;
        return apiKeyObj;
    }
    static getUrl(network, apiKey) {
        let host = null;
        switch(network ? network.name : "unknown"){
            case "homestead":
                host = "mainnet.infura.io";
                break;
            case "ropsten":
                host = "ropsten.infura.io";
                break;
            case "rinkeby":
                host = "rinkeby.infura.io";
                break;
            case "kovan":
                host = "kovan.infura.io";
                break;
            case "goerli":
                host = "goerli.infura.io";
                break;
            case "matic":
                host = "polygon-mainnet.infura.io";
                break;
            case "maticmum":
                host = "polygon-mumbai.infura.io";
                break;
            case "optimism":
                host = "optimism-mainnet.infura.io";
                break;
            case "optimism-kovan":
                host = "optimism-kovan.infura.io";
                break;
            case "arbitrum":
                host = "arbitrum-mainnet.infura.io";
                break;
            case "arbitrum-rinkeby":
                host = "arbitrum-rinkeby.infura.io";
                break;
            default:
                logger.throwError("unsupported network", (0, _logger.Logger).errors.INVALID_ARGUMENT, {
                    argument: "network",
                    value: network
                });
        }
        const connection = {
            allowGzip: true,
            url: "https://" + host + "/v3/" + apiKey.projectId,
            throttleCallback: (attempt, url)=>{
                if (apiKey.projectId === defaultProjectId) (0, _formatter.showThrottleMessage)();
                return Promise.resolve(true);
            }
        };
        if (apiKey.projectSecret != null) {
            connection.user = "";
            connection.password = apiKey.projectSecret;
        }
        return connection;
    }
    isCommunityResource() {
        return this.projectId === defaultProjectId;
    }
}

},{"@ethersproject/properties":"h3GJb","./websocket-provider":"9KF9f","./formatter":"ZfOHh","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./url-json-rpc-provider":"9CTqA","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"hGNo4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Experimental
parcelHelpers.export(exports, "JsonRpcBatchProvider", ()=>JsonRpcBatchProvider);
var _properties = require("@ethersproject/properties");
var _web = require("@ethersproject/web");
var _jsonRpcProvider = require("./json-rpc-provider");
class JsonRpcBatchProvider extends (0, _jsonRpcProvider.JsonRpcProvider) {
    send(method, params) {
        const request1 = {
            method: method,
            params: params,
            id: this._nextId++,
            jsonrpc: "2.0"
        };
        if (this._pendingBatch == null) this._pendingBatch = [];
        const inflightRequest1 = {
            request: request1,
            resolve: null,
            reject: null
        };
        const promise = new Promise((resolve, reject)=>{
            inflightRequest1.resolve = resolve;
            inflightRequest1.reject = reject;
        });
        this._pendingBatch.push(inflightRequest1);
        if (!this._pendingBatchAggregator) // Schedule batch for next event loop + short duration
        this._pendingBatchAggregator = setTimeout(()=>{
            // Get teh current batch and clear it, so new requests
            // go into the next batch
            const batch = this._pendingBatch;
            this._pendingBatch = null;
            this._pendingBatchAggregator = null;
            // Get the request as an array of requests
            const request = batch.map((inflight)=>inflight.request);
            this.emit("debug", {
                action: "requestBatch",
                request: (0, _properties.deepCopy)(request),
                provider: this
            });
            return (0, _web.fetchJson)(this.connection, JSON.stringify(request)).then((result)=>{
                this.emit("debug", {
                    action: "response",
                    request: request,
                    response: result,
                    provider: this
                });
                // For each result, feed it to the correct Promise, depending
                // on whether it was a success or error
                batch.forEach((inflightRequest, index)=>{
                    const payload = result[index];
                    if (payload.error) {
                        const error = new Error(payload.error.message);
                        error.code = payload.error.code;
                        error.data = payload.error.data;
                        inflightRequest.reject(error);
                    } else inflightRequest.resolve(payload.result);
                });
            }, (error)=>{
                this.emit("debug", {
                    action: "response",
                    error: error,
                    request: request,
                    provider: this
                });
                batch.forEach((inflightRequest)=>{
                    inflightRequest.reject(error);
                });
            });
        }, 10);
        return promise;
    }
}

},{"@ethersproject/properties":"h3GJb","@ethersproject/web":"5yjI3","./json-rpc-provider":"1sWtk","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"8l5lW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NodesmithProvider", ()=>NodesmithProvider);
var _urlJsonRpcProvider = require("./url-json-rpc-provider");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
/* istanbul ignore file */ "use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
// Special API key provided by Nodesmith for ethers.js
const defaultApiKey = "ETHERS_JS_SHARED";
class NodesmithProvider extends (0, _urlJsonRpcProvider.UrlJsonRpcProvider) {
    static getApiKey(apiKey) {
        if (apiKey && typeof apiKey !== "string") logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
        return apiKey || defaultApiKey;
    }
    static getUrl(network, apiKey) {
        logger.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
        let host = null;
        switch(network.name){
            case "homestead":
                host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                break;
            case "ropsten":
                host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                break;
            case "rinkeby":
                host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                break;
            case "goerli":
                host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                break;
            case "kovan":
                host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                break;
            default:
                logger.throwArgumentError("unsupported network", "network", arguments[0]);
        }
        return host + "?apiKey=" + apiKey;
    }
}

},{"./url-json-rpc-provider":"9CTqA","@ethersproject/logger":"hLvB2","./_version":"6PYAk","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"3a8Ys":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PocketProvider", ()=>PocketProvider);
var _properties = require("@ethersproject/properties");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
var _urlJsonRpcProvider = require("./url-json-rpc-provider");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
// These are load-balancer-based application IDs
const defaultApplicationIds = {
    homestead: "6004bcd10040261633ade990",
    ropsten: "6004bd4d0040261633ade991",
    rinkeby: "6004bda20040261633ade994",
    goerli: "6004bd860040261633ade992"
};
class PocketProvider extends (0, _urlJsonRpcProvider.UrlJsonRpcProvider) {
    constructor(network, apiKey){
        // We need a bit of creativity in the constructor because
        // Pocket uses different default API keys based on the network
        if (apiKey == null) {
            const n = (0, _properties.getStatic)(new.target, "getNetwork")(network);
            if (n) {
                const applicationId = defaultApplicationIds[n.name];
                if (applicationId) apiKey = {
                    applicationId: applicationId,
                    loadBalancer: true
                };
            }
            // If there was any issue above, we don't know this network
            if (apiKey == null) logger.throwError("unsupported network", (0, _logger.Logger).errors.INVALID_ARGUMENT, {
                argument: "network",
                value: network
            });
        }
        super(network, apiKey);
    }
    static getApiKey(apiKey) {
        // Most API Providers allow null to get the default configuration, but
        // Pocket requires the network to decide the default provider, so we
        // rely on hijacking the constructor to add a sensible default for us
        if (apiKey == null) logger.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", apiKey);
        const apiKeyObj = {
            applicationId: null,
            loadBalancer: false,
            applicationSecretKey: null
        };
        // Parse applicationId and applicationSecretKey
        if (typeof apiKey === "string") apiKeyObj.applicationId = apiKey;
        else if (apiKey.applicationSecretKey != null) {
            logger.assertArgument(typeof apiKey.applicationId === "string", "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
            logger.assertArgument(typeof apiKey.applicationSecretKey === "string", "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
            apiKeyObj.applicationId = apiKey.applicationId;
            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
        } else if (apiKey.applicationId) {
            logger.assertArgument(typeof apiKey.applicationId === "string", "apiKey.applicationId must be a string", "apiKey.applicationId", apiKey.applicationId);
            apiKeyObj.applicationId = apiKey.applicationId;
            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
        } else logger.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
        return apiKeyObj;
    }
    static getUrl(network, apiKey) {
        let host = null;
        switch(network ? network.name : "unknown"){
            case "homestead":
                host = "eth-mainnet.gateway.pokt.network";
                break;
            case "ropsten":
                host = "eth-ropsten.gateway.pokt.network";
                break;
            case "rinkeby":
                host = "eth-rinkeby.gateway.pokt.network";
                break;
            case "goerli":
                host = "eth-goerli.gateway.pokt.network";
                break;
            default:
                logger.throwError("unsupported network", (0, _logger.Logger).errors.INVALID_ARGUMENT, {
                    argument: "network",
                    value: network
                });
        }
        let url = null;
        if (apiKey.loadBalancer) url = `https:/\/${host}/v1/lb/${apiKey.applicationId}`;
        else url = `https:/\/${host}/v1/${apiKey.applicationId}`;
        const connection = {
            url
        };
        // Initialize empty headers
        connection.headers = {};
        // Apply application secret key
        if (apiKey.applicationSecretKey != null) {
            connection.user = "";
            connection.password = apiKey.applicationSecretKey;
        }
        return connection;
    }
    isCommunityResource() {
        return this.applicationId === defaultApplicationIds[this.network.name];
    }
}

},{"@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./url-json-rpc-provider":"9CTqA","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"cIjQb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Web3Provider", ()=>Web3Provider);
var _properties = require("@ethersproject/properties");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
var _jsonRpcProvider = require("./json-rpc-provider");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
let _nextId = 1;
function buildWeb3LegacyFetcher(provider, sendFunc) {
    const fetcher = "Web3LegacyFetcher";
    return function(method, params) {
        const request = {
            method: method,
            params: params,
            id: _nextId++,
            jsonrpc: "2.0"
        };
        return new Promise((resolve, reject)=>{
            this.emit("debug", {
                action: "request",
                fetcher,
                request: (0, _properties.deepCopy)(request),
                provider: this
            });
            sendFunc(request, (error, response)=>{
                if (error) {
                    this.emit("debug", {
                        action: "response",
                        fetcher,
                        error,
                        request,
                        provider: this
                    });
                    return reject(error);
                }
                this.emit("debug", {
                    action: "response",
                    fetcher,
                    request,
                    response,
                    provider: this
                });
                if (response.error) {
                    const error = new Error(response.error.message);
                    error.code = response.error.code;
                    error.data = response.error.data;
                    return reject(error);
                }
                resolve(response.result);
            });
        });
    };
}
function buildEip1193Fetcher(provider) {
    return function(method, params) {
        if (params == null) params = [];
        const request = {
            method,
            params
        };
        this.emit("debug", {
            action: "request",
            fetcher: "Eip1193Fetcher",
            request: (0, _properties.deepCopy)(request),
            provider: this
        });
        return provider.request(request).then((response)=>{
            this.emit("debug", {
                action: "response",
                fetcher: "Eip1193Fetcher",
                request,
                response,
                provider: this
            });
            return response;
        }, (error)=>{
            this.emit("debug", {
                action: "response",
                fetcher: "Eip1193Fetcher",
                request,
                error,
                provider: this
            });
            throw error;
        });
    };
}
class Web3Provider extends (0, _jsonRpcProvider.JsonRpcProvider) {
    constructor(provider, network){
        if (provider == null) logger.throwArgumentError("missing provider", "provider", provider);
        let path = null;
        let jsonRpcFetchFunc = null;
        let subprovider = null;
        if (typeof provider === "function") {
            path = "unknown:";
            jsonRpcFetchFunc = provider;
        } else {
            path = provider.host || provider.path || "";
            if (!path && provider.isMetaMask) path = "metamask";
            subprovider = provider;
            if (provider.request) {
                if (path === "") path = "eip-1193:";
                jsonRpcFetchFunc = buildEip1193Fetcher(provider);
            } else if (provider.sendAsync) jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
            else if (provider.send) jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
            else logger.throwArgumentError("unsupported provider", "provider", provider);
            if (!path) path = "unknown:";
        }
        super(path, network);
        (0, _properties.defineReadOnly)(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
        (0, _properties.defineReadOnly)(this, "provider", subprovider);
    }
    send(method, params) {
        return this.jsonRpcFetchFunc(method, params);
    }
}

},{"@ethersproject/properties":"h3GJb","@ethersproject/logger":"hLvB2","./_version":"6PYAk","./json-rpc-provider":"1sWtk","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"1VLBZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
////////////////////////
// Exports
parcelHelpers.export(exports, "AbiCoder", ()=>(0, _abi.AbiCoder));
parcelHelpers.export(exports, "defaultAbiCoder", ()=>(0, _abi.defaultAbiCoder));
parcelHelpers.export(exports, "Fragment", ()=>(0, _abi.Fragment));
parcelHelpers.export(exports, "ConstructorFragment", ()=>(0, _abi.ConstructorFragment));
parcelHelpers.export(exports, "ErrorFragment", ()=>(0, _abi.ErrorFragment));
parcelHelpers.export(exports, "EventFragment", ()=>(0, _abi.EventFragment));
parcelHelpers.export(exports, "FunctionFragment", ()=>(0, _abi.FunctionFragment));
parcelHelpers.export(exports, "ParamType", ()=>(0, _abi.ParamType));
parcelHelpers.export(exports, "FormatTypes", ()=>(0, _abi.FormatTypes));
parcelHelpers.export(exports, "checkResultErrors", ()=>(0, _abi.checkResultErrors));
parcelHelpers.export(exports, "Logger", ()=>(0, _logger.Logger));
parcelHelpers.export(exports, "RLP", ()=>_rlp);
parcelHelpers.export(exports, "_fetchData", ()=>(0, _web._fetchData));
parcelHelpers.export(exports, "fetchJson", ()=>(0, _web.fetchJson));
parcelHelpers.export(exports, "poll", ()=>(0, _web.poll));
parcelHelpers.export(exports, "checkProperties", ()=>(0, _properties.checkProperties));
parcelHelpers.export(exports, "deepCopy", ()=>(0, _properties.deepCopy));
parcelHelpers.export(exports, "defineReadOnly", ()=>(0, _properties.defineReadOnly));
parcelHelpers.export(exports, "getStatic", ()=>(0, _properties.getStatic));
parcelHelpers.export(exports, "resolveProperties", ()=>(0, _properties.resolveProperties));
parcelHelpers.export(exports, "shallowCopy", ()=>(0, _properties.shallowCopy));
parcelHelpers.export(exports, "arrayify", ()=>(0, _bytes.arrayify));
parcelHelpers.export(exports, "concat", ()=>(0, _bytes.concat));
parcelHelpers.export(exports, "stripZeros", ()=>(0, _bytes.stripZeros));
parcelHelpers.export(exports, "zeroPad", ()=>(0, _bytes.zeroPad));
parcelHelpers.export(exports, "isBytes", ()=>(0, _bytes.isBytes));
parcelHelpers.export(exports, "isBytesLike", ()=>(0, _bytes.isBytesLike));
parcelHelpers.export(exports, "defaultPath", ()=>(0, _hdnode.defaultPath));
parcelHelpers.export(exports, "HDNode", ()=>(0, _hdnode.HDNode));
parcelHelpers.export(exports, "SigningKey", ()=>(0, _signingKey.SigningKey));
parcelHelpers.export(exports, "Interface", ()=>(0, _abi.Interface));
parcelHelpers.export(exports, "LogDescription", ()=>(0, _abi.LogDescription));
parcelHelpers.export(exports, "TransactionDescription", ()=>(0, _abi.TransactionDescription));
parcelHelpers.export(exports, "base58", ()=>(0, _basex.Base58));
parcelHelpers.export(exports, "base64", ()=>_base64);
parcelHelpers.export(exports, "hexlify", ()=>(0, _bytes.hexlify));
parcelHelpers.export(exports, "isHexString", ()=>(0, _bytes.isHexString));
parcelHelpers.export(exports, "hexConcat", ()=>(0, _bytes.hexConcat));
parcelHelpers.export(exports, "hexStripZeros", ()=>(0, _bytes.hexStripZeros));
parcelHelpers.export(exports, "hexValue", ()=>(0, _bytes.hexValue));
parcelHelpers.export(exports, "hexZeroPad", ()=>(0, _bytes.hexZeroPad));
parcelHelpers.export(exports, "hexDataLength", ()=>(0, _bytes.hexDataLength));
parcelHelpers.export(exports, "hexDataSlice", ()=>(0, _bytes.hexDataSlice));
parcelHelpers.export(exports, "nameprep", ()=>(0, _strings.nameprep));
parcelHelpers.export(exports, "_toEscapedUtf8String", ()=>(0, _strings._toEscapedUtf8String));
parcelHelpers.export(exports, "toUtf8Bytes", ()=>(0, _strings.toUtf8Bytes));
parcelHelpers.export(exports, "toUtf8CodePoints", ()=>(0, _strings.toUtf8CodePoints));
parcelHelpers.export(exports, "toUtf8String", ()=>(0, _strings.toUtf8String));
parcelHelpers.export(exports, "Utf8ErrorFuncs", ()=>(0, _strings.Utf8ErrorFuncs));
parcelHelpers.export(exports, "formatBytes32String", ()=>(0, _strings.formatBytes32String));
parcelHelpers.export(exports, "parseBytes32String", ()=>(0, _strings.parseBytes32String));
parcelHelpers.export(exports, "dnsEncode", ()=>(0, _hash.dnsEncode));
parcelHelpers.export(exports, "hashMessage", ()=>(0, _hash.hashMessage));
parcelHelpers.export(exports, "namehash", ()=>(0, _hash.namehash));
parcelHelpers.export(exports, "isValidName", ()=>(0, _hash.isValidName));
parcelHelpers.export(exports, "id", ()=>(0, _hash.id));
parcelHelpers.export(exports, "_TypedDataEncoder", ()=>(0, _hash._TypedDataEncoder));
parcelHelpers.export(exports, "getAddress", ()=>(0, _address.getAddress));
parcelHelpers.export(exports, "getIcapAddress", ()=>(0, _address.getIcapAddress));
parcelHelpers.export(exports, "getContractAddress", ()=>(0, _address.getContractAddress));
parcelHelpers.export(exports, "getCreate2Address", ()=>(0, _address.getCreate2Address));
parcelHelpers.export(exports, "isAddress", ()=>(0, _address.isAddress));
parcelHelpers.export(exports, "formatEther", ()=>(0, _units.formatEther));
parcelHelpers.export(exports, "parseEther", ()=>(0, _units.parseEther));
parcelHelpers.export(exports, "formatUnits", ()=>(0, _units.formatUnits));
parcelHelpers.export(exports, "parseUnits", ()=>(0, _units.parseUnits));
parcelHelpers.export(exports, "commify", ()=>(0, _units.commify));
parcelHelpers.export(exports, "computeHmac", ()=>(0, _sha2.computeHmac));
parcelHelpers.export(exports, "keccak256", ()=>(0, _keccak256.keccak256));
parcelHelpers.export(exports, "ripemd160", ()=>(0, _sha2.ripemd160));
parcelHelpers.export(exports, "sha256", ()=>(0, _sha2.sha256));
parcelHelpers.export(exports, "sha512", ()=>(0, _sha2.sha512));
parcelHelpers.export(exports, "randomBytes", ()=>(0, _random.randomBytes));
parcelHelpers.export(exports, "shuffled", ()=>(0, _random.shuffled));
parcelHelpers.export(exports, "solidityPack", ()=>(0, _solidity.pack));
parcelHelpers.export(exports, "solidityKeccak256", ()=>(0, _solidity.keccak256));
parcelHelpers.export(exports, "soliditySha256", ()=>(0, _solidity.sha256));
parcelHelpers.export(exports, "splitSignature", ()=>(0, _bytes.splitSignature));
parcelHelpers.export(exports, "joinSignature", ()=>(0, _bytes.joinSignature));
parcelHelpers.export(exports, "accessListify", ()=>(0, _transactions.accessListify));
parcelHelpers.export(exports, "parseTransaction", ()=>(0, _transactions.parse));
parcelHelpers.export(exports, "serializeTransaction", ()=>(0, _transactions.serialize));
parcelHelpers.export(exports, "TransactionTypes", ()=>(0, _transactions.TransactionTypes));
parcelHelpers.export(exports, "getJsonWalletAddress", ()=>(0, _jsonWallets.getJsonWalletAddress));
parcelHelpers.export(exports, "computeAddress", ()=>(0, _transactions.computeAddress));
parcelHelpers.export(exports, "recoverAddress", ()=>(0, _transactions.recoverAddress));
parcelHelpers.export(exports, "computePublicKey", ()=>(0, _signingKey.computePublicKey));
parcelHelpers.export(exports, "recoverPublicKey", ()=>(0, _signingKey.recoverPublicKey));
parcelHelpers.export(exports, "verifyMessage", ()=>(0, _wallet.verifyMessage));
parcelHelpers.export(exports, "verifyTypedData", ()=>(0, _wallet.verifyTypedData));
parcelHelpers.export(exports, "getAccountPath", ()=>(0, _hdnode.getAccountPath));
parcelHelpers.export(exports, "mnemonicToEntropy", ()=>(0, _hdnode.mnemonicToEntropy));
parcelHelpers.export(exports, "entropyToMnemonic", ()=>(0, _hdnode.entropyToMnemonic));
parcelHelpers.export(exports, "isValidMnemonic", ()=>(0, _hdnode.isValidMnemonic));
parcelHelpers.export(exports, "mnemonicToSeed", ()=>(0, _hdnode.mnemonicToSeed));
parcelHelpers.export(exports, "SupportedAlgorithm", ()=>////////////////////////
    // Enums
    (0, _sha2.SupportedAlgorithm));
parcelHelpers.export(exports, "UnicodeNormalizationForm", ()=>(0, _strings.UnicodeNormalizationForm));
parcelHelpers.export(exports, "Utf8ErrorReason", ()=>(0, _strings.Utf8ErrorReason));
parcelHelpers.export(exports, "Indexed", ()=>(0, _abi.Indexed));
var _abi = require("@ethersproject/abi");
var _address = require("@ethersproject/address");
var _base64 = require("@ethersproject/base64");
var _basex = require("@ethersproject/basex");
var _bytes = require("@ethersproject/bytes");
var _hash = require("@ethersproject/hash");
var _hdnode = require("@ethersproject/hdnode");
var _jsonWallets = require("@ethersproject/json-wallets");
var _keccak256 = require("@ethersproject/keccak256");
var _logger = require("@ethersproject/logger");
var _sha2 = require("@ethersproject/sha2");
var _solidity = require("@ethersproject/solidity");
var _random = require("@ethersproject/random");
var _properties = require("@ethersproject/properties");
var _rlp = require("@ethersproject/rlp");
var _signingKey = require("@ethersproject/signing-key");
var _strings = require("@ethersproject/strings");
var _transactions = require("@ethersproject/transactions");
var _units = require("@ethersproject/units");
var _wallet = require("@ethersproject/wallet");
var _web = require("@ethersproject/web");
"use strict";

},{"@ethersproject/abi":"fYeCq","@ethersproject/address":"ggdAz","@ethersproject/base64":"329Wu","@ethersproject/basex":"dm2o4","@ethersproject/bytes":"htrqZ","@ethersproject/hash":"7JYPm","@ethersproject/hdnode":"8PpMD","@ethersproject/json-wallets":"1qqTy","@ethersproject/keccak256":"hXDEv","@ethersproject/logger":"hLvB2","@ethersproject/sha2":"k4R8k","@ethersproject/solidity":"7K4RF","@ethersproject/random":"7myQM","@ethersproject/properties":"h3GJb","@ethersproject/rlp":"b2vlp","@ethersproject/signing-key":"krGB2","@ethersproject/strings":"5TGFZ","@ethersproject/transactions":"d1ust","@ethersproject/units":"kGZhx","@ethersproject/wallet":"2DfhD","@ethersproject/web":"5yjI3","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"7K4RF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// @TODO: Array Enum
parcelHelpers.export(exports, "pack", ()=>pack);
parcelHelpers.export(exports, "keccak256", ()=>keccak256);
parcelHelpers.export(exports, "sha256", ()=>sha256);
var _bignumber = require("@ethersproject/bignumber");
var _bytes = require("@ethersproject/bytes");
var _keccak256 = require("@ethersproject/keccak256");
var _sha2 = require("@ethersproject/sha2");
var _strings = require("@ethersproject/strings");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const regexBytes = new RegExp("^bytes([0-9]+)$");
const regexNumber = new RegExp("^(u?int)([0-9]*)$");
const regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
const Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
const logger = new (0, _logger.Logger)((0, _version.version));
function _pack(type, value1, isArray) {
    switch(type){
        case "address":
            if (isArray) return (0, _bytes.zeroPad)(value1, 32);
            return (0, _bytes.arrayify)(value1);
        case "string":
            return (0, _strings.toUtf8Bytes)(value1);
        case "bytes":
            return (0, _bytes.arrayify)(value1);
        case "bool":
            value1 = value1 ? "0x01" : "0x00";
            if (isArray) return (0, _bytes.zeroPad)(value1, 32);
            return (0, _bytes.arrayify)(value1);
    }
    let match = type.match(regexNumber);
    if (match) {
        //let signed = (match[1] === "int")
        let size = parseInt(match[2] || "256");
        if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) logger.throwArgumentError("invalid number type", "type", type);
        if (isArray) size = 256;
        value1 = (0, _bignumber.BigNumber).from(value1).toTwos(size);
        return (0, _bytes.zeroPad)(value1, size / 8);
    }
    match = type.match(regexBytes);
    if (match) {
        const size = parseInt(match[1]);
        if (String(size) !== match[1] || size === 0 || size > 32) logger.throwArgumentError("invalid bytes type", "type", type);
        if ((0, _bytes.arrayify)(value1).byteLength !== size) logger.throwArgumentError(`invalid value for ${type}`, "value", value1);
        if (isArray) return (0, _bytes.arrayify)((value1 + Zeros).substring(0, 66));
        return value1;
    }
    match = type.match(regexArray);
    if (match && Array.isArray(value1)) {
        const baseType = match[1];
        const count = parseInt(match[2] || String(value1.length));
        if (count != value1.length) logger.throwArgumentError(`invalid array length for ${type}`, "value", value1);
        const result = [];
        value1.forEach(function(value) {
            result.push(_pack(baseType, value, true));
        });
        return (0, _bytes.concat)(result);
    }
    return logger.throwArgumentError("invalid type", "type", type);
}
function pack(types, values) {
    if (types.length != values.length) logger.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
    const tight = [];
    types.forEach(function(type, index) {
        tight.push(_pack(type, values[index]));
    });
    return (0, _bytes.hexlify)((0, _bytes.concat)(tight));
}
function keccak256(types, values) {
    return (0, _keccak256.keccak256)(pack(types, values));
}
function sha256(types, values) {
    return (0, _sha2.sha256)(pack(types, values));
}

},{"@ethersproject/bignumber":"ckYYW","@ethersproject/bytes":"htrqZ","@ethersproject/keccak256":"hXDEv","@ethersproject/sha2":"k4R8k","@ethersproject/strings":"5TGFZ","@ethersproject/logger":"hLvB2","./_version":"icbbC","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"icbbC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "solidity/5.6.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"kGZhx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Some environments have issues with RegEx that contain back-tracking, so we cannot
// use them.
parcelHelpers.export(exports, "commify", ()=>commify);
parcelHelpers.export(exports, "formatUnits", ()=>formatUnits);
parcelHelpers.export(exports, "parseUnits", ()=>parseUnits);
parcelHelpers.export(exports, "formatEther", ()=>formatEther);
parcelHelpers.export(exports, "parseEther", ()=>parseEther);
var _bignumber = require("@ethersproject/bignumber");
var _logger = require("@ethersproject/logger");
var _version = require("./_version");
"use strict";
const logger = new (0, _logger.Logger)((0, _version.version));
const names = [
    "wei",
    "kwei",
    "mwei",
    "gwei",
    "szabo",
    "finney",
    "ether", 
];
function commify(value) {
    const comps = String(value).split(".");
    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === "." || value === "-.") logger.throwArgumentError("invalid value", "value", value);
    // Make sure we have at least one whole digit (0 if none)
    let whole = comps[0];
    let negative = "";
    if (whole.substring(0, 1) === "-") {
        negative = "-";
        whole = whole.substring(1);
    }
    // Make sure we have at least 1 whole digit with no leading zeros
    while(whole.substring(0, 1) === "0")whole = whole.substring(1);
    if (whole === "") whole = "0";
    let suffix = "";
    if (comps.length === 2) suffix = "." + (comps[1] || "0");
    while(suffix.length > 2 && suffix[suffix.length - 1] === "0")suffix = suffix.substring(0, suffix.length - 1);
    const formatted = [];
    while(whole.length)if (whole.length <= 3) {
        formatted.unshift(whole);
        break;
    } else {
        const index = whole.length - 3;
        formatted.unshift(whole.substring(index));
        whole = whole.substring(0, index);
    }
    return negative + formatted.join(",") + suffix;
}
function formatUnits(value, unitName) {
    if (typeof unitName === "string") {
        const index = names.indexOf(unitName);
        if (index !== -1) unitName = 3 * index;
    }
    return (0, _bignumber.formatFixed)(value, unitName != null ? unitName : 18);
}
function parseUnits(value, unitName) {
    if (typeof value !== "string") logger.throwArgumentError("value must be a string", "value", value);
    if (typeof unitName === "string") {
        const index = names.indexOf(unitName);
        if (index !== -1) unitName = 3 * index;
    }
    return (0, _bignumber.parseFixed)(value, unitName != null ? unitName : 18);
}
function formatEther(wei) {
    return formatUnits(wei, 18);
}
function parseEther(ether) {
    return parseUnits(ether, 18);
}

},{"@ethersproject/bignumber":"ckYYW","@ethersproject/logger":"hLvB2","./_version":"i97hS","@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"i97hS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "units/5.6.1";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"aosLW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "ethers/5.6.9";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"7ZiVZ":[function() {},{}],"5oPc9":[function(require,module,exports) {
"use strict";
/* eslint-env browser */ const { CID  } = require("multiformats/cid");
const { multiaddr  } = require("multiaddr");
const globSource = require("ipfs-utils/src/files/glob-source");
const urlSource = require("ipfs-utils/src/files/url-source");
const Multicodecs = require("ipfs-core-utils/src/multicodecs");
const Multihashes = require("ipfs-core-utils/src/multihashes");
const Multibases = require("ipfs-core-utils/src/multibases");
const dagPb = require("@ipld/dag-pb");
const dagCbor = require("@ipld/dag-cbor");
const { identity  } = require("multiformats/hashes/identity");
const { bases , hashes , codecs  } = require("multiformats/basics");
/**
 * @typedef {import('./types').EndpointConfig} EndpointConfig
 * @typedef {import('./types').Options} Options
 * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec
 * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher
 * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec
 * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient
 */ /**
 * @param {Options} options
 */ function create(options = {}) {
    /**
   * @type {BlockCodec}
   */ const id1 = {
        name: identity.name,
        code: identity.code,
        encode: (id)=>id,
        decode: (id)=>id
    };
    /** @type {MultibaseCodec[]} */ const multibaseCodecs = Object.values(bases);
    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach((base)=>multibaseCodecs.push(base));
    const multibases = new Multibases({
        bases: multibaseCodecs,
        loadBase: options.ipld && options.ipld.loadBase
    });
    /** @type {BlockCodec[]} */ const blockCodecs = Object.values(codecs);
    [
        dagPb,
        dagCbor,
        id1
    ].concat(options.ipld && options.ipld.codecs || []).forEach((codec)=>blockCodecs.push(codec));
    const multicodecs = new Multicodecs({
        codecs: blockCodecs,
        loadCodec: options.ipld && options.ipld.loadCodec
    });
    /** @type {MultihashHasher[]} */ const multihashHashers = Object.values(hashes);
    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach((hasher)=>multihashHashers.push(hasher));
    const multihashes = new Multihashes({
        hashers: multihashHashers,
        loadHasher: options.ipld && options.ipld.loadHasher
    });
    /** @type {IPFSHTTPClient} */ const client = {
        add: require("./add")(options),
        addAll: require("./add-all")(options),
        bitswap: require("./bitswap")(options),
        block: require("./block")(options),
        bootstrap: require("./bootstrap")(options),
        cat: require("./cat")(options),
        commands: require("./commands")(options),
        config: require("./config")(options),
        dag: require("./dag")(multicodecs, options),
        dht: require("./dht")(options),
        diag: require("./diag")(options),
        dns: require("./dns")(options),
        files: require("./files")(options),
        get: require("./get")(options),
        getEndpointConfig: require("./get-endpoint-config")(options),
        id: require("./id")(options),
        isOnline: require("./is-online")(options),
        key: require("./key")(options),
        log: require("./log")(options),
        ls: require("./ls")(options),
        mount: require("./mount")(options),
        name: require("./name")(options),
        object: require("./object")(multicodecs, options),
        pin: require("./pin")(options),
        ping: require("./ping")(options),
        pubsub: require("./pubsub")(options),
        refs: require("./refs")(options),
        repo: require("./repo")(options),
        resolve: require("./resolve")(options),
        start: require("./start")(options),
        stats: require("./stats")(options),
        stop: require("./stop")(options),
        swarm: require("./swarm")(options),
        version: require("./version")(options),
        bases: multibases,
        codecs: multicodecs,
        hashers: multihashes
    };
    return client;
}
module.exports = {
    create,
    CID,
    multiaddr,
    globSource,
    urlSource
};

},{"multiformats/cid":"4uoBU","multiaddr":"dOMJu","ipfs-utils/src/files/glob-source":"bXKEI","ipfs-utils/src/files/url-source":"92xmM","ipfs-core-utils/src/multicodecs":"cAMn2","ipfs-core-utils/src/multihashes":"5MLRq","ipfs-core-utils/src/multibases":"1SCOZ","@ipld/dag-pb":"c9ugn","@ipld/dag-cbor":"aY7XS","multiformats/hashes/identity":"bj4ky","multiformats/basics":"a826o","./add":"4Q1dR","./add-all":"hKKjA","./bitswap":"g5lPV","./block":"cjwrI","./bootstrap":"gzFiA","./cat":"qQ36b","./commands":"9O6zh","./config":"gM4vo","./dag":"elN7w","./dht":"5jbhN","./diag":"aK0Oa","./dns":"2g59J","./files":"b3rJs","./get":"frue5","./get-endpoint-config":"i9UDu","./id":"coE1j","./is-online":"b3Idv","./key":"6BJ0X","./log":"02OpO","./ls":"ldnPI","./mount":"02HLC","./name":"1nq3w","./object":"hFzIP","./pin":"bfRBQ","./ping":"fwPv1","./pubsub":"fvEgL","./refs":"i8u5V","./repo":"fIMJx","./resolve":"2F7e3","./start":"5SWkB","./stats":"bdAqS","./stop":"dJDuV","./swarm":"k78Ib","./version":"7lUhc"}],"4uoBU":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var varint = require("./varint.js");
var digest = require("./hashes/digest.js");
var base58 = require("./bases/base58.js");
var base32 = require("./bases/base32.js");
var bytes = require("./bytes.js");
class CID {
    constructor(version1, code, multihash, bytes1){
        this.code = code;
        this.version = version1;
        this.multihash = multihash;
        this.bytes = bytes1;
        this.byteOffset = bytes1.byteOffset;
        this.byteLength = bytes1.byteLength;
        this.asCID = this;
        this._baseCache = new Map();
        Object.defineProperties(this, {
            byteOffset: hidden,
            byteLength: hidden,
            code: readonly,
            version: readonly,
            multihash: readonly,
            bytes: readonly,
            _baseCache: hidden,
            asCID: hidden
        });
    }
    toV0() {
        switch(this.version){
            case 0:
                return this;
            default:
                {
                    const { code , multihash  } = this;
                    if (code !== DAG_PB_CODE) throw new Error("Cannot convert a non dag-pb CID to CIDv0");
                    if (multihash.code !== SHA_256_CODE) throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
                    return CID.createV0(multihash);
                }
        }
    }
    toV1() {
        switch(this.version){
            case 0:
                {
                    const { code , digest: digest$1  } = this.multihash;
                    const multihash = digest.create(code, digest$1);
                    return CID.createV1(this.code, multihash);
                }
            case 1:
                return this;
            default:
                throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
        }
    }
    equals(other) {
        return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);
    }
    toString(base) {
        const { bytes: bytes2 , version: version2 , _baseCache  } = this;
        switch(version2){
            case 0:
                return toStringV0(bytes2, _baseCache, base || base58.base58btc.encoder);
            default:
                return toStringV1(bytes2, _baseCache, base || base32.base32.encoder);
        }
    }
    toJSON() {
        return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
        };
    }
    get [Symbol.toStringTag]() {
        return "CID";
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
        return "CID(" + this.toString() + ")";
    }
    static isCID(value) {
        deprecate(/^0\.0/, IS_CID_DEPRECATION);
        return !!(value && (value[cidSymbol] || value.asCID === value));
    }
    get toBaseEncodedString() {
        throw new Error("Deprecated, use .toString()");
    }
    get codec() {
        throw new Error('"codec" property is deprecated, use integer "code" property instead');
    }
    get buffer() {
        throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
    }
    get multibaseName() {
        throw new Error('"multibaseName" property is deprecated');
    }
    get prefix() {
        throw new Error('"prefix" property is deprecated');
    }
    static asCID(value) {
        if (value instanceof CID) return value;
        else if (value != null && value.asCID === value) {
            const { version: version3 , code , multihash , bytes: bytes3  } = value;
            return new CID(version3, code, multihash, bytes3 || encodeCID(version3, code, multihash.bytes));
        } else if (value != null && value[cidSymbol] === true) {
            const { version: version4 , multihash , code  } = value;
            const digest$1 = digest.decode(multihash);
            return CID.create(version4, code, digest$1);
        } else return null;
    }
    static create(version5, code, digest1) {
        if (typeof code !== "number") throw new Error("String codecs are no longer supported");
        switch(version5){
            case 0:
                if (code !== DAG_PB_CODE) throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
                else return new CID(version5, code, digest1, digest1.bytes);
            case 1:
                {
                    const bytes4 = encodeCID(version5, code, digest1.bytes);
                    return new CID(version5, code, digest1, bytes4);
                }
            default:
                throw new Error("Invalid version");
        }
    }
    static createV0(digest2) {
        return CID.create(0, DAG_PB_CODE, digest2);
    }
    static createV1(code, digest3) {
        return CID.create(1, code, digest3);
    }
    static decode(bytes5) {
        const [cid, remainder] = CID.decodeFirst(bytes5);
        if (remainder.length) throw new Error("Incorrect length");
        return cid;
    }
    static decodeFirst(bytes$1) {
        const specs = CID.inspectBytes(bytes$1);
        const prefixSize = specs.size - specs.multihashSize;
        const multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));
        if (multihashBytes.byteLength !== specs.multihashSize) throw new Error("Incorrect length");
        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
        const digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
        const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);
        return [
            cid,
            bytes$1.subarray(specs.size)
        ];
    }
    static inspectBytes(initialBytes) {
        let offset = 0;
        const next = ()=>{
            const [i, length] = varint.decode(initialBytes.subarray(offset));
            offset += length;
            return i;
        };
        let version6 = next();
        let codec = DAG_PB_CODE;
        if (version6 === 18) {
            version6 = 0;
            offset = 0;
        } else if (version6 === 1) codec = next();
        if (version6 !== 0 && version6 !== 1) throw new RangeError(`Invalid CID version ${version6}`);
        const prefixSize = offset;
        const multihashCode = next();
        const digestSize = next();
        const size = offset + digestSize;
        const multihashSize = size - prefixSize;
        return {
            version: version6,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
        };
    }
    static parse(source, base) {
        const [prefix, bytes6] = parseCIDtoBytes(source, base);
        const cid = CID.decode(bytes6);
        cid._baseCache.set(prefix, source);
        return cid;
    }
}
const parseCIDtoBytes = (source, base)=>{
    switch(source[0]){
        case "Q":
            {
                const decoder = base || base58.base58btc;
                return [
                    base58.base58btc.prefix,
                    decoder.decode(`${base58.base58btc.prefix}${source}`)
                ];
            }
        case base58.base58btc.prefix:
            {
                const decoder = base || base58.base58btc;
                return [
                    base58.base58btc.prefix,
                    decoder.decode(source)
                ];
            }
        case base32.base32.prefix:
            {
                const decoder = base || base32.base32;
                return [
                    base32.base32.prefix,
                    decoder.decode(source)
                ];
            }
        default:
            if (base == null) throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            return [
                source[0],
                base.decode(source)
            ];
    }
};
const toStringV0 = (bytes7, cache, base)=>{
    const { prefix  } = base;
    if (prefix !== base58.base58btc.prefix) throw Error(`Cannot string encode V0 in ${base.name} encoding`);
    const cid = cache.get(prefix);
    if (cid == null) {
        const cid = base.encode(bytes7).slice(1);
        cache.set(prefix, cid);
        return cid;
    } else return cid;
};
const toStringV1 = (bytes8, cache, base)=>{
    const { prefix  } = base;
    const cid = cache.get(prefix);
    if (cid == null) {
        const cid = base.encode(bytes8);
        cache.set(prefix, cid);
        return cid;
    } else return cid;
};
const DAG_PB_CODE = 112;
const SHA_256_CODE = 18;
const encodeCID = (version7, code, multihash)=>{
    const codeOffset = varint.encodingLength(version7);
    const hashOffset = codeOffset + varint.encodingLength(code);
    const bytes9 = new Uint8Array(hashOffset + multihash.byteLength);
    varint.encodeTo(version7, bytes9, 0);
    varint.encodeTo(code, bytes9, codeOffset);
    bytes9.set(multihash, hashOffset);
    return bytes9;
};
const cidSymbol = Symbol.for("@ipld/js-cid/CID");
const readonly = {
    writable: false,
    configurable: false,
    enumerable: true
};
const hidden = {
    writable: false,
    enumerable: false,
    configurable: false
};
const version = "0.0.0-dev";
const deprecate = (range, message)=>{
    if (range.test(version)) console.warn(message);
    else throw new Error(message);
};
const IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
exports.CID = CID;

},{"./varint.js":"8P1F2","./hashes/digest.js":"9JdI8","./bases/base58.js":"9KkrI","./bases/base32.js":"apmz1","./bytes.js":"ent0w"}],"8P1F2":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var varint$1 = require("../vendor/varint.js");
const decode = (data)=>{
    const code = varint$1.decode(data);
    return [
        code,
        varint$1.decode.bytes
    ];
};
const encodeTo = (int, target, offset = 0)=>{
    varint$1.encode(int, target, offset);
    return target;
};
const encodingLength = (int)=>{
    return varint$1.encodingLength(int);
};
exports.decode = decode;
exports.encodeTo = encodeTo;
exports.encodingLength = encodingLength;

},{"../vendor/varint.js":"lYpdI"}],"lYpdI":[function(require,module,exports) {
"use strict";
var encode_1 = encode;
var MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);
function encode(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while(num >= INT){
        out[offset++] = num & 255 | MSB;
        num /= 128;
    }
    while(num & MSBALL){
        out[offset++] = num & 255 | MSB;
        num >>>= 7;
    }
    out[offset] = num | 0;
    encode.bytes = offset - oldOffset + 1;
    return out;
}
var decode = read;
var MSB$1 = 128, REST$1 = 127;
function read(buf, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
    do {
        if (counter >= l) {
            read.bytes = 0;
            throw new RangeError("Could not decode varint");
        }
        b = buf[counter++];
        res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
        shift += 7;
    }while (b >= MSB$1);
    read.bytes = counter - offset;
    return res;
}
var N1 = Math.pow(2, 7);
var N2 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
    return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
    encode: encode_1,
    decode: decode,
    encodingLength: length
};
var _brrp_varint = varint;
var varint$1 = _brrp_varint;
module.exports = varint$1;

},{}],"9JdI8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var bytes = require("../bytes.js");
var varint = require("../varint.js");
const create = (code, digest)=>{
    const size = digest.byteLength;
    const sizeOffset = varint.encodingLength(code);
    const digestOffset = sizeOffset + varint.encodingLength(size);
    const bytes1 = new Uint8Array(digestOffset + size);
    varint.encodeTo(code, bytes1, 0);
    varint.encodeTo(size, bytes1, sizeOffset);
    bytes1.set(digest, digestOffset);
    return new Digest(code, size, digest, bytes1);
};
const decode = (multihash)=>{
    const bytes$1 = bytes.coerce(multihash);
    const [code, sizeOffset] = varint.decode(bytes$1);
    const [size, digestOffset] = varint.decode(bytes$1.subarray(sizeOffset));
    const digest = bytes$1.subarray(sizeOffset + digestOffset);
    if (digest.byteLength !== size) throw new Error("Incorrect length");
    return new Digest(code, size, digest, bytes$1);
};
const equals = (a, b)=>{
    if (a === b) return true;
    else return a.code === b.code && a.size === b.size && bytes.equals(a.bytes, b.bytes);
};
class Digest {
    constructor(code, size, digest, bytes2){
        this.code = code;
        this.size = size;
        this.digest = digest;
        this.bytes = bytes2;
    }
}
exports.Digest = Digest;
exports.create = create;
exports.decode = decode;
exports.equals = equals;

},{"../bytes.js":"ent0w","../varint.js":"8P1F2"}],"ent0w":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const empty = new Uint8Array(0);
const toHex = (d)=>d.reduce((hex, byte)=>hex + byte.toString(16).padStart(2, "0"), "");
const fromHex = (hex)=>{
    const hexes = hex.match(/../g);
    return hexes ? new Uint8Array(hexes.map((b)=>parseInt(b, 16))) : empty;
};
const equals = (aa, bb)=>{
    if (aa === bb) return true;
    if (aa.byteLength !== bb.byteLength) return false;
    for(let ii = 0; ii < aa.byteLength; ii++){
        if (aa[ii] !== bb[ii]) return false;
    }
    return true;
};
const coerce = (o)=>{
    if (o instanceof Uint8Array && o.constructor.name === "Uint8Array") return o;
    if (o instanceof ArrayBuffer) return new Uint8Array(o);
    if (ArrayBuffer.isView(o)) return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
    throw new Error("Unknown type, must be binary type");
};
const isBinary = (o)=>o instanceof ArrayBuffer || ArrayBuffer.isView(o);
const fromString = (str)=>new TextEncoder().encode(str);
const toString = (b)=>new TextDecoder().decode(b);
exports.coerce = coerce;
exports.empty = empty;
exports.equals = equals;
exports.fromHex = fromHex;
exports.fromString = fromString;
exports.isBinary = isBinary;
exports.toHex = toHex;
exports.toString = toString;

},{}],"9KkrI":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base58btc = base.baseX({
    name: "base58btc",
    prefix: "z",
    alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
const base58flickr = base.baseX({
    name: "base58flickr",
    prefix: "Z",
    alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});
exports.base58btc = base58btc;
exports.base58flickr = base58flickr;

},{"./base.js":"j888T"}],"j888T":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var baseX$1 = require("../../vendor/base-x.js");
var bytes = require("../bytes.js");
class Encoder {
    constructor(name, prefix, baseEncode){
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
    }
    encode(bytes1) {
        if (bytes1 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(bytes1)}`;
        else throw Error("Unknown type, must be binary type");
    }
}
class Decoder {
    constructor(name, prefix, baseDecode){
        this.name = name;
        this.prefix = prefix;
        if (prefix.codePointAt(0) === undefined) throw new Error("Invalid prefix character");
        this.prefixCodePoint = prefix.codePointAt(0);
        this.baseDecode = baseDecode;
    }
    decode(text) {
        if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            return this.baseDecode(text.slice(this.prefix.length));
        } else throw Error("Can only multibase decode strings");
    }
    or(decoder) {
        return or(this, decoder);
    }
}
class ComposedDecoder {
    constructor(decoders){
        this.decoders = decoders;
    }
    or(decoder) {
        return or(this, decoder);
    }
    decode(input) {
        const prefix = input[0];
        const decoder = this.decoders[prefix];
        if (decoder) return decoder.decode(input);
        else throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
}
const or = (left, right)=>new ComposedDecoder({
        ...left.decoders || {
            [left.prefix]: left
        },
        ...right.decoders || {
            [right.prefix]: right
        }
    });
class Codec {
    constructor(name, prefix, baseEncode, baseDecode){
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
        this.baseDecode = baseDecode;
        this.encoder = new Encoder(name, prefix, baseEncode);
        this.decoder = new Decoder(name, prefix, baseDecode);
    }
    encode(input) {
        return this.encoder.encode(input);
    }
    decode(input) {
        return this.decoder.decode(input);
    }
}
const from = ({ name , prefix , encode: encode1 , decode: decode1  })=>new Codec(name, prefix, encode1, decode1);
const baseX = ({ prefix , name , alphabet  })=>{
    const { encode: encode2 , decode: decode2  } = baseX$1(alphabet, name);
    return from({
        prefix,
        name,
        encode: encode2,
        decode: (text)=>bytes.coerce(decode2(text))
    });
};
const decode = (string, alphabet, bitsPerChar, name)=>{
    const codes = {};
    for(let i = 0; i < alphabet.length; ++i)codes[alphabet[i]] = i;
    let end = string.length;
    while(string[end - 1] === "=")--end;
    const out = new Uint8Array(end * bitsPerChar / 8 | 0);
    let bits = 0;
    let buffer = 0;
    let written = 0;
    for(let i1 = 0; i1 < end; ++i1){
        const value = codes[string[i1]];
        if (value === undefined) throw new SyntaxError(`Non-${name} character`);
        buffer = buffer << bitsPerChar | value;
        bits += bitsPerChar;
        if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer >> bits;
        }
    }
    if (bits >= bitsPerChar || 255 & buffer << 8 - bits) throw new SyntaxError("Unexpected end of data");
    return out;
};
const encode = (data, alphabet, bitsPerChar)=>{
    const pad = alphabet[alphabet.length - 1] === "=";
    const mask = (1 << bitsPerChar) - 1;
    let out = "";
    let bits = 0;
    let buffer = 0;
    for(let i = 0; i < data.length; ++i){
        buffer = buffer << 8 | data[i];
        bits += 8;
        while(bits > bitsPerChar){
            bits -= bitsPerChar;
            out += alphabet[mask & buffer >> bits];
        }
    }
    if (bits) out += alphabet[mask & buffer << bitsPerChar - bits];
    if (pad) while(out.length * bitsPerChar & 7)out += "=";
    return out;
};
const rfc4648 = ({ name , prefix , bitsPerChar , alphabet  })=>{
    return from({
        prefix,
        name,
        encode (input) {
            return encode(input, alphabet, bitsPerChar);
        },
        decode (input) {
            return decode(input, alphabet, bitsPerChar, name);
        }
    });
};
exports.Codec = Codec;
exports.baseX = baseX;
exports.from = from;
exports.or = or;
exports.rfc4648 = rfc4648;

},{"../../vendor/base-x.js":"bPHFa","../bytes.js":"ent0w"}],"bPHFa":[function(require,module,exports) {
"use strict";
function base(ALPHABET, name) {
    if (ALPHABET.length >= 255) throw new TypeError("Alphabet too long");
    var BASE_MAP = new Uint8Array(256);
    for(var j1 = 0; j1 < BASE_MAP.length; j1++)BASE_MAP[j1] = 255;
    for(var i1 = 0; i1 < ALPHABET.length; i1++){
        var x = ALPHABET.charAt(i1);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) throw new TypeError(x + " is ambiguous");
        BASE_MAP[xc] = i1;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode(source) {
        if (source instanceof Uint8Array) ;
        else if (ArrayBuffer.isView(source)) source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        else if (Array.isArray(source)) source = Uint8Array.from(source);
        if (!(source instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
        if (source.length === 0) return "";
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while(pbegin !== pend && source[pbegin] === 0){
            pbegin++;
            zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while(pbegin !== pend){
            var carry = source[pbegin];
            var i = 0;
            for(var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){
                carry += 256 * b58[it1] >>> 0;
                b58[it1] = carry % BASE >>> 0;
                carry = carry / BASE >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length = i;
            pbegin++;
        }
        var it2 = size - length;
        while(it2 !== size && b58[it2] === 0)it2++;
        var str = LEADER.repeat(zeroes);
        for(; it2 < size; ++it2)str += ALPHABET.charAt(b58[it2]);
        return str;
    }
    function decodeUnsafe(source) {
        if (typeof source !== "string") throw new TypeError("Expected String");
        if (source.length === 0) return new Uint8Array();
        var psz = 0;
        if (source[psz] === " ") return;
        var zeroes = 0;
        var length = 0;
        while(source[psz] === LEADER){
            zeroes++;
            psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while(source[psz]){
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) return;
            var i = 0;
            for(var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++){
                carry += BASE * b256[it3] >>> 0;
                b256[it3] = carry % 256 >>> 0;
                carry = carry / 256 >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length = i;
            psz++;
        }
        if (source[psz] === " ") return;
        var it4 = size - length;
        while(it4 !== size && b256[it4] === 0)it4++;
        var vch = new Uint8Array(zeroes + (size - it4));
        var j = zeroes;
        while(it4 !== size)vch[j++] = b256[it4++];
        return vch;
    }
    function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) return buffer;
        throw new Error(`Non-${name} character`);
    }
    return {
        encode: encode,
        decodeUnsafe: decodeUnsafe,
        decode: decode
    };
}
var src = base;
var _brrp__multiformats_scope_baseX = src;
module.exports = _brrp__multiformats_scope_baseX;

},{}],"apmz1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base32 = base.rfc4648({
    prefix: "b",
    name: "base32",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567",
    bitsPerChar: 5
});
const base32upper = base.rfc4648({
    prefix: "B",
    name: "base32upper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
    bitsPerChar: 5
});
const base32pad = base.rfc4648({
    prefix: "c",
    name: "base32pad",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
    bitsPerChar: 5
});
const base32padupper = base.rfc4648({
    prefix: "C",
    name: "base32padupper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
    bitsPerChar: 5
});
const base32hex = base.rfc4648({
    prefix: "v",
    name: "base32hex",
    alphabet: "0123456789abcdefghijklmnopqrstuv",
    bitsPerChar: 5
});
const base32hexupper = base.rfc4648({
    prefix: "V",
    name: "base32hexupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
    bitsPerChar: 5
});
const base32hexpad = base.rfc4648({
    prefix: "t",
    name: "base32hexpad",
    alphabet: "0123456789abcdefghijklmnopqrstuv=",
    bitsPerChar: 5
});
const base32hexpadupper = base.rfc4648({
    prefix: "T",
    name: "base32hexpadupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
    bitsPerChar: 5
});
const base32z = base.rfc4648({
    prefix: "h",
    name: "base32z",
    alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
    bitsPerChar: 5
});
exports.base32 = base32;
exports.base32hex = base32hex;
exports.base32hexpad = base32hexpad;
exports.base32hexpadupper = base32hexpadupper;
exports.base32hexupper = base32hexupper;
exports.base32pad = base32pad;
exports.base32padupper = base32padupper;
exports.base32upper = base32upper;
exports.base32z = base32z;

},{"./base.js":"j888T"}],"dOMJu":[function(require,module,exports) {
"use strict";
const codec = require("./codec");
const protocols = require("./protocols-table");
const varint = require("varint");
const { CID  } = require("multiformats/cid");
const { base58btc  } = require("multiformats/bases/base58");
const errCode = require("err-code");
const inspect = Symbol.for("nodejs.util.inspect.custom");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { equals: uint8ArrayEquals  } = require("uint8arrays/equals");
/**
 * @typedef {(addr: Multiaddr) => Promise<string[]>} Resolver
 * @typedef {string | Multiaddr | Uint8Array | null} MultiaddrInput
 * @typedef {import('./types').MultiaddrObject} MultiaddrObject
 * @typedef {import('./types').Protocol} Protocol
 */ /** @type {Map<string, Resolver>} */ const resolvers = new Map();
const symbol = Symbol.for("@multiformats/js-multiaddr/multiaddr");
/**
 * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from
 * a Uint8Array, String or another Multiaddr instance
 * public key.
 *
 */ class Multiaddr {
    /**
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')
   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
   * ```
   *
   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)
   */ constructor(addr){
        // default
        if (addr == null) addr = "";
        // Define symbol
        Object.defineProperty(this, symbol, {
            value: true
        });
        if (addr instanceof Uint8Array) /** @type {Uint8Array} - The raw bytes representing this multiaddress */ this.bytes = codec.fromBytes(addr);
        else if (typeof addr === "string") {
            if (addr.length > 0 && addr.charAt(0) !== "/") throw new Error(`multiaddr "${addr}" must start with a "/"`);
            this.bytes = codec.fromString(addr);
        } else if (Multiaddr.isMultiaddr(addr)) this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer
        ;
        else throw new Error("addr must be a string, Buffer, or another Multiaddr");
    }
    /**
   * Returns Multiaddr as a String
   *
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()
   * // '/ip4/127.0.0.1/tcp/4001'
   * ```
   */ toString() {
        return codec.bytesToString(this.bytes);
    }
    /**
   * Returns Multiaddr as a JSON encoded object
   *
   * @example
   * ```js
   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))
   * // '/ip4/127.0.0.1/tcp/4001'
   * ```
   */ toJSON() {
        return this.toString();
    }
    /**
   * Returns Multiaddr as a convinient options object to be used with net.createConnection
   *
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()
   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }
   * ```
   */ toOptions() {
        /** @type {MultiaddrObject} */ const opts = {};
        const parsed = this.toString().split("/");
        opts.family = parsed[1] === "ip4" ? 4 : 6;
        opts.host = parsed[2];
        opts.transport = parsed[3];
        opts.port = parseInt(parsed[4]);
        return opts;
    }
    /**
   * Returns the protocols the Multiaddr is defined with, as an array of objects, in
   * left-to-right order. Each object contains the protocol code, protocol name,
   * and the size of its address space in bits.
   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
   *
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()
   * // [ { code: 4, size: 32, name: 'ip4' },
   * //   { code: 6, size: 16, name: 'tcp' } ]
   * ```
   *
   * @returns {Protocol[]} protocols - All the protocols the address is composed of
   */ protos() {
        return this.protoCodes().map((code)=>Object.assign({}, protocols(code)));
    }
    /**
   * Returns the codes of the protocols in left-to-right order.
   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
   *
   * @example
   * ```js
   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()
   * // [ 4, 6 ]
   * ```
   *
   * @returns {number[]} protocol codes
   */ protoCodes() {
        const codes = [];
        const buf = this.bytes;
        let i = 0;
        while(i < buf.length){
            const code = varint.decode(buf, i);
            const n = varint.decode.bytes;
            const p = protocols(code);
            const size = codec.sizeForAddr(p, buf.slice(i + n));
            i += size + n;
            codes.push(code);
        }
        return codes;
    }
    /**
   * Returns the names of the protocols in left-to-right order.
   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
   *
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()
   * // [ 'ip4', 'tcp' ]
   * ```
   *
   * @returns {string[]} protocol names
   */ protoNames() {
        return this.protos().map((proto)=>proto.name);
    }
    /**
   * Returns a tuple of parts
   *
   * @example
   * ```js
   * new Multiaddr("/ip4/127.0.0.1/tcp/4001").tuples()
   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]
   * ```
   */ tuples() {
        return codec.bytesToTuples(this.bytes);
    }
    /**
   * Returns a tuple of string/number parts
   * - tuples[][0] = code of protocol
   * - tuples[][1] = contents of address
   *
   * @example
   * ```js
   * new Multiaddr("/ip4/127.0.0.1/tcp/4001").stringTuples()
   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]
   * ```
   */ stringTuples() {
        const t = codec.bytesToTuples(this.bytes);
        return codec.tuplesToStringTuples(t);
    }
    /**
   * Encapsulates a Multiaddr in another Multiaddr
   *
   * @example
   * ```js
   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')
   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>
   *
   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')
   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
   *
   * const mh3 = mh1.encapsulate(mh2)
   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>
   *
   * mh3.toString()
   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'
   * ```
   *
   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr
   */ encapsulate(addr) {
        addr = new Multiaddr(addr);
        return new Multiaddr(this.toString() + addr.toString());
    }
    /**
   * Decapsulates a Multiaddr from another Multiaddr
   *
   * @example
   * ```js
   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')
   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>
   *
   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')
   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
   *
   * const mh3 = mh1.encapsulate(mh2)
   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>
   *
   * mh3.decapsulate(mh2).toString()
   * // '/ip4/8.8.8.8/tcp/1080'
   * ```
   *
   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr
   * @returns {Multiaddr}
   */ decapsulate(addr) {
        const addrString = addr.toString();
        const s = this.toString();
        const i = s.lastIndexOf(addrString);
        if (i < 0) throw new Error("Address " + this + " does not contain subaddress: " + addr);
        return new Multiaddr(s.slice(0, i));
    }
    /**
   * A more reliable version of `decapsulate` if you are targeting a
   * specific code, such as 421 (the `p2p` protocol code). The last index of the code
   * will be removed from the `Multiaddr`, and a new instance will be returned.
   * If the code is not present, the original `Multiaddr` is returned.
   *
   * @example
   * ```js
   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')
   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>
   *
   * addr.decapsulateCode(421).toString()
   * // '/ip4/0.0.0.0/tcp/8080'
   *
   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()
   * // '/ip4/127.0.0.1/tcp/8080'
   * ```
   *
   * @param {number} code - The code of the protocol to decapsulate from this Multiaddr
   * @returns {Multiaddr}
   */ decapsulateCode(code) {
        const tuples = this.tuples();
        for(let i = tuples.length - 1; i >= 0; i--){
            if (tuples[i][0] === code) return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)));
        }
        return this;
    }
    /**
   * Extract the peerId if the multiaddr contains one
   *
   * @example
   * ```js
   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')
   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>
   *
   * // should return QmValidBase58string or null if the id is missing or invalid
   * const peerId = mh1.getPeerId()
   * ```
   *
   * @returns {string | null} peerId - The id of the peer or null if invalid or missing from the ma
   */ getPeerId() {
        try {
            const tuples = this.stringTuples().filter((tuple)=>{
                if (tuple[0] === protocols.names.ipfs.code) return true;
                return false;
            });
            // Get the last ipfs tuple ['ipfs', 'peerid string']
            const tuple1 = tuples.pop();
            if (tuple1 && tuple1[1]) {
                const peerIdStr = tuple1[1];
                // peer id is base58btc encoded string but not multibase encoded so add the `z`
                // prefix so we can validate that it is correctly encoded
                if (peerIdStr[0] === "Q" || peerIdStr[0] === "1") return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), "base58btc");
                // try to parse peer id as CID
                return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, "base58btc");
            }
            return null;
        } catch (e) {
            return null;
        }
    }
    /**
   * Extract the path if the multiaddr contains one
   *
   * @example
   * ```js
   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')
   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>
   *
   * // should return utf8 string or null if the id is missing or invalid
   * const path = mh1.getPath()
   * ```js
   *
   * @returns {string | null} path - The path of the multiaddr, or null if no path protocol is present
   */ getPath() {
        let path = null;
        try {
            path = this.stringTuples().filter((tuple)=>{
                const proto = protocols(tuple[0]);
                if (proto.path) return true;
                return false;
            })[0][1];
            if (!path) path = null;
        } catch (e) {
            path = null;
        }
        return path;
    }
    /**
   * Checks if two Multiaddrs are the same
   *
   * @example
   * ```js
   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')
   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>
   *
   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')
   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
   *
   * mh1.equals(mh1)
   * // true
   *
   * mh1.equals(mh2)
   * // false
   * ```
   *
   * @param {Multiaddr} addr
   * @returns {boolean}
   */ equals(addr) {
        return uint8ArrayEquals(this.bytes, addr.bytes);
    }
    /**
   * Resolve multiaddr if containing resolvable hostname.
   *
   * @example
   * ```js
   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)
   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')
   * const resolvedMultiaddrs = await mh1.resolve()
   * // [
   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,
   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,
   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>
   * // ]
   * ```
   *
   * @returns {Promise<Array<Multiaddr>>}
   */ async resolve() {
        const resolvableProto = this.protos().find((p)=>p.resolvable);
        // Multiaddr is not resolvable?
        if (!resolvableProto) return [
            this
        ];
        const resolver = resolvers.get(resolvableProto.name);
        if (!resolver) throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), "ERR_NO_AVAILABLE_RESOLVER");
        const addresses = await resolver(this);
        return addresses.map((a)=>new Multiaddr(a));
    }
    /**
   * Gets a Multiaddrs node-friendly address object. Note that protocol information
   * is left out: in Node (and most network systems) the protocol is unknowable
   * given only the address.
   *
   * Has to be a ThinWaist Address, otherwise throws error
   *
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()
   * // {family: 4, address: '127.0.0.1', port: 4001}
   * ```
   *
   * @returns {{family: 4 | 6, address: string, port: number}}
   * @throws {Error} Throws error if Multiaddr is not a Thin Waist address
   */ nodeAddress() {
        const codes = this.protoCodes();
        const names = this.protoNames();
        const parts = this.toString().split("/").slice(1);
        if (parts.length < 4) throw new Error('multiaddr must have a valid format: "/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}".');
        else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) throw new Error(`no protocol with name: "'${names[0]}'". Must have a valid family name: "{ip4, ip6, dns4, dns6}".`);
        else if (parts[2] !== "tcp" && parts[2] !== "udp") throw new Error(`no protocol with name: "'${names[1]}'". Must have a valid transport protocol: "{tcp, udp}".`);
        return {
            family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,
            address: parts[1],
            port: parseInt(parts[3]) // tcp or udp port
        };
    }
    /**
   * Returns if a Multiaddr is a Thin Waist address or not.
   *
   * Thin Waist is if a Multiaddr adheres to the standard combination of:
   *
   * `{IPv4, IPv6}/{TCP, UDP}`
   *
   * @example
   * ```js
   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')
   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')
   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>
   * const mh3 = mh1.encapsulate(mh2)
   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>
   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')
   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>
   * mh1.isThinWaistAddress()
   * // true
   * mh2.isThinWaistAddress()
   * // true
   * mh3.isThinWaistAddress()
   * // false
   * mh4.isThinWaistAddress()
   * // false
   * ```
   *
   * @param {Multiaddr} [addr] - Defaults to using `this` instance
   */ isThinWaistAddress(addr) {
        const protos = (addr || this).protos();
        if (protos.length !== 2) return false;
        if (protos[0].code !== 4 && protos[0].code !== 41) return false;
        if (protos[1].code !== 6 && protos[1].code !== 273) return false;
        return true;
    }
    /**
   * Creates a Multiaddr from a node-friendly address object
   *
   * @example
   * ```js
   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')
   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
   * ```
   *
   * @param {{family: 4 | 6, address: string, port: number}} addr
   * @param {string} transport
   */ static fromNodeAddress(addr, transport) {
        if (!addr) throw new Error("requires node address object");
        if (!transport) throw new Error("requires transport protocol");
        let ip;
        switch(addr.family){
            case 4:
                ip = "ip4";
                break;
            case 6:
                ip = "ip6";
                break;
            default:
                throw Error(`Invalid addr family. Got '${addr.family}' instead of 4 or 6`);
        }
        return new Multiaddr("/" + [
            ip,
            addr.address,
            transport,
            addr.port
        ].join("/"));
    }
    /**
   * Returns if something is a Multiaddr that is a name
   *
   * @param {Multiaddr} addr
   * @returns {boolean} isName
   */ static isName(addr) {
        if (!Multiaddr.isMultiaddr(addr)) return false;
        // if a part of the multiaddr is resolvable, then return true
        return addr.protos().some((proto)=>proto.resolvable);
    }
    /**
   * Check if object is a CID instance
   *
   * @param {any} value
   * @returns {value is Multiaddr}
   */ static isMultiaddr(value) {
        return value instanceof Multiaddr || Boolean(value && value[symbol]);
    }
    /**
   * Returns Multiaddr as a human-readable string.
   * For post Node.js v10.0.0.
   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect
   *
   * @example
   * ```js
   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))
   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'
   * ```
   *
   * @returns {string}
   */ [inspect]() {
        return "<Multiaddr " + uint8ArrayToString(this.bytes, "base16") + " - " + codec.bytesToString(this.bytes) + ">";
    }
    /**
   * Returns Multiaddr as a human-readable string.
   * Fallback for pre Node.js v10.0.0.
   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect
   *
   * @example
   * ```js
   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()
   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'
   * ```
   *
   * @returns {string}
   */ inspect() {
        return "<Multiaddr " + uint8ArrayToString(this.bytes, "base16") + " - " + codec.bytesToString(this.bytes) + ">";
    }
}
/**
 * Object containing table, names and codes of all supported protocols.
 * To get the protocol values from a Multiaddr, you can use
 * [`.protos()`](#multiaddrprotos),
 * [`.protoCodes()`](#multiaddrprotocodes) or
 * [`.protoNames()`](#multiaddrprotonames)
 *
 * @returns {{table: Array, names: Object, codes: Object}}
 */ Multiaddr.protocols = protocols;
Multiaddr.resolvers = resolvers;
/**
 * Static factory
 *
 * @param {MultiaddrInput} addr
 */ function multiaddr(addr) {
    return new Multiaddr(addr);
}
module.exports = {
    Multiaddr,
    multiaddr,
    protocols,
    resolvers
};

},{"./codec":"5HyU8","./protocols-table":"j1p40","varint":"9fMsR","multiformats/cid":"4uoBU","multiformats/bases/base58":"9KkrI","err-code":"dUrrM","uint8arrays/to-string":"w8mvE","uint8arrays/equals":"iZMnE"}],"5HyU8":[function(require,module,exports) {
"use strict";
const convert = require("./convert");
const protocols = require("./protocols-table");
const varint = require("varint");
const { concat: uint8ArrayConcat  } = require("uint8arrays/concat");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
// export codec
module.exports = {
    stringToStringTuples,
    stringTuplesToString,
    tuplesToStringTuples,
    stringTuplesToTuples,
    bytesToTuples,
    tuplesToBytes,
    bytesToString,
    stringToBytes,
    fromString,
    fromBytes,
    validateBytes,
    isValidBytes,
    cleanPath,
    ParseError,
    protoFromTuple,
    sizeForAddr
};
// string -> [[str name, str addr]... ]
/**
 * @param {string} str
 */ function stringToStringTuples(str) {
    const tuples = [];
    const parts = str.split("/").slice(1) // skip first empty elem
    ;
    if (parts.length === 1 && parts[0] === "") return [];
    for(let p = 0; p < parts.length; p++){
        const part = parts[p];
        const proto = protocols(part);
        if (proto.size === 0) {
            tuples.push([
                part
            ]);
            continue;
        }
        p++ // advance addr part
        ;
        if (p >= parts.length) throw ParseError("invalid address: " + str);
        // if it's a path proto, take the rest
        if (proto.path) {
            tuples.push([
                part,
                // TODO: should we need to check each path part to see if it's a proto?
                // This would allow for other protocols to be added after a unix path,
                // however it would have issues if the path had a protocol name in the path
                cleanPath(parts.slice(p).join("/"))
            ]);
            break;
        }
        tuples.push([
            part,
            parts[p]
        ]);
    }
    return tuples;
}
// [[str name, str addr]... ] -> string
/**
 * @param {[number, string?][]} tuples
 */ function stringTuplesToString(tuples) {
    /** @type {Array<string | undefined>} */ const parts = [];
    tuples.map((tup)=>{
        const proto = protoFromTuple(tup);
        parts.push(proto.name);
        if (tup.length > 1) parts.push(tup[1]);
        return null;
    });
    return cleanPath(parts.join("/"));
}
// [[str name, str addr]... ] -> [[int code, Uint8Array]... ]
/**
 * @param {Array<string[] | string >} tuples
 * @returns {[number , Uint8Array?][]}
 */ function stringTuplesToTuples(tuples) {
    return tuples.map((tup)=>{
        if (!Array.isArray(tup)) tup = [
            tup
        ];
        const proto = protoFromTuple(tup);
        if (tup.length > 1) return [
            proto.code,
            convert.toBytes(proto.code, tup[1])
        ];
        return [
            proto.code
        ];
    });
}
/**
 * Convert tuples to string tuples
 *
 * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]
 *
 * @param {Array<[number, Uint8Array?]>} tuples
 * @returns {Array<[number, string?]>}
 */ function tuplesToStringTuples(tuples) {
    return tuples.map((tup)=>{
        const proto = protoFromTuple(tup);
        if (tup[1]) return [
            proto.code,
            convert.toString(proto.code, tup[1])
        ];
        return [
            proto.code
        ];
    });
}
// [[int code, Uint8Array ]... ] -> Uint8Array
/**
 * @param {[number, Uint8Array?][]} tuples
 */ function tuplesToBytes(tuples) {
    return fromBytes(uint8ArrayConcat(tuples.map((/** @type {any[]} */ tup)=>{
        const proto = protoFromTuple(tup);
        let buf = Uint8Array.from(varint.encode(proto.code));
        if (tup.length > 1) buf = uint8ArrayConcat([
            buf,
            tup[1]
        ]) // add address buffer
        ;
        return buf;
    })));
}
/**
 * @param {import("./types").Protocol} p
 * @param {Uint8Array | number[]} addr
 */ function sizeForAddr(p, addr) {
    if (p.size > 0) return p.size / 8;
    else if (p.size === 0) return 0;
    else {
        const size = varint.decode(addr);
        return size + varint.decode.bytes;
    }
}
/**
 *
 * @param {Uint8Array} buf
 * @returns {Array<[number, Uint8Array?]>}
 */ function bytesToTuples(buf) {
    /** @type {Array<[number, Uint8Array?]>} */ const tuples = [];
    let i = 0;
    while(i < buf.length){
        const code = varint.decode(buf, i);
        const n = varint.decode.bytes;
        const p = protocols(code);
        const size = sizeForAddr(p, buf.slice(i + n));
        if (size === 0) {
            tuples.push([
                code
            ]);
            i += n;
            continue;
        }
        const addr = buf.slice(i + n, i + n + size);
        i += size + n;
        if (i > buf.length) throw ParseError("Invalid address Uint8Array: " + uint8ArrayToString(buf, "base16"));
        // ok, tuple seems good.
        tuples.push([
            code,
            addr
        ]);
    }
    return tuples;
}
// Uint8Array -> String
/**
 * @param {Uint8Array} buf
 */ function bytesToString(buf) {
    const a = bytesToTuples(buf);
    const b = tuplesToStringTuples(a);
    return stringTuplesToString(b);
}
// String -> Uint8Array
/**
 * @param {string} str
 */ function stringToBytes(str) {
    str = cleanPath(str);
    const a = stringToStringTuples(str);
    const b = stringTuplesToTuples(a);
    return tuplesToBytes(b);
}
// String -> Uint8Array
/**
 * @param {string} str
 */ function fromString(str) {
    return stringToBytes(str);
}
// Uint8Array -> Uint8Array
/**
 * @param {Uint8Array} buf
 */ function fromBytes(buf) {
    const err = validateBytes(buf);
    if (err) throw err;
    return Uint8Array.from(buf) // copy
    ;
}
/**
 * @param {Uint8Array} buf
 */ function validateBytes(buf) {
    try {
        bytesToTuples(buf) // try to parse. will throw if breaks
        ;
    } catch (err) {
        return err;
    }
}
/**
 * @param {Uint8Array} buf
 */ function isValidBytes(buf) {
    return validateBytes(buf) === undefined;
}
/**
 * @param {string} str
 */ function cleanPath(str) {
    return "/" + str.trim().split("/").filter((/** @type {any} */ a)=>a).join("/");
}
/**
 * @param {string} str
 */ function ParseError(str) {
    return new Error("Error parsing address: " + str);
}
/**
 * @param {any[]} tup
 */ function protoFromTuple(tup) {
    const proto = protocols(tup[0]);
    return proto;
}

},{"./convert":"3VFEe","./protocols-table":"j1p40","varint":"9fMsR","uint8arrays/concat":"gqJ9u","uint8arrays/to-string":"w8mvE"}],"3VFEe":[function(require,module,exports) {
"use strict";
const ip = require("./ip");
const protocols = require("./protocols-table");
const { CID  } = require("multiformats/cid");
const { base32  } = require("multiformats/bases/base32");
const { base58btc  } = require("multiformats/bases/base58");
const Digest = require("multiformats/hashes/digest");
const varint = require("varint");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const { concat: uint8ArrayConcat  } = require("uint8arrays/concat");
module.exports = Convert;
// converts (serializes) addresses
/**
 * @param {string} proto
 * @param {string | Uint8Array} a
 */ function Convert(proto, a) {
    if (a instanceof Uint8Array) return Convert.toString(proto, a);
    else return Convert.toBytes(proto, a);
}
/**
 * Convert [code,Uint8Array] to string
 *
 * @param {number|string} proto
 * @param {Uint8Array} buf
 * @returns {string}
 */ Convert.toString = function convertToString(proto, buf) {
    const protocol = protocols(proto);
    switch(protocol.code){
        case 4:
        case 41:
            return bytes2ip(buf);
        case 6:
        case 273:
        case 33:
        case 132:
            return bytes2port(buf).toString();
        case 53:
        case 54:
        case 55:
        case 56:
        case 400:
        case 777:
            return bytes2str(buf);
        case 421:
            return bytes2mh(buf);
        case 444:
            return bytes2onion(buf);
        case 445:
            return bytes2onion(buf);
        default:
            return uint8ArrayToString(buf, "base16") // no clue. convert to hex
            ;
    }
};
Convert.toBytes = function convertToBytes(/** @type {string | number } */ proto, /** @type {string} */ str) {
    const protocol = protocols(proto);
    switch(protocol.code){
        case 4:
            return ip2bytes(str);
        case 41:
            return ip2bytes(str);
        case 6:
        case 273:
        case 33:
        case 132:
            return port2bytes(parseInt(str, 10));
        case 53:
        case 54:
        case 55:
        case 56:
        case 400:
        case 777:
            return str2bytes(str);
        case 421:
            return mh2bytes(str);
        case 444:
            return onion2bytes(str);
        case 445:
            return onion32bytes(str);
        default:
            return uint8ArrayFromString(str, "base16") // no clue. convert from hex
            ;
    }
};
/**
 * @param {string} ipString
 */ function ip2bytes(ipString) {
    if (!ip.isIP(ipString)) throw new Error("invalid ip address");
    return ip.toBytes(ipString);
}
/**
 * @param {Uint8Array} ipBuff
 */ function bytes2ip(ipBuff) {
    const ipString = ip.toString(ipBuff);
    if (!ipString || !ip.isIP(ipString)) throw new Error("invalid ip address");
    return ipString;
}
/**
 * @param {number} port
 */ function port2bytes(port) {
    const buf = new ArrayBuffer(2);
    const view = new DataView(buf);
    view.setUint16(0, port);
    return new Uint8Array(buf);
}
/**
 * @param {Uint8Array} buf
 */ function bytes2port(buf) {
    const view = new DataView(buf.buffer);
    return view.getUint16(buf.byteOffset);
}
/**
 * @param {string} str
 */ function str2bytes(str) {
    const buf = uint8ArrayFromString(str);
    const size = Uint8Array.from(varint.encode(buf.length));
    return uint8ArrayConcat([
        size,
        buf
    ], size.length + buf.length);
}
/**
 * @param {Uint8Array} buf
 */ function bytes2str(buf) {
    const size = varint.decode(buf);
    buf = buf.slice(varint.decode.bytes);
    if (buf.length !== size) throw new Error("inconsistent lengths");
    return uint8ArrayToString(buf);
}
/**
 * @param {string} hash - base58btc string
 */ function mh2bytes(hash) {
    let mh;
    if (hash[0] === "Q" || hash[0] === "1") mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;
    else mh = CID.parse(hash).multihash.bytes;
    // the address is a varint prefixed multihash string representation
    const size = Uint8Array.from(varint.encode(mh.length));
    return uint8ArrayConcat([
        size,
        mh
    ], size.length + mh.length);
}
/**
 * Converts bytes to bas58btc string
 *
 * @param {Uint8Array} buf
 * @returns {string} base58btc string
 */ function bytes2mh(buf) {
    const size = varint.decode(buf);
    const address = buf.slice(varint.decode.bytes);
    if (address.length !== size) throw new Error("inconsistent lengths");
    return uint8ArrayToString(address, "base58btc");
}
/**
 * @param {string} str
 */ function onion2bytes(str) {
    const addr = str.split(":");
    if (addr.length !== 2) throw new Error("failed to parse onion addr: " + addr + " does not contain a port number");
    if (addr[0].length !== 16) throw new Error("failed to parse onion addr: " + addr[0] + " not a Tor onion address.");
    // onion addresses do not include the multibase prefix, add it before decoding
    const buf = base32.decode("b" + addr[0]);
    // onion port number
    const port = parseInt(addr[1], 10);
    if (port < 1 || port > 65536) throw new Error("Port number is not in range(1, 65536)");
    const portBuf = port2bytes(port);
    return uint8ArrayConcat([
        buf,
        portBuf
    ], buf.length + portBuf.length);
}
/**
 * @param {string} str
 */ function onion32bytes(str) {
    const addr = str.split(":");
    if (addr.length !== 2) throw new Error("failed to parse onion addr: " + addr + " does not contain a port number");
    if (addr[0].length !== 56) throw new Error("failed to parse onion addr: " + addr[0] + " not a Tor onion3 address.");
    // onion addresses do not include the multibase prefix, add it before decoding
    const buf = base32.decode("b" + addr[0]);
    // onion port number
    const port = parseInt(addr[1], 10);
    if (port < 1 || port > 65536) throw new Error("Port number is not in range(1, 65536)");
    const portBuf = port2bytes(port);
    return uint8ArrayConcat([
        buf,
        portBuf
    ], buf.length + portBuf.length);
}
/**
 * @param {Uint8Array} buf
 */ function bytes2onion(buf) {
    const addrBytes = buf.slice(0, buf.length - 2);
    const portBytes = buf.slice(buf.length - 2);
    const addr = uint8ArrayToString(addrBytes, "base32");
    const port = bytes2port(portBytes);
    return addr + ":" + port;
}

},{"./ip":"ktWPM","./protocols-table":"j1p40","multiformats/cid":"4uoBU","multiformats/bases/base32":"apmz1","multiformats/bases/base58":"9KkrI","multiformats/hashes/digest":"9JdI8","varint":"9fMsR","uint8arrays/to-string":"w8mvE","uint8arrays/from-string":"7qjkp","uint8arrays/concat":"gqJ9u"}],"ktWPM":[function(require,module,exports) {
"use strict";
const isIp = require("is-ip");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const isIP = isIp;
const isV4 = isIp.v4;
const isV6 = isIp.v6;
// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7
// @ts-ignore - this is copied from the link above better to keep it the same
const toBytes = function(ip, buff, offset) {
    offset = ~~offset;
    let result;
    if (isV4(ip)) {
        result = buff || new Uint8Array(offset + 4);
        // @ts-ignore
        // eslint-disable-next-line array-callback-return
        ip.split(/\./g).map(function(byte) {
            result[offset++] = parseInt(byte, 10) & 0xff;
        });
    } else if (isV6(ip)) {
        const sections = ip.split(":", 8);
        let i;
        for(i = 0; i < sections.length; i++){
            const isv4 = isV4(sections[i]);
            let v4Buffer;
            if (isv4) {
                v4Buffer = toBytes(sections[i]);
                sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), "base16");
            }
            if (v4Buffer && ++i < 8) sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), "base16"));
        }
        if (sections[0] === "") while(sections.length < 8)sections.unshift("0");
        else if (sections[sections.length - 1] === "") while(sections.length < 8)sections.push("0");
        else if (sections.length < 8) {
            for(i = 0; i < sections.length && sections[i] !== ""; i++);
            const argv = [
                i,
                "1"
            ];
            for(i = 9 - sections.length; i > 0; i--)argv.push("0");
            sections.splice.apply(sections, argv);
        }
        result = buff || new Uint8Array(offset + 16);
        for(i = 0; i < sections.length; i++){
            const word = parseInt(sections[i], 16);
            result[offset++] = word >> 8 & 0xff;
            result[offset++] = word & 0xff;
        }
    }
    if (!result) throw Error("Invalid ip address: " + ip);
    return result;
};
// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63
// @ts-ignore - this is copied from the link above better to keep it the same
const toString = function(buff, offset, length) {
    offset = ~~offset;
    length = length || buff.length - offset;
    const result = [];
    let string;
    const view = new DataView(buff.buffer);
    if (length === 4) {
        // IPv4
        for(let i = 0; i < length; i++)result.push(buff[offset + i]);
        string = result.join(".");
    } else if (length === 16) {
        // IPv6
        for(let i = 0; i < length; i += 2)result.push(view.getUint16(offset + i).toString(16));
        string = result.join(":");
        string = string.replace(/(^|:)0(:0)*:0(:|$)/, "$1::$3");
        string = string.replace(/:{3,4}/, "::");
    }
    return string;
};
module.exports = {
    isIP,
    isV4,
    isV6,
    toBytes,
    toString
};

},{"is-ip":"026DS","uint8arrays/to-string":"w8mvE"}],"026DS":[function(require,module,exports) {
"use strict";
const ipRegex = require("ip-regex");
const isIp = (string)=>ipRegex({
        exact: true
    }).test(string);
isIp.v4 = (string)=>ipRegex.v4({
        exact: true
    }).test(string);
isIp.v6 = (string)=>ipRegex.v6({
        exact: true
    }).test(string);
isIp.version = (string)=>isIp(string) ? isIp.v4(string) ? 4 : 6 : undefined;
module.exports = isIp;

},{"ip-regex":"atjxC"}],"atjxC":[function(require,module,exports) {
"use strict";
const word = "[a-fA-F\\d:]";
const b = (options)=>options && options.includeBoundaries ? `(?:(?<=\\s|^)(?=${word})|(?<=${word})(?=\\s|$))` : "";
const v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
const v6seg = "[a-fA-F\\d]{1,4}";
const v6 = `
(?:
(?:${v6seg}:){7}(?:${v6seg}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6seg}:){5}(?::${v4}|(?::${v6seg}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6seg}:){4}(?:(?::${v6seg}){0,1}:${v4}|(?::${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6seg}:){3}(?:(?::${v6seg}){0,2}:${v4}|(?::${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6seg}:){2}(?:(?::${v6seg}){0,3}:${v4}|(?::${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6seg}:){1}(?:(?::${v6seg}){0,4}:${v4}|(?::${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
// Pre-compile only the exact regexes because adding a global flag make regexes stateful
const v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);
const v4exact = new RegExp(`^${v4}$`);
const v6exact = new RegExp(`^${v6}$`);
const ip = (options)=>options && options.exact ? v46Exact : new RegExp(`(?:${b(options)}${v4}${b(options)})|(?:${b(options)}${v6}${b(options)})`, "g");
ip.v4 = (options)=>options && options.exact ? v4exact : new RegExp(`${b(options)}${v4}${b(options)}`, "g");
ip.v6 = (options)=>options && options.exact ? v6exact : new RegExp(`${b(options)}${v6}${b(options)}`, "g");
module.exports = ip;

},{}],"w8mvE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var bases = require("./util/bases.js");
function toString(array, encoding = "utf8") {
    const base = bases[encoding];
    if (!base) throw new Error(`Unsupported encoding "${encoding}"`);
    return base.encoder.encode(array).substring(1);
}
exports.toString = toString;

},{"./util/bases.js":"ekopG"}],"ekopG":[function(require,module,exports) {
"use strict";
var basics = require("multiformats/basics");
function createCodec(name, prefix, encode, decode) {
    return {
        name,
        prefix,
        encoder: {
            name,
            prefix,
            encode
        },
        decoder: {
            decode
        }
    };
}
const string = createCodec("utf8", "u", (buf)=>{
    const decoder = new TextDecoder("utf8");
    return "u" + decoder.decode(buf);
}, (str)=>{
    const encoder = new TextEncoder();
    return encoder.encode(str.substring(1));
});
const ascii = createCodec("ascii", "a", (buf)=>{
    let string1 = "a";
    for(let i = 0; i < buf.length; i++)string1 += String.fromCharCode(buf[i]);
    return string1;
}, (str)=>{
    str = str.substring(1);
    const buf = new Uint8Array(str.length);
    for(let i = 0; i < str.length; i++)buf[i] = str.charCodeAt(i);
    return buf;
});
const BASES = {
    utf8: string,
    "utf-8": string,
    hex: basics.bases.base16,
    latin1: ascii,
    ascii: ascii,
    binary: ascii,
    ...basics.bases
};
module.exports = BASES;

},{"multiformats/basics":"a826o"}],"a826o":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var identity = require("./bases/identity.js");
var base2 = require("./bases/base2.js");
var base8 = require("./bases/base8.js");
var base10 = require("./bases/base10.js");
var base16 = require("./bases/base16.js");
var base32 = require("./bases/base32.js");
var base36 = require("./bases/base36.js");
var base58 = require("./bases/base58.js");
var base64 = require("./bases/base64.js");
var base256emoji = require("./bases/base256emoji.js");
var sha2 = require("./hashes/sha2.js");
var identity$1 = require("./hashes/identity.js");
var raw = require("./codecs/raw.js");
var json = require("./codecs/json.js");
require("./index.js");
var cid = require("./cid.js");
var hasher = require("./hashes/hasher.js");
var digest = require("./hashes/digest.js");
var varint = require("./varint.js");
var bytes = require("./bytes.js");
const bases = {
    ...identity,
    ...base2,
    ...base8,
    ...base10,
    ...base16,
    ...base32,
    ...base36,
    ...base58,
    ...base64,
    ...base256emoji
};
const hashes = {
    ...sha2,
    ...identity$1
};
const codecs = {
    raw,
    json
};
exports.CID = cid.CID;
exports.hasher = hasher;
exports.digest = digest;
exports.varint = varint;
exports.bytes = bytes;
exports.bases = bases;
exports.codecs = codecs;
exports.hashes = hashes;

},{"./bases/identity.js":"jy16e","./bases/base2.js":"jAOxB","./bases/base8.js":"3WMjP","./bases/base10.js":"aFB7O","./bases/base16.js":"e5DKK","./bases/base32.js":"apmz1","./bases/base36.js":"22c8Y","./bases/base58.js":"9KkrI","./bases/base64.js":"3gCnk","./bases/base256emoji.js":"cSiGJ","./hashes/sha2.js":"7U0mx","./hashes/identity.js":"bj4ky","./codecs/raw.js":"cxcPD","./codecs/json.js":"7lUAp","./index.js":"3QFUn","./cid.js":"4uoBU","./hashes/hasher.js":"lU6YS","./hashes/digest.js":"9JdI8","./varint.js":"8P1F2","./bytes.js":"ent0w"}],"jy16e":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
var bytes = require("../bytes.js");
const identity = base.from({
    prefix: "\0",
    name: "identity",
    encode: (buf)=>bytes.toString(buf),
    decode: (str)=>bytes.fromString(str)
});
exports.identity = identity;

},{"./base.js":"j888T","../bytes.js":"ent0w"}],"jAOxB":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base2 = base.rfc4648({
    prefix: "0",
    name: "base2",
    alphabet: "01",
    bitsPerChar: 1
});
exports.base2 = base2;

},{"./base.js":"j888T"}],"3WMjP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base8 = base.rfc4648({
    prefix: "7",
    name: "base8",
    alphabet: "01234567",
    bitsPerChar: 3
});
exports.base8 = base8;

},{"./base.js":"j888T"}],"aFB7O":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base10 = base.baseX({
    prefix: "9",
    name: "base10",
    alphabet: "0123456789"
});
exports.base10 = base10;

},{"./base.js":"j888T"}],"e5DKK":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base16 = base.rfc4648({
    prefix: "f",
    name: "base16",
    alphabet: "0123456789abcdef",
    bitsPerChar: 4
});
const base16upper = base.rfc4648({
    prefix: "F",
    name: "base16upper",
    alphabet: "0123456789ABCDEF",
    bitsPerChar: 4
});
exports.base16 = base16;
exports.base16upper = base16upper;

},{"./base.js":"j888T"}],"22c8Y":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base36 = base.baseX({
    prefix: "k",
    name: "base36",
    alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
const base36upper = base.baseX({
    prefix: "K",
    name: "base36upper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});
exports.base36 = base36;
exports.base36upper = base36upper;

},{"./base.js":"j888T"}],"3gCnk":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const base64 = base.rfc4648({
    prefix: "m",
    name: "base64",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    bitsPerChar: 6
});
const base64pad = base.rfc4648({
    prefix: "M",
    name: "base64pad",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    bitsPerChar: 6
});
const base64url = base.rfc4648({
    prefix: "u",
    name: "base64url",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
    bitsPerChar: 6
});
const base64urlpad = base.rfc4648({
    prefix: "U",
    name: "base64urlpad",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
    bitsPerChar: 6
});
exports.base64 = base64;
exports.base64pad = base64pad;
exports.base64url = base64url;
exports.base64urlpad = base64urlpad;

},{"./base.js":"j888T"}],"cSiGJ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var base = require("./base.js");
const alphabet = Array.from("\uD83D\uDE80\uD83E\uDE90\u2604\uD83D\uDEF0\uD83C\uDF0C\uD83C\uDF11\uD83C\uDF12\uD83C\uDF13\uD83C\uDF14\uD83C\uDF15\uD83C\uDF16\uD83C\uDF17\uD83C\uDF18\uD83C\uDF0D\uD83C\uDF0F\uD83C\uDF0E\uD83D\uDC09\u2600\uD83D\uDCBB\uD83D\uDDA5\uD83D\uDCBE\uD83D\uDCBF\uD83D\uDE02\u2764\uD83D\uDE0D\uD83E\uDD23\uD83D\uDE0A\uD83D\uDE4F\uD83D\uDC95\uD83D\uDE2D\uD83D\uDE18\uD83D\uDC4D\uD83D\uDE05\uD83D\uDC4F\uD83D\uDE01\uD83D\uDD25\uD83E\uDD70\uD83D\uDC94\uD83D\uDC96\uD83D\uDC99\uD83D\uDE22\uD83E\uDD14\uD83D\uDE06\uD83D\uDE44\uD83D\uDCAA\uD83D\uDE09\u263A\uD83D\uDC4C\uD83E\uDD17\uD83D\uDC9C\uD83D\uDE14\uD83D\uDE0E\uD83D\uDE07\uD83C\uDF39\uD83E\uDD26\uD83C\uDF89\uD83D\uDC9E\u270C\u2728\uD83E\uDD37\uD83D\uDE31\uD83D\uDE0C\uD83C\uDF38\uD83D\uDE4C\uD83D\uDE0B\uD83D\uDC97\uD83D\uDC9A\uD83D\uDE0F\uD83D\uDC9B\uD83D\uDE42\uD83D\uDC93\uD83E\uDD29\uD83D\uDE04\uD83D\uDE00\uD83D\uDDA4\uD83D\uDE03\uD83D\uDCAF\uD83D\uDE48\uD83D\uDC47\uD83C\uDFB6\uD83D\uDE12\uD83E\uDD2D\u2763\uD83D\uDE1C\uD83D\uDC8B\uD83D\uDC40\uD83D\uDE2A\uD83D\uDE11\uD83D\uDCA5\uD83D\uDE4B\uD83D\uDE1E\uD83D\uDE29\uD83D\uDE21\uD83E\uDD2A\uD83D\uDC4A\uD83E\uDD73\uD83D\uDE25\uD83E\uDD24\uD83D\uDC49\uD83D\uDC83\uD83D\uDE33\u270B\uD83D\uDE1A\uD83D\uDE1D\uD83D\uDE34\uD83C\uDF1F\uD83D\uDE2C\uD83D\uDE43\uD83C\uDF40\uD83C\uDF37\uD83D\uDE3B\uD83D\uDE13\u2B50\u2705\uD83E\uDD7A\uD83C\uDF08\uD83D\uDE08\uD83E\uDD18\uD83D\uDCA6\u2714\uD83D\uDE23\uD83C\uDFC3\uD83D\uDC90\u2639\uD83C\uDF8A\uD83D\uDC98\uD83D\uDE20\u261D\uD83D\uDE15\uD83C\uDF3A\uD83C\uDF82\uD83C\uDF3B\uD83D\uDE10\uD83D\uDD95\uD83D\uDC9D\uD83D\uDE4A\uD83D\uDE39\uD83D\uDDE3\uD83D\uDCAB\uD83D\uDC80\uD83D\uDC51\uD83C\uDFB5\uD83E\uDD1E\uD83D\uDE1B\uD83D\uDD34\uD83D\uDE24\uD83C\uDF3C\uD83D\uDE2B\u26BD\uD83E\uDD19\u2615\uD83C\uDFC6\uD83E\uDD2B\uD83D\uDC48\uD83D\uDE2E\uD83D\uDE46\uD83C\uDF7B\uD83C\uDF43\uD83D\uDC36\uD83D\uDC81\uD83D\uDE32\uD83C\uDF3F\uD83E\uDDE1\uD83C\uDF81\u26A1\uD83C\uDF1E\uD83C\uDF88\u274C\u270A\uD83D\uDC4B\uD83D\uDE30\uD83E\uDD28\uD83D\uDE36\uD83E\uDD1D\uD83D\uDEB6\uD83D\uDCB0\uD83C\uDF53\uD83D\uDCA2\uD83E\uDD1F\uD83D\uDE41\uD83D\uDEA8\uD83D\uDCA8\uD83E\uDD2C\u2708\uD83C\uDF80\uD83C\uDF7A\uD83E\uDD13\uD83D\uDE19\uD83D\uDC9F\uD83C\uDF31\uD83D\uDE16\uD83D\uDC76\uD83E\uDD74\u25B6\u27A1\u2753\uD83D\uDC8E\uD83D\uDCB8\u2B07\uD83D\uDE28\uD83C\uDF1A\uD83E\uDD8B\uD83D\uDE37\uD83D\uDD7A\u26A0\uD83D\uDE45\uD83D\uDE1F\uD83D\uDE35\uD83D\uDC4E\uD83E\uDD32\uD83E\uDD20\uD83E\uDD27\uD83D\uDCCC\uD83D\uDD35\uD83D\uDC85\uD83E\uDDD0\uD83D\uDC3E\uD83C\uDF52\uD83D\uDE17\uD83E\uDD11\uD83C\uDF0A\uD83E\uDD2F\uD83D\uDC37\u260E\uD83D\uDCA7\uD83D\uDE2F\uD83D\uDC86\uD83D\uDC46\uD83C\uDFA4\uD83D\uDE47\uD83C\uDF51\u2744\uD83C\uDF34\uD83D\uDCA3\uD83D\uDC38\uD83D\uDC8C\uD83D\uDCCD\uD83E\uDD40\uD83E\uDD22\uD83D\uDC45\uD83D\uDCA1\uD83D\uDCA9\uD83D\uDC50\uD83D\uDCF8\uD83D\uDC7B\uD83E\uDD10\uD83E\uDD2E\uD83C\uDFBC\uD83E\uDD75\uD83D\uDEA9\uD83C\uDF4E\uD83C\uDF4A\uD83D\uDC7C\uD83D\uDC8D\uD83D\uDCE3\uD83E\uDD42");
const alphabetBytesToChars = alphabet.reduce((p, c, i)=>{
    p[i] = c;
    return p;
}, []);
const alphabetCharsToBytes = alphabet.reduce((p, c, i)=>{
    p[c.codePointAt(0)] = i;
    return p;
}, []);
function encode(data) {
    return data.reduce((p, c)=>{
        p += alphabetBytesToChars[c];
        return p;
    }, "");
}
function decode(str) {
    const byts = [];
    for (const char of str){
        const byt = alphabetCharsToBytes[char.codePointAt(0)];
        if (byt === undefined) throw new Error(`Non-base256emoji character: ${char}`);
        byts.push(byt);
    }
    return new Uint8Array(byts);
}
const base256emoji = base.from({
    prefix: "\uD83D\uDE80",
    name: "base256emoji",
    encode,
    decode
});
exports.base256emoji = base256emoji;

},{"./base.js":"j888T"}],"7U0mx":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var hasher = require("./hasher.js");
const sha = (name)=>async (data)=>new Uint8Array(await crypto.subtle.digest(name, data));
const sha256 = hasher.from({
    name: "sha2-256",
    code: 18,
    encode: sha("SHA-256")
});
const sha512 = hasher.from({
    name: "sha2-512",
    code: 19,
    encode: sha("SHA-512")
});
exports.sha256 = sha256;
exports.sha512 = sha512;

},{"./hasher.js":"lU6YS"}],"lU6YS":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var digest = require("./digest.js");
const from = ({ name , code , encode  })=>new Hasher(name, code, encode);
class Hasher {
    constructor(name, code, encode){
        this.name = name;
        this.code = code;
        this.encode = encode;
    }
    digest(input) {
        if (input instanceof Uint8Array) {
            const result = this.encode(input);
            return result instanceof Uint8Array ? digest.create(this.code, result) : result.then((digest$1)=>digest.create(this.code, digest$1));
        } else throw Error("Unknown type, must be binary type");
    }
}
exports.Hasher = Hasher;
exports.from = from;

},{"./digest.js":"9JdI8"}],"bj4ky":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var bytes = require("../bytes.js");
var digest$1 = require("./digest.js");
const code = 0;
const name = "identity";
const encode = bytes.coerce;
const digest = (input)=>digest$1.create(code, encode(input));
const identity = {
    code,
    name,
    encode,
    digest
};
exports.identity = identity;

},{"../bytes.js":"ent0w","./digest.js":"9JdI8"}],"cxcPD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var bytes = require("../bytes.js");
const name = "raw";
const code = 85;
const encode = (node)=>bytes.coerce(node);
const decode = (data)=>bytes.coerce(data);
exports.code = code;
exports.decode = decode;
exports.encode = encode;
exports.name = name;

},{"../bytes.js":"ent0w"}],"7lUAp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const textEncoder = new TextEncoder();
const textDecoder = new TextDecoder();
const name = "json";
const code = 512;
const encode = (node)=>textEncoder.encode(JSON.stringify(node));
const decode = (data)=>JSON.parse(textDecoder.decode(data));
exports.code = code;
exports.decode = decode;
exports.encode = encode;
exports.name = name;

},{}],"3QFUn":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var cid = require("./cid.js");
var varint = require("./varint.js");
var bytes = require("./bytes.js");
var hasher = require("./hashes/hasher.js");
var digest = require("./hashes/digest.js");
exports.CID = cid.CID;
exports.varint = varint;
exports.bytes = bytes;
exports.hasher = hasher;
exports.digest = digest;

},{"./cid.js":"4uoBU","./varint.js":"8P1F2","./bytes.js":"ent0w","./hashes/hasher.js":"lU6YS","./hashes/digest.js":"9JdI8"}],"j1p40":[function(require,module,exports) {
"use strict";
/** @typedef {import("./types").Protocol} Protocol */ /**
 * Protocols
 *
 * @param {number | string} proto
 * @returns {Protocol}
 */ function Protocols(proto) {
    if (typeof proto === "number") {
        if (Protocols.codes[proto]) return Protocols.codes[proto];
        throw new Error("no protocol with code: " + proto);
    } else if (typeof proto === "string") {
        if (Protocols.names[proto]) return Protocols.names[proto];
        throw new Error("no protocol with name: " + proto);
    }
    throw new Error("invalid protocol id type: " + proto);
}
const V = -1;
Protocols.lengthPrefixedVarSize = V;
Protocols.V = V;
/** @type {Array<[number, number, string, (string|boolean)?, string?]>} */ Protocols.table = [
    [
        4,
        32,
        "ip4"
    ],
    [
        6,
        16,
        "tcp"
    ],
    [
        33,
        16,
        "dccp"
    ],
    [
        41,
        128,
        "ip6"
    ],
    [
        42,
        V,
        "ip6zone"
    ],
    [
        53,
        V,
        "dns",
        "resolvable"
    ],
    [
        54,
        V,
        "dns4",
        "resolvable"
    ],
    [
        55,
        V,
        "dns6",
        "resolvable"
    ],
    [
        56,
        V,
        "dnsaddr",
        "resolvable"
    ],
    [
        132,
        16,
        "sctp"
    ],
    [
        273,
        16,
        "udp"
    ],
    [
        275,
        0,
        "p2p-webrtc-star"
    ],
    [
        276,
        0,
        "p2p-webrtc-direct"
    ],
    [
        277,
        0,
        "p2p-stardust"
    ],
    [
        290,
        0,
        "p2p-circuit"
    ],
    [
        301,
        0,
        "udt"
    ],
    [
        302,
        0,
        "utp"
    ],
    [
        400,
        V,
        "unix",
        false,
        "path"
    ],
    // `ipfs` is added before `p2p` for legacy support.
    // All text representations will default to `p2p`, but `ipfs` will
    // still be supported
    [
        421,
        V,
        "ipfs"
    ],
    // `p2p` is the preferred name for 421, and is now the default
    [
        421,
        V,
        "p2p"
    ],
    [
        443,
        0,
        "https"
    ],
    [
        444,
        96,
        "onion"
    ],
    [
        445,
        296,
        "onion3"
    ],
    [
        446,
        V,
        "garlic64"
    ],
    [
        460,
        0,
        "quic"
    ],
    [
        477,
        0,
        "ws"
    ],
    [
        478,
        0,
        "wss"
    ],
    [
        479,
        0,
        "p2p-websocket-star"
    ],
    [
        480,
        0,
        "http"
    ],
    [
        777,
        V,
        "memory"
    ]
];
/** @type {Record<string,Protocol>} */ Protocols.names = {};
/** @type {Record<number,Protocol>} */ Protocols.codes = {};
// populate tables
Protocols.table.map((row)=>{
    const proto = p.apply(null, row);
    Protocols.codes[proto.code] = proto;
    Protocols.names[proto.name] = proto;
    return null;
});
Protocols.object = p;
/**
 *
 * Create a protocol
 *
 * @param {number} code
 * @param {number} size
 * @param {string} name
 * @param {any} [resolvable]
 * @param {any} [path]
 * @returns {Protocol}
 */ function p(code, size, name, resolvable, path) {
    return {
        code,
        size,
        name,
        resolvable: Boolean(resolvable),
        path: Boolean(path)
    };
}
module.exports = Protocols;

},{}],"9fMsR":[function(require,module,exports) {
module.exports = {
    encode: require("./encode.js"),
    decode: require("./decode.js"),
    encodingLength: require("./length.js")
};

},{"./encode.js":"1xAzz","./decode.js":"10NGY","./length.js":"8TRjB"}],"1xAzz":[function(require,module,exports) {
module.exports = encode;
var MSB = 0x80, REST = 0x7F, MSBALL = ~REST, INT = Math.pow(2, 31);
function encode(num, out, offset) {
    if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
        encode.bytes = 0;
        throw new RangeError("Could not encode varint");
    }
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while(num >= INT){
        out[offset++] = num & 0xFF | MSB;
        num /= 128;
    }
    while(num & MSBALL){
        out[offset++] = num & 0xFF | MSB;
        num >>>= 7;
    }
    out[offset] = num | 0;
    encode.bytes = offset - oldOffset + 1;
    return out;
}

},{}],"10NGY":[function(require,module,exports) {
module.exports = read;
var MSB = 0x80, REST = 0x7F;
function read(buf, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
    do {
        if (counter >= l || shift > 49) {
            read.bytes = 0;
            throw new RangeError("Could not decode varint");
        }
        b = buf[counter++];
        res += shift < 28 ? (b & REST) << shift : (b & REST) * Math.pow(2, shift);
        shift += 7;
    }while (b >= MSB);
    read.bytes = counter - offset;
    return res;
}

},{}],"8TRjB":[function(require,module,exports) {
var N1 = Math.pow(2, 7);
var N2 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
module.exports = function(value) {
    return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};

},{}],"7qjkp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var bases = require("./util/bases.js");
function fromString(string, encoding = "utf8") {
    const base = bases[encoding];
    if (!base) throw new Error(`Unsupported encoding "${encoding}"`);
    return base.decoder.decode(`${base.prefix}${string}`);
}
exports.fromString = fromString;

},{"./util/bases.js":"ekopG"}],"gqJ9u":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function concat(arrays, length) {
    if (!length) length = arrays.reduce((acc, curr)=>acc + curr.length, 0);
    const output = new Uint8Array(length);
    let offset = 0;
    for (const arr of arrays){
        output.set(arr, offset);
        offset += arr.length;
    }
    return output;
}
exports.concat = concat;

},{}],"dUrrM":[function(require,module,exports) {
"use strict";
/**
 * @typedef {{ [key: string]: any }} Extensions
 * @typedef {Error} Err
 * @property {string} message
 */ /**
 *
 * @param {Error} obj
 * @param {Extensions} props
 * @returns {Error & Extensions}
 */ function assign(obj, props) {
    for(const key in props)Object.defineProperty(obj, key, {
        value: props[key],
        enumerable: true,
        configurable: true
    });
    return obj;
}
/**
 *
 * @param {any} err - An Error
 * @param {string|Extensions} code - A string code or props to set on the error
 * @param {Extensions} [props] - Props to set on the error
 * @returns {Error & Extensions}
 */ function createError(err, code, props) {
    if (!err || typeof err === "string") throw new TypeError("Please pass an Error to err-code");
    if (!props) props = {};
    if (typeof code === "object") {
        props = code;
        code = "";
    }
    if (code) props.code = code;
    try {
        return assign(err, props);
    } catch (_) {
        props.message = err.message;
        props.stack = err.stack;
        const ErrClass = function() {};
        ErrClass.prototype = Object.create(Object.getPrototypeOf(err));
        // @ts-ignore
        const output = assign(new ErrClass(), props);
        return output;
    }
}
module.exports = createError;

},{}],"iZMnE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function equals(a, b) {
    if (a === b) return true;
    if (a.byteLength !== b.byteLength) return false;
    for(let i = 0; i < a.byteLength; i++){
        if (a[i] !== b[i]) return false;
    }
    return true;
}
exports.equals = equals;

},{}],"92xmM":[function(require,module,exports) {
"use strict";
const HTTP = require("../http");
/**
 *
 * @param {string} url
 * @param {import("../types").HTTPOptions} [options]
 * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}
 */ const urlSource = (url, options)=>{
    return {
        path: decodeURIComponent(new URL(url).pathname.split("/").pop() || ""),
        content: readURLContent(url, options)
    };
};
/**
 *
 * @param {string} url
 * @param {import("../types").HTTPOptions} [options]
 * @returns {AsyncIterable<Uint8Array>}
 */ async function* readURLContent(url, options) {
    const http = new HTTP();
    const response = await http.get(url, options);
    yield* response.iterator();
}
module.exports = urlSource;

},{"../http":"j20vN"}],"j20vN":[function(require,module,exports) {
/* eslint-disable no-undef */ "use strict";
const { fetch , Request , Headers  } = require("./http/fetch");
const { TimeoutError , HTTPError  } = require("./http/error");
const merge = require("merge-options").bind({
    ignoreUndefined: true
});
const { URL , URLSearchParams  } = require("iso-url");
const { AbortController  } = require("native-abort-controller");
const anySignal = require("any-signal");
/**
 * @typedef {import('stream').Readable} NodeReadableStream
 * @typedef {import('./types').HTTPOptions} HTTPOptions
 * @typedef {import('./types').ExtendedResponse} ExtendedResponse
 */ /**
 * @template TResponse
 * @param {Promise<TResponse>} promise
 * @param {number | undefined} ms
 * @param {AbortController} abortController
 * @returns {Promise<TResponse>}
 */ const timeout = (promise, ms, abortController)=>{
    if (ms === undefined) return promise;
    const start = Date.now();
    const timedOut = ()=>{
        const time = Date.now() - start;
        return time >= ms;
    };
    return new Promise((resolve, reject)=>{
        const timeoutID = setTimeout(()=>{
            if (timedOut()) {
                reject(new TimeoutError());
                abortController.abort();
            }
        }, ms);
        /**
     * @param {(value: any) => void } next
     */ const after = (next)=>{
            /**
       * @param {any} res
       */ const fn = (res)=>{
                clearTimeout(timeoutID);
                if (timedOut()) {
                    reject(new TimeoutError());
                    return;
                }
                next(res);
            };
            return fn;
        };
        promise.then(after(resolve), after(reject));
    });
};
const defaults = {
    throwHttpErrors: true,
    credentials: "same-origin"
};
class HTTP {
    /**
   *
   * @param {HTTPOptions} options
   */ constructor(options = {}){
        /** @type {HTTPOptions} */ this.opts = merge(defaults, options);
    }
    /**
   * Fetch
   *
   * @param {string | Request} resource
   * @param {HTTPOptions} options
   * @returns {Promise<ExtendedResponse>}
   */ async fetch(resource, options = {}) {
        /** @type {HTTPOptions} */ const opts = merge(this.opts, options);
        const headers = new Headers(opts.headers);
        // validate resource type
        if (typeof resource !== "string" && !(resource instanceof URL || resource instanceof Request)) throw new TypeError("`resource` must be a string, URL, or Request");
        const url = new URL(resource.toString(), opts.base);
        const { searchParams , transformSearchParams , json  } = opts;
        if (searchParams) {
            if (typeof transformSearchParams === "function") // @ts-ignore
            url.search = transformSearchParams(new URLSearchParams(opts.searchParams));
            else // @ts-ignore
            url.search = new URLSearchParams(opts.searchParams);
        }
        if (json) {
            opts.body = JSON.stringify(opts.json);
            headers.set("content-type", "application/json");
        }
        const abortController = new AbortController();
        // @ts-ignore
        const signal = anySignal([
            abortController.signal,
            opts.signal
        ]);
        const response = await timeout(fetch(url.toString(), {
            ...opts,
            signal,
            timeout: undefined,
            headers
        }), opts.timeout, abortController);
        if (!response.ok && opts.throwHttpErrors) {
            if (opts.handleError) await opts.handleError(response);
            throw new HTTPError(response);
        }
        response.iterator = function() {
            return fromStream(response.body);
        };
        response.ndjson = async function*() {
            for await (const chunk of ndjson(response.iterator()))if (options.transform) yield options.transform(chunk);
            else yield chunk;
        };
        return response;
    }
    /**
   * @param {string | Request} resource
   * @param {HTTPOptions} options
   */ post(resource, options = {}) {
        return this.fetch(resource, {
            ...options,
            method: "POST"
        });
    }
    /**
   * @param {string | Request} resource
   * @param {HTTPOptions} options
   */ get(resource, options = {}) {
        return this.fetch(resource, {
            ...options,
            method: "GET"
        });
    }
    /**
   * @param {string | Request} resource
   * @param {HTTPOptions} options
   */ put(resource, options = {}) {
        return this.fetch(resource, {
            ...options,
            method: "PUT"
        });
    }
    /**
   * @param {string | Request} resource
   * @param {HTTPOptions} options
   */ delete(resource, options = {}) {
        return this.fetch(resource, {
            ...options,
            method: "DELETE"
        });
    }
    /**
   * @param {string | Request} resource
   * @param {HTTPOptions} options
   */ options(resource, options = {}) {
        return this.fetch(resource, {
            ...options,
            method: "OPTIONS"
        });
    }
}
/**
 * Parses NDJSON chunks from an iterator
 *
 * @param {AsyncIterable<Uint8Array>} source
 * @returns {AsyncIterable<any>}
 */ const ndjson = async function*(source) {
    const decoder = new TextDecoder();
    let buf = "";
    for await (const chunk of source){
        buf += decoder.decode(chunk, {
            stream: true
        });
        const lines = buf.split(/\r?\n/);
        for(let i = 0; i < lines.length - 1; i++){
            const l = lines[i].trim();
            if (l.length > 0) yield JSON.parse(l);
        }
        buf = lines[lines.length - 1];
    }
    buf += decoder.decode();
    buf = buf.trim();
    if (buf.length !== 0) yield JSON.parse(buf);
};
/**
 * Stream to AsyncIterable
 *
 * @template TChunk
 * @param {ReadableStream<TChunk> | NodeReadableStream | null} source
 * @returns {AsyncIterable<TChunk>}
 */ const fromStream = (source)=>{
    // Workaround for https://github.com/node-fetch/node-fetch/issues/766
    if (isNodeReadableStream(source)) {
        const iter = source[Symbol.asyncIterator]();
        return {
            [Symbol.asyncIterator] () {
                return {
                    next: iter.next.bind(iter),
                    return (value) {
                        source.destroy();
                        if (typeof iter.return === "function") return iter.return();
                        return Promise.resolve({
                            done: true,
                            value
                        });
                    }
                };
            }
        };
    }
    if (isWebReadableStream(source)) {
        const reader = source.getReader();
        return async function*() {
            try {
                while(true){
                    // Read from the stream
                    const { done , value  } = await reader.read();
                    // Exit if we're done
                    if (done) return;
                    // Else yield the chunk
                    if (value) yield value;
                }
            } finally{
                reader.releaseLock();
            }
        }();
    }
    if (isAsyncIterable(source)) return source;
    throw new TypeError("Body can't be converted to AsyncIterable");
};
/**
 * Check if it's an AsyncIterable
 *
 * @template {unknown} TChunk
 * @template {any} Other
 * @param {Other|AsyncIterable<TChunk>} value
 * @returns {value is AsyncIterable<TChunk>}
 */ const isAsyncIterable = (value)=>{
    return typeof value === "object" && value !== null && typeof /** @type {any} */ value[Symbol.asyncIterator] === "function";
};
/**
 * Check for web readable stream
 *
 * @template {unknown} TChunk
 * @template {any} Other
 * @param {Other|ReadableStream<TChunk>} value
 * @returns {value is ReadableStream<TChunk>}
 */ const isWebReadableStream = (value)=>{
    return value && typeof /** @type {any} */ value.getReader === "function";
};
/**
 * @param {any} value
 * @returns {value is NodeReadableStream}
 */ const isNodeReadableStream = (value)=>Object.prototype.hasOwnProperty.call(value, "readable") && Object.prototype.hasOwnProperty.call(value, "writable");
HTTP.HTTPError = HTTPError;
HTTP.TimeoutError = TimeoutError;
HTTP.streamToAsyncIterator = fromStream;
/**
 * @param {string | Request} resource
 * @param {HTTPOptions} [options]
 */ HTTP.post = (resource, options)=>new HTTP(options).post(resource, options);
/**
 * @param {string | Request} resource
 * @param {HTTPOptions} [options]
 */ HTTP.get = (resource, options)=>new HTTP(options).get(resource, options);
/**
 * @param {string | Request} resource
 * @param {HTTPOptions} [options]
 */ HTTP.put = (resource, options)=>new HTTP(options).put(resource, options);
/**
 * @param {string | Request} resource
 * @param {HTTPOptions} [options]
 */ HTTP.delete = (resource, options)=>new HTTP(options).delete(resource, options);
/**
 * @param {string | Request} resource
 * @param {HTTPOptions} [options]
 */ HTTP.options = (resource, options)=>new HTTP(options).options(resource, options);
module.exports = HTTP;

},{"./http/fetch":"7YNwe","./http/error":"cQouZ","merge-options":"4XlQf","iso-url":"e9Sz0","native-abort-controller":"8rhv7","any-signal":"fXfV7"}],"7YNwe":[function(require,module,exports) {
"use strict";
const { TimeoutError , AbortError  } = require("./error");
const { Response , Request , Headers , default: fetch  } = require("../fetch");
/**
 * @typedef {import('../types').FetchOptions} FetchOptions
 * @typedef {import('../types').ProgressFn} ProgressFn
 */ /**
 * Fetch with progress
 *
 * @param {string | Request} url
 * @param {FetchOptions} [options]
 * @returns {Promise<ResponseWithURL>}
 */ const fetchWithProgress = (url, options = {})=>{
    const request = new XMLHttpRequest();
    request.open(options.method || "GET", url.toString(), true);
    const { timeout , headers  } = options;
    if (timeout && timeout > 0 && timeout < Infinity) request.timeout = timeout;
    if (options.overrideMimeType != null) request.overrideMimeType(options.overrideMimeType);
    if (headers) for (const [name, value] of new Headers(headers))request.setRequestHeader(name, value);
    if (options.signal) options.signal.onabort = ()=>request.abort();
    if (options.onUploadProgress) request.upload.onprogress = options.onUploadProgress;
    // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`
    // instances coming from JSDOM are not compatible with `Response` from
    // node-fetch (which is the setup we get when testing with jest because
    // it uses JSDOM which does not provide a global fetch
    // https://github.com/jsdom/jsdom/issues/1724)
    request.responseType = "arraybuffer";
    return new Promise((resolve, reject)=>{
        /**
     * @param {Event} event
     */ const handleEvent = (event)=>{
            switch(event.type){
                case "error":
                    resolve(Response.error());
                    break;
                case "load":
                    resolve(new ResponseWithURL(request.responseURL, request.response, {
                        status: request.status,
                        statusText: request.statusText,
                        headers: parseHeaders(request.getAllResponseHeaders())
                    }));
                    break;
                case "timeout":
                    reject(new TimeoutError());
                    break;
                case "abort":
                    reject(new AbortError());
                    break;
                default:
                    break;
            }
        };
        request.onerror = handleEvent;
        request.onload = handleEvent;
        request.ontimeout = handleEvent;
        request.onabort = handleEvent;
        // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this
        // file is a browser override so you won't get a node readable stream so ignore the error
        request.send(options.body);
    });
};
const fetchWithStreaming = fetch;
/**
 * @param {string | Request} url
 * @param {FetchOptions} options
 */ const fetchWith = (url, options = {})=>options.onUploadProgress != null ? fetchWithProgress(url, options) : fetchWithStreaming(url, options);
/**
 * Parse Headers from a XMLHttpRequest
 *
 * @param {string} input
 * @returns {Headers}
 */ const parseHeaders = (input)=>{
    const headers = new Headers();
    for (const line of input.trim().split(/[\r\n]+/)){
        const index = line.indexOf(": ");
        if (index > 0) headers.set(line.slice(0, index), line.slice(index + 1));
    }
    return headers;
};
class ResponseWithURL extends Response {
    /**
   * @param {string} url
   * @param {BodyInit} body
   * @param {ResponseInit} options
   */ constructor(url, body, options){
        super(body, options);
        Object.defineProperty(this, "url", {
            value: url
        });
    }
}
module.exports = {
    fetch: fetchWith,
    Request,
    Headers
};

},{"./error":"cQouZ","../fetch":"9fFew"}],"cQouZ":[function(require,module,exports) {
"use strict";
class TimeoutError extends Error {
    constructor(message = "Request timed out"){
        super(message);
        this.name = "TimeoutError";
    }
}
exports.TimeoutError = TimeoutError;
class AbortError extends Error {
    constructor(message = "The operation was aborted."){
        super(message);
        this.name = "AbortError";
    }
}
exports.AbortError = AbortError;
class HTTPError extends Error {
    /**
   * @param {Response} response
   */ constructor(response){
        super(response.statusText);
        this.name = "HTTPError";
        this.response = response;
    }
}
exports.HTTPError = HTTPError;

},{}],"9fFew":[function(require,module,exports) {
"use strict";
const { isElectronMain  } = require("./env");
if (isElectronMain) module.exports = require("electron-fetch");
else // use window.fetch if it is available, fall back to node-fetch if not
module.exports = require("native-fetch");

},{"./env":"5o7RW","electron-fetch":"bXKEI","native-fetch":"eHRxJ"}],"5o7RW":[function(require,module,exports) {
"use strict";
var process = require("process");
const isElectron = require("is-electron");
const IS_ENV_WITH_DOM = typeof window === "object" && typeof document === "object" && document.nodeType === 9;
// @ts-ignore
const IS_ELECTRON = isElectron();
const IS_BROWSER = IS_ENV_WITH_DOM && !IS_ELECTRON;
const IS_ELECTRON_MAIN = IS_ELECTRON && !IS_ENV_WITH_DOM;
const IS_ELECTRON_RENDERER = IS_ELECTRON && IS_ENV_WITH_DOM;
const IS_NODE = typeof process !== "undefined" && typeof process.release !== "undefined" && process.release.name === "node" && !IS_ELECTRON;
// @ts-ignore - we either ignore worker scope or dom scope
const IS_WEBWORKER = typeof importScripts === "function" && typeof self !== "undefined" && typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
const IS_TEST = typeof process !== "undefined" && typeof process.env !== "undefined" && false;
const IS_REACT_NATIVE = typeof navigator !== "undefined" && navigator.product === "ReactNative";
module.exports = {
    isTest: IS_TEST,
    isElectron: IS_ELECTRON,
    isElectronMain: IS_ELECTRON_MAIN,
    isElectronRenderer: IS_ELECTRON_RENDERER,
    isNode: IS_NODE,
    /**
   * Detects browser main thread  **NOT** web worker or service worker
   */ isBrowser: IS_BROWSER,
    isWebWorker: IS_WEBWORKER,
    isEnvWithDom: IS_ENV_WITH_DOM,
    isReactNative: IS_REACT_NATIVE
};

},{"process":"50f2S","is-electron":"bGmBa"}],"bGmBa":[function(require,module,exports) {
var process = require("process");
// https://github.com/electron/electron/issues/2288
function isElectron() {
    // Renderer process
    if (typeof window !== "undefined" && typeof window.process === "object" && window.process.type === "renderer") return true;
    // Main process
    if (typeof process !== "undefined" && typeof process.versions === "object" && !!process.versions.electron) return true;
    // Detect the user agent when the `nodeIntegration` option is set to false
    if (typeof navigator === "object" && typeof navigator.userAgent === "string" && navigator.userAgent.indexOf("Electron") >= 0) return true;
    return false;
}
module.exports = isElectron;

},{"process":"50f2S"}],"eHRxJ":[function(require,module,exports) {
"use strict";
if (globalThis.fetch && globalThis.Headers && globalThis.Request && globalThis.Response) module.exports = {
    default: globalThis.fetch,
    Headers: globalThis.Headers,
    Request: globalThis.Request,
    Response: globalThis.Response
};
else module.exports = {
    default: require("node-fetch").default,
    Headers: require("node-fetch").Headers,
    Request: require("node-fetch").Request,
    Response: require("node-fetch").Response
};

},{"node-fetch":"biJx9"}],"biJx9":[function(require,module,exports) {
"use strict";
// ref: https://github.com/tc39/proposal-global
var getGlobal = function() {
    // the only reliable means to get the global object is
    // `Function('return this')()`
    // However, this causes CSP violations in Chrome apps.
    if (typeof self !== "undefined") return self;
    if (typeof window !== "undefined") return window;
    if (typeof global !== "undefined") return global;
    throw new Error("unable to locate global object");
};
var global = getGlobal();
module.exports = exports = global.fetch;
// Needed for TypeScript and Webpack.
if (global.fetch) exports.default = global.fetch.bind(global);
exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;

},{}],"4XlQf":[function(require,module,exports) {
"use strict";
const isOptionObject = require("is-plain-obj");
const { hasOwnProperty  } = Object.prototype;
const { propertyIsEnumerable  } = Object;
const defineProperty = (object, name, value)=>Object.defineProperty(object, name, {
        value,
        writable: true,
        enumerable: true,
        configurable: true
    });
const globalThis = this;
const defaultMergeOptions = {
    concatArrays: false,
    ignoreUndefined: false
};
const getEnumerableOwnPropertyKeys = (value)=>{
    const keys = [];
    for(const key in value)if (hasOwnProperty.call(value, key)) keys.push(key);
    /* istanbul ignore else  */ if (Object.getOwnPropertySymbols) {
        const symbols = Object.getOwnPropertySymbols(value);
        for (const symbol of symbols)if (propertyIsEnumerable.call(value, symbol)) keys.push(symbol);
    }
    return keys;
};
function clone(value) {
    if (Array.isArray(value)) return cloneArray(value);
    if (isOptionObject(value)) return cloneOptionObject(value);
    return value;
}
function cloneArray(array) {
    const result = array.slice(0, 0);
    getEnumerableOwnPropertyKeys(array).forEach((key)=>{
        defineProperty(result, key, clone(array[key]));
    });
    return result;
}
function cloneOptionObject(object) {
    const result = Object.getPrototypeOf(object) === null ? Object.create(null) : {};
    getEnumerableOwnPropertyKeys(object).forEach((key)=>{
        defineProperty(result, key, clone(object[key]));
    });
    return result;
}
/**
 * @param {*} merged already cloned
 * @param {*} source something to merge
 * @param {string[]} keys keys to merge
 * @param {Object} config Config Object
 * @returns {*} cloned Object
 */ const mergeKeys = (merged, source, keys, config)=>{
    keys.forEach((key)=>{
        if (typeof source[key] === "undefined" && config.ignoreUndefined) return;
        // Do not recurse into prototype chain of merged
        if (key in merged && merged[key] !== Object.getPrototypeOf(merged)) defineProperty(merged, key, merge(merged[key], source[key], config));
        else defineProperty(merged, key, clone(source[key]));
    });
    return merged;
};
/**
 * @param {*} merged already cloned
 * @param {*} source something to merge
 * @param {Object} config Config Object
 * @returns {*} cloned Object
 *
 * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)
 */ const concatArrays = (merged, source, config)=>{
    let result = merged.slice(0, 0);
    let resultIndex = 0;
    [
        merged,
        source
    ].forEach((array)=>{
        const indices = [];
        // `result.concat(array)` with cloning
        for(let k = 0; k < array.length; k++){
            if (!hasOwnProperty.call(array, k)) continue;
            indices.push(String(k));
            if (array === merged) // Already cloned
            defineProperty(result, resultIndex++, array[k]);
            else defineProperty(result, resultIndex++, clone(array[k]));
        }
        // Merge non-index keys
        result = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter((key)=>!indices.includes(key)), config);
    });
    return result;
};
/**
 * @param {*} merged already cloned
 * @param {*} source something to merge
 * @param {Object} config Config Object
 * @returns {*} cloned Object
 */ function merge(merged, source, config) {
    if (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) return concatArrays(merged, source, config);
    if (!isOptionObject(source) || !isOptionObject(merged)) return clone(source);
    return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);
}
module.exports = function(...options) {
    const config = merge(clone(defaultMergeOptions), this !== globalThis && this || {}, defaultMergeOptions);
    let merged = {
        _: {}
    };
    for (const option of options){
        if (option === undefined) continue;
        if (!isOptionObject(option)) throw new TypeError("`" + option + "` is not an Option Object");
        merged = merge(merged, {
            _: option
        }, config);
    }
    return merged._;
};

},{"is-plain-obj":"9Wkhz"}],"9Wkhz":[function(require,module,exports) {
"use strict";
module.exports = (value)=>{
    if (Object.prototype.toString.call(value) !== "[object Object]") return false;
    const prototype = Object.getPrototypeOf(value);
    return prototype === null || prototype === Object.prototype;
};

},{}],"e9Sz0":[function(require,module,exports) {
"use strict";
const { URLWithLegacySupport , format , URLSearchParams , defaultBase  } = require("./src/url");
const relative = require("./src/relative");
module.exports = {
    URL: URLWithLegacySupport,
    URLSearchParams,
    format,
    relative,
    defaultBase
};

},{"./src/url":"jTIXj","./src/relative":"5yCit"}],"jTIXj":[function(require,module,exports) {
"use strict";
const isReactNative = typeof navigator !== "undefined" && navigator.product === "ReactNative";
function getDefaultBase() {
    if (isReactNative) return "http://localhost";
    // in some environments i.e. cloudflare workers location is not available
    if (!self.location) return "";
    return self.location.protocol + "//" + self.location.host;
}
const URL = self.URL;
const defaultBase = getDefaultBase();
class URLWithLegacySupport {
    constructor(url = "", base = defaultBase){
        this.super = new URL(url, base);
        this.path = this.pathname + this.search;
        this.auth = this.username && this.password ? this.username + ":" + this.password : null;
        this.query = this.search && this.search.startsWith("?") ? this.search.slice(1) : null;
    }
    get hash() {
        return this.super.hash;
    }
    get host() {
        return this.super.host;
    }
    get hostname() {
        return this.super.hostname;
    }
    get href() {
        return this.super.href;
    }
    get origin() {
        return this.super.origin;
    }
    get password() {
        return this.super.password;
    }
    get pathname() {
        return this.super.pathname;
    }
    get port() {
        return this.super.port;
    }
    get protocol() {
        return this.super.protocol;
    }
    get search() {
        return this.super.search;
    }
    get searchParams() {
        return this.super.searchParams;
    }
    get username() {
        return this.super.username;
    }
    set hash(hash) {
        this.super.hash = hash;
    }
    set host(host) {
        this.super.host = host;
    }
    set hostname(hostname) {
        this.super.hostname = hostname;
    }
    set href(href) {
        this.super.href = href;
    }
    set password(password) {
        this.super.password = password;
    }
    set pathname(pathname) {
        this.super.pathname = pathname;
    }
    set port(port) {
        this.super.port = port;
    }
    set protocol(protocol) {
        this.super.protocol = protocol;
    }
    set search(search) {
        this.super.search = search;
    }
    set username(username) {
        this.super.username = username;
    }
    /**
   * @param {any} o
   */ static createObjectURL(o) {
        return URL.createObjectURL(o);
    }
    /**
   * @param {string} o
   */ static revokeObjectURL(o) {
        URL.revokeObjectURL(o);
    }
    toJSON() {
        return this.super.toJSON();
    }
    toString() {
        return this.super.toString();
    }
    format() {
        return this.toString();
    }
}
/**
 * @param {string | import('url').UrlObject} obj
 */ function format(obj) {
    if (typeof obj === "string") {
        const url = new URL(obj);
        return url.toString();
    }
    if (!(obj instanceof URL)) {
        const userPass = // @ts-ignore its not supported in node but we normalise
        obj.username && obj.password ? `${obj.username}:${obj.password}@` : "";
        const auth = obj.auth ? obj.auth + "@" : "";
        const port = obj.port ? ":" + obj.port : "";
        const protocol = obj.protocol ? obj.protocol + "//" : "";
        const host = obj.host || "";
        const hostname = obj.hostname || "";
        const search = obj.search || (obj.query ? "?" + obj.query : "");
        const hash = obj.hash || "";
        const pathname = obj.pathname || "";
        // @ts-ignore - path is not supported in node but we normalise
        const path = obj.path || pathname + search;
        return `${protocol}${userPass || auth}${host || hostname + port}${path}${hash}`;
    }
}
module.exports = {
    URLWithLegacySupport,
    URLSearchParams: self.URLSearchParams,
    defaultBase,
    format
};

},{}],"5yCit":[function(require,module,exports) {
"use strict";
const { URLWithLegacySupport , format  } = require("./url");
/**
 * @param {string | undefined} url
 * @param {any} [location]
 * @param {any} [protocolMap]
 * @param {any} [defaultProtocol]
 */ module.exports = (url, location = {}, protocolMap = {}, defaultProtocol)=>{
    let protocol = location.protocol ? location.protocol.replace(":", "") : "http";
    // Check protocol map
    protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ":";
    let urlParsed;
    try {
        urlParsed = new URLWithLegacySupport(url);
    } catch (err) {
        urlParsed = {};
    }
    const base = Object.assign({}, location, {
        protocol: protocol || urlParsed.protocol,
        host: location.host || urlParsed.host
    });
    return new URLWithLegacySupport(url, format(base)).toString();
};

},{"./url":"jTIXj"}],"8rhv7":[function(require,module,exports) {
"use strict";
let impl;
if (globalThis.AbortController && globalThis.AbortSignal) impl = globalThis;
else impl = require("abort-controller");
module.exports.AbortSignal = impl.AbortSignal;
module.exports.AbortController = impl.AbortController;

},{"abort-controller":"1naup"}],"1naup":[function(require,module,exports) {
/*globals self, window */ "use strict";
/*eslint-disable @mysticatea/prettier */ const { AbortController , AbortSignal  } = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : /* otherwise */ undefined;
/*eslint-enable @mysticatea/prettier */ module.exports = AbortController;
module.exports.AbortSignal = AbortSignal;
module.exports.default = AbortController;

},{}],"fXfV7":[function(require,module,exports) {
const { AbortController  } = require("native-abort-controller");
/**
 * Takes an array of AbortSignals and returns a single signal.
 * If any signals are aborted, the returned signal will be aborted.
 * @param {Array<AbortSignal>} signals
 * @returns {AbortSignal}
 */ function anySignal(signals) {
    const controller = new AbortController();
    function onAbort() {
        controller.abort();
        for (const signal of signals){
            if (!signal || !signal.removeEventListener) continue;
            signal.removeEventListener("abort", onAbort);
        }
    }
    for (const signal1 of signals){
        if (!signal1 || !signal1.addEventListener) continue;
        if (signal1.aborted) {
            onAbort();
            break;
        }
        signal1.addEventListener("abort", onAbort);
    }
    return controller.signal;
}
module.exports = anySignal;
module.exports.anySignal = anySignal;

},{"native-abort-controller":"8rhv7"}],"cAMn2":[function(require,module,exports) {
"use strict";
/**
 * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec
 * @typedef {import('./types').LoadCodecFn} LoadCodecFn
 * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions
 */ /**
 * @type {LoadCodecFn}
 */ const LOAD_CODEC = (codeOrName)=>Promise.reject(new Error(`No codec found for "${codeOrName}"`));
class Multicodecs {
    /**
   * @param {object} options
   * @param {LoadCodecFn} [options.loadCodec]
   * @param {BlockCodec[]} options.codecs
   */ constructor(options){
        // Object with current list of active resolvers
        /** @type {Record<string, BlockCodec>}} */ this._codecsByName = {};
        // Object with current list of active resolvers
        /** @type {Record<number, BlockCodec>}} */ this._codecsByCode = {};
        this._loadCodec = options.loadCodec || LOAD_CODEC;
        // Enable all supplied codecs
        for (const codec of options.codecs)this.addCodec(codec);
    }
    /**
   * Add support for a block codec
   *
   * @param {BlockCodec} codec
   */ addCodec(codec) {
        if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) throw new Error(`Resolver already exists for codec "${codec.name}"`);
        this._codecsByName[codec.name] = codec;
        this._codecsByCode[codec.code] = codec;
    }
    /**
   * Remove support for a block codec
   *
   * @param {BlockCodec} codec
   */ removeCodec(codec) {
        delete this._codecsByName[codec.name];
        delete this._codecsByCode[codec.code];
    }
    /**
   * @param {number | string} code
   */ async getCodec(code) {
        const table = typeof code === "string" ? this._codecsByName : this._codecsByCode;
        if (table[code]) return table[code];
        // If not supported, attempt to dynamically load this codec
        const codec = await this._loadCodec(code);
        if (table[code] == null) this.addCodec(codec);
        return codec;
    }
    listCodecs() {
        return Object.values(this._codecsByName);
    }
}
module.exports = Multicodecs;

},{}],"5MLRq":[function(require,module,exports) {
"use strict";
/**
 * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher
 * @typedef {import('./types').LoadHasherFn} LoadHasherFn
 * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions
 */ /**
 * @type {LoadHasherFn}
 */ const LOAD_HASHER = (codeOrName)=>Promise.reject(new Error(`No hasher found for "${codeOrName}"`));
class Multihashes {
    /**
   * @param {object} options
   * @param {LoadHasherFn} [options.loadHasher]
   * @param {MultihashHasher[]} options.hashers
   */ constructor(options){
        // Object with current list of active hashers
        /** @type {Record<string, MultihashHasher>}} */ this._hashersByName = {};
        // Object with current list of active hashers
        /** @type {Record<number, MultihashHasher>}} */ this._hashersByCode = {};
        this._loadHasher = options.loadHasher || LOAD_HASHER;
        // Enable all supplied hashers
        for (const hasher of options.hashers)this.addHasher(hasher);
    }
    /**
   * Add support for a multibase hasher
   *
   * @param {MultihashHasher} hasher
   */ addHasher(hasher) {
        if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) throw new Error(`Resolver already exists for codec "${hasher.name}"`);
        this._hashersByName[hasher.name] = hasher;
        this._hashersByCode[hasher.code] = hasher;
    }
    /**
   * Remove support for a multibase hasher
   *
   * @param {MultihashHasher} hasher
   */ removeHasher(hasher) {
        delete this._hashersByName[hasher.name];
        delete this._hashersByCode[hasher.code];
    }
    /**
   * @param {number | string} code
   */ async getHasher(code) {
        const table = typeof code === "string" ? this._hashersByName : this._hashersByCode;
        if (table[code]) return table[code];
        // If not supported, attempt to dynamically load this hasher
        const hasher = await this._loadHasher(code);
        if (table[code] == null) this.addHasher(hasher);
        return hasher;
    }
    listHashers() {
        return Object.values(this._hashersByName);
    }
}
module.exports = Multihashes;

},{}],"1SCOZ":[function(require,module,exports) {
"use strict";
/**
 * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec
 * @typedef {import('./types').LoadBaseFn} LoadBaseFn
 * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions
 */ /**
 * @type {LoadBaseFn}
 */ const LOAD_BASE = (name)=>Promise.reject(new Error(`No base found for "${name}"`));
class Multibases {
    /**
   * @param {object} options
   * @param {LoadBaseFn} [options.loadBase]
   * @param {MultibaseCodec[]} options.bases
   */ constructor(options){
        // Object with current list of active resolvers
        /** @type {Record<string, MultibaseCodec>}} */ this._basesByName = {};
        // Object with current list of active resolvers
        /** @type {Record<string, MultibaseCodec>}} */ this._basesByPrefix = {};
        this._loadBase = options.loadBase || LOAD_BASE;
        // Enable all supplied codecs
        for (const base of options.bases)this.addBase(base);
    }
    /**
   * Add support for a multibase codec
   *
   * @param {MultibaseCodec} base
   */ addBase(base) {
        if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) throw new Error(`Codec already exists for codec "${base.name}"`);
        this._basesByName[base.name] = base;
        this._basesByPrefix[base.prefix] = base;
    }
    /**
   * Remove support for a multibase codec
   *
   * @param {MultibaseCodec} base
   */ removeBase(base) {
        delete this._basesByName[base.name];
        delete this._basesByPrefix[base.prefix];
    }
    /**
   * @param {string} nameOrPrefix
   */ async getBase(nameOrPrefix) {
        if (this._basesByName[nameOrPrefix]) return this._basesByName[nameOrPrefix];
        if (this._basesByPrefix[nameOrPrefix]) return this._basesByPrefix[nameOrPrefix];
        // If not supported, attempt to dynamically load this codec
        const base = await this._loadBase(nameOrPrefix);
        if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) this.addBase(base);
        return base;
    }
    listBases() {
        return Object.values(this._basesByName);
    }
}
module.exports = Multibases;

},{}],"c9ugn":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var cid = require("multiformats/cid");
var pbDecode = require("./pb-decode.js");
var pbEncode = require("./pb-encode.js");
var util = require("./util.js");
const name = "dag-pb";
const code = 112;
function encode(node) {
    util.validate(node);
    const pbn = {};
    if (node.Links) pbn.Links = node.Links.map((l)=>{
        const link = {};
        if (l.Hash) link.Hash = l.Hash.bytes;
        if (l.Name !== undefined) link.Name = l.Name;
        if (l.Tsize !== undefined) link.Tsize = l.Tsize;
        return link;
    });
    if (node.Data) pbn.Data = node.Data;
    return pbEncode.encodeNode(pbn);
}
function decode(bytes) {
    const pbn = pbDecode.decodeNode(bytes);
    const node = {};
    if (pbn.Data) node.Data = pbn.Data;
    if (pbn.Links) node.Links = pbn.Links.map((l)=>{
        const link = {};
        try {
            link.Hash = cid.CID.decode(l.Hash);
        } catch (e) {}
        if (!link.Hash) throw new Error("Invalid Hash field found in link, expected CID");
        if (l.Name !== undefined) link.Name = l.Name;
        if (l.Tsize !== undefined) link.Tsize = l.Tsize;
        return link;
    });
    return node;
}
exports.createLink = util.createLink;
exports.createNode = util.createNode;
exports.prepare = util.prepare;
exports.validate = util.validate;
exports.code = code;
exports.decode = decode;
exports.encode = encode;
exports.name = name;

},{"multiformats/cid":"4uoBU","./pb-decode.js":"9UzX5","./pb-encode.js":"x0sg5","./util.js":"2HxTA"}],"9UzX5":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const textDecoder = new TextDecoder();
function decodeVarint(bytes, offset) {
    let v = 0;
    for(let shift = 0;; shift += 7){
        if (shift >= 64) throw new Error("protobuf: varint overflow");
        if (offset >= bytes.length) throw new Error("protobuf: unexpected end of data");
        const b = bytes[offset++];
        v += shift < 28 ? (b & 127) << shift : (b & 127) * 2 ** shift;
        if (b < 128) break;
    }
    return [
        v,
        offset
    ];
}
function decodeBytes(bytes, offset) {
    let byteLen;
    [byteLen, offset] = decodeVarint(bytes, offset);
    const postOffset = offset + byteLen;
    if (byteLen < 0 || postOffset < 0) throw new Error("protobuf: invalid length");
    if (postOffset > bytes.length) throw new Error("protobuf: unexpected end of data");
    return [
        bytes.subarray(offset, postOffset),
        postOffset
    ];
}
function decodeKey(bytes, index) {
    let wire;
    [wire, index] = decodeVarint(bytes, index);
    return [
        wire & 7,
        wire >> 3,
        index
    ];
}
function decodeLink(bytes) {
    const link = {};
    const l = bytes.length;
    let index = 0;
    while(index < l){
        let wireType, fieldNum;
        [wireType, fieldNum, index] = decodeKey(bytes, index);
        if (fieldNum === 1) {
            if (link.Hash) throw new Error("protobuf: (PBLink) duplicate Hash section");
            if (wireType !== 2) throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Hash`);
            if (link.Name !== undefined) throw new Error("protobuf: (PBLink) invalid order, found Name before Hash");
            if (link.Tsize !== undefined) throw new Error("protobuf: (PBLink) invalid order, found Tsize before Hash");
            [link.Hash, index] = decodeBytes(bytes, index);
        } else if (fieldNum === 2) {
            if (link.Name !== undefined) throw new Error("protobuf: (PBLink) duplicate Name section");
            if (wireType !== 2) throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Name`);
            if (link.Tsize !== undefined) throw new Error("protobuf: (PBLink) invalid order, found Tsize before Name");
            let byts;
            [byts, index] = decodeBytes(bytes, index);
            link.Name = textDecoder.decode(byts);
        } else if (fieldNum === 3) {
            if (link.Tsize !== undefined) throw new Error("protobuf: (PBLink) duplicate Tsize section");
            if (wireType !== 0) throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Tsize`);
            [link.Tsize, index] = decodeVarint(bytes, index);
        } else throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${fieldNum}`);
    }
    if (index > l) throw new Error("protobuf: (PBLink) unexpected end of data");
    return link;
}
function decodeNode(bytes) {
    const l = bytes.length;
    let index = 0;
    let links;
    let linksBeforeData = false;
    let data;
    while(index < l){
        let wireType, fieldNum;
        [wireType, fieldNum, index] = decodeKey(bytes, index);
        if (wireType !== 2) throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${wireType}`);
        if (fieldNum === 1) {
            if (data) throw new Error("protobuf: (PBNode) duplicate Data section");
            [data, index] = decodeBytes(bytes, index);
            if (links) linksBeforeData = true;
        } else if (fieldNum === 2) {
            if (linksBeforeData) throw new Error("protobuf: (PBNode) duplicate Links section");
            else if (!links) links = [];
            let byts;
            [byts, index] = decodeBytes(bytes, index);
            links.push(decodeLink(byts));
        } else throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${fieldNum}`);
    }
    if (index > l) throw new Error("protobuf: (PBNode) unexpected end of data");
    const node = {};
    if (data) node.Data = data;
    node.Links = links || [];
    return node;
}
exports.decodeNode = decodeNode;

},{}],"x0sg5":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const textEncoder = new TextEncoder();
const maxInt32 = 2 ** 32;
const maxUInt32 = 2 ** 31;
function encodeLink(link, bytes) {
    let i = bytes.length;
    if (typeof link.Tsize === "number") {
        if (link.Tsize < 0) throw new Error("Tsize cannot be negative");
        if (!Number.isSafeInteger(link.Tsize)) throw new Error("Tsize too large for encoding");
        i = encodeVarint(bytes, i, link.Tsize) - 1;
        bytes[i] = 24;
    }
    if (typeof link.Name === "string") {
        const nameBytes = textEncoder.encode(link.Name);
        i -= nameBytes.length;
        bytes.set(nameBytes, i);
        i = encodeVarint(bytes, i, nameBytes.length) - 1;
        bytes[i] = 18;
    }
    if (link.Hash) {
        i -= link.Hash.length;
        bytes.set(link.Hash, i);
        i = encodeVarint(bytes, i, link.Hash.length) - 1;
        bytes[i] = 10;
    }
    return bytes.length - i;
}
function encodeNode(node) {
    const size = sizeNode(node);
    const bytes = new Uint8Array(size);
    let i = size;
    if (node.Data) {
        i -= node.Data.length;
        bytes.set(node.Data, i);
        i = encodeVarint(bytes, i, node.Data.length) - 1;
        bytes[i] = 10;
    }
    if (node.Links) for(let index = node.Links.length - 1; index >= 0; index--){
        const size = encodeLink(node.Links[index], bytes.subarray(0, i));
        i -= size;
        i = encodeVarint(bytes, i, size) - 1;
        bytes[i] = 18;
    }
    return bytes;
}
function sizeLink(link) {
    let n = 0;
    if (link.Hash) {
        const l = link.Hash.length;
        n += 1 + l + sov(l);
    }
    if (typeof link.Name === "string") {
        const l = textEncoder.encode(link.Name).length;
        n += 1 + l + sov(l);
    }
    if (typeof link.Tsize === "number") n += 1 + sov(link.Tsize);
    return n;
}
function sizeNode(node) {
    let n = 0;
    if (node.Data) {
        const l = node.Data.length;
        n += 1 + l + sov(l);
    }
    if (node.Links) for (const link of node.Links){
        const l = sizeLink(link);
        n += 1 + l + sov(l);
    }
    return n;
}
function encodeVarint(bytes, offset, v) {
    offset -= sov(v);
    const base = offset;
    while(v >= maxUInt32){
        bytes[offset++] = v & 127 | 128;
        v /= 128;
    }
    while(v >= 128){
        bytes[offset++] = v & 127 | 128;
        v >>>= 7;
    }
    bytes[offset] = v;
    return base;
}
function sov(x) {
    if (x % 2 === 0) x++;
    return Math.floor((len64(x) + 6) / 7);
}
function len64(x) {
    let n = 0;
    if (x >= maxInt32) {
        x = Math.floor(x / maxInt32);
        n = 32;
    }
    if (x >= 65536) {
        x >>>= 16;
        n += 16;
    }
    if (x >= 256) {
        x >>>= 8;
        n += 8;
    }
    return n + len8tab[x];
}
const len8tab = [
    0,
    1,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8
];
exports.encodeNode = encodeNode;

},{}],"2HxTA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var cid = require("multiformats/cid");
const pbNodeProperties = [
    "Data",
    "Links"
];
const pbLinkProperties = [
    "Hash",
    "Name",
    "Tsize"
];
const textEncoder = new TextEncoder();
function linkComparator(a, b) {
    if (a === b) return 0;
    const abuf = a.Name ? textEncoder.encode(a.Name) : [];
    const bbuf = b.Name ? textEncoder.encode(b.Name) : [];
    let x = abuf.length;
    let y = bbuf.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (abuf[i] !== bbuf[i]) {
        x = abuf[i];
        y = bbuf[i];
        break;
    }
    return x < y ? -1 : y < x ? 1 : 0;
}
function hasOnlyProperties(node, properties) {
    return !Object.keys(node).some((p)=>!properties.includes(p));
}
function asLink(link) {
    if (typeof link.asCID === "object") {
        const Hash = cid.CID.asCID(link);
        if (!Hash) throw new TypeError("Invalid DAG-PB form");
        return {
            Hash
        };
    }
    if (typeof link !== "object" || Array.isArray(link)) throw new TypeError("Invalid DAG-PB form");
    const pbl = {};
    if (link.Hash) {
        let cid$1 = cid.CID.asCID(link.Hash);
        try {
            if (!cid$1) {
                if (typeof link.Hash === "string") cid$1 = cid.CID.parse(link.Hash);
                else if (link.Hash instanceof Uint8Array) cid$1 = cid.CID.decode(link.Hash);
            }
        } catch (e) {
            throw new TypeError(`Invalid DAG-PB form: ${e.message}`);
        }
        if (cid$1) pbl.Hash = cid$1;
    }
    if (!pbl.Hash) throw new TypeError("Invalid DAG-PB form");
    if (typeof link.Name === "string") pbl.Name = link.Name;
    if (typeof link.Tsize === "number") pbl.Tsize = link.Tsize;
    return pbl;
}
function prepare(node) {
    if (node instanceof Uint8Array || typeof node === "string") node = {
        Data: node
    };
    if (typeof node !== "object" || Array.isArray(node)) throw new TypeError("Invalid DAG-PB form");
    const pbn = {};
    if (node.Data !== undefined) {
        if (typeof node.Data === "string") pbn.Data = textEncoder.encode(node.Data);
        else if (node.Data instanceof Uint8Array) pbn.Data = node.Data;
        else throw new TypeError("Invalid DAG-PB form");
    }
    if (node.Links !== undefined) {
        if (Array.isArray(node.Links)) {
            pbn.Links = node.Links.map(asLink);
            pbn.Links.sort(linkComparator);
        } else throw new TypeError("Invalid DAG-PB form");
    } else pbn.Links = [];
    return pbn;
}
function validate(node) {
    if (!node || typeof node !== "object" || Array.isArray(node)) throw new TypeError("Invalid DAG-PB form");
    if (!hasOnlyProperties(node, pbNodeProperties)) throw new TypeError("Invalid DAG-PB form (extraneous properties)");
    if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) throw new TypeError("Invalid DAG-PB form (Data must be a Uint8Array)");
    if (!Array.isArray(node.Links)) throw new TypeError("Invalid DAG-PB form (Links must be an array)");
    for(let i = 0; i < node.Links.length; i++){
        const link = node.Links[i];
        if (!link || typeof link !== "object" || Array.isArray(link)) throw new TypeError("Invalid DAG-PB form (bad link object)");
        if (!hasOnlyProperties(link, pbLinkProperties)) throw new TypeError("Invalid DAG-PB form (extraneous properties on link object)");
        if (!link.Hash) throw new TypeError("Invalid DAG-PB form (link must have a Hash)");
        if (link.Hash.asCID !== link.Hash) throw new TypeError("Invalid DAG-PB form (link Hash must be a CID)");
        if (link.Name !== undefined && typeof link.Name !== "string") throw new TypeError("Invalid DAG-PB form (link Name must be a string)");
        if (link.Tsize !== undefined && (typeof link.Tsize !== "number" || link.Tsize % 1 !== 0)) throw new TypeError("Invalid DAG-PB form (link Tsize must be an integer)");
        if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) throw new TypeError("Invalid DAG-PB form (links must be sorted by Name bytes)");
    }
}
function createNode(data, links = []) {
    return prepare({
        Data: data,
        Links: links
    });
}
function createLink(name, size, cid1) {
    return asLink({
        Hash: cid1,
        Name: name,
        Tsize: size
    });
}
exports.createLink = createLink;
exports.createNode = createNode;
exports.prepare = prepare;
exports.validate = validate;

},{"multiformats/cid":"4uoBU"}],"aY7XS":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var cborg = require("cborg");
var cid = require("multiformats/cid");
function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) Object.keys(e).forEach(function(k) {
        if (k !== "default") {
            var d = Object.getOwnPropertyDescriptor(e, k);
            Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                    return e[k];
                }
            });
        }
    });
    n["default"] = e;
    return Object.freeze(n);
}
var cborg__namespace = /*#__PURE__*/ _interopNamespace(cborg);
const CID_CBOR_TAG = 42;
function cidEncoder(obj) {
    if (obj.asCID !== obj) return null;
    const cid$1 = cid.CID.asCID(obj);
    if (!cid$1) return null;
    const bytes = new Uint8Array(cid$1.bytes.byteLength + 1);
    bytes.set(cid$1.bytes, 1);
    return [
        new cborg__namespace.Token(cborg__namespace.Type.tag, CID_CBOR_TAG),
        new cborg__namespace.Token(cborg__namespace.Type.bytes, bytes)
    ];
}
function undefinedEncoder() {
    throw new Error("`undefined` is not supported by the IPLD Data Model and cannot be encoded");
}
function numberEncoder(num) {
    if (Number.isNaN(num)) throw new Error("`NaN` is not supported by the IPLD Data Model and cannot be encoded");
    if (num === Infinity || num === -Infinity) throw new Error("`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded");
    return null;
}
const encodeOptions = {
    float64: true,
    typeEncoders: {
        Object: cidEncoder,
        undefined: undefinedEncoder,
        number: numberEncoder
    }
};
function cidDecoder(bytes) {
    if (bytes[0] !== 0) throw new Error("Invalid CID for CBOR tag 42; expected leading 0x00");
    return cid.CID.decode(bytes.subarray(1));
}
const decodeOptions = {
    allowIndefinite: false,
    allowUndefined: false,
    allowNaN: false,
    allowInfinity: false,
    allowBigInt: true,
    strict: true,
    useMaps: false,
    tags: []
};
decodeOptions.tags[CID_CBOR_TAG] = cidDecoder;
const name = "dag-cbor";
const code = 113;
const encode = (node)=>cborg__namespace.encode(node, encodeOptions);
const decode = (data)=>cborg__namespace.decode(data, decodeOptions);
exports.code = code;
exports.decode = decode;
exports.encode = encode;
exports.name = name;

},{"cborg":"4nFLw","multiformats/cid":"4uoBU"}],"4nFLw":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var encode = require("./lib/encode.js");
var decode = require("./lib/decode.js");
var token = require("./lib/token.js");
exports.encode = encode.encode;
exports.decode = decode.decode;
exports.Token = token.Token;
exports.Type = token.Type;

},{"./lib/encode.js":"cDKWO","./lib/decode.js":"iQNJQ","./lib/token.js":"hzdrM"}],"cDKWO":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var is = require("./is.js");
var token = require("./token.js");
var bl = require("./bl.js");
var common = require("./common.js");
var jump = require("./jump.js");
var byteUtils = require("./byte-utils.js");
var _0uint = require("./0uint.js");
var _1negint = require("./1negint.js");
var _2bytes = require("./2bytes.js");
var _3string = require("./3string.js");
var _4array = require("./4array.js");
var _5map = require("./5map.js");
var _6tag = require("./6tag.js");
var _7float = require("./7float.js");
const defaultEncodeOptions = {
    float64: false,
    mapSorter,
    quickEncodeToken: jump.quickEncodeToken
};
function makeCborEncoders() {
    const encoders = [];
    encoders[token.Type.uint.major] = _0uint.encodeUint;
    encoders[token.Type.negint.major] = _1negint.encodeNegint;
    encoders[token.Type.bytes.major] = _2bytes.encodeBytes;
    encoders[token.Type.string.major] = _3string.encodeString;
    encoders[token.Type.array.major] = _4array.encodeArray;
    encoders[token.Type.map.major] = _5map.encodeMap;
    encoders[token.Type.tag.major] = _6tag.encodeTag;
    encoders[token.Type.float.major] = _7float.encodeFloat;
    return encoders;
}
const cborEncoders = makeCborEncoders();
const buf = new bl.Bl();
class Ref {
    constructor(obj, parent){
        this.obj = obj;
        this.parent = parent;
    }
    includes(obj) {
        let p = this;
        do {
            if (p.obj === obj) return true;
        }while (p = p.parent);
        return false;
    }
    static createCheck(stack, obj) {
        if (stack && stack.includes(obj)) throw new Error(`${common.encodeErrPrefix} object contains circular references`);
        return new Ref(obj, stack);
    }
}
const simpleTokens = {
    null: new token.Token(token.Type.null, null),
    undefined: new token.Token(token.Type.undefined, undefined),
    true: new token.Token(token.Type.true, true),
    false: new token.Token(token.Type.false, false),
    emptyArray: new token.Token(token.Type.array, 0),
    emptyMap: new token.Token(token.Type.map, 0)
};
const typeEncoders = {
    number (obj, _typ, _options, _refStack) {
        if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) return new token.Token(token.Type.float, obj);
        else if (obj >= 0) return new token.Token(token.Type.uint, obj);
        else return new token.Token(token.Type.negint, obj);
    },
    bigint (obj, _typ, _options, _refStack) {
        if (obj >= BigInt(0)) return new token.Token(token.Type.uint, obj);
        else return new token.Token(token.Type.negint, obj);
    },
    Uint8Array (obj, _typ, _options, _refStack) {
        return new token.Token(token.Type.bytes, obj);
    },
    string (obj, _typ, _options, _refStack) {
        return new token.Token(token.Type.string, obj);
    },
    boolean (obj, _typ, _options, _refStack) {
        return obj ? simpleTokens.true : simpleTokens.false;
    },
    null (_obj, _typ, _options, _refStack) {
        return simpleTokens.null;
    },
    undefined (_obj, _typ, _options, _refStack) {
        return simpleTokens.undefined;
    },
    ArrayBuffer (obj, _typ, _options, _refStack) {
        return new token.Token(token.Type.bytes, new Uint8Array(obj));
    },
    DataView (obj, _typ, _options, _refStack) {
        return new token.Token(token.Type.bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));
    },
    Array (obj, _typ, options, refStack) {
        if (!obj.length) {
            if (options.addBreakTokens === true) return [
                simpleTokens.emptyArray,
                new token.Token(token.Type.break)
            ];
            return simpleTokens.emptyArray;
        }
        refStack = Ref.createCheck(refStack, obj);
        const entries = [];
        let i = 0;
        for (const e of obj)entries[i++] = objectToTokens(e, options, refStack);
        if (options.addBreakTokens) return [
            new token.Token(token.Type.array, obj.length),
            entries,
            new token.Token(token.Type.break)
        ];
        return [
            new token.Token(token.Type.array, obj.length),
            entries
        ];
    },
    Object (obj, typ1, options, refStack) {
        const isMap = typ1 !== "Object";
        const keys = isMap ? obj.keys() : Object.keys(obj);
        const length = isMap ? obj.size : keys.length;
        if (!length) {
            if (options.addBreakTokens === true) return [
                simpleTokens.emptyMap,
                new token.Token(token.Type.break)
            ];
            return simpleTokens.emptyMap;
        }
        refStack = Ref.createCheck(refStack, obj);
        const entries = [];
        let i = 0;
        for (const key of keys)entries[i++] = [
            objectToTokens(key, options, refStack),
            objectToTokens(isMap ? obj.get(key) : obj[key], options, refStack)
        ];
        sortMapEntries(entries, options);
        if (options.addBreakTokens) return [
            new token.Token(token.Type.map, length),
            entries,
            new token.Token(token.Type.break)
        ];
        return [
            new token.Token(token.Type.map, length),
            entries
        ];
    }
};
typeEncoders.Map = typeEncoders.Object;
typeEncoders.Buffer = typeEncoders.Uint8Array;
for (const typ of "Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64".split(" "))typeEncoders[`${typ}Array`] = typeEncoders.DataView;
function objectToTokens(obj, options = {}, refStack) {
    const typ2 = is.is(obj);
    const customTypeEncoder = options && options.typeEncoders && options.typeEncoders[typ2] || typeEncoders[typ2];
    if (typeof customTypeEncoder === "function") {
        const tokens = customTypeEncoder(obj, typ2, options, refStack);
        if (tokens != null) return tokens;
    }
    const typeEncoder = typeEncoders[typ2];
    if (!typeEncoder) throw new Error(`${common.encodeErrPrefix} unsupported type: ${typ2}`);
    return typeEncoder(obj, typ2, options, refStack);
}
function sortMapEntries(entries, options) {
    if (options.mapSorter) entries.sort(options.mapSorter);
}
function mapSorter(e1, e2) {
    const keyToken1 = Array.isArray(e1[0]) ? e1[0][0] : e1[0];
    const keyToken2 = Array.isArray(e2[0]) ? e2[0][0] : e2[0];
    if (keyToken1.type !== keyToken2.type) return keyToken1.type.compare(keyToken2.type);
    const major = keyToken1.type.major;
    const tcmp = cborEncoders[major].compareTokens(keyToken1, keyToken2);
    if (tcmp === 0) console.warn("WARNING: complex key types used, CBOR key sorting guarantees are gone");
    return tcmp;
}
function tokensToEncoded(buf1, tokens, encoders, options) {
    if (Array.isArray(tokens)) for (const token1 of tokens)tokensToEncoded(buf1, token1, encoders, options);
    else encoders[tokens.type.major](buf1, tokens, options);
}
function encodeCustom(data, encoders, options) {
    const tokens = objectToTokens(data, options);
    if (!Array.isArray(tokens) && options.quickEncodeToken) {
        const quickBytes = options.quickEncodeToken(tokens);
        if (quickBytes) return quickBytes;
        const encoder = encoders[tokens.type.major];
        if (encoder.encodedSize) {
            const size = encoder.encodedSize(tokens, options);
            const buf2 = new bl.Bl(size);
            encoder(buf2, tokens, options);
            if (buf2.chunks.length !== 1) throw new Error(`Unexpected error: pre-calculated length for ${tokens} was wrong`);
            return byteUtils.asU8A(buf2.chunks[0]);
        }
    }
    buf.reset();
    tokensToEncoded(buf, tokens, encoders, options);
    return buf.toBytes(true);
}
function encode(data, options) {
    options = Object.assign({}, defaultEncodeOptions, options);
    return encodeCustom(data, cborEncoders, options);
}
exports.Ref = Ref;
exports.encode = encode;
exports.encodeCustom = encodeCustom;
exports.makeCborEncoders = makeCborEncoders;
exports.objectToTokens = objectToTokens;

},{"./is.js":"8Ht5V","./token.js":"hzdrM","./bl.js":"cdIGN","./common.js":"f327c","./jump.js":"buBgp","./byte-utils.js":"109Ms","./0uint.js":"iCSRX","./1negint.js":"1ywF4","./2bytes.js":"9n2FT","./3string.js":"g24Ir","./4array.js":"6iaEl","./5map.js":"ltm09","./6tag.js":"94X8w","./7float.js":"7EK5E"}],"8Ht5V":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const typeofs = [
    "string",
    "number",
    "bigint",
    "symbol"
];
const objectTypeNames = [
    "Function",
    "Generator",
    "AsyncGenerator",
    "GeneratorFunction",
    "AsyncGeneratorFunction",
    "AsyncFunction",
    "Observable",
    "Array",
    "Buffer",
    "Object",
    "RegExp",
    "Date",
    "Error",
    "Map",
    "Set",
    "WeakMap",
    "WeakSet",
    "ArrayBuffer",
    "SharedArrayBuffer",
    "DataView",
    "Promise",
    "URL",
    "HTMLElement",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Uint16Array",
    "Int32Array",
    "Uint32Array",
    "Float32Array",
    "Float64Array",
    "BigInt64Array",
    "BigUint64Array"
];
function is(value) {
    if (value === null) return "null";
    if (value === undefined) return "undefined";
    if (value === true || value === false) return "boolean";
    const typeOf = typeof value;
    if (typeofs.includes(typeOf)) return typeOf;
    if (typeOf === "function") return "Function";
    if (Array.isArray(value)) return "Array";
    if (isBuffer(value)) return "Buffer";
    const objectType = getObjectType(value);
    if (objectType) return objectType;
    return "Object";
}
function isBuffer(value) {
    return value && value.constructor && value.constructor.isBuffer && value.constructor.isBuffer.call(null, value);
}
function getObjectType(value) {
    const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);
    if (objectTypeNames.includes(objectTypeName)) return objectTypeName;
    return undefined;
}
exports.is = is;

},{}],"hzdrM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
class Type {
    constructor(major, name, terminal){
        this.major = major;
        this.majorEncoded = major << 5;
        this.name = name;
        this.terminal = terminal;
    }
    toString() {
        return `Type[${this.major}].${this.name}`;
    }
    compare(typ) {
        return this.major < typ.major ? -1 : this.major > typ.major ? 1 : 0;
    }
}
Type.uint = new Type(0, "uint", true);
Type.negint = new Type(1, "negint", true);
Type.bytes = new Type(2, "bytes", true);
Type.string = new Type(3, "string", true);
Type.array = new Type(4, "array", false);
Type.map = new Type(5, "map", false);
Type.tag = new Type(6, "tag", false);
Type.float = new Type(7, "float", true);
Type.false = new Type(7, "false", true);
Type.true = new Type(7, "true", true);
Type.null = new Type(7, "null", true);
Type.undefined = new Type(7, "undefined", true);
Type.break = new Type(7, "break", true);
class Token {
    constructor(type, value, encodedLength){
        this.type = type;
        this.value = value;
        this.encodedLength = encodedLength;
        this.encodedBytes = undefined;
        this.byteValue = undefined;
    }
    toString() {
        return `Token[${this.type}].${this.value}`;
    }
}
exports.Token = Token;
exports.Type = Type;

},{}],"cdIGN":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var byteUtils = require("./byte-utils.js");
const defaultChunkSize = 256;
class Bl {
    constructor(chunkSize = defaultChunkSize){
        this.chunkSize = chunkSize;
        this.cursor = 0;
        this.maxCursor = -1;
        this.chunks = [];
        this._initReuseChunk = null;
    }
    reset() {
        this.cursor = 0;
        this.maxCursor = -1;
        if (this.chunks.length) this.chunks = [];
        if (this._initReuseChunk !== null) {
            this.chunks.push(this._initReuseChunk);
            this.maxCursor = this._initReuseChunk.length - 1;
        }
    }
    push(bytes) {
        let topChunk = this.chunks[this.chunks.length - 1];
        const newMax = this.cursor + bytes.length;
        if (newMax <= this.maxCursor + 1) {
            const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
            topChunk.set(bytes, chunkPos);
        } else {
            if (topChunk) {
                const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
                if (chunkPos < topChunk.length) {
                    this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);
                    this.maxCursor = this.cursor - 1;
                }
            }
            if (bytes.length < 64 && bytes.length < this.chunkSize) {
                topChunk = byteUtils.alloc(this.chunkSize);
                this.chunks.push(topChunk);
                this.maxCursor += topChunk.length;
                if (this._initReuseChunk === null) this._initReuseChunk = topChunk;
                topChunk.set(bytes, 0);
            } else {
                this.chunks.push(bytes);
                this.maxCursor += bytes.length;
            }
        }
        this.cursor += bytes.length;
    }
    toBytes(reset = false) {
        let byts;
        if (this.chunks.length === 1) {
            const chunk = this.chunks[0];
            if (reset && this.cursor > chunk.length / 2) {
                byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);
                this._initReuseChunk = null;
                this.chunks = [];
            } else byts = byteUtils.slice(chunk, 0, this.cursor);
        } else byts = byteUtils.concat(this.chunks, this.cursor);
        if (reset) this.reset();
        return byts;
    }
}
exports.Bl = Bl;

},{"./byte-utils.js":"109Ms"}],"109Ms":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const useBuffer = globalThis.process && !globalThis.process.browser && globalThis.Buffer && typeof globalThis.Buffer.isBuffer === "function";
const textDecoder = new TextDecoder();
const textEncoder = new TextEncoder();
function isBuffer(buf) {
    return useBuffer && globalThis.Buffer.isBuffer(buf);
}
function asU8A(buf) {
    if (!(buf instanceof Uint8Array)) return Uint8Array.from(buf);
    return isBuffer(buf) ? new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength) : buf;
}
const toString = useBuffer ? (bytes, start, end)=>{
    return end - start > 64 ? globalThis.Buffer.from(bytes.subarray(start, end)).toString("utf8") : utf8Slice(bytes, start, end);
} : (bytes, start, end)=>{
    return end - start > 64 ? textDecoder.decode(bytes.subarray(start, end)) : utf8Slice(bytes, start, end);
};
const fromString = useBuffer ? (string)=>{
    return string.length > 64 ? globalThis.Buffer.from(string) : utf8ToBytes(string);
} : (string)=>{
    return string.length > 64 ? textEncoder.encode(string) : utf8ToBytes(string);
};
const fromArray = (arr)=>{
    return Uint8Array.from(arr);
};
const slice = useBuffer ? (bytes, start, end)=>{
    if (isBuffer(bytes)) return new Uint8Array(bytes.subarray(start, end));
    return bytes.slice(start, end);
} : (bytes, start, end)=>{
    return bytes.slice(start, end);
};
const concat = useBuffer ? (chunks, length)=>{
    chunks = chunks.map((c)=>c instanceof Uint8Array ? c : globalThis.Buffer.from(c));
    return asU8A(globalThis.Buffer.concat(chunks, length));
} : (chunks, length)=>{
    const out = new Uint8Array(length);
    let off = 0;
    for (let b of chunks){
        if (off + b.length > out.length) b = b.subarray(0, out.length - off);
        out.set(b, off);
        off += b.length;
    }
    return out;
};
const alloc = useBuffer ? (size)=>{
    return globalThis.Buffer.allocUnsafe(size);
} : (size)=>{
    return new Uint8Array(size);
};
const toHex = useBuffer ? (d)=>{
    if (typeof d === "string") return d;
    return globalThis.Buffer.from(toBytes(d)).toString("hex");
} : (d)=>{
    if (typeof d === "string") return d;
    return Array.prototype.reduce.call(toBytes(d), (p, c)=>`${p}${c.toString(16).padStart(2, "0")}`, "");
};
const fromHex = useBuffer ? (hex)=>{
    if (hex instanceof Uint8Array) return hex;
    return globalThis.Buffer.from(hex, "hex");
} : (hex)=>{
    if (hex instanceof Uint8Array) return hex;
    if (!hex.length) return new Uint8Array(0);
    return new Uint8Array(hex.split("").map((c, i, d)=>i % 2 === 0 ? `0x${c}${d[i + 1]}` : "").filter(Boolean).map((e)=>parseInt(e, 16)));
};
function toBytes(obj) {
    if (obj instanceof Uint8Array && obj.constructor.name === "Uint8Array") return obj;
    if (obj instanceof ArrayBuffer) return new Uint8Array(obj);
    if (ArrayBuffer.isView(obj)) return new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength);
    throw new Error("Unknown type, must be binary type");
}
function compare(b1, b2) {
    if (isBuffer(b1) && isBuffer(b2)) return b1.compare(b2);
    for(let i = 0; i < b1.length; i++){
        if (b1[i] === b2[i]) continue;
        return b1[i] < b2[i] ? -1 : 1;
    }
    return 0;
}
function utf8ToBytes(string, units = Infinity) {
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
                if (codePoint > 56319) {
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i + 1 === length) {
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                leadSurrogate = codePoint;
                continue;
            }
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function utf8Slice(buf, offset, end) {
    const res = [];
    while(offset < end){
        const firstByte = buf[offset];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (offset + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[offset + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[offset + 1];
                    thirdByte = buf[offset + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[offset + 1];
                    thirdByte = buf[offset + 2];
                    fourthByte = buf[offset + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        offset += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
const MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints);
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
exports.alloc = alloc;
exports.asU8A = asU8A;
exports.compare = compare;
exports.concat = concat;
exports.decodeCodePointsArray = decodeCodePointsArray;
exports.fromArray = fromArray;
exports.fromHex = fromHex;
exports.fromString = fromString;
exports.slice = slice;
exports.toHex = toHex;
exports.toString = toString;
exports.useBuffer = useBuffer;

},{}],"f327c":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const decodeErrPrefix = "CBOR decode error:";
const encodeErrPrefix = "CBOR encode error:";
const uintMinorPrefixBytes = [];
uintMinorPrefixBytes[23] = 1;
uintMinorPrefixBytes[24] = 2;
uintMinorPrefixBytes[25] = 3;
uintMinorPrefixBytes[26] = 5;
uintMinorPrefixBytes[27] = 9;
function assertEnoughData(data, pos, need) {
    if (data.length - pos < need) throw new Error(`${decodeErrPrefix} not enough data for type`);
}
exports.assertEnoughData = assertEnoughData;
exports.decodeErrPrefix = decodeErrPrefix;
exports.encodeErrPrefix = encodeErrPrefix;
exports.uintMinorPrefixBytes = uintMinorPrefixBytes;

},{}],"buBgp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var token = require("./token.js");
var _0uint = require("./0uint.js");
var _1negint = require("./1negint.js");
var _2bytes = require("./2bytes.js");
var _3string = require("./3string.js");
var _4array = require("./4array.js");
var _5map = require("./5map.js");
var _6tag = require("./6tag.js");
var _7float = require("./7float.js");
var common = require("./common.js");
var byteUtils = require("./byte-utils.js");
function invalidMinor(data, pos, minor) {
    throw new Error(`${common.decodeErrPrefix} encountered invalid minor (${minor}) for major ${data[pos] >>> 5}`);
}
function errorer(msg) {
    return ()=>{
        throw new Error(`${common.decodeErrPrefix} ${msg}`);
    };
}
const jump = [];
for(let i = 0; i <= 23; i++)jump[i] = invalidMinor;
jump[24] = _0uint.decodeUint8;
jump[25] = _0uint.decodeUint16;
jump[26] = _0uint.decodeUint32;
jump[27] = _0uint.decodeUint64;
jump[28] = invalidMinor;
jump[29] = invalidMinor;
jump[30] = invalidMinor;
jump[31] = invalidMinor;
for(let i1 = 32; i1 <= 55; i1++)jump[i1] = invalidMinor;
jump[56] = _1negint.decodeNegint8;
jump[57] = _1negint.decodeNegint16;
jump[58] = _1negint.decodeNegint32;
jump[59] = _1negint.decodeNegint64;
jump[60] = invalidMinor;
jump[61] = invalidMinor;
jump[62] = invalidMinor;
jump[63] = invalidMinor;
for(let i2 = 64; i2 <= 87; i2++)jump[i2] = _2bytes.decodeBytesCompact;
jump[88] = _2bytes.decodeBytes8;
jump[89] = _2bytes.decodeBytes16;
jump[90] = _2bytes.decodeBytes32;
jump[91] = _2bytes.decodeBytes64;
jump[92] = invalidMinor;
jump[93] = invalidMinor;
jump[94] = invalidMinor;
jump[95] = errorer("indefinite length bytes/strings are not supported");
for(let i3 = 96; i3 <= 119; i3++)jump[i3] = _3string.decodeStringCompact;
jump[120] = _3string.decodeString8;
jump[121] = _3string.decodeString16;
jump[122] = _3string.decodeString32;
jump[123] = _3string.decodeString64;
jump[124] = invalidMinor;
jump[125] = invalidMinor;
jump[126] = invalidMinor;
jump[127] = errorer("indefinite length bytes/strings are not supported");
for(let i4 = 128; i4 <= 151; i4++)jump[i4] = _4array.decodeArrayCompact;
jump[152] = _4array.decodeArray8;
jump[153] = _4array.decodeArray16;
jump[154] = _4array.decodeArray32;
jump[155] = _4array.decodeArray64;
jump[156] = invalidMinor;
jump[157] = invalidMinor;
jump[158] = invalidMinor;
jump[159] = _4array.decodeArrayIndefinite;
for(let i5 = 160; i5 <= 183; i5++)jump[i5] = _5map.decodeMapCompact;
jump[184] = _5map.decodeMap8;
jump[185] = _5map.decodeMap16;
jump[186] = _5map.decodeMap32;
jump[187] = _5map.decodeMap64;
jump[188] = invalidMinor;
jump[189] = invalidMinor;
jump[190] = invalidMinor;
jump[191] = _5map.decodeMapIndefinite;
for(let i6 = 192; i6 <= 215; i6++)jump[i6] = _6tag.decodeTagCompact;
jump[216] = _6tag.decodeTag8;
jump[217] = _6tag.decodeTag16;
jump[218] = _6tag.decodeTag32;
jump[219] = _6tag.decodeTag64;
jump[220] = invalidMinor;
jump[221] = invalidMinor;
jump[222] = invalidMinor;
jump[223] = invalidMinor;
for(let i7 = 224; i7 <= 243; i7++)jump[i7] = errorer("simple values are not supported");
jump[244] = invalidMinor;
jump[245] = invalidMinor;
jump[246] = invalidMinor;
jump[247] = _7float.decodeUndefined;
jump[248] = errorer("simple values are not supported");
jump[249] = _7float.decodeFloat16;
jump[250] = _7float.decodeFloat32;
jump[251] = _7float.decodeFloat64;
jump[252] = invalidMinor;
jump[253] = invalidMinor;
jump[254] = invalidMinor;
jump[255] = _7float.decodeBreak;
const quick = [];
for(let i8 = 0; i8 < 24; i8++)quick[i8] = new token.Token(token.Type.uint, i8, 1);
for(let i9 = -1; i9 >= -24; i9--)quick[31 - i9] = new token.Token(token.Type.negint, i9, 1);
quick[64] = new token.Token(token.Type.bytes, new Uint8Array(0), 1);
quick[96] = new token.Token(token.Type.string, "", 1);
quick[128] = new token.Token(token.Type.array, 0, 1);
quick[160] = new token.Token(token.Type.map, 0, 1);
quick[244] = new token.Token(token.Type.false, false, 1);
quick[245] = new token.Token(token.Type.true, true, 1);
quick[246] = new token.Token(token.Type.null, null, 1);
function quickEncodeToken(token$1) {
    switch(token$1.type){
        case token.Type.false:
            return byteUtils.fromArray([
                244
            ]);
        case token.Type.true:
            return byteUtils.fromArray([
                245
            ]);
        case token.Type.null:
            return byteUtils.fromArray([
                246
            ]);
        case token.Type.bytes:
            if (!token$1.value.length) return byteUtils.fromArray([
                64
            ]);
            return;
        case token.Type.string:
            if (token$1.value === "") return byteUtils.fromArray([
                96
            ]);
            return;
        case token.Type.array:
            if (token$1.value === 0) return byteUtils.fromArray([
                128
            ]);
            return;
        case token.Type.map:
            if (token$1.value === 0) return byteUtils.fromArray([
                160
            ]);
            return;
        case token.Type.uint:
            if (token$1.value < 24) return byteUtils.fromArray([
                Number(token$1.value)
            ]);
            return;
        case token.Type.negint:
            if (token$1.value >= -24) return byteUtils.fromArray([
                31 - Number(token$1.value)
            ]);
    }
}
exports.jump = jump;
exports.quick = quick;
exports.quickEncodeToken = quickEncodeToken;

},{"./token.js":"hzdrM","./0uint.js":"iCSRX","./1negint.js":"1ywF4","./2bytes.js":"9n2FT","./3string.js":"g24Ir","./4array.js":"6iaEl","./5map.js":"ltm09","./6tag.js":"94X8w","./7float.js":"7EK5E","./common.js":"f327c","./byte-utils.js":"109Ms"}],"iCSRX":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var token = require("./token.js");
var common = require("./common.js");
const uintBoundaries = [
    24,
    256,
    65536,
    4294967296,
    BigInt("18446744073709551616")
];
function readUint8(data, offset, options) {
    common.assertEnoughData(data, offset, 1);
    const value = data[offset];
    if (options.strict === true && value < uintBoundaries[0]) throw new Error(`${common.decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    return value;
}
function readUint16(data, offset, options) {
    common.assertEnoughData(data, offset, 2);
    const value = data[offset] << 8 | data[offset + 1];
    if (options.strict === true && value < uintBoundaries[1]) throw new Error(`${common.decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    return value;
}
function readUint32(data, offset, options) {
    common.assertEnoughData(data, offset, 4);
    const value = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
    if (options.strict === true && value < uintBoundaries[2]) throw new Error(`${common.decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    return value;
}
function readUint64(data, offset, options) {
    common.assertEnoughData(data, offset, 8);
    const hi = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
    const lo = data[offset + 4] * 16777216 + (data[offset + 5] << 16) + (data[offset + 6] << 8) + data[offset + 7];
    const value = (BigInt(hi) << BigInt(32)) + BigInt(lo);
    if (options.strict === true && value < uintBoundaries[3]) throw new Error(`${common.decodeErrPrefix} integer encoded in more bytes than necessary (strict decode)`);
    if (value <= Number.MAX_SAFE_INTEGER) return Number(value);
    if (options.allowBigInt === true) return value;
    throw new Error(`${common.decodeErrPrefix} integers outside of the safe integer range are not supported`);
}
function decodeUint8(data, pos, _minor, options) {
    return new token.Token(token.Type.uint, readUint8(data, pos + 1, options), 2);
}
function decodeUint16(data, pos, _minor, options) {
    return new token.Token(token.Type.uint, readUint16(data, pos + 1, options), 3);
}
function decodeUint32(data, pos, _minor, options) {
    return new token.Token(token.Type.uint, readUint32(data, pos + 1, options), 5);
}
function decodeUint64(data, pos, _minor, options) {
    return new token.Token(token.Type.uint, readUint64(data, pos + 1, options), 9);
}
function encodeUint(buf, token1) {
    return encodeUintValue(buf, 0, token1.value);
}
function encodeUintValue(buf, major, uint) {
    if (uint < uintBoundaries[0]) {
        const nuint = Number(uint);
        buf.push([
            major | nuint
        ]);
    } else if (uint < uintBoundaries[1]) {
        const nuint = Number(uint);
        buf.push([
            major | 24,
            nuint
        ]);
    } else if (uint < uintBoundaries[2]) {
        const nuint = Number(uint);
        buf.push([
            major | 25,
            nuint >>> 8,
            nuint & 255
        ]);
    } else if (uint < uintBoundaries[3]) {
        const nuint = Number(uint);
        buf.push([
            major | 26,
            nuint >>> 24 & 255,
            nuint >>> 16 & 255,
            nuint >>> 8 & 255,
            nuint & 255
        ]);
    } else {
        const buint = BigInt(uint);
        if (buint < uintBoundaries[4]) {
            const set = [
                major | 27,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ];
            let lo = Number(buint & BigInt(4294967295));
            let hi = Number(buint >> BigInt(32) & BigInt(4294967295));
            set[8] = lo & 255;
            lo = lo >> 8;
            set[7] = lo & 255;
            lo = lo >> 8;
            set[6] = lo & 255;
            lo = lo >> 8;
            set[5] = lo & 255;
            set[4] = hi & 255;
            hi = hi >> 8;
            set[3] = hi & 255;
            hi = hi >> 8;
            set[2] = hi & 255;
            hi = hi >> 8;
            set[1] = hi & 255;
            buf.push(set);
        } else throw new Error(`${common.decodeErrPrefix} encountered BigInt larger than allowable range`);
    }
}
encodeUint.encodedSize = function encodedSize(token2) {
    return encodeUintValue.encodedSize(token2.value);
};
encodeUintValue.encodedSize = function encodedSize(uint) {
    if (uint < uintBoundaries[0]) return 1;
    if (uint < uintBoundaries[1]) return 2;
    if (uint < uintBoundaries[2]) return 3;
    if (uint < uintBoundaries[3]) return 5;
    return 9;
};
encodeUint.compareTokens = function compareTokens(tok1, tok2) {
    return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : 0;
};
exports.decodeUint16 = decodeUint16;
exports.decodeUint32 = decodeUint32;
exports.decodeUint64 = decodeUint64;
exports.decodeUint8 = decodeUint8;
exports.encodeUint = encodeUint;
exports.encodeUintValue = encodeUintValue;
exports.readUint16 = readUint16;
exports.readUint32 = readUint32;
exports.readUint64 = readUint64;
exports.readUint8 = readUint8;
exports.uintBoundaries = uintBoundaries;

},{"./token.js":"hzdrM","./common.js":"f327c"}],"1ywF4":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var token = require("./token.js");
var _0uint = require("./0uint.js");
var common = require("./common.js");
function decodeNegint8(data, pos, _minor, options) {
    return new token.Token(token.Type.negint, -1 - _0uint.readUint8(data, pos + 1, options), 2);
}
function decodeNegint16(data, pos, _minor, options) {
    return new token.Token(token.Type.negint, -1 - _0uint.readUint16(data, pos + 1, options), 3);
}
function decodeNegint32(data, pos, _minor, options) {
    return new token.Token(token.Type.negint, -1 - _0uint.readUint32(data, pos + 1, options), 5);
}
const neg1b = BigInt(-1);
const pos1b = BigInt(1);
function decodeNegint64(data, pos, _minor, options) {
    const int = _0uint.readUint64(data, pos + 1, options);
    if (typeof int !== "bigint") {
        const value = -1 - int;
        if (value >= Number.MIN_SAFE_INTEGER) return new token.Token(token.Type.negint, value, 9);
    }
    if (options.allowBigInt !== true) throw new Error(`${common.decodeErrPrefix} integers outside of the safe integer range are not supported`);
    return new token.Token(token.Type.negint, neg1b - BigInt(int), 9);
}
function encodeNegint(buf, token1) {
    const negint = token1.value;
    const unsigned = typeof negint === "bigint" ? negint * neg1b - pos1b : negint * -1 - 1;
    _0uint.encodeUintValue(buf, token1.type.majorEncoded, unsigned);
}
encodeNegint.encodedSize = function encodedSize(token2) {
    const negint = token2.value;
    const unsigned = typeof negint === "bigint" ? negint * neg1b - pos1b : negint * -1 - 1;
    if (unsigned < _0uint.uintBoundaries[0]) return 1;
    if (unsigned < _0uint.uintBoundaries[1]) return 2;
    if (unsigned < _0uint.uintBoundaries[2]) return 3;
    if (unsigned < _0uint.uintBoundaries[3]) return 5;
    return 9;
};
encodeNegint.compareTokens = function compareTokens(tok1, tok2) {
    return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : 0;
};
exports.decodeNegint16 = decodeNegint16;
exports.decodeNegint32 = decodeNegint32;
exports.decodeNegint64 = decodeNegint64;
exports.decodeNegint8 = decodeNegint8;
exports.encodeNegint = encodeNegint;

},{"./token.js":"hzdrM","./0uint.js":"iCSRX","./common.js":"f327c"}],"9n2FT":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var token = require("./token.js");
var common = require("./common.js");
var _0uint = require("./0uint.js");
var byteUtils = require("./byte-utils.js");
function toToken(data, pos, prefix, length) {
    common.assertEnoughData(data, pos, prefix + length);
    const buf = byteUtils.slice(data, pos + prefix, pos + prefix + length);
    return new token.Token(token.Type.bytes, buf, prefix + length);
}
function decodeBytesCompact(data, pos, minor, _options) {
    return toToken(data, pos, 1, minor);
}
function decodeBytes8(data, pos, _minor, options) {
    return toToken(data, pos, 2, _0uint.readUint8(data, pos + 1, options));
}
function decodeBytes16(data, pos, _minor, options) {
    return toToken(data, pos, 3, _0uint.readUint16(data, pos + 1, options));
}
function decodeBytes32(data, pos, _minor, options) {
    return toToken(data, pos, 5, _0uint.readUint32(data, pos + 1, options));
}
function decodeBytes64(data, pos, _minor, options) {
    const l = _0uint.readUint64(data, pos + 1, options);
    if (typeof l === "bigint") throw new Error(`${common.decodeErrPrefix} 64-bit integer bytes lengths not supported`);
    return toToken(data, pos, 9, l);
}
function tokenBytes(token$1) {
    if (token$1.encodedBytes === undefined) token$1.encodedBytes = token$1.type === token.Type.string ? byteUtils.fromString(token$1.value) : token$1.value;
    return token$1.encodedBytes;
}
function encodeBytes(buf, token1) {
    const bytes = tokenBytes(token1);
    _0uint.encodeUintValue(buf, token1.type.majorEncoded, bytes.length);
    buf.push(bytes);
}
encodeBytes.encodedSize = function encodedSize(token2) {
    const bytes = tokenBytes(token2);
    return _0uint.encodeUintValue.encodedSize(bytes.length) + bytes.length;
};
encodeBytes.compareTokens = function compareTokens(tok1, tok2) {
    return compareBytes(tokenBytes(tok1), tokenBytes(tok2));
};
function compareBytes(b1, b2) {
    return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : byteUtils.compare(b1, b2);
}
exports.compareBytes = compareBytes;
exports.decodeBytes16 = decodeBytes16;
exports.decodeBytes32 = decodeBytes32;
exports.decodeBytes64 = decodeBytes64;
exports.decodeBytes8 = decodeBytes8;
exports.decodeBytesCompact = decodeBytesCompact;
exports.encodeBytes = encodeBytes;

},{"./token.js":"hzdrM","./common.js":"f327c","./0uint.js":"iCSRX","./byte-utils.js":"109Ms"}],"g24Ir":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var token = require("./token.js");
var common = require("./common.js");
var _0uint = require("./0uint.js");
var _2bytes = require("./2bytes.js");
var byteUtils = require("./byte-utils.js");
function toToken(data, pos, prefix, length, options) {
    const totLength = prefix + length;
    common.assertEnoughData(data, pos, totLength);
    const tok = new token.Token(token.Type.string, byteUtils.toString(data, pos + prefix, pos + totLength), totLength);
    if (options.retainStringBytes === true) tok.byteValue = byteUtils.slice(data, pos + prefix, pos + totLength);
    return tok;
}
function decodeStringCompact(data, pos, minor, options) {
    return toToken(data, pos, 1, minor, options);
}
function decodeString8(data, pos, _minor, options) {
    return toToken(data, pos, 2, _0uint.readUint8(data, pos + 1, options), options);
}
function decodeString16(data, pos, _minor, options) {
    return toToken(data, pos, 3, _0uint.readUint16(data, pos + 1, options), options);
}
function decodeString32(data, pos, _minor, options) {
    return toToken(data, pos, 5, _0uint.readUint32(data, pos + 1, options), options);
}
function decodeString64(data, pos, _minor, options) {
    const l = _0uint.readUint64(data, pos + 1, options);
    if (typeof l === "bigint") throw new Error(`${common.decodeErrPrefix} 64-bit integer string lengths not supported`);
    return toToken(data, pos, 9, l, options);
}
const encodeString = _2bytes.encodeBytes;
exports.decodeString16 = decodeString16;
exports.decodeString32 = decodeString32;
exports.decodeString64 = decodeString64;
exports.decodeString8 = decodeString8;
exports.decodeStringCompact = decodeStringCompact;
exports.encodeString = encodeString;

},{"./token.js":"hzdrM","./common.js":"f327c","./0uint.js":"iCSRX","./2bytes.js":"9n2FT","./byte-utils.js":"109Ms"}],"6iaEl":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var token = require("./token.js");
var _0uint = require("./0uint.js");
var common = require("./common.js");
function toToken(_data, _pos, prefix, length) {
    return new token.Token(token.Type.array, length, prefix);
}
function decodeArrayCompact(data, pos, minor, _options) {
    return toToken(data, pos, 1, minor);
}
function decodeArray8(data, pos, _minor, options) {
    return toToken(data, pos, 2, _0uint.readUint8(data, pos + 1, options));
}
function decodeArray16(data, pos, _minor, options) {
    return toToken(data, pos, 3, _0uint.readUint16(data, pos + 1, options));
}
function decodeArray32(data, pos, _minor, options) {
    return toToken(data, pos, 5, _0uint.readUint32(data, pos + 1, options));
}
function decodeArray64(data, pos, _minor, options) {
    const l = _0uint.readUint64(data, pos + 1, options);
    if (typeof l === "bigint") throw new Error(`${common.decodeErrPrefix} 64-bit integer array lengths not supported`);
    return toToken(data, pos, 9, l);
}
function decodeArrayIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) throw new Error(`${common.decodeErrPrefix} indefinite length items not allowed`);
    return toToken(data, pos, 1, Infinity);
}
function encodeArray(buf, token$1) {
    _0uint.encodeUintValue(buf, token.Type.array.majorEncoded, token$1.value);
}
encodeArray.compareTokens = _0uint.encodeUint.compareTokens;
encodeArray.encodedSize = function encodedSize(token1) {
    return _0uint.encodeUintValue.encodedSize(token1.value);
};
exports.decodeArray16 = decodeArray16;
exports.decodeArray32 = decodeArray32;
exports.decodeArray64 = decodeArray64;
exports.decodeArray8 = decodeArray8;
exports.decodeArrayCompact = decodeArrayCompact;
exports.decodeArrayIndefinite = decodeArrayIndefinite;
exports.encodeArray = encodeArray;

},{"./token.js":"hzdrM","./0uint.js":"iCSRX","./common.js":"f327c"}],"ltm09":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var token = require("./token.js");
var _0uint = require("./0uint.js");
var common = require("./common.js");
function toToken(_data, _pos, prefix, length) {
    return new token.Token(token.Type.map, length, prefix);
}
function decodeMapCompact(data, pos, minor, _options) {
    return toToken(data, pos, 1, minor);
}
function decodeMap8(data, pos, _minor, options) {
    return toToken(data, pos, 2, _0uint.readUint8(data, pos + 1, options));
}
function decodeMap16(data, pos, _minor, options) {
    return toToken(data, pos, 3, _0uint.readUint16(data, pos + 1, options));
}
function decodeMap32(data, pos, _minor, options) {
    return toToken(data, pos, 5, _0uint.readUint32(data, pos + 1, options));
}
function decodeMap64(data, pos, _minor, options) {
    const l = _0uint.readUint64(data, pos + 1, options);
    if (typeof l === "bigint") throw new Error(`${common.decodeErrPrefix} 64-bit integer map lengths not supported`);
    return toToken(data, pos, 9, l);
}
function decodeMapIndefinite(data, pos, _minor, options) {
    if (options.allowIndefinite === false) throw new Error(`${common.decodeErrPrefix} indefinite length items not allowed`);
    return toToken(data, pos, 1, Infinity);
}
function encodeMap(buf, token$1) {
    _0uint.encodeUintValue(buf, token.Type.map.majorEncoded, token$1.value);
}
encodeMap.compareTokens = _0uint.encodeUint.compareTokens;
encodeMap.encodedSize = function encodedSize(token1) {
    return _0uint.encodeUintValue.encodedSize(token1.value);
};
exports.decodeMap16 = decodeMap16;
exports.decodeMap32 = decodeMap32;
exports.decodeMap64 = decodeMap64;
exports.decodeMap8 = decodeMap8;
exports.decodeMapCompact = decodeMapCompact;
exports.decodeMapIndefinite = decodeMapIndefinite;
exports.encodeMap = encodeMap;

},{"./token.js":"hzdrM","./0uint.js":"iCSRX","./common.js":"f327c"}],"94X8w":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var token = require("./token.js");
var _0uint = require("./0uint.js");
function decodeTagCompact(_data, _pos, minor, _options) {
    return new token.Token(token.Type.tag, minor, 1);
}
function decodeTag8(data, pos, _minor, options) {
    return new token.Token(token.Type.tag, _0uint.readUint8(data, pos + 1, options), 2);
}
function decodeTag16(data, pos, _minor, options) {
    return new token.Token(token.Type.tag, _0uint.readUint16(data, pos + 1, options), 3);
}
function decodeTag32(data, pos, _minor, options) {
    return new token.Token(token.Type.tag, _0uint.readUint32(data, pos + 1, options), 5);
}
function decodeTag64(data, pos, _minor, options) {
    return new token.Token(token.Type.tag, _0uint.readUint64(data, pos + 1, options), 9);
}
function encodeTag(buf, token$1) {
    _0uint.encodeUintValue(buf, token.Type.tag.majorEncoded, token$1.value);
}
encodeTag.compareTokens = _0uint.encodeUint.compareTokens;
encodeTag.encodedSize = function encodedSize(token1) {
    return _0uint.encodeUintValue.encodedSize(token1.value);
};
exports.decodeTag16 = decodeTag16;
exports.decodeTag32 = decodeTag32;
exports.decodeTag64 = decodeTag64;
exports.decodeTag8 = decodeTag8;
exports.decodeTagCompact = decodeTagCompact;
exports.encodeTag = encodeTag;

},{"./token.js":"hzdrM","./0uint.js":"iCSRX"}],"7EK5E":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var token = require("./token.js");
var common = require("./common.js");
var _0uint = require("./0uint.js");
const MINOR_FALSE = 20;
const MINOR_TRUE = 21;
const MINOR_NULL = 22;
const MINOR_UNDEFINED = 23;
function decodeUndefined(_data, _pos, _minor, options) {
    if (options.allowUndefined === false) throw new Error(`${common.decodeErrPrefix} undefined values are not supported`);
    else if (options.coerceUndefinedToNull === true) return new token.Token(token.Type.null, null, 1);
    return new token.Token(token.Type.undefined, undefined, 1);
}
function decodeBreak(_data, _pos, _minor, options) {
    if (options.allowIndefinite === false) throw new Error(`${common.decodeErrPrefix} indefinite length items not allowed`);
    return new token.Token(token.Type.break, undefined, 1);
}
function createToken(value, bytes, options) {
    if (options) {
        if (options.allowNaN === false && Number.isNaN(value)) throw new Error(`${common.decodeErrPrefix} NaN values are not supported`);
        if (options.allowInfinity === false && (value === Infinity || value === -Infinity)) throw new Error(`${common.decodeErrPrefix} Infinity values are not supported`);
    }
    return new token.Token(token.Type.float, value, bytes);
}
function decodeFloat16(data, pos, _minor, options) {
    return createToken(readFloat16(data, pos + 1), 3, options);
}
function decodeFloat32(data, pos, _minor, options) {
    return createToken(readFloat32(data, pos + 1), 5, options);
}
function decodeFloat64(data, pos, _minor, options) {
    return createToken(readFloat64(data, pos + 1), 9, options);
}
function encodeFloat(buf, token$1, options) {
    const float = token$1.value;
    if (float === false) buf.push([
        token.Type.float.majorEncoded | MINOR_FALSE
    ]);
    else if (float === true) buf.push([
        token.Type.float.majorEncoded | MINOR_TRUE
    ]);
    else if (float === null) buf.push([
        token.Type.float.majorEncoded | MINOR_NULL
    ]);
    else if (float === undefined) buf.push([
        token.Type.float.majorEncoded | MINOR_UNDEFINED
    ]);
    else {
        let decoded;
        let success = false;
        if (!options || options.float64 !== true) {
            encodeFloat16(float);
            decoded = readFloat16(ui8a, 1);
            if (float === decoded || Number.isNaN(float)) {
                ui8a[0] = 249;
                buf.push(ui8a.slice(0, 3));
                success = true;
            } else {
                encodeFloat32(float);
                decoded = readFloat32(ui8a, 1);
                if (float === decoded) {
                    ui8a[0] = 250;
                    buf.push(ui8a.slice(0, 5));
                    success = true;
                }
            }
        }
        if (!success) {
            encodeFloat64(float);
            decoded = readFloat64(ui8a, 1);
            ui8a[0] = 251;
            buf.push(ui8a.slice(0, 9));
        }
    }
}
encodeFloat.encodedSize = function encodedSize(token1, options) {
    const float = token1.value;
    if (float === false || float === true || float === null || float === undefined) return 1;
    if (!options || options.float64 !== true) {
        encodeFloat16(float);
        let decoded = readFloat16(ui8a, 1);
        if (float === decoded || Number.isNaN(float)) return 3;
        encodeFloat32(float);
        decoded = readFloat32(ui8a, 1);
        if (float === decoded) return 5;
    }
    return 9;
};
const buffer = new ArrayBuffer(9);
const dataView = new DataView(buffer, 1);
const ui8a = new Uint8Array(buffer, 0);
function encodeFloat16(inp) {
    if (inp === Infinity) dataView.setUint16(0, 31744, false);
    else if (inp === -Infinity) dataView.setUint16(0, 64512, false);
    else if (Number.isNaN(inp)) dataView.setUint16(0, 32256, false);
    else {
        dataView.setFloat32(0, inp);
        const valu32 = dataView.getUint32(0);
        const exponent = (valu32 & 2139095040) >> 23;
        const mantissa = valu32 & 8388607;
        if (exponent === 255) dataView.setUint16(0, 31744, false);
        else if (exponent === 0) dataView.setUint16(0, (inp & 2147483648) >> 16 | mantissa >> 13, false);
        else {
            const logicalExponent = exponent - 127;
            if (logicalExponent < -24) dataView.setUint16(0, 0);
            else if (logicalExponent < -14) dataView.setUint16(0, (valu32 & 2147483648) >> 16 | 1 << 24 + logicalExponent, false);
            else dataView.setUint16(0, (valu32 & 2147483648) >> 16 | logicalExponent + 15 << 10 | mantissa >> 13, false);
        }
    }
}
function readFloat16(ui8a1, pos) {
    if (ui8a1.length - pos < 2) throw new Error(`${common.decodeErrPrefix} not enough data for float16`);
    const half = (ui8a1[pos] << 8) + ui8a1[pos + 1];
    if (half === 31744) return Infinity;
    if (half === 64512) return -Infinity;
    if (half === 32256) return NaN;
    const exp = half >> 10 & 31;
    const mant = half & 1023;
    let val;
    if (exp === 0) val = mant * 2 ** -24;
    else if (exp !== 31) val = (mant + 1024) * 2 ** (exp - 25);
    else val = mant === 0 ? Infinity : NaN;
    return half & 32768 ? -val : val;
}
function encodeFloat32(inp) {
    dataView.setFloat32(0, inp, false);
}
function readFloat32(ui8a2, pos) {
    if (ui8a2.length - pos < 4) throw new Error(`${common.decodeErrPrefix} not enough data for float32`);
    const offset = (ui8a2.byteOffset || 0) + pos;
    return new DataView(ui8a2.buffer, offset, 4).getFloat32(0, false);
}
function encodeFloat64(inp) {
    dataView.setFloat64(0, inp, false);
}
function readFloat64(ui8a3, pos) {
    if (ui8a3.length - pos < 8) throw new Error(`${common.decodeErrPrefix} not enough data for float64`);
    const offset = (ui8a3.byteOffset || 0) + pos;
    return new DataView(ui8a3.buffer, offset, 8).getFloat64(0, false);
}
encodeFloat.compareTokens = _0uint.encodeUint.compareTokens;
exports.decodeBreak = decodeBreak;
exports.decodeFloat16 = decodeFloat16;
exports.decodeFloat32 = decodeFloat32;
exports.decodeFloat64 = decodeFloat64;
exports.decodeUndefined = decodeUndefined;
exports.encodeFloat = encodeFloat;

},{"./token.js":"hzdrM","./common.js":"f327c","./0uint.js":"iCSRX"}],"iQNJQ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var common = require("./common.js");
var token = require("./token.js");
var jump = require("./jump.js");
const defaultDecodeOptions = {
    strict: false,
    allowIndefinite: true,
    allowUndefined: true,
    allowBigInt: true
};
class Tokeniser {
    constructor(data, options = {}){
        this.pos = 0;
        this.data = data;
        this.options = options;
    }
    done() {
        return this.pos >= this.data.length;
    }
    next() {
        const byt = this.data[this.pos];
        let token1 = jump.quick[byt];
        if (token1 === undefined) {
            const decoder = jump.jump[byt];
            if (!decoder) throw new Error(`${common.decodeErrPrefix} no decoder for major type ${byt >>> 5} (byte 0x${byt.toString(16).padStart(2, "0")})`);
            const minor = byt & 31;
            token1 = decoder(this.data, this.pos, minor, this.options);
        }
        this.pos += token1.encodedLength;
        return token1;
    }
}
const DONE = Symbol.for("DONE");
const BREAK = Symbol.for("BREAK");
function tokenToArray(token2, tokeniser, options) {
    const arr = [];
    for(let i = 0; i < token2.value; i++){
        const value = tokensToObject(tokeniser, options);
        if (value === BREAK) {
            if (token2.value === Infinity) break;
            throw new Error(`${common.decodeErrPrefix} got unexpected break to lengthed array`);
        }
        if (value === DONE) throw new Error(`${common.decodeErrPrefix} found array but not enough entries (got ${i}, expected ${token2.value})`);
        arr[i] = value;
    }
    return arr;
}
function tokenToMap(token3, tokeniser, options) {
    const useMaps = options.useMaps === true;
    const obj = useMaps ? undefined : {};
    const m = useMaps ? new Map() : undefined;
    for(let i = 0; i < token3.value; i++){
        const key = tokensToObject(tokeniser, options);
        if (key === BREAK) {
            if (token3.value === Infinity) break;
            throw new Error(`${common.decodeErrPrefix} got unexpected break to lengthed map`);
        }
        if (key === DONE) throw new Error(`${common.decodeErrPrefix} found map but not enough entries (got ${i} [no key], expected ${token3.value})`);
        if (useMaps !== true && typeof key !== "string") throw new Error(`${common.decodeErrPrefix} non-string keys not supported (got ${typeof key})`);
        const value = tokensToObject(tokeniser, options);
        if (value === DONE) throw new Error(`${common.decodeErrPrefix} found map but not enough entries (got ${i} [no value], expected ${token3.value})`);
        if (useMaps) m.set(key, value);
        else obj[key] = value;
    }
    return useMaps ? m : obj;
}
function tokensToObject(tokeniser, options) {
    if (tokeniser.done()) return DONE;
    const token$1 = tokeniser.next();
    if (token$1.type === token.Type.break) return BREAK;
    if (token$1.type.terminal) return token$1.value;
    if (token$1.type === token.Type.array) return tokenToArray(token$1, tokeniser, options);
    if (token$1.type === token.Type.map) return tokenToMap(token$1, tokeniser, options);
    if (token$1.type === token.Type.tag) {
        if (options.tags && typeof options.tags[token$1.value] === "function") {
            const tagged = tokensToObject(tokeniser, options);
            return options.tags[token$1.value](tagged);
        }
        throw new Error(`${common.decodeErrPrefix} tag not supported (${token$1.value})`);
    }
    throw new Error("unsupported");
}
function decode(data, options) {
    if (!(data instanceof Uint8Array)) throw new Error(`${common.decodeErrPrefix} data to decode must be a Uint8Array`);
    options = Object.assign({}, defaultDecodeOptions, options);
    const tokeniser = options.tokenizer || new Tokeniser(data, options);
    const decoded = tokensToObject(tokeniser, options);
    if (decoded === DONE) throw new Error(`${common.decodeErrPrefix} did not find any content to decode`);
    if (decoded === BREAK) throw new Error(`${common.decodeErrPrefix} got unexpected break`);
    if (!tokeniser.done()) throw new Error(`${common.decodeErrPrefix} too many terminals, data makes no sense`);
    return decoded;
}
exports.Tokeniser = Tokeniser;
exports.decode = decode;
exports.tokensToObject = tokensToObject;

},{"./common.js":"f327c","./token.js":"hzdrM","./jump.js":"buBgp"}],"4Q1dR":[function(require,module,exports) {
"use strict";
const addAll = require("./add-all");
const last = require("it-last");
const configure = require("./lib/configure");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ /**
 * @param {import('./types').Options} options
 */ module.exports = (options1)=>{
    const all = addAll(options1);
    return configure(()=>{
        /**
     * @type {RootAPI["add"]}
     */ async function add(input, options = {}) {
            // @ts-ignore - last may return undefined if source is empty
            return await last(all(input, options));
        }
        return add;
    })(options1);
};

},{"./add-all":"hKKjA","it-last":"iWUUH","./lib/configure":"9w0UV"}],"hKKjA":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const toCamel = require("./lib/object-to-camel");
const configure = require("./lib/configure");
const multipartRequest = require("./lib/multipart-request");
const toUrlSearchParams = require("./lib/to-url-search-params");
const abortSignal = require("./lib/abort-signal");
const { AbortController  } = require("native-abort-controller");
/**
 * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn
 * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult
 */ module.exports = configure((api)=>{
    /**
   * @type {RootAPI["addAll"]}
   */ async function* addAll(source, options = {}) {
        // allow aborting requests on body errors
        const controller = new AbortController();
        const signal = abortSignal(controller.signal, options.signal);
        const { headers , body , total , parts  } = await multipartRequest(source, controller, options.headers);
        // In browser response body only starts streaming once upload is
        // complete, at which point all the progress updates are invalid. If
        // length of the content is computable we can interpret progress from
        // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`
        // in which case we disable progress updates to be written out.
        const [progressFn, onUploadProgress] = typeof options.progress === "function" ? createProgressHandler(total, parts, options.progress) : [
            undefined,
            undefined
        ];
        const res = await api.post("add", {
            searchParams: toUrlSearchParams({
                "stream-channels": true,
                ...options,
                progress: Boolean(progressFn)
            }),
            onUploadProgress,
            signal,
            headers,
            body
        });
        for await (let file of res.ndjson()){
            file = toCamel(file);
            if (file.hash !== undefined) yield toCoreInterface(file);
            else if (progressFn) progressFn(file.bytes || 0, file.name);
        }
    }
    return addAll;
});
/**
 * Returns simple progress callback when content length isn't computable or a
 * progress event handler that calculates progress from upload progress events.
 *
 * @param {number} total
 * @param {{name:string, start:number, end:number}[]|null} parts
 * @param {IPFSCoreAddProgressFn} progress
 * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}
 */ const createProgressHandler = (total, parts, progress)=>parts ? [
        undefined,
        createOnUploadProgress(total, parts, progress)
    ] : [
        progress,
        undefined
    ];
/**
 * Creates a progress handler that interpolates progress from upload progress
 * events and total size of the content that is added.
 *
 * @param {number} size - actual content size
 * @param {{name:string, start:number, end:number}[]} parts
 * @param {IPFSCoreAddProgressFn} progress
 * @returns {IPFSUtilsHttpUploadProgressFn}
 */ const createOnUploadProgress = (size, parts, progress)=>{
    let index = 0;
    const count = parts.length;
    return ({ loaded , total  })=>{
        // Derive position from the current progress.
        const position = Math.floor(loaded / total * size);
        while(index < count){
            const { start , end , name  } = parts[index];
            // If within current part range report progress and break the loop
            if (position < end) {
                progress(position - start, name);
                break;
            // If passed current part range report final byte for the chunk and
            // move to next one.
            } else {
                progress(end - start, name);
                index += 1;
            }
        }
    };
};
/**
 * @param {object} input
 * @param {string} input.name
 * @param {string} input.hash
 * @param {string} input.size
 * @param {string} [input.mode]
 * @param {number} [input.mtime]
 * @param {number} [input.mtimeNsecs]
 */ function toCoreInterface({ name , hash , size , mode , mtime , mtimeNsecs  }) {
    /** @type {AddResult} */ const output = {
        path: name,
        cid: CID.parse(hash),
        size: parseInt(size)
    };
    if (mode != null) output.mode = parseInt(mode, 8);
    if (mtime != null) output.mtime = {
        secs: mtime,
        nsecs: mtimeNsecs || 0
    };
    return output;
}

},{"multiformats/cid":"4uoBU","./lib/object-to-camel":"fxBIC","./lib/configure":"9w0UV","./lib/multipart-request":"bsPTI","./lib/to-url-search-params":"dXrzw","./lib/abort-signal":"gbGf5","native-abort-controller":"8rhv7"}],"fxBIC":[function(require,module,exports) {
"use strict";
/**
 * Convert object properties to camel case.
 * NOT recursive!
 * e.g.
 * AgentVersion => agentVersion
 * ID => id
 *
 * @param {Record<string, any>} obj
 */ module.exports = (obj)=>{
    if (obj == null) return obj;
    const caps = /^[A-Z]+$/;
    /** @type {Record<string, any>} */ const output = {};
    return Object.keys(obj).reduce((camelObj, k)=>{
        if (caps.test(k)) camelObj[k.toLowerCase()] = obj[k];
        else if (caps.test(k[0])) camelObj[k[0].toLowerCase() + k.slice(1)] = obj[k];
        else camelObj[k] = obj[k];
        return camelObj;
    }, output);
};

},{}],"9w0UV":[function(require,module,exports) {
"use strict";
/* eslint-env browser */ const Client = require("./core");
// Set default configuration and call create function with them
/**
 * @typedef { import("../types").Options } Options
 */ /**
 * @template T
 * @typedef {(client: Client, clientOptions: Options) => T} Fn
 */ /**
 * @template T
 * @typedef {(clientOptions: Options) => T} Factory
 */ /**
 * @template T
 * @param {Fn<T>} fn
 * @returns {Factory<T>}
 */ const configure = (fn)=>{
    return (options)=>{
        return fn(new Client(options), options);
    };
};
module.exports = configure;

},{"./core":"8TIb9"}],"8TIb9":[function(require,module,exports) {
"use strict";
/* eslint-env browser */ const { Multiaddr  } = require("multiaddr");
const { isBrowser , isWebWorker , isNode  } = require("ipfs-utils/src/env");
const { default: parseDuration  } = require("parse-duration");
const log = require("debug")("ipfs-http-client:lib:error-handler");
const HTTP = require("ipfs-utils/src/http");
const merge = require("merge-options").bind({
    ignoreUndefined: true
});
const toUrlString = require("ipfs-core-utils/src/to-url-string");
const http = require("http");
const https = require("https");
const DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : "http";
const DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : "localhost";
const DEFAULT_PORT = isBrowser || isWebWorker ? location.port : "5001";
/**
 * @typedef {import('ipfs-utils/src/types').HTTPOptions} HTTPOptions
 * @typedef {import('../types').Options} Options
 */ /**
 * @param {Options|URL|Multiaddr|string} [options]
 * @returns {Options}
 */ const normalizeOptions = (options = {})=>{
    let url;
    /** @type {Options} */ let opts = {};
    let agent;
    if (typeof options === "string" || Multiaddr.isMultiaddr(options)) url = new URL(toUrlString(options));
    else if (options instanceof URL) url = options;
    else if (typeof options.url === "string" || Multiaddr.isMultiaddr(options.url)) {
        url = new URL(toUrlString(options.url));
        opts = options;
    } else if (options.url instanceof URL) {
        url = options.url;
        opts = options;
    } else {
        opts = options || {};
        const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(":", "");
        const host = (opts.host || DEFAULT_HOST).split(":")[0];
        const port = opts.port || DEFAULT_PORT;
        url = new URL(`${protocol}://${host}:${port}`);
    }
    if (opts.apiPath) url.pathname = opts.apiPath;
    else if (url.pathname === "/" || url.pathname === undefined) url.pathname = "api/v0";
    if (isNode) {
        const Agent = url.protocol.startsWith("https") ? https.Agent : http.Agent;
        agent = opts.agent || new Agent({
            keepAlive: true,
            // Similar to browsers which limit connections to six per host
            maxSockets: 6
        });
    }
    return {
        ...opts,
        host: url.host,
        protocol: url.protocol.replace(":", ""),
        port: Number(url.port),
        apiPath: url.pathname,
        url,
        agent
    };
};
/**
 * @param {Response} response
 */ const errorHandler = async (response)=>{
    let msg;
    try {
        if ((response.headers.get("Content-Type") || "").startsWith("application/json")) {
            const data = await response.json();
            log(data);
            msg = data.Message || data.message;
        } else msg = await response.text();
    } catch (err) {
        log("Failed to parse error response", err);
        // Failed to extract/parse error message from response
        msg = err.message;
    }
    /** @type {Error} */ let error = new HTTP.HTTPError(response);
    if (msg) {
        // This is what rs-ipfs returns where there's a timeout
        if (msg.includes("deadline has elapsed")) error = new HTTP.TimeoutError();
        // This is what go-ipfs returns where there's a timeout
        if (msg && msg.includes("context deadline exceeded")) error = new HTTP.TimeoutError();
    }
    // This also gets returned
    if (msg && msg.includes("request timed out")) error = new HTTP.TimeoutError();
    // If we managed to extract a message from the response, use it
    if (msg) error.message = msg;
    throw error;
};
const KEBAB_REGEX = /[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g;
/**
 * @param {string} str
 */ const kebabCase = (str)=>{
    return str.replace(KEBAB_REGEX, function(match) {
        return "-" + match.toLowerCase();
    });
};
/**
 * @param {string | number} value
 */ const parseTimeout = (value)=>{
    return typeof value === "string" ? parseDuration(value) : value;
};
class Client extends HTTP {
    /**
   * @param {Options|URL|Multiaddr|string} [options]
   */ constructor(options1 = {}){
        const opts = normalizeOptions(options1);
        super({
            timeout: parseTimeout(opts.timeout || 0) || undefined,
            headers: opts.headers,
            base: `${opts.url}`,
            handleError: errorHandler,
            transformSearchParams: (search)=>{
                const out = new URLSearchParams();
                // @ts-ignore https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams
                for (const [key, value] of search){
                    if (value !== "undefined" && value !== "null" && key !== "signal") out.append(kebabCase(key), value);
                    // @ts-ignore server timeouts are strings
                    if (key === "timeout" && !isNaN(value)) out.append(kebabCase(key), value);
                }
                return out;
            },
            // @ts-ignore this can be a https agent or a http agent
            agent: opts.agent
        });
        // @ts-ignore - cannot delete no-optional fields
        delete this.get;
        // @ts-ignore - cannot delete no-optional fields
        delete this.put;
        // @ts-ignore - cannot delete no-optional fields
        delete this.delete;
        // @ts-ignore - cannot delete no-optional fields
        delete this.options;
        const fetch = this.fetch;
        /**
     * @param {string | Request} resource
     * @param {HTTPOptions} options
     */ this.fetch = (resource, options = {})=>{
            if (typeof resource === "string" && !resource.startsWith("/")) resource = `${opts.url}/${resource}`;
            return fetch.call(this, resource, merge(options, {
                method: "POST"
            }));
        };
    }
}
Client.errorHandler = errorHandler;
module.exports = Client;

},{"multiaddr":"dOMJu","ipfs-utils/src/env":"5o7RW","parse-duration":"2yIG1","debug":"l0oUb","ipfs-utils/src/http":"j20vN","merge-options":"4XlQf","ipfs-core-utils/src/to-url-string":"dfo4q","http":"bXKEI","https":"bXKEI"}],"2yIG1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let durationRE = /(-?(?:\d+\.?\d*|\d*\.?\d+)(?:e[-+]?\d+)?)\s*([\p{L}]*)/uig;
/**
 * conversion ratios
 */ parse.nanosecond = parse.ns = 1 / 1e6;
parse["\xb5s"] = parse["\u03BCs"] = parse.us = parse.microsecond = 0.001;
parse.millisecond = parse.ms = parse[""] = 1;
parse.second = parse.sec = parse.s = parse.ms * 1000;
parse.minute = parse.min = parse.m = parse.s * 60;
parse.hour = parse.hr = parse.h = parse.m * 60;
parse.day = parse.d = parse.h * 24;
parse.week = parse.wk = parse.w = parse.d * 7;
parse.month = parse.b = parse.d * 30.4375;
parse.year = parse.yr = parse.y = parse.d * 365.25;
/**
 * convert `str` to ms
 *
 * @param {String} str
 * @param {String} format
 * @return {Number}
 */ function parse(str = "", format = "ms") {
    var result = null;
    // ignore commas/placeholders
    str = (str + "").replace(/(\d)[,_](\d)/g, "$1$2");
    str.replace(durationRE, function(_, n, units) {
        units = unitRatio(units);
        if (units) result = (result || 0) + parseFloat(n, 10) * units;
    });
    return result && result / (unitRatio(format) || 1);
}
function unitRatio(str) {
    return parse[str] || parse[str.toLowerCase().replace(/s$/, "")];
}
exports.default = parse;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fD7H8"}],"l0oUb":[function(require,module,exports) {
var process = require("process");
/* eslint-env browser */ /**
 * This is the web browser implementation of `debug()`.
 */ exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (()=>{
    let warned = false;
    return ()=>{
        if (!warned) {
            warned = true;
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
    };
})();
/**
 * Colors.
 */ exports.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */ // eslint-disable-next-line complexity
function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) return true;
    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
    if (!this.useColors) return;
    const c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match)=>{
        if (match === "%%") return;
        index++;
        if (match === "%c") // We only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
    });
    args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */ exports.log = console.debug || console.log || (()=>{});
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    try {
        if (namespaces) exports.storage.setItem("debug", namespaces);
        else exports.storage.removeItem("debug");
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    let r;
    try {
        r = exports.storage.getItem("debug");
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== "undefined" && "env" in process) r = undefined;
    return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */ function localstorage() {
    try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
module.exports = require("./common")(exports);
const { formatters  } = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */ formatters.j = function(v) {
    try {
        return JSON.stringify(v);
    } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
    }
};

},{"process":"50f2S","./common":"6Yq2n"}],"6Yq2n":[function(require,module,exports) {
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */ function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = require("ms");
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key)=>{
        createDebug[key] = env[key];
    });
    /**
	* The currently active debug mode names, and names to skip.
	*/ createDebug.names = [];
    createDebug.skips = [];
    /**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/ createDebug.formatters = {};
    /**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/ function selectColor(namespace) {
        let hash = 0;
        for(let i = 0; i < namespace.length; i++){
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    /**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/ function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
            // Disabled?
            if (!debug.enabled) return;
            const self = debug;
            // Set `diff` timestamp
            const curr = Number(new Date());
            const ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== "string") // Anything else let's inspect with %O
            args.unshift("%O");
            // Apply any `formatters` transformations
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format)=>{
                // If we encounter an escaped % then don't increase the array index
                if (match === "%%") return "%";
                index++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === "function") {
                    const val = args[index];
                    match = formatter.call(self, val);
                    // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index, 1);
                    index--;
                }
                return match;
            });
            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
        Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: ()=>{
                if (enableOverride !== null) return enableOverride;
                if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
            },
            set: (v)=>{
                enableOverride = v;
            }
        });
        // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === "function") createDebug.init(debug);
        return debug;
    }
    function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
    }
    /**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/ function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for(i = 0; i < len; i++){
            if (!split[i]) continue;
            namespaces = split[i].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
            else createDebug.names.push(new RegExp("^" + namespaces + "$"));
        }
    }
    /**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/ function disable() {
        const namespaces = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips.map(toNamespace).map((namespace)=>"-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
    }
    /**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/ function enabled(name) {
        if (name[name.length - 1] === "*") return true;
        let i;
        let len;
        for(i = 0, len = createDebug.skips.length; i < len; i++){
            if (createDebug.skips[i].test(name)) return false;
        }
        for(i = 0, len = createDebug.names.length; i < len; i++){
            if (createDebug.names[i].test(name)) return true;
        }
        return false;
    }
    /**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/ function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    /**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/ function coerce(val) {
        if (val instanceof Error) return val.stack || val.message;
        return val;
    }
    /**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/ function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
module.exports = setup;

},{"ms":"jauEe"}],"jauEe":[function(require,module,exports) {
/**
 * Helpers.
 */ var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) return parse(val);
    else if (type === "number" && isFinite(val)) return options.long ? fmtLong(val) : fmtShort(val);
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function parse(str) {
    str = String(str);
    if (str.length > 100) return;
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) return;
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch(type){
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
            return n * y;
        case "weeks":
        case "week":
        case "w":
            return n * w;
        case "days":
        case "day":
        case "d":
            return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
            return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
            return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
            return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) return Math.round(ms / d) + "d";
    if (msAbs >= h) return Math.round(ms / h) + "h";
    if (msAbs >= m) return Math.round(ms / m) + "m";
    if (msAbs >= s) return Math.round(ms / s) + "s";
    return ms + "ms";
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) return plural(ms, msAbs, d, "day");
    if (msAbs >= h) return plural(ms, msAbs, h, "hour");
    if (msAbs >= m) return plural(ms, msAbs, m, "minute");
    if (msAbs >= s) return plural(ms, msAbs, s, "second");
    return ms + " ms";
}
/**
 * Pluralization helper.
 */ function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
}

},{}],"dfo4q":[function(require,module,exports) {
"use strict";
const { Multiaddr  } = require("multiaddr");
// @ts-ignore no types
const multiAddrToUri = require("multiaddr-to-uri");
/**
 * @param {string|Multiaddr|URL} url - A string, multiaddr or URL to convert to a url string
 * @returns {string}
 */ module.exports = (url)=>{
    try {
        // @ts-expect-error
        url = multiAddrToUri(new Multiaddr(url));
    } catch (err) {}
    url = url.toString();
    return url;
};

},{"multiaddr":"dOMJu","multiaddr-to-uri":"kzrTO"}],"kzrTO":[function(require,module,exports) {
const { Multiaddr  } = require("multiaddr");
const reduceValue = (_, v)=>v;
const tcpUri = (str, port, parts, opts)=>{
    // return tcp when explicitly requested
    if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`;
    // check if tcp is the last protocol in multiaddr
    let protocol = "tcp";
    let explicitPort = `:${port}`;
    const last = parts[parts.length - 1];
    if (last.protocol === "tcp") {
        // assume http and produce clean urls
        protocol = port === "443" ? "https" : "http";
        explicitPort = port === "443" || port === "80" ? "" : explicitPort;
    }
    return `${protocol}://${str}${explicitPort}`;
};
const Reducers = {
    ip4: reduceValue,
    ip6: (str, content, i, parts)=>parts.length === 1 && parts[0].protocol === "ip6" ? content : `[${content}]`,
    tcp: (str, content, i, parts, opts)=>parts.some((p)=>[
                "http",
                "https",
                "ws",
                "wss"
            ].includes(p.protocol)) ? `${str}:${content}` : tcpUri(str, content, parts, opts),
    udp: (str, content)=>`udp://${str}:${content}`,
    dnsaddr: reduceValue,
    dns4: reduceValue,
    dns6: reduceValue,
    ipfs: (str, content)=>`${str}/ipfs/${content}`,
    p2p: (str, content)=>`${str}/p2p/${content}`,
    http: (str)=>`http://${str}`,
    https: (str)=>`https://${str}`,
    ws: (str)=>`ws://${str}`,
    wss: (str)=>`wss://${str}`,
    "p2p-websocket-star": (str)=>`${str}/p2p-websocket-star`,
    "p2p-webrtc-star": (str)=>`${str}/p2p-webrtc-star`,
    "p2p-webrtc-direct": (str)=>`${str}/p2p-webrtc-direct`
};
module.exports = (multiaddr, opts)=>{
    const ma = new Multiaddr(multiaddr);
    const parts1 = multiaddr.toString().split("/").slice(1);
    return ma.tuples().map((tuple)=>({
            protocol: parts1.shift(),
            content: tuple[1] ? parts1.shift() : null
        })).reduce((str, part, i, parts)=>{
        const reduce = Reducers[part.protocol];
        if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`);
        return reduce(str, part.content, i, parts, opts);
    }, "");
};

},{"multiaddr":"dOMJu"}],"bsPTI":[function(require,module,exports) {
"use strict";
// Import browser version otherwise electron-renderer will end up with node
// version and fail.
const { normaliseInput  } = require("ipfs-core-utils/src/files/normalise-input/index.browser");
const modeToString = require("./mode-to-string");
/**
 * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream
 * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate
 */ /**
 * @param {ImportCandidateStream|ImportCandidate} source
 * @param {AbortController} abortController
 * @param {Headers|Record<string, string>} [headers]
 */ async function multipartRequest(source, abortController, headers = {}) {
    const parts = [];
    const formData = new FormData();
    let index = 0;
    let total = 0;
    // @ts-ignore wrong input type for normaliseInput
    for await (const { content , path , mode , mtime  } of normaliseInput(source)){
        let fileSuffix = "";
        const type = content ? "file" : "dir";
        if (index > 0) fileSuffix = `-${index}`;
        let fieldName = type + fileSuffix;
        const qs = [];
        if (mode !== null && mode !== undefined) qs.push(`mode=${modeToString(mode)}`);
        if (mtime != null) {
            const { secs , nsecs  } = mtime;
            qs.push(`mtime=${secs}`);
            if (nsecs != null) qs.push(`mtime-nsecs=${nsecs}`);
        }
        if (qs.length) fieldName = `${fieldName}?${qs.join("&")}`;
        if (content) {
            formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);
            const end = total + content.size;
            parts.push({
                name: path,
                start: total,
                end
            });
            total = end;
        } else if (path != null) formData.set(fieldName, new File([
            ""
        ], encodeURIComponent(path), {
            type: "application/x-directory"
        }));
        else throw new Error("path or content or both must be set");
        index++;
    }
    return {
        total,
        parts,
        headers,
        body: formData
    };
}
module.exports = multipartRequest;

},{"ipfs-core-utils/src/files/normalise-input/index.browser":"RNa2S","./mode-to-string":"bLz1C"}],"RNa2S":[function(require,module,exports) {
"use strict";
const normaliseContent = require("./normalise-content.browser");
const normalise = require("./normalise-input");
/**
 * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream
 * @typedef {import('ipfs-core-types/src/utils').BrowserImportCandidate} BrowserImportCandidate
 */ /**
 * Transforms any of the `ipfs.add` input types into
 *
 * ```
 * AsyncIterable<{ path, mode, mtime, content: Blob }>
 * ```
 *
 * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options
 *
 * @param {ImportCandidateStream} input
 * @returns {AsyncGenerator<BrowserImportCandidate, void, undefined>}
 */ function normaliseInput(input) {
    // @ts-ignore normaliseContent returns Blob and not AsyncIterator
    return normalise(input, normaliseContent);
}
module.exports = {
    normaliseInput
};

},{"./normalise-content.browser":"5Mzkv","./normalise-input":"1dn2V"}],"5Mzkv":[function(require,module,exports) {
"use strict";
const errCode = require("err-code");
const itPeekable = require("it-peekable");
const browserStreamToIt = require("browser-readablestream-to-it");
const all = require("it-all");
const { isBytes , isBlob , isReadableStream  } = require("./utils");
/**
 * @param {import('./normalise-input').ToContent} input
 */ async function toBlob(input) {
    // Bytes
    if (isBytes(input)) return new Blob([
        input
    ]);
    // String
    if (typeof input === "string" || input instanceof String) return new Blob([
        input.toString()
    ]);
    // Blob | File
    if (isBlob(input)) return input;
    // Browser stream
    if (isReadableStream(input)) input = browserStreamToIt(input);
    // (Async)Iterator<?>
    if (Symbol.iterator in input || Symbol.asyncIterator in input) {
        /** @type {any} peekable */ const peekable = itPeekable(input);
        /** @type {any} value **/ const { value , done  } = await peekable.peek();
        if (done) // make sure empty iterators result in empty files
        return itToBlob(peekable);
        peekable.push(value);
        // (Async)Iterable<Number>
        if (Number.isInteger(value)) return new Blob([
            Uint8Array.from(await all(peekable))
        ]);
        // (Async)Iterable<Bytes|String>
        if (isBytes(value) || typeof value === "string" || value instanceof String) return itToBlob(peekable);
    }
    throw errCode(new Error(`Unexpected input: ${input}`), "ERR_UNEXPECTED_INPUT");
}
/**
 * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream
 */ async function itToBlob(stream) {
    const parts = [];
    for await (const chunk of stream)parts.push(chunk);
    return new Blob(parts);
}
module.exports = toBlob;

},{"err-code":"dUrrM","it-peekable":"20t4V","browser-readablestream-to-it":"jArgg","it-all":"3roGN","./utils":"onkae"}],"20t4V":[function(require,module,exports) {
"use strict";
/**
 * @template T
 * @typedef {Object} Peek
 * @property {() => IteratorResult<T, void>} peek
 */ /**
 * @template T
 * @typedef {Object} AsyncPeek
 * @property {() => Promise<IteratorResult<T, void>>} peek
 */ /**
 * @template T
 * @typedef {Object} Push
 * @property {(value:T) => void} push
 */ /**
 * @template T
 * @typedef {Iterable<T> & Peek<T> & Push<T> & Iterator<T>} Peekable<T>
 */ /**
 * @template T
 * @typedef {AsyncIterable<T> & AsyncPeek<T> & Push<T> & AsyncIterator<T>} AsyncPeekable<T>
 */ /**
 * @template {Iterable<any> | AsyncIterable<any>} I
 * @param {I} iterable
 * @returns {I extends Iterable<infer T>
 *  ? Peekable<T>
 *  : I extends AsyncIterable<infer T>
 *  ? AsyncPeekable<T>
 *  : never
 * }
 */ function peekableIterator(iterable) {
    // @ts-ignore
    const [iterator, symbol] = iterable[Symbol.asyncIterator] ? [
        iterable[Symbol.asyncIterator](),
        Symbol.asyncIterator
    ] : [
        iterable[Symbol.iterator](),
        Symbol.iterator
    ];
    /** @type {any[]} */ const queue = [];
    // @ts-ignore
    return {
        peek: ()=>{
            return iterator.next();
        },
        push: (value)=>{
            queue.push(value);
        },
        next: ()=>{
            if (queue.length) return {
                done: false,
                value: queue.shift()
            };
            return iterator.next();
        },
        [symbol] () {
            return this;
        }
    };
}
module.exports = peekableIterator;

},{}],"jArgg":[function(require,module,exports) {
"use strict";
/**
 * Turns a browser readable stream into an async iterable. Async iteration over
 * returned iterable will lock give stream, preventing any other consumer from
 * acquiring a reader. The lock will be released if iteration loop is broken. To
 * prevent stream cancelling optional `{ preventCancel: true }` could be passed
 * as a second argument.
 * @template T
 * @param {ReadableStream<T>} stream
 * @param {Object} [options]
 * @param {boolean} [options.preventCancel=boolean]
 * @returns {AsyncIterable<T>}
 */ async function* browserReadableStreamToIt(stream, options = {}) {
    const reader = stream.getReader();
    try {
        while(true){
            const result = await reader.read();
            if (result.done) return;
            yield result.value;
        }
    } finally{
        if (options.preventCancel !== true) reader.cancel();
        reader.releaseLock();
    }
}
module.exports = browserReadableStreamToIt;

},{}],"3roGN":[function(require,module,exports) {
"use strict";
/**
 * Collects all values from an (async) iterable into an array and returns it.
 *
 * @template T
 * @param {AsyncIterable<T>|Iterable<T>} source
 */ const all = async (source)=>{
    const arr = [];
    for await (const entry of source)arr.push(entry);
    return arr;
};
module.exports = all;

},{}],"onkae":[function(require,module,exports) {
"use strict";
/**
 * @param {any} obj
 * @returns {obj is ArrayBufferView|ArrayBuffer}
 */ function isBytes(obj) {
    return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;
}
/**
 * @param {any} obj
 * @returns {obj is globalThis.Blob}
 */ function isBlob(obj) {
    return obj.constructor && (obj.constructor.name === "Blob" || obj.constructor.name === "File") && typeof obj.stream === "function";
}
/**
 * An object with a path or content property
 *
 * @param {any} obj
 * @returns {obj is import('ipfs-core-types/src/utils').ImportCandidate}
 */ function isFileObject(obj) {
    return typeof obj === "object" && (obj.path || obj.content);
}
/**
 * @param {any} value
 * @returns {value is ReadableStream}
 */ const isReadableStream = (value)=>value && typeof value.getReader === "function";
module.exports = {
    isBytes,
    isBlob,
    isFileObject,
    isReadableStream
};

},{}],"1dn2V":[function(require,module,exports) {
"use strict";
const errCode = require("err-code");
const browserStreamToIt = require("browser-readablestream-to-it");
const itPeekable = require("it-peekable");
const map = require("it-map");
const { isBytes , isBlob , isReadableStream , isFileObject  } = require("./utils");
const { parseMtime , parseMode  } = require("ipfs-unixfs");
/**
 * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent
 * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate
 * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate
 */ /**
 * @param {import('ipfs-core-types/src/utils').ImportCandidateStream} input
 * @param {(content:ToContent) => AsyncIterable<Uint8Array>} normaliseContent
 */ // eslint-disable-next-line complexity
module.exports = async function* normaliseInput(input, normaliseContent) {
    if (input === null || input === undefined) throw errCode(new Error(`Unexpected input: ${input}`), "ERR_UNEXPECTED_INPUT");
    // String
    if (typeof input === "string" || input instanceof String) {
        yield toFileObject(input.toString(), normaliseContent);
        return;
    }
    // Uint8Array|ArrayBuffer|TypedArray
    // Blob|File
    if (isBytes(input) || isBlob(input)) {
        yield toFileObject(input, normaliseContent);
        return;
    }
    // Browser ReadableStream
    if (isReadableStream(input)) input = browserStreamToIt(input);
    // Iterable<?>
    if (Symbol.iterator in input || Symbol.asyncIterator in input) {
        /** @type {any} peekable */ const peekable = itPeekable(input);
        /** @type {any} value **/ const { value: value1 , done  } = await peekable.peek();
        if (done) {
            // make sure empty iterators result in empty files
            yield* [];
            return;
        }
        peekable.push(value1);
        // (Async)Iterable<Number>
        // (Async)Iterable<Bytes>
        if (Number.isInteger(value1) || isBytes(value1)) {
            yield toFileObject(peekable, normaliseContent);
            return;
        }
        // (Async)Iterable<Blob>
        // (Async)Iterable<String>
        // (Async)Iterable<{ path, content }>
        if (isFileObject(value1) || isBlob(value1) || typeof value1 === "string" || value1 instanceof String) {
            yield* map(peekable, (/** @type {ImportCandidate} */ value)=>toFileObject(value, normaliseContent));
            return;
        }
        // (Async)Iterable<(Async)Iterable<?>>
        // (Async)Iterable<ReadableStream<?>>
        // ReadableStream<(Async)Iterable<?>>
        // ReadableStream<ReadableStream<?>>
        if (value1[Symbol.iterator] || value1[Symbol.asyncIterator] || isReadableStream(value1)) {
            yield* map(peekable, (/** @type {ImportCandidate} */ value)=>toFileObject(value, normaliseContent));
            return;
        }
    }
    // { path, content: ? }
    // Note: Detected _after_ (Async)Iterable<?> because Node.js streams have a
    // `path` property that passes this check.
    if (isFileObject(input)) {
        yield toFileObject(input, normaliseContent);
        return;
    }
    throw errCode(new Error("Unexpected input: " + typeof input), "ERR_UNEXPECTED_INPUT");
};
/**
 * @param {ImportCandidate} input
 * @param {(content:ToContent) => AsyncIterable<Uint8Array>} normaliseContent
 */ async function toFileObject(input, normaliseContent) {
    // @ts-ignore - Those properties don't exist on most input types
    const { path , mode , mtime , content  } = input;
    /** @type {ImporterImportCandidate} */ const file = {
        path: path || "",
        mode: parseMode(mode),
        mtime: parseMtime(mtime)
    };
    if (content) // @ts-ignore TODO vmx 2021-03-30 enable again
    file.content = await normaliseContent(content);
    else if (!path) // @ts-ignore - input still can be different ToContent
    file.content = await normaliseContent(input);
    return file;
}

},{"err-code":"dUrrM","browser-readablestream-to-it":"jArgg","it-peekable":"20t4V","it-map":"a4GLO","./utils":"onkae","ipfs-unixfs":"cCUai"}],"a4GLO":[function(require,module,exports) {
"use strict";
/**
 * Takes an (async) iterable and returns one with each item mapped by the passed
 * function.
 *
 * @template I,O
 * @param {AsyncIterable<I>|Iterable<I>} source
 * @param {function(I):O|Promise<O>} func
 * @returns {AsyncIterable<O>}
 */ const map = async function*(source, func) {
    for await (const val of source)yield func(val);
};
module.exports = map;

},{}],"cCUai":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var errcode = require("err-code");
var unixfs = require("./unixfs.js");
function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {
        "default": e
    };
}
var errcode__default = /*#__PURE__*/ _interopDefaultLegacy(errcode);
const PBData = unixfs.Data;
const types = [
    "raw",
    "directory",
    "file",
    "metadata",
    "symlink",
    "hamt-sharded-directory"
];
const dirTypes = [
    "directory",
    "hamt-sharded-directory"
];
const DEFAULT_FILE_MODE = parseInt("0644", 8);
const DEFAULT_DIRECTORY_MODE = parseInt("0755", 8);
function parseMode(mode) {
    if (mode == null) return undefined;
    if (typeof mode === "number") return mode & 4095;
    mode = mode.toString();
    if (mode.substring(0, 1) === "0") return parseInt(mode, 8) & 4095;
    return parseInt(mode, 10) & 4095;
}
function parseMtime(input) {
    if (input == null) return undefined;
    let mtime;
    if (input.secs != null) mtime = {
        secs: input.secs,
        nsecs: input.nsecs
    };
    if (input.Seconds != null) mtime = {
        secs: input.Seconds,
        nsecs: input.FractionalNanoseconds
    };
    if (Array.isArray(input)) mtime = {
        secs: input[0],
        nsecs: input[1]
    };
    if (input instanceof Date) {
        const ms = input.getTime();
        const secs = Math.floor(ms / 1000);
        mtime = {
            secs: secs,
            nsecs: (ms - secs * 1000) * 1000
        };
    }
    if (!Object.prototype.hasOwnProperty.call(mtime, "secs")) return undefined;
    if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) throw errcode__default["default"](new Error("mtime-nsecs must be within the range [0,999999999]"), "ERR_INVALID_MTIME_NSECS");
    return mtime;
}
class UnixFS {
    static unmarshal(marshaled) {
        const message = PBData.decode(marshaled);
        const decoded = PBData.toObject(message, {
            defaults: false,
            arrays: true,
            longs: Number,
            objects: false
        });
        const data = new UnixFS({
            type: types[decoded.Type],
            data: decoded.Data,
            blockSizes: decoded.blocksizes,
            mode: decoded.mode,
            mtime: decoded.mtime ? {
                secs: decoded.mtime.Seconds,
                nsecs: decoded.mtime.FractionalNanoseconds
            } : undefined
        });
        data._originalMode = decoded.mode || 0;
        return data;
    }
    constructor(options = {
        type: "file"
    }){
        const { type , data , blockSizes , hashType , fanout , mtime , mode  } = options;
        if (type && !types.includes(type)) throw errcode__default["default"](new Error("Type: " + type + " is not valid"), "ERR_INVALID_TYPE");
        this.type = type || "file";
        this.data = data;
        this.hashType = hashType;
        this.fanout = fanout;
        this.blockSizes = blockSizes || [];
        this._originalMode = 0;
        this.mode = parseMode(mode);
        if (mtime) {
            this.mtime = parseMtime(mtime);
            if (this.mtime && !this.mtime.nsecs) this.mtime.nsecs = 0;
        }
    }
    set mode(mode) {
        this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;
        const parsedMode = parseMode(mode);
        if (parsedMode !== undefined) this._mode = parsedMode;
    }
    get mode() {
        return this._mode;
    }
    isDirectory() {
        return Boolean(this.type && dirTypes.includes(this.type));
    }
    addBlockSize(size) {
        this.blockSizes.push(size);
    }
    removeBlockSize(index) {
        this.blockSizes.splice(index, 1);
    }
    fileSize() {
        if (this.isDirectory()) return 0;
        let sum = 0;
        this.blockSizes.forEach((size)=>{
            sum += size;
        });
        if (this.data) sum += this.data.length;
        return sum;
    }
    marshal() {
        let type;
        switch(this.type){
            case "raw":
                type = PBData.DataType.Raw;
                break;
            case "directory":
                type = PBData.DataType.Directory;
                break;
            case "file":
                type = PBData.DataType.File;
                break;
            case "metadata":
                type = PBData.DataType.Metadata;
                break;
            case "symlink":
                type = PBData.DataType.Symlink;
                break;
            case "hamt-sharded-directory":
                type = PBData.DataType.HAMTShard;
                break;
            default:
                throw errcode__default["default"](new Error("Type: " + type + " is not valid"), "ERR_INVALID_TYPE");
        }
        let data = this.data;
        if (!this.data || !this.data.length) data = undefined;
        let mode;
        if (this.mode != null) {
            mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);
            if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) mode = undefined;
            if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) mode = undefined;
        }
        let mtime;
        if (this.mtime != null) {
            const parsed = parseMtime(this.mtime);
            if (parsed) {
                mtime = {
                    Seconds: parsed.secs,
                    FractionalNanoseconds: parsed.nsecs
                };
                if (mtime.FractionalNanoseconds === 0) delete mtime.FractionalNanoseconds;
            }
        }
        const pbData = {
            Type: type,
            Data: data,
            filesize: this.isDirectory() ? undefined : this.fileSize(),
            blocksizes: this.blockSizes,
            hashType: this.hashType,
            fanout: this.fanout,
            mode,
            mtime
        };
        return PBData.encode(pbData).finish();
    }
}
exports.UnixFS = UnixFS;
exports.parseMode = parseMode;
exports.parseMtime = parseMtime;

},{"err-code":"dUrrM","./unixfs.js":"hY2HP"}],"hY2HP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var $protobuf = require("protobufjs/minimal.js");
function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {
        "default": e
    };
}
var $protobuf__default = /*#__PURE__*/ _interopDefaultLegacy($protobuf);
const $Reader = $protobuf__default["default"].Reader, $Writer = $protobuf__default["default"].Writer, $util = $protobuf__default["default"].util;
const $root = $protobuf__default["default"].roots["ipfs-unixfs"] || ($protobuf__default["default"].roots["ipfs-unixfs"] = {});
const Data = $root.Data = (()=>{
    function Data1(p) {
        this.blocksizes = [];
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    Data1.prototype.Type = 0;
    Data1.prototype.Data = $util.newBuffer([]);
    Data1.prototype.filesize = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    Data1.prototype.blocksizes = $util.emptyArray;
    Data1.prototype.hashType = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    Data1.prototype.fanout = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
    Data1.prototype.mode = 0;
    Data1.prototype.mtime = null;
    Data1.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        w.uint32(8).int32(m.Type);
        if (m.Data != null && Object.hasOwnProperty.call(m, "Data")) w.uint32(18).bytes(m.Data);
        if (m.filesize != null && Object.hasOwnProperty.call(m, "filesize")) w.uint32(24).uint64(m.filesize);
        if (m.blocksizes != null && m.blocksizes.length) for(var i = 0; i < m.blocksizes.length; ++i)w.uint32(32).uint64(m.blocksizes[i]);
        if (m.hashType != null && Object.hasOwnProperty.call(m, "hashType")) w.uint32(40).uint64(m.hashType);
        if (m.fanout != null && Object.hasOwnProperty.call(m, "fanout")) w.uint32(48).uint64(m.fanout);
        if (m.mode != null && Object.hasOwnProperty.call(m, "mode")) w.uint32(56).uint32(m.mode);
        if (m.mtime != null && Object.hasOwnProperty.call(m, "mtime")) $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();
        return w;
    };
    Data1.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.Data();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.Type = r.int32();
                    break;
                case 2:
                    m.Data = r.bytes();
                    break;
                case 3:
                    m.filesize = r.uint64();
                    break;
                case 4:
                    if (!(m.blocksizes && m.blocksizes.length)) m.blocksizes = [];
                    if ((t & 7) === 2) {
                        var c2 = r.uint32() + r.pos;
                        while(r.pos < c2)m.blocksizes.push(r.uint64());
                    } else m.blocksizes.push(r.uint64());
                    break;
                case 5:
                    m.hashType = r.uint64();
                    break;
                case 6:
                    m.fanout = r.uint64();
                    break;
                case 7:
                    m.mode = r.uint32();
                    break;
                case 8:
                    m.mtime = $root.UnixTime.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        if (!m.hasOwnProperty("Type")) throw $util.ProtocolError("missing required 'Type'", {
            instance: m
        });
        return m;
    };
    Data1.fromObject = function fromObject(d) {
        if (d instanceof $root.Data) return d;
        var m = new $root.Data();
        switch(d.Type){
            case "Raw":
            case 0:
                m.Type = 0;
                break;
            case "Directory":
            case 1:
                m.Type = 1;
                break;
            case "File":
            case 2:
                m.Type = 2;
                break;
            case "Metadata":
            case 3:
                m.Type = 3;
                break;
            case "Symlink":
            case 4:
                m.Type = 4;
                break;
            case "HAMTShard":
            case 5:
                m.Type = 5;
                break;
        }
        if (d.Data != null) {
            if (typeof d.Data === "string") $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);
            else if (d.Data.length) m.Data = d.Data;
        }
        if (d.filesize != null) {
            if ($util.Long) (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;
            else if (typeof d.filesize === "string") m.filesize = parseInt(d.filesize, 10);
            else if (typeof d.filesize === "number") m.filesize = d.filesize;
            else if (typeof d.filesize === "object") m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);
        }
        if (d.blocksizes) {
            if (!Array.isArray(d.blocksizes)) throw TypeError(".Data.blocksizes: array expected");
            m.blocksizes = [];
            for(var i = 0; i < d.blocksizes.length; ++i){
                if ($util.Long) (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;
                else if (typeof d.blocksizes[i] === "string") m.blocksizes[i] = parseInt(d.blocksizes[i], 10);
                else if (typeof d.blocksizes[i] === "number") m.blocksizes[i] = d.blocksizes[i];
                else if (typeof d.blocksizes[i] === "object") m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);
            }
        }
        if (d.hashType != null) {
            if ($util.Long) (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;
            else if (typeof d.hashType === "string") m.hashType = parseInt(d.hashType, 10);
            else if (typeof d.hashType === "number") m.hashType = d.hashType;
            else if (typeof d.hashType === "object") m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);
        }
        if (d.fanout != null) {
            if ($util.Long) (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;
            else if (typeof d.fanout === "string") m.fanout = parseInt(d.fanout, 10);
            else if (typeof d.fanout === "number") m.fanout = d.fanout;
            else if (typeof d.fanout === "object") m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);
        }
        if (d.mode != null) m.mode = d.mode >>> 0;
        if (d.mtime != null) {
            if (typeof d.mtime !== "object") throw TypeError(".Data.mtime: object expected");
            m.mtime = $root.UnixTime.fromObject(d.mtime);
        }
        return m;
    };
    Data1.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.arrays || o.defaults) d.blocksizes = [];
        if (o.defaults) {
            d.Type = o.enums === String ? "Raw" : 0;
            if (o.bytes === String) d.Data = "";
            else {
                d.Data = [];
                if (o.bytes !== Array) d.Data = $util.newBuffer(d.Data);
            }
            if ($util.Long) {
                var n = new $util.Long(0, 0, true);
                d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
            } else d.filesize = o.longs === String ? "0" : 0;
            if ($util.Long) {
                var n = new $util.Long(0, 0, true);
                d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
            } else d.hashType = o.longs === String ? "0" : 0;
            if ($util.Long) {
                var n = new $util.Long(0, 0, true);
                d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
            } else d.fanout = o.longs === String ? "0" : 0;
            d.mode = 0;
            d.mtime = null;
        }
        if (m.Type != null && m.hasOwnProperty("Type")) d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;
        if (m.Data != null && m.hasOwnProperty("Data")) d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;
        if (m.filesize != null && m.hasOwnProperty("filesize")) {
            if (typeof m.filesize === "number") d.filesize = o.longs === String ? String(m.filesize) : m.filesize;
            else d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;
        }
        if (m.blocksizes && m.blocksizes.length) {
            d.blocksizes = [];
            for(var j = 0; j < m.blocksizes.length; ++j)if (typeof m.blocksizes[j] === "number") d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];
            else d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];
        }
        if (m.hashType != null && m.hasOwnProperty("hashType")) {
            if (typeof m.hashType === "number") d.hashType = o.longs === String ? String(m.hashType) : m.hashType;
            else d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;
        }
        if (m.fanout != null && m.hasOwnProperty("fanout")) {
            if (typeof m.fanout === "number") d.fanout = o.longs === String ? String(m.fanout) : m.fanout;
            else d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;
        }
        if (m.mode != null && m.hasOwnProperty("mode")) d.mode = m.mode;
        if (m.mtime != null && m.hasOwnProperty("mtime")) d.mtime = $root.UnixTime.toObject(m.mtime, o);
        return d;
    };
    Data1.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf__default["default"].util.toJSONOptions);
    };
    Data1.DataType = function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Raw"] = 0;
        values[valuesById[1] = "Directory"] = 1;
        values[valuesById[2] = "File"] = 2;
        values[valuesById[3] = "Metadata"] = 3;
        values[valuesById[4] = "Symlink"] = 4;
        values[valuesById[5] = "HAMTShard"] = 5;
        return values;
    }();
    return Data1;
})();
const UnixTime = $root.UnixTime = (()=>{
    function UnixTime1(p) {
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    UnixTime1.prototype.Seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    UnixTime1.prototype.FractionalNanoseconds = 0;
    UnixTime1.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        w.uint32(8).int64(m.Seconds);
        if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, "FractionalNanoseconds")) w.uint32(21).fixed32(m.FractionalNanoseconds);
        return w;
    };
    UnixTime1.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.UnixTime();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.Seconds = r.int64();
                    break;
                case 2:
                    m.FractionalNanoseconds = r.fixed32();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        if (!m.hasOwnProperty("Seconds")) throw $util.ProtocolError("missing required 'Seconds'", {
            instance: m
        });
        return m;
    };
    UnixTime1.fromObject = function fromObject(d) {
        if (d instanceof $root.UnixTime) return d;
        var m = new $root.UnixTime();
        if (d.Seconds != null) {
            if ($util.Long) (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;
            else if (typeof d.Seconds === "string") m.Seconds = parseInt(d.Seconds, 10);
            else if (typeof d.Seconds === "number") m.Seconds = d.Seconds;
            else if (typeof d.Seconds === "object") m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();
        }
        if (d.FractionalNanoseconds != null) m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;
        return m;
    };
    UnixTime1.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.defaults) {
            if ($util.Long) {
                var n = new $util.Long(0, 0, false);
                d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
            } else d.Seconds = o.longs === String ? "0" : 0;
            d.FractionalNanoseconds = 0;
        }
        if (m.Seconds != null && m.hasOwnProperty("Seconds")) {
            if (typeof m.Seconds === "number") d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;
            else d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;
        }
        if (m.FractionalNanoseconds != null && m.hasOwnProperty("FractionalNanoseconds")) d.FractionalNanoseconds = m.FractionalNanoseconds;
        return d;
    };
    UnixTime1.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf__default["default"].util.toJSONOptions);
    };
    return UnixTime1;
})();
const Metadata = $root.Metadata = (()=>{
    function Metadata1(p) {
        if (p) {
            for(var ks = Object.keys(p), i = 0; i < ks.length; ++i)if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
    }
    Metadata1.prototype.MimeType = "";
    Metadata1.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.MimeType != null && Object.hasOwnProperty.call(m, "MimeType")) w.uint32(10).string(m.MimeType);
        return w;
    };
    Metadata1.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();
        while(r.pos < c){
            var t = r.uint32();
            switch(t >>> 3){
                case 1:
                    m.MimeType = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
            }
        }
        return m;
    };
    Metadata1.fromObject = function fromObject(d) {
        if (d instanceof $root.Metadata) return d;
        var m = new $root.Metadata();
        if (d.MimeType != null) m.MimeType = String(d.MimeType);
        return m;
    };
    Metadata1.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};
        if (o.defaults) d.MimeType = "";
        if (m.MimeType != null && m.hasOwnProperty("MimeType")) d.MimeType = m.MimeType;
        return d;
    };
    Metadata1.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf__default["default"].util.toJSONOptions);
    };
    return Metadata1;
})();
exports.Data = Data;
exports.Metadata = Metadata;
exports.UnixTime = UnixTime;
exports["default"] = $root;

},{"protobufjs/minimal.js":"kgguT"}],"kgguT":[function(require,module,exports) {
// minimal library entry point.
"use strict";
module.exports = require("./src/index-minimal");

},{"./src/index-minimal":"kFkOY"}],"kFkOY":[function(require,module,exports) {
"use strict";
var protobuf = exports;
/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */ protobuf.build = "minimal";
// Serialization
protobuf.Writer = require("./writer");
protobuf.BufferWriter = require("./writer_buffer");
protobuf.Reader = require("./reader");
protobuf.BufferReader = require("./reader_buffer");
// Utility
protobuf.util = require("./util/minimal");
protobuf.rpc = require("./rpc");
protobuf.roots = require("./roots");
protobuf.configure = configure;
/* istanbul ignore next */ /**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */ function configure() {
    protobuf.util._configure();
    protobuf.Writer._configure(protobuf.BufferWriter);
    protobuf.Reader._configure(protobuf.BufferReader);
}
// Set up buffer utility according to the environment
configure();

},{"./writer":"boWmp","./writer_buffer":"gIB4S","./reader":"bN2lE","./reader_buffer":"1b0Ms","./util/minimal":"4HDe1","./rpc":"eRwa1","./roots":"bJQDp"}],"boWmp":[function(require,module,exports) {
"use strict";
module.exports = Writer;
var util = require("./util/minimal");
var BufferWriter; // cyclic
var LongBits = util.LongBits, base64 = util.base64, utf8 = util.utf8;
/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */ function Op(fn, len, val) {
    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */ this.fn = fn;
    /**
     * Value byte length.
     * @type {number}
     */ this.len = len;
    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */ this.next = undefined;
    /**
     * Value to write.
     * @type {*}
     */ this.val = val; // type varies
}
/* istanbul ignore next */ function noop() {} // eslint-disable-line no-empty-function
/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */ function State(writer) {
    /**
     * Current head.
     * @type {Writer.Op}
     */ this.head = writer.head;
    /**
     * Current tail.
     * @type {Writer.Op}
     */ this.tail = writer.tail;
    /**
     * Current buffer length.
     * @type {number}
     */ this.len = writer.len;
    /**
     * Next state.
     * @type {State|null}
     */ this.next = writer.states;
}
/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */ function Writer() {
    /**
     * Current length.
     * @type {number}
     */ this.len = 0;
    /**
     * Operations head.
     * @type {Object}
     */ this.head = new Op(noop, 0, 0);
    /**
     * Operations tail
     * @type {Object}
     */ this.tail = this.head;
    /**
     * Linked forked states.
     * @type {Object|null}
     */ this.states = null;
// When a value is written, the writer calculates its byte length and puts it into a linked
// list of operations to perform when finish() is called. This both allows us to allocate
// buffers of the exact required size and reduces the amount of work we have to do compared
// to first calculating over objects and then encoding over objects. In our case, the encoding
// part is just a linked list walk calling operations with already prepared values.
}
var create = function create() {
    return util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
            return new BufferWriter();
        })();
    } : function create_array() {
        return new Writer();
    };
};
/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */ Writer.create = create();
/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */ Writer.alloc = function alloc(size) {
    return new util.Array(size);
};
// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */ if (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */ Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};
function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}
function writeVarint32(val, buf, pos) {
    while(val > 127){
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}
/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */ function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}
VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;
/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;
    return this;
};
/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.int32 = function write_int32(value) {
    return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
     : this.uint32(value);
};
/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};
function writeVarint64(val, buf, pos) {
    while(val.hi){
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while(val.lo > 127){
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}
/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};
/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.int64 = Writer.prototype.uint64;
/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};
/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};
function writeFixed32(val, buf, pos) {
    buf[pos] = val & 255;
    buf[pos + 1] = val >>> 8 & 255;
    buf[pos + 2] = val >>> 16 & 255;
    buf[pos + 3] = val >>> 24;
}
/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};
/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.sfixed32 = Writer.prototype.fixed32;
/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};
/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */ Writer.prototype.sfixed64 = Writer.prototype.fixed64;
/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};
/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};
var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
    buf.set(val, pos); // also works for plain array values
} : function writeBytes_for(val, buf, pos) {
    for(var i = 0; i < val.length; ++i)buf[pos + i] = val[i];
};
/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */ Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len) return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};
/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */ Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
};
/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */ Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};
/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */ Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
    }
    return this;
};
/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */ Writer.prototype.ldelim = function ldelim() {
    var head = this.head, tail = this.tail, len = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};
/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */ Writer.prototype.finish = function finish() {
    var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
    while(head){
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};
Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
    Writer.create = create();
    BufferWriter._configure();
};

},{"./util/minimal":"4HDe1"}],"4HDe1":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var util = exports;
// used to return a Promise where callback is omitted
util.asPromise = require("@protobufjs/aspromise");
// converts to / from base64 encoded strings
util.base64 = require("@protobufjs/base64");
// base class of rpc.Service
util.EventEmitter = require("@protobufjs/eventemitter");
// float handling accross browsers
util.float = require("@protobufjs/float");
// requires modules optionally and hides the call from bundlers
util.inquire = require("@protobufjs/inquire");
// converts to / from utf8 encoded strings
util.utf8 = require("@protobufjs/utf8");
// provides a node-like buffer pool in the browser
util.pool = require("@protobufjs/pool");
// utility to work with the low and high bits of a 64 bit value
util.LongBits = require("./longbits");
/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 */ util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
/**
 * Global object reference.
 * @memberof util
 * @type {Object}
 */ util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || this; // eslint-disable-line no-invalid-this
/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */ util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes
/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */ util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes
/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */ util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};
/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */ util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};
/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */ util.isObject = function isObject(value) {
    return value && typeof value === "object";
};
/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */ util.isset = /**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */ util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};
/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */ /**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */ util.Buffer = function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */ return null;
    }
}();
// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;
// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;
/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */ util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */ return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
};
/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */ util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */  : Array;
/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */ /**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */ util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long || /* istanbul ignore next */ util.global.Long || util.inquire("long");
/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */ util.key2Re = /^true|false|0|1$/;
/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */ util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */ util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */ util.longToHash = function longToHash(value) {
    return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
};
/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */ util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};
/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */ function merge(dst, src, ifNotSet) {
    for(var keys = Object.keys(src), i = 0; i < keys.length; ++i)if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];
    return dst;
}
util.merge = merge;
/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */ util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};
/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */ function newError(name) {
    function CustomError(message, properties) {
        if (!(this instanceof CustomError)) return new CustomError(message, properties);
        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function
        Object.defineProperty(this, "message", {
            get: function() {
                return message;
            }
        });
        /* istanbul ignore next */ if (Error.captureStackTrace) Error.captureStackTrace(this, CustomError);
        else Object.defineProperty(this, "stack", {
            value: new Error().stack || ""
        });
        if (properties) merge(this, properties);
    }
    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
    Object.defineProperty(CustomError.prototype, "name", {
        get: function() {
            return name;
        }
    });
    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };
    return CustomError;
}
util.newError = newError;
/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */ util.ProtocolError = newError("ProtocolError");
/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */ /**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */ /**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */ util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for(var i1 = 0; i1 < fieldNames.length; ++i1)fieldMap[fieldNames[i1]] = 1;
    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */ return function() {
        for(var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];
    };
};
/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */ /**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */ util.oneOfSetter = function setOneOf(fieldNames) {
    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */ return function(name) {
        for(var i = 0; i < fieldNames.length; ++i)if (fieldNames[i] !== name) delete this[fieldNames[i]];
    };
};
/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */ util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};
// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */ if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || /* istanbul ignore next */ function Buffer_from(value, encoding) {
        return new Buffer(value, encoding);
    };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe || /* istanbul ignore next */ function Buffer_allocUnsafe(size) {
        return new Buffer(size);
    };
};

},{"@protobufjs/aspromise":"gv7US","@protobufjs/base64":"aOjmr","@protobufjs/eventemitter":"lWFnX","@protobufjs/float":"gifXM","@protobufjs/inquire":"fon4w","@protobufjs/utf8":"8DJTf","@protobufjs/pool":"fadtm","./longbits":"c4DvK"}],"gv7US":[function(require,module,exports) {
"use strict";
module.exports = asPromise;
/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */ /**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */ function asPromise(fn, ctx /*, varargs */ ) {
    var params1 = new Array(arguments.length - 1), offset1 = 0, index = 2, pending = true;
    while(index < arguments.length)params1[offset1++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params1[offset1] = function callback(err /*, varargs */ ) {
            if (pending) {
                pending = false;
                if (err) reject(err);
                else {
                    var params = new Array(arguments.length - 1), offset = 0;
                    while(offset < params.length)params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params1);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}

},{}],"aOjmr":[function(require,module,exports) {
"use strict";
/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */ var base64 = exports;
/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */ base64.length = function length(string) {
    var p = string.length;
    if (!p) return 0;
    var n = 0;
    while(--p % 4 > 1 && string.charAt(p) === "=")++n;
    return Math.ceil(string.length * 3) / 4 - n;
};
// Base64 encoding table
var b64 = new Array(64);
// Base64 decoding table
var s64 = new Array(123);
// 65..90, 97..122, 48..57, 43, 47
for(var i = 0; i < 64;)s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */ base64.encode = function encode(buffer, start, end) {
    var parts = null, chunk = [];
    var i1 = 0, j = 0, t; // temporary
    while(start < end){
        var b = buffer[start++];
        switch(j){
            case 0:
                chunk[i1++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i1++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i1++] = b64[t | b >> 6];
                chunk[i1++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i1 > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i1 = 0;
        }
    }
    if (j) {
        chunk[i1++] = b64[t];
        chunk[i1++] = 61;
        if (j === 1) chunk[i1++] = 61;
    }
    if (parts) {
        if (i1) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i1)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i1));
};
var invalidEncoding = "invalid encoding";
/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */ base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, t; // temporary
    for(var i2 = 0; i2 < string.length;){
        var c = string.charCodeAt(i2++);
        if (c === 61 && j > 1) break;
        if ((c = s64[c]) === undefined) throw Error(invalidEncoding);
        switch(j){
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1) throw Error(invalidEncoding);
    return offset - start;
};
/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */ base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};

},{}],"lWFnX":[function(require,module,exports) {
"use strict";
module.exports = EventEmitter;
/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */ function EventEmitter() {
    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */ this._listeners = {};
}
/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */ EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn: fn,
        ctx: ctx || this
    });
    return this;
};
/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */ EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined) this._listeners = {};
    else if (fn === undefined) this._listeners[evt] = [];
    else {
        var listeners = this._listeners[evt];
        for(var i = 0; i < listeners.length;)if (listeners[i].fn === fn) listeners.splice(i, 1);
        else ++i;
    }
    return this;
};
/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */ EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [], i = 1;
        for(; i < arguments.length;)args.push(arguments[i++]);
        for(i = 0; i < listeners.length;)listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};

},{}],"gifXM":[function(require,module,exports) {
"use strict";
module.exports = factory(factory);
/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */ /**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */ /**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */ /**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */ /**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */ /**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */ /**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */ /**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */ /**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */ // Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {
    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {
        var f32 = new Float32Array([
            -0
        ]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }
        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }
        /* istanbul ignore next */ exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */ exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }
        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }
        /* istanbul ignore next */ exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */ exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
    // float: ieee754
    })();
    else (function() {
        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign) val = -val;
            if (val === 0) writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val)) writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }
        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
             ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }
        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
    })();
    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {
        var f64 = new Float64Array([
            -0
        ]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }
        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }
        /* istanbul ignore next */ exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */ exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }
        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }
        /* istanbul ignore next */ exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */ exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
    // double: ieee754
    })();
    else (function() {
        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign) val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) {
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) {
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024) exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }
        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal
             ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }
        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
    })();
    return exports;
}
// uint helpers
function writeUintLE(val, buf, pos) {
    buf[pos] = val & 255;
    buf[pos + 1] = val >>> 8 & 255;
    buf[pos + 2] = val >>> 16 & 255;
    buf[pos + 3] = val >>> 24;
}
function writeUintBE(val, buf, pos) {
    buf[pos] = val >>> 24;
    buf[pos + 1] = val >>> 16 & 255;
    buf[pos + 2] = val >>> 8 & 255;
    buf[pos + 3] = val & 255;
}
function readUintLE(buf, pos) {
    return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
}
function readUintBE(buf, pos) {
    return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
}

},{}],"fon4w":[function(require,module,exports) {
"use strict";
module.exports = inquire;
/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */ function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length)) return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}

},{}],"8DJTf":[function(require,module,exports) {
"use strict";
/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */ var utf8 = exports;
/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */ utf8.length = function utf8_length(string) {
    var len = 0, c = 0;
    for(var i = 0; i < string.length; ++i){
        c = string.charCodeAt(i);
        if (c < 128) len += 1;
        else if (c < 2048) len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else len += 3;
    }
    return len;
};
/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */ utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1) return "";
    var parts = null, chunk = [], i = 0, t; // temporary
    while(start < end){
        t = buffer[start++];
        if (t < 128) chunk[i++] = t;
        else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};
/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */ utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset, c1, c2; // character 2
    for(var i = 0; i < string.length; ++i){
        c1 = string.charCodeAt(i);
        if (c1 < 128) buffer[offset++] = c1;
        else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6 | 192;
            buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18 | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12 | 224;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
        }
    }
    return offset - start;
};

},{}],"fadtm":[function(require,module,exports) {
"use strict";
module.exports = pool;
/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */ /**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */ /**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */ function pool(alloc, slice, size1) {
    var SIZE = size1 || 8192;
    var MAX = SIZE >>> 1;
    var slab = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX) return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) offset = (offset | 7) + 1;
        return buf;
    };
}

},{}],"c4DvK":[function(require,module,exports) {
"use strict";
module.exports = LongBits;
var util = require("../util/minimal");
/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */ function LongBits(lo, hi) {
    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.
    /**
     * Low bits.
     * @type {number}
     */ this.lo = lo >>> 0;
    /**
     * High bits.
     * @type {number}
     */ this.hi = hi >>> 0;
}
/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */ var zero = LongBits.zero = new LongBits(0, 0);
zero.toNumber = function() {
    return 0;
};
zero.zzEncode = zero.zzDecode = function() {
    return this;
};
zero.length = function() {
    return 1;
};
/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */ var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */ LongBits.fromNumber = function fromNumber(value) {
    if (value === 0) return zero;
    var sign = value < 0;
    if (sign) value = -value;
    var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295) hi = 0;
        }
    }
    return new LongBits(lo, hi);
};
/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */ LongBits.from = function from(value) {
    if (typeof value === "number") return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */ if (util.Long) value = util.Long.fromString(value);
        else return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};
/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */ LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
        if (!lo) hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};
/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */ LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : {
        low: this.lo | 0,
        high: this.hi | 0,
        unsigned: Boolean(unsigned)
    };
};
var charCodeAt = String.prototype.charCodeAt;
/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */ LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash) return zero;
    return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);
};
/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */ LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
};
/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */ LongBits.prototype.zzEncode = function zzEncode() {
    var mask = this.hi >> 31;
    this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo = (this.lo << 1 ^ mask) >>> 0;
    return this;
};
/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */ LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi = (this.hi >>> 1 ^ mask) >>> 0;
    return this;
};
/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */ LongBits.prototype.length = function length() {
    var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
    return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
};

},{"../util/minimal":"4HDe1"}],"gIB4S":[function(require,module,exports) {
"use strict";
module.exports = BufferWriter;
// extends Writer
var Writer = require("./writer");
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
var util = require("./util/minimal");
/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */ function BufferWriter() {
    Writer.call(this);
}
BufferWriter._configure = function() {
    /**
     * Allocates a buffer of the specified size.
     * @function
     * @param {number} size Buffer size
     * @returns {Buffer} Buffer
     */ BufferWriter.alloc = util._Buffer_allocUnsafe;
    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
    // also works for plain array values
    } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy) val.copy(buf, pos, 0, val.length);
        else for(var i = 0; i < val.length;)buf[pos++] = val[i++];
    };
};
/**
 * @override
 */ BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value)) value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len) this._push(BufferWriter.writeBytesBuffer, len, value);
    return this;
};
function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) util.utf8.write(val, buf, pos);
    else if (buf.utf8Write) buf.utf8Write(val, pos);
    else buf.write(val, pos);
}
/**
 * @override
 */ BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = util.Buffer.byteLength(value);
    this.uint32(len);
    if (len) this._push(writeStringBuffer, len, value);
    return this;
};
/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */ BufferWriter._configure();

},{"./writer":"boWmp","./util/minimal":"4HDe1"}],"bN2lE":[function(require,module,exports) {
"use strict";
module.exports = Reader;
var util = require("./util/minimal");
var BufferReader; // cyclic
var LongBits = util.LongBits, utf8 = util.utf8;
/* istanbul ignore next */ function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}
/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */ function Reader(buffer) {
    /**
     * Read buffer.
     * @type {Uint8Array}
     */ this.buf = buffer;
    /**
     * Read buffer position.
     * @type {number}
     */ this.pos = 0;
    /**
     * Read buffer length.
     * @type {number}
     */ this.len = buffer.length;
}
var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
    if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);
    throw Error("illegal buffer");
} : function create_array(buffer) {
    if (Array.isArray(buffer)) return new Reader(buffer);
    throw Error("illegal buffer");
};
var create = function create() {
    return util.Buffer ? function create_buffer_setup(buffer1) {
        return (Reader.create = function create_buffer(buffer) {
            return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer) : create_array(buffer);
        })(buffer1);
    } : create_array;
};
/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */ Reader.create = create();
Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;
/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */ Reader.prototype.uint32 = function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128) return value;
        /* istanbul ignore if */ if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
}();
/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */ Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};
/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */ Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};
/* eslint-disable no-invalid-this */ function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) {
        for(; i < 4; ++i){
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128) return bits;
        i = 0;
    } else {
        for(; i < 3; ++i){
            /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128) return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) for(; i < 5; ++i){
        // 6th..10th
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
        if (this.buf[this.pos++] < 128) return bits;
    }
    else for(; i < 5; ++i){
        /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);
        // 6th..10th
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
        if (this.buf[this.pos++] < 128) return bits;
    }
    /* istanbul ignore next */ throw Error("invalid varint encoding");
}
/* eslint-enable no-invalid-this */ /**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */ Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};
function readFixed32_end(buf, end) {
    return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
}
/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */ Reader.prototype.fixed32 = function read_fixed32() {
    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    return readFixed32_end(this.buf, this.pos += 4);
};
/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */ Reader.prototype.sfixed32 = function read_sfixed32() {
    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    return readFixed32_end(this.buf, this.pos += 4) | 0;
};
/* eslint-disable no-invalid-this */ function readFixed64() {
    /* istanbul ignore if */ if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);
    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}
/* eslint-enable no-invalid-this */ /**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */ /**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */ Reader.prototype.float = function read_float() {
    /* istanbul ignore if */ if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};
/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */ Reader.prototype.double = function read_double() {
    /* istanbul ignore if */ if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);
    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};
/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */ Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(), start = this.pos, end = this.pos + length;
    /* istanbul ignore if */ if (end > this.len) throw indexOutOfRange(this, length);
    this.pos += length;
    if (Array.isArray(this.buf)) return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
     ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
};
/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */ Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};
/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */ Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */ if (this.pos + length > this.len) throw indexOutOfRange(this, length);
        this.pos += length;
    } else do {
        /* istanbul ignore if */ if (this.pos >= this.len) throw indexOutOfRange(this);
    }while (this.buf[this.pos++] & 128);
    return this;
};
/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */ Reader.prototype.skipType = function(wireType) {
    switch(wireType){
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while((wireType = this.uint32() & 7) !== 4)this.skipType(wireType);
            break;
        case 5:
            this.skip(4);
            break;
        /* istanbul ignore next */ default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};
Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;
    Reader.create = create();
    BufferReader._configure();
    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {
        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },
        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },
        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },
        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },
        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }
    });
};

},{"./util/minimal":"4HDe1"}],"1b0Ms":[function(require,module,exports) {
"use strict";
module.exports = BufferReader;
// extends Reader
var Reader = require("./reader");
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
var util = require("./util/minimal");
/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */ function BufferReader(buffer) {
    Reader.call(this, buffer);
/**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */ }
BufferReader._configure = function() {
    /* istanbul ignore else */ if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;
};
/**
 * @override
 */ BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
};
/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */ BufferReader._configure();

},{"./reader":"bN2lE","./util/minimal":"4HDe1"}],"eRwa1":[function(require,module,exports) {
"use strict";
/**
 * Streaming RPC helpers.
 * @namespace
 */ var rpc = exports;
/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */ /**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */ rpc.Service = require("./rpc/service");

},{"./rpc/service":"lVKlz"}],"lVKlz":[function(require,module,exports) {
"use strict";
module.exports = Service;
var util = require("../util/minimal");
// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */ /**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */ /**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */ function Service(rpcImpl, requestDelimited, responseDelimited) {
    if (typeof rpcImpl !== "function") throw TypeError("rpcImpl must be a function");
    util.EventEmitter.call(this);
    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */ this.rpcImpl = rpcImpl;
    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */ this.requestDelimited = Boolean(requestDelimited);
    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */ this.responseDelimited = Boolean(responseDelimited);
}
/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */ Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
    if (!request) throw TypeError("request must be specified");
    var self = this;
    if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);
    if (!self.rpcImpl) {
        setTimeout(function() {
            callback(Error("already ended"));
        }, 0);
        return undefined;
    }
    try {
        return self.rpcImpl(method, requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(), function rpcCallback(err, response) {
            if (err) {
                self.emit("error", err, method);
                return callback(err);
            }
            if (response === null) {
                self.end(/* endedByRPC */ true);
                return undefined;
            }
            if (!(response instanceof responseCtor)) try {
                response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
            } catch (err1) {
                self.emit("error", err1, method);
                return callback(err1);
            }
            self.emit("data", response, method);
            return callback(null, response);
        });
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() {
            callback(err);
        }, 0);
        return undefined;
    }
};
/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */ Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};

},{"../util/minimal":"4HDe1"}],"bJQDp":[function(require,module,exports) {
"use strict";
module.exports = {}; /**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */ 

},{}],"bLz1C":[function(require,module,exports) {
"use strict";
/**
 * @param {number | string | undefined} mode
 */ module.exports = (mode)=>{
    if (mode == null) return undefined;
    if (typeof mode === "string") return mode;
    return mode.toString(8).padStart(4, "0");
};

},{}],"dXrzw":[function(require,module,exports) {
"use strict";
const modeToString = require("./mode-to-string");
const parseMtime = require("../lib/parse-mtime");
/**
 * @param {*} params
 * @returns {URLSearchParams}
 */ module.exports = ({ arg: arg1 , searchParams , hashAlg , mtime , mode , ...options } = {})=>{
    if (searchParams) options = {
        ...options,
        ...searchParams
    };
    if (hashAlg) options.hash = hashAlg;
    if (mtime != null) {
        mtime = parseMtime(mtime);
        options.mtime = mtime.secs;
        options.mtimeNsecs = mtime.nsecs;
    }
    if (mode != null) options.mode = modeToString(mode);
    if (options.timeout && !isNaN(options.timeout)) // server API expects timeouts as strings
    options.timeout = `${options.timeout}ms`;
    if (arg1 === undefined || arg1 === null) arg1 = [];
    else if (!Array.isArray(arg1)) arg1 = [
        arg1
    ];
    const urlSearchParams = new URLSearchParams(options);
    arg1.forEach((/** @type {any} */ arg)=>urlSearchParams.append("arg", arg));
    return urlSearchParams;
};

},{"./mode-to-string":"bLz1C","../lib/parse-mtime":"a8r0t"}],"a8r0t":[function(require,module,exports) {
"use strict";
const errCode = require("err-code");
/**
 * @param {any} input
 */ function parseMtime(input) {
    if (input == null) return undefined;
    /** @type {{ secs: number, nsecs?: number } | undefined} */ let mtime;
    // { secs, nsecs }
    if (input.secs != null) mtime = {
        secs: input.secs,
        nsecs: input.nsecs
    };
    // UnixFS TimeSpec
    if (input.Seconds != null) mtime = {
        secs: input.Seconds,
        nsecs: input.FractionalNanoseconds
    };
    // process.hrtime()
    if (Array.isArray(input)) mtime = {
        secs: input[0],
        nsecs: input[1]
    };
    // Javascript Date
    if (input instanceof Date) {
        const ms = input.getTime();
        const secs = Math.floor(ms / 1000);
        mtime = {
            secs: secs,
            nsecs: (ms - secs * 1000) * 1000
        };
    }
    /*
  TODO: https://github.com/ipfs/aegir/issues/487

  // process.hrtime.bigint()
  if (input instanceof BigInt) {
    const secs = input / BigInt(1e9)
    const nsecs = input - (secs * BigInt(1e9))

    mtime = {
      secs: parseInt(secs.toString()),
      nsecs: parseInt(nsecs.toString())
    }
  }
  */ if (!Object.prototype.hasOwnProperty.call(mtime, "secs")) return undefined;
    if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) throw errCode(new Error("mtime-nsecs must be within the range [0,999999999]"), "ERR_INVALID_MTIME_NSECS");
    return mtime;
}
module.exports = parseMtime;

},{"err-code":"dUrrM"}],"gbGf5":[function(require,module,exports) {
"use strict";
const { anySignal  } = require("any-signal");
/**
 * @param {any[]} signals
 * @returns {AbortSignal[]}
 */ function filter(signals) {
    return signals.filter(Boolean);
}
/**
 * @param  {...AbortSignal|undefined} signals
 */ module.exports = (...signals)=>{
    return anySignal(filter(signals));
};

},{"any-signal":"fXfV7"}],"iWUUH":[function(require,module,exports) {
"use strict";
/**
 * Returns the last item of an (async) iterable, unless empty, in which case
 * return `undefined`.
 *
 * @template T
 * @param {AsyncIterable<T>|Iterable<T>} source
 */ const last = async (source)=>{
    let res;
    for await (const entry of source)res = entry;
    return res;
};
module.exports = last;

},{}],"g5lPV":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        wantlist: require("./wantlist")(config),
        wantlistForPeer: require("./wantlist-for-peer")(config),
        stat: require("./stat")(config),
        unwant: require("./unwant")(config)
    });

},{"./wantlist":"k1dRA","./wantlist-for-peer":"hO58Q","./stat":"hTAmV","./unwant":"ipsZY"}],"k1dRA":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {BitswapAPI["wantlist"]}
   */ async function wantlist(options = {}) {
        const res = await (await api.post("bitswap/wantlist", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        })).json();
        return (res.Keys || []).map((/** @type {{ '/': string }} */ k)=>CID.parse(k["/"]));
    }
    return wantlist;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"hO58Q":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {BitswapAPI["wantlistForPeer"]}
   */ async function wantlistForPeer(peerId, options = {}) {
        const res = await (await api.post("bitswap/wantlist", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                ...options,
                peer: peerId.toString()
            }),
            headers: options.headers
        })).json();
        return (res.Keys || []).map((/** @type {{ '/': string }} */ k)=>CID.parse(k["/"]));
    }
    return wantlistForPeer;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"hTAmV":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {BitswapAPI["stat"]}
   */ async function stat(options = {}) {
        const res = await api.post("bitswap/stat", {
            searchParams: toUrlSearchParams(options),
            signal: options.signal,
            headers: options.headers
        });
        return toCoreInterface(await res.json());
    }
    return stat;
});
/**
 * @param {any} res
 */ function toCoreInterface(res) {
    return {
        provideBufLen: res.ProvideBufLen,
        wantlist: (res.Wantlist || []).map((/** @type {{ '/': string }} */ k)=>CID.parse(k["/"])),
        peers: res.Peers || [],
        blocksReceived: BigInt(res.BlocksReceived),
        dataReceived: BigInt(res.DataReceived),
        blocksSent: BigInt(res.BlocksSent),
        dataSent: BigInt(res.DataSent),
        dupBlksReceived: BigInt(res.DupBlksReceived),
        dupDataReceived: BigInt(res.DupDataReceived)
    };
}

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"ipsZY":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {BitswapAPI["unwant"]}
   */ async function unwant(cid, options = {}) {
        const res = await api.post("bitswap/unwant", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: cid.toString(),
                ...options
            }),
            headers: options.headers
        });
        return res.json();
    }
    return unwant;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"cjwrI":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        get: require("./get")(config),
        stat: require("./stat")(config),
        put: require("./put")(config),
        rm: require("./rm")(config)
    });

},{"./get":"8GooF","./stat":"6MRq7","./put":"8XViA","./rm":"hE7sH"}],"8GooF":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {BlockAPI["get"]}
   */ async function get(cid, options = {}) {
        const res = await api.post("block/get", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: cid.toString(),
                ...options
            }),
            headers: options.headers
        });
        return new Uint8Array(await res.arrayBuffer());
    }
    return get;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"6MRq7":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {BlockAPI["stat"]}
   */ async function stat(cid, options = {}) {
        const res = await api.post("block/stat", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: cid.toString(),
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        return {
            cid: CID.parse(data.Key),
            size: data.Size
        };
    }
    return stat;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"8XViA":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const multipartRequest = require("../lib/multipart-request");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const abortSignal = require("../lib/abort-signal");
const { AbortController  } = require("native-abort-controller");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {BlockAPI["put"]}
   */ async function put(data, options = {}) {
        // allow aborting requests on body errors
        const controller = new AbortController();
        const signal = abortSignal(controller.signal, options.signal);
        let res;
        try {
            const response = await api.post("block/put", {
                signal: signal,
                searchParams: toUrlSearchParams(options),
                ...await multipartRequest(data, controller, options.headers)
            });
            res = await response.json();
        } catch (err) {
            // Retry with "protobuf"/"cbor" format for go-ipfs
            // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved
            if (options.format === "dag-pb") return put(data, {
                ...options,
                format: "protobuf"
            });
            else if (options.format === "dag-cbor") return put(data, {
                ...options,
                format: "cbor"
            });
            throw err;
        }
        return CID.parse(res.Key);
    }
    return put;
});

},{"multiformats/cid":"4uoBU","../lib/multipart-request":"bsPTI","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","../lib/abort-signal":"gbGf5","native-abort-controller":"8rhv7"}],"hE7sH":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI
 * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult
 */ module.exports = configure((api)=>{
    /**
   * @type {BlockAPI["rm"]}
   */ async function* rm(cid1, options = {}) {
        if (!Array.isArray(cid1)) cid1 = [
            cid1
        ];
        const res = await api.post("block/rm", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: cid1.map((cid)=>cid.toString()),
                "stream-channels": true,
                ...options
            }),
            headers: options.headers
        });
        for await (const removed of res.ndjson())yield toCoreInterface(removed);
    }
    return rm;
});
/**
 * @param {*} removed
 */ function toCoreInterface(removed) {
    /** @type {RmResult} */ const out = {
        cid: CID.parse(removed.Hash)
    };
    if (removed.Error) out.error = new Error(removed.Error);
    return out;
}

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"gzFiA":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        add: require("./add")(config),
        clear: require("./clear")(config),
        rm: require("./rm")(config),
        reset: require("./reset")(config),
        list: require("./list")(config)
    });

},{"./add":"84nSb","./clear":"307zI","./rm":"7fGXJ","./reset":"hXzfU","./list":"brmVi"}],"84nSb":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const { Multiaddr  } = require("multiaddr");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {BootstrapAPI["add"]}
   */ async function add(addr, options = {}) {
        const res = await api.post("bootstrap/add", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: addr,
                ...options
            }),
            headers: options.headers
        });
        const { Peers  } = await res.json();
        return {
            Peers: Peers.map((/** @type {string} */ ma)=>new Multiaddr(ma))
        };
    }
    return add;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","multiaddr":"dOMJu"}],"307zI":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const { Multiaddr  } = require("multiaddr");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {BootstrapAPI["clear"]}
   */ async function clear(options = {}) {
        const res = await api.post("bootstrap/rm", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                ...options,
                all: true
            }),
            headers: options.headers
        });
        const { Peers  } = await res.json();
        return {
            Peers: Peers.map((/** @type {string} */ ma)=>new Multiaddr(ma))
        };
    }
    return clear;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","multiaddr":"dOMJu"}],"7fGXJ":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const { Multiaddr  } = require("multiaddr");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {BootstrapAPI["rm"]}
   */ async function rm(addr, options = {}) {
        const res = await api.post("bootstrap/rm", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: addr,
                ...options
            }),
            headers: options.headers
        });
        const { Peers  } = await res.json();
        return {
            Peers: Peers.map((/** @type {string} */ ma)=>new Multiaddr(ma))
        };
    }
    return rm;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","multiaddr":"dOMJu"}],"hXzfU":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const { Multiaddr  } = require("multiaddr");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {BootstrapAPI["reset"]}
   */ async function reset(options = {}) {
        const res = await api.post("bootstrap/add", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                ...options,
                default: true
            }),
            headers: options.headers
        });
        const { Peers  } = await res.json();
        return {
            Peers: Peers.map((/** @type {string} */ ma)=>new Multiaddr(ma))
        };
    }
    return reset;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","multiaddr":"dOMJu"}],"brmVi":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const { Multiaddr  } = require("multiaddr");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {BootstrapAPI["list"]}
   */ async function list(options = {}) {
        const res = await api.post("bootstrap/list", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        const { Peers  } = await res.json();
        return {
            Peers: Peers.map((/** @type {string} */ ma)=>new Multiaddr(ma))
        };
    }
    return list;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","multiaddr":"dOMJu"}],"qQ36b":[function(require,module,exports) {
"use strict";
const configure = require("./lib/configure");
const toUrlSearchParams = require("./lib/to-url-search-params");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RootAPI["cat"]}
   */ async function* cat(path, options = {}) {
        const res = await api.post("cat", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: path.toString(),
                ...options
            }),
            headers: options.headers
        });
        yield* res.iterator();
    }
    return cat;
});

},{"./lib/configure":"9w0UV","./lib/to-url-search-params":"dXrzw"}],"9O6zh":[function(require,module,exports) {
"use strict";
const configure = require("./lib/configure");
const toUrlSearchParams = require("./lib/to-url-search-params");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RootAPI["commands"]}
   */ const commands = async (options = {})=>{
        const res = await api.post("commands", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        return res.json();
    };
    return commands;
});

},{"./lib/configure":"9w0UV","./lib/to-url-search-params":"dXrzw"}],"gM4vo":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        getAll: require("./getAll")(config),
        get: require("./get")(config),
        set: require("./set")(config),
        replace: require("./replace")(config),
        profiles: require("./profiles")(config)
    });

},{"./getAll":"ipseg","./get":"1Mz9r","./set":"4arRj","./replace":"kOpHs","./profiles":"bhb6f"}],"ipseg":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ConfigAPI["getAll"]}
   */ const getAll = async (options = {})=>{
        const res = await api.post("config/show", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        return data;
    };
    return getAll;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"1Mz9r":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ConfigAPI["get"]}
   */ const get = async (key, options = {})=>{
        if (!key) throw new Error("key argument is required");
        const res = await api.post("config", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: key,
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        return data.Value;
    };
    return get;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"4arRj":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ConfigAPI["set"]}
   */ const set = async (key, value, options = {})=>{
        if (typeof key !== "string") throw new Error("Invalid key type");
        const params = {
            ...options,
            ...encodeParam(key, value)
        };
        const res = await api.post("config", {
            signal: options.signal,
            searchParams: toUrlSearchParams(params),
            headers: options.headers
        });
        await res.text();
    };
    return set;
});
/**
 * @param {*} key
 * @param {*} value
 */ const encodeParam = (key, value)=>{
    switch(typeof value){
        case "boolean":
            return {
                arg: [
                    key,
                    value.toString()
                ],
                bool: true
            };
        case "string":
            return {
                arg: [
                    key,
                    value
                ]
            };
        default:
            return {
                arg: [
                    key,
                    JSON.stringify(value)
                ],
                json: true
            };
    }
};

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"kOpHs":[function(require,module,exports) {
"use strict";
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const multipartRequest = require("../lib/multipart-request");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const abortSignal = require("../lib/abort-signal");
const { AbortController  } = require("native-abort-controller");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ConfigAPI["replace"]}
   */ const replace = async (config, options = {})=>{
        // allow aborting requests on body errors
        const controller = new AbortController();
        const signal = abortSignal(controller.signal, options.signal);
        const res = await api.post("config/replace", {
            signal,
            searchParams: toUrlSearchParams(options),
            ...await multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers)
        });
        await res.text();
    };
    return replace;
});

},{"uint8arrays/from-string":"7qjkp","../lib/multipart-request":"bsPTI","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","../lib/abort-signal":"gbGf5","native-abort-controller":"8rhv7"}],"bhb6f":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../../types').Options} config
 */ module.exports = (config)=>({
        apply: require("./apply")(config),
        list: require("./list")(config)
    });

},{"./apply":"7BwE9","./list":"d4853"}],"7BwE9":[function(require,module,exports) {
"use strict";
const configure = require("../../lib/configure");
const toUrlSearchParams = require("../../lib/to-url-search-params");
/**
 * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/config/profiles').API<HTTPClientExtraOptions>} ConfigProfilesAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ConfigProfilesAPI["apply"]}
   */ async function apply(profile, options = {}) {
        const res = await api.post("config/profile/apply", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: profile,
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        return {
            original: data.OldCfg,
            updated: data.NewCfg
        };
    }
    return apply;
});

},{"../../lib/configure":"9w0UV","../../lib/to-url-search-params":"dXrzw"}],"d4853":[function(require,module,exports) {
"use strict";
const toCamel = require("../../lib/object-to-camel");
const configure = require("../../lib/configure");
const toUrlSearchParams = require("../../lib/to-url-search-params");
/**
 * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/config/profiles').API<HTTPClientExtraOptions>} ConfigProfilesAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ConfigProfilesAPI["list"]}
   */ async function list(options = {}) {
        const res = await api.post("config/profile/list", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        const data = await res.json();
        return data.map((/** @type {Record<string, any>} */ profile)=>toCamel(profile));
    }
    return list;
});

},{"../../lib/object-to-camel":"fxBIC","../../lib/configure":"9w0UV","../../lib/to-url-search-params":"dXrzw"}],"elN7w":[function(require,module,exports) {
"use strict";
/**
 * @param {import('ipfs-core-utils/src/multicodecs')} codecs
 * @param {import('../types').Options} config
 */ module.exports = (codecs, config)=>({
        export: require("./export")(config),
        get: require("./get")(codecs, config),
        import: require("./import")(config),
        put: require("./put")(codecs, config),
        resolve: require("./resolve")(config)
    });

},{"./export":"irbe8","./get":"9aoPf","./import":"d3JYv","./put":"9EzDj","./resolve":"3QyDO"}],"irbe8":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {DAGAPI["export"]}
   */ async function* dagExport(root, options = {}) {
        const res = await api.post("dag/export", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: root.toString()
            }),
            headers: options.headers
        });
        yield* res.iterator();
    }
    return dagExport;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"9aoPf":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const resolve = require("../lib/resolve");
const first = require("it-first");
const last = require("it-last");
const errCode = require("err-code");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI
 */ /**
 * @param {import('ipfs-core-utils/src/multicodecs')} codecs
 * @param {import('../types').Options} options
 */ module.exports = (codecs, options1)=>{
    const fn = configure((api, opts)=>{
        const getBlock = require("../block/get")(opts);
        /**
     * @type {DAGAPI["get"]}
     */ const get = async (cid, options = {})=>{
            if (options.path) {
                const entry = options.localResolve ? await first(resolve(cid, options.path, codecs, getBlock, options)) : await last(resolve(cid, options.path, codecs, getBlock, options));
                /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */ const result = entry;
                if (!result) throw errCode(new Error("Not found"), "ERR_NOT_FOUND");
                return result;
            }
            const codec = await codecs.getCodec(cid.code);
            const block = await getBlock(cid, options);
            const node = codec.decode(block);
            return {
                value: node,
                remainderPath: ""
            };
        };
        return get;
    });
    return fn(options1);
};

},{"../lib/configure":"9w0UV","../lib/resolve":"lAP9p","it-first":"kZCg9","it-last":"iWUUH","err-code":"dUrrM","../block/get":"8GooF"}],"lAP9p":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const errCode = require("err-code");
/**
 * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions
 */ /**
 * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.
 *
 * @param {CID} cid - the CID where the resolving starts
 * @param {string} path - the path that should be resolved
 * @param {import('ipfs-core-utils/src/multicodecs')} codecs
 * @param {(cid: CID, options?: AbortOptions) => Promise<Uint8Array>} getBlock
 * @param {AbortOptions} [options]
 */ const resolve = async function*(cid1, path, codecs, getBlock, options) {
    /**
   * @param {CID} cid
   */ const load = async (cid)=>{
        const codec = await codecs.getCodec(cid.code);
        const block = await getBlock(cid, options);
        return codec.decode(block);
    };
    const parts = path.split("/").filter(Boolean);
    let value = await load(cid1);
    let lastCid = cid1;
    if (!parts.length) yield {
        value,
        remainderPath: ""
    };
    // End iteration if there isn't a CID to follow any more
    while(parts.length){
        const key = parts.shift();
        if (!key) throw errCode(new Error(`Could not resolve path "${path}"`), "ERR_INVALID_PATH");
        if (Object.prototype.hasOwnProperty.call(value, key)) {
            value = value[key];
            yield {
                value,
                remainderPath: parts.join("/")
            };
        } else throw errCode(new Error(`no link named "${key}" under ${lastCid}`), "ERR_NO_LINK");
        const cid = CID.asCID(value);
        if (cid) {
            lastCid = cid;
            value = await load(value);
        }
    }
};
module.exports = resolve;

},{"multiformats/cid":"4uoBU","err-code":"dUrrM"}],"kZCg9":[function(require,module,exports) {
"use strict";
/**
 * Returns the first result from an (async) iterable, unless empty, in which
 * case returns `undefined`.
 *
 * @template T
 * @param {AsyncIterable<T>|Iterable<T>} source
 */ const first = async (source)=>{
    for await (const entry of source)return entry;
    return undefined;
};
module.exports = first;

},{}],"d3JYv":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const abortSignal = require("../lib/abort-signal");
const multipartRequest = require("../lib/multipart-request");
const { AbortController  } = require("native-abort-controller");
const { CID  } = require("multiformats/cid");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {DAGAPI["import"]}
   */ async function* dagImport(source, options = {}) {
        const controller = new AbortController();
        const signal = abortSignal(controller.signal, options.signal);
        const { headers , body  } = await multipartRequest(source, controller, options.headers);
        const res = await api.post("dag/import", {
            signal,
            headers,
            body,
            searchParams: toUrlSearchParams({
                "pin-roots": options.pinRoots
            })
        });
        for await (const { Root  } of res.ndjson())if (Root !== undefined) {
            const { Cid: { "/": Cid  } , PinErrorMsg  } = Root;
            yield {
                root: {
                    cid: CID.parse(Cid),
                    pinErrorMsg: PinErrorMsg
                }
            };
        }
    }
    return dagImport;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","../lib/abort-signal":"gbGf5","../lib/multipart-request":"bsPTI","native-abort-controller":"8rhv7","multiformats/cid":"4uoBU"}],"9EzDj":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const multipartRequest = require("../lib/multipart-request");
const toUrlSearchParams = require("../lib/to-url-search-params");
const abortSignal = require("../lib/abort-signal");
const { AbortController  } = require("native-abort-controller");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI
 */ /**
 * @param {import('ipfs-core-utils/src/multicodecs')} codecs
 * @param {import('../types').Options} options
 */ module.exports = (codecs, options1)=>{
    const fn = configure((api)=>{
        /**
     * @type {DAGAPI["put"]}
     */ const put = async (dagNode, options = {})=>{
            const settings = {
                format: "dag-cbor",
                hashAlg: "sha2-256",
                inputEnc: "raw",
                ...options
            };
            const codec = await codecs.getCodec(settings.format);
            const serialized = codec.encode(dagNode);
            // allow aborting requests on body errors
            const controller = new AbortController();
            const signal = abortSignal(controller.signal, settings.signal);
            const res = await api.post("dag/put", {
                timeout: settings.timeout,
                signal,
                searchParams: toUrlSearchParams(settings),
                ...await multipartRequest(serialized, controller, settings.headers)
            });
            const data = await res.json();
            return CID.parse(data.Cid["/"]);
        };
        return put;
    });
    return fn(options1);
};

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/multipart-request":"bsPTI","../lib/to-url-search-params":"dXrzw","../lib/abort-signal":"gbGf5","native-abort-controller":"8rhv7"}],"3QyDO":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {DAGAPI["resolve"]}
   */ const resolve = async (ipfsPath, options = {})=>{
        const res = await api.post("dag/resolve", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\/[/]+/g, "/") : ""}`,
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        return {
            cid: CID.parse(data.Cid["/"]),
            remainderPath: data.RemPath
        };
    };
    return resolve;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"5jbhN":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        get: require("./get")(config),
        put: require("./put")(config),
        findProvs: require("./find-provs")(config),
        findPeer: require("./find-peer")(config),
        provide: require("./provide")(config),
        // find closest peerId to given peerId
        query: require("./query")(config)
    });

},{"./get":"lBK2q","./put":"iWwhI","./find-provs":"7sC4l","./find-peer":"519PG","./provide":"bHijc","./query":"03Jga"}],"lBK2q":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const { Value  } = require("./response-types");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {DHTAPI["get"]}
   */ async function get(key, options = {}) {
        const res = await api.post("dht/get", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,
                ...options
            }),
            headers: options.headers
        });
        for await (const message of res.ndjson()){
            if (message.Type === Value) return uint8ArrayFromString(message.Extra, "base64pad");
        }
        throw new Error("not found");
    }
    return get;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","./response-types":"uj8TP","uint8arrays/from-string":"7qjkp","uint8arrays/to-string":"w8mvE"}],"uj8TP":[function(require,module,exports) {
"use strict";
// Response types are defined here:
// https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L15-L24
module.exports = {
    SendingQuery: 0,
    PeerResponse: 1,
    FinalPeer: 2,
    QueryError: 3,
    Provider: 4,
    Value: 5,
    AddingPeer: 6,
    DialingPeer: 7
};

},{}],"iWwhI":[function(require,module,exports) {
"use strict";
const { Multiaddr  } = require("multiaddr");
const toCamel = require("../lib/object-to-camel");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const multipartRequest = require("../lib/multipart-request");
const abortSignal = require("../lib/abort-signal");
const { AbortController  } = require("native-abort-controller");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {DHTAPI["put"]}
   */ async function* put(key, value, options = {}) {
        // allow aborting requests on body errors
        const controller = new AbortController();
        const signal = abortSignal(controller.signal, options.signal);
        const res = await api.post("dht/put", {
            signal,
            searchParams: toUrlSearchParams({
                arg: uint8ArrayToString(key),
                ...options
            }),
            ...await multipartRequest(value, controller, options.headers)
        });
        for await (let message of res.ndjson()){
            message = toCamel(message);
            if (message.responses) message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */ { ID , Addrs  })=>({
                    id: ID,
                    addrs: (Addrs || []).map((a)=>new Multiaddr(a))
                }));
            yield message;
        }
    }
    return put;
});

},{"multiaddr":"dOMJu","../lib/object-to-camel":"fxBIC","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","../lib/multipart-request":"bsPTI","../lib/abort-signal":"gbGf5","native-abort-controller":"8rhv7","uint8arrays/to-string":"w8mvE"}],"7sC4l":[function(require,module,exports) {
"use strict";
const { Multiaddr  } = require("multiaddr");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const { Provider  } = require("./response-types");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {DHTAPI["findProvs"]}
   */ async function* findProvs(cid, options = {}) {
        const res = await api.post("dht/findprovs", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: cid.toString(),
                ...options
            }),
            headers: options.headers
        });
        for await (const message of res.ndjson()){
            if (message.Type === Provider && message.Responses) for (const { ID , Addrs  } of message.Responses)yield {
                id: ID,
                addrs: (Addrs || []).map((/** @type {string} **/ a)=>new Multiaddr(a))
            };
        }
    }
    return findProvs;
});

},{"multiaddr":"dOMJu","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","./response-types":"uj8TP"}],"519PG":[function(require,module,exports) {
"use strict";
const { Multiaddr  } = require("multiaddr");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const { FinalPeer  } = require("./response-types");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {DHTAPI["findPeer"]}
   */ async function findPeer(peerId, options = {}) {
        const res = await api.post("dht/findpeer", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: peerId,
                ...options
            }),
            headers: options.headers
        });
        for await (const data of res.ndjson())if (data.Type === FinalPeer && data.Responses) {
            const { ID , Addrs  } = data.Responses[0];
            return {
                id: ID,
                addrs: (Addrs || []).map((/** @type {string} **/ a)=>new Multiaddr(a))
            };
        }
        throw new Error("not found");
    }
    return findPeer;
});

},{"multiaddr":"dOMJu","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","./response-types":"uj8TP"}],"bHijc":[function(require,module,exports) {
"use strict";
const { Multiaddr  } = require("multiaddr");
const toCamel = require("../lib/object-to-camel");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI
 * @typedef {import('multiformats/cid').CID} CID
 */ module.exports = configure((api)=>{
    /**
   * @type {DHTAPI["provide"]}
   */ async function* provide(cids, options = {
        recursive: false
    }) {
        /** @type {CID[]} */ const cidArr = Array.isArray(cids) ? cids : [
            cids
        ];
        const res = await api.post("dht/provide", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: cidArr.map((cid)=>cid.toString()),
                ...options
            }),
            headers: options.headers
        });
        for await (let message of res.ndjson()){
            message = toCamel(message);
            if (message.responses) message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */ { ID , Addrs  })=>({
                    id: ID,
                    addrs: (Addrs || []).map((/** @type {string} **/ a)=>new Multiaddr(a))
                }));
            else message.responses = [];
            yield message;
        }
    }
    return provide;
});

},{"multiaddr":"dOMJu","../lib/object-to-camel":"fxBIC","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"03Jga":[function(require,module,exports) {
"use strict";
const { Multiaddr  } = require("multiaddr");
const toCamel = require("../lib/object-to-camel");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {DHTAPI["query"]}
   */ async function* query(peerId, options = {}) {
        const res = await api.post("dht/query", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: peerId.toString(),
                ...options
            }),
            headers: options.headers
        });
        for await (let message of res.ndjson()){
            message = toCamel(message);
            message.responses = (message.responses || []).map((/** @type {{ ID: string, Addrs: string[] }} */ { ID , Addrs  })=>({
                    id: ID,
                    addrs: (Addrs || []).map((/** @type {string} **/ a)=>new Multiaddr(a))
                }));
            yield message;
        }
    }
    return query;
});

},{"multiaddr":"dOMJu","../lib/object-to-camel":"fxBIC","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"aK0Oa":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        net: require("./net")(config),
        sys: require("./sys")(config),
        cmds: require("./cmds")(config)
    });

},{"./net":"aYTOY","./sys":"2IaKW","./cmds":"kwbGr"}],"aYTOY":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {DiagAPI["net"]}
   */ async function net(options = {}) {
        const res = await api.post("diag/net", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        return res.json();
    }
    return net;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"2IaKW":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {DiagAPI["sys"]}
   */ async function sys(options = {}) {
        const res = await api.post("diag/sys", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        return res.json();
    }
    return sys;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"kwbGr":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {DiagAPI["cmds"]}
   */ async function cmds(options = {}) {
        const res = await api.post("diag/cmds", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        return res.json();
    }
    return cmds;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"2g59J":[function(require,module,exports) {
"use strict";
const configure = require("./lib/configure");
const toUrlSearchParams = require("./lib/to-url-search-params");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RootAPI["dns"]}
   */ const dns = async (domain, options = {})=>{
        const res = await api.post("dns", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: domain,
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        return data.Path;
    };
    return dns;
});

},{"./lib/configure":"9w0UV","./lib/to-url-search-params":"dXrzw"}],"b3rJs":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        chmod: require("./chmod")(config),
        cp: require("./cp")(config),
        flush: require("./flush")(config),
        ls: require("./ls")(config),
        mkdir: require("./mkdir")(config),
        mv: require("./mv")(config),
        read: require("./read")(config),
        rm: require("./rm")(config),
        stat: require("./stat")(config),
        touch: require("./touch")(config),
        write: require("./write")(config)
    });

},{"./chmod":"HIR5G","./cp":"gX5TS","./flush":"3peCY","./ls":"7L5iG","./mkdir":"6Psh8","./mv":"50GEa","./read":"ZYfiz","./rm":"dnrNV","./stat":"6EQoI","./touch":"8zwbM","./write":"1mwav"}],"HIR5G":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {FilesAPI["chmod"]}
   */ async function chmod(path, mode, options = {}) {
        const res = await api.post("files/chmod", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: path,
                mode,
                ...options
            }),
            headers: options.headers
        });
        await res.text();
    }
    return chmod;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"gX5TS":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {FilesAPI["cp"]}
   */ async function cp(sources, destination, options = {}) {
        /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */ const sourceArr = Array.isArray(sources) ? sources : [
            sources
        ];
        const res = await api.post("files/cp", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: sourceArr.concat(destination).map((src)=>CID.asCID(src) ? `/ipfs/${src}` : src),
                ...options
            }),
            headers: options.headers
        });
        await res.text();
    }
    return cp;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"3peCY":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {FilesAPI["flush"]}
   */ async function flush(path, options = {}) {
        if (!path || typeof path !== "string") throw new Error("ipfs.files.flush requires a path");
        const res = await api.post("files/flush", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: path,
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        return CID.parse(data.Cid);
    }
    return flush;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"7L5iG":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const toCamelWithMetadata = require("../lib/object-to-camel-with-metadata");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {FilesAPI["ls"]}
   */ async function* ls(path, options = {}) {
        if (!path) throw new Error("ipfs.files.ls requires a path");
        const res = await api.post("files/ls", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: CID.asCID(path) ? `/ipfs/${path}` : path,
                // default long to true, diverges from go-ipfs where its false by default
                long: true,
                ...options,
                stream: true
            }),
            headers: options.headers
        });
        for await (const result of res.ndjson()){
            // go-ipfs does not yet support the "stream" option
            if ("Entries" in result) for (const entry of result.Entries || [])yield toCoreInterface(toCamelWithMetadata(entry));
            else yield toCoreInterface(toCamelWithMetadata(result));
        }
    }
    return ls;
});
/**
 * @param {*} entry
 */ function toCoreInterface(entry) {
    if (entry.hash) entry.cid = CID.parse(entry.hash);
    delete entry.hash;
    entry.type = entry.type === 1 ? "directory" : "file";
    return entry;
}

},{"multiformats/cid":"4uoBU","../lib/object-to-camel-with-metadata":"7NcA8","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"7NcA8":[function(require,module,exports) {
"use strict";
const toCamel = require("./object-to-camel");
/**
 * @param {Record<string, any>} entry
 */ function toCamelWithMetadata(entry) {
    const file = toCamel(entry);
    if (Object.prototype.hasOwnProperty.call(file, "mode")) file.mode = parseInt(file.mode, 8);
    if (Object.prototype.hasOwnProperty.call(file, "mtime")) {
        file.mtime = {
            secs: file.mtime,
            nsecs: file.mtimeNsecs || 0
        };
        delete file.mtimeNsecs;
    }
    return file;
}
module.exports = toCamelWithMetadata;

},{"./object-to-camel":"fxBIC"}],"6Psh8":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {FilesAPI["mkdir"]}
   */ async function mkdir(path, options = {}) {
        const res = await api.post("files/mkdir", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: path,
                ...options
            }),
            headers: options.headers
        });
        await res.text();
    }
    return mkdir;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"50GEa":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {FilesAPI["mv"]}
   */ async function mv(sources, destination, options = {}) {
        if (!Array.isArray(sources)) sources = [
            sources
        ];
        const res = await api.post("files/mv", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: sources.concat(destination),
                ...options
            }),
            headers: options.headers
        });
        await res.text();
    }
    return mv;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"ZYfiz":[function(require,module,exports) {
"use strict";
// @ts-ignore no types
const toIterable = require("stream-to-it/source");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {FilesAPI["read"]}
   */ async function* read(path, options = {}) {
        const res = await api.post("files/read", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: path,
                count: options.length,
                ...options
            }),
            headers: options.headers
        });
        yield* toIterable(res.body);
    }
    return read;
});

},{"stream-to-it/source":"h0rMn","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"h0rMn":[function(require,module,exports) {
module.exports = (readable)=>{
    // Node.js stream
    if (readable[Symbol.asyncIterator]) return readable;
    // Browser ReadableStream
    if (readable.getReader) return async function*() {
        const reader = readable.getReader();
        try {
            while(true){
                const { done , value  } = await reader.read();
                if (done) return;
                yield value;
            }
        } finally{
            reader.releaseLock();
        }
    }();
    throw new Error("unknown stream");
};

},{}],"dnrNV":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {FilesAPI["rm"]}
   */ async function rm(path, options = {}) {
        const res = await api.post("files/rm", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: path,
                ...options
            }),
            headers: options.headers
        });
        await res.text();
    }
    return rm;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"6EQoI":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const toCamelWithMetadata = require("../lib/object-to-camel-with-metadata");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {FilesAPI["stat"]}
   */ async function stat(path, options = {}) {
        const res = await api.post("files/stat", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: path,
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        data.WithLocality = data.WithLocality || false;
        return toCoreInterface(toCamelWithMetadata(data));
    }
    return stat;
});
/**
 * @param {*} entry
 */ function toCoreInterface(entry) {
    entry.cid = CID.parse(entry.hash);
    delete entry.hash;
    return entry;
}

},{"multiformats/cid":"4uoBU","../lib/object-to-camel-with-metadata":"7NcA8","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"8zwbM":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {FilesAPI["touch"]}
   */ async function touch(path, options = {}) {
        const res = await api.post("files/touch", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: path,
                ...options
            }),
            headers: options.headers
        });
        await res.text();
    }
    return touch;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"1mwav":[function(require,module,exports) {
"use strict";
const modeToString = require("../lib/mode-to-string");
const parseMtime = require("../lib/parse-mtime");
const configure = require("../lib/configure");
const multipartRequest = require("../lib/multipart-request");
const toUrlSearchParams = require("../lib/to-url-search-params");
const abortSignal = require("../lib/abort-signal");
const { AbortController  } = require("native-abort-controller");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {FilesAPI["write"]}
   */ async function write(path, input, options = {}) {
        // allow aborting requests on body errors
        const controller = new AbortController();
        const signal = abortSignal(controller.signal, options.signal);
        const res = await api.post("files/write", {
            signal,
            searchParams: toUrlSearchParams({
                arg: path,
                streamChannels: true,
                count: options.length,
                ...options
            }),
            ...await multipartRequest({
                content: input,
                path: "arg",
                mode: modeToString(options.mode),
                mtime: parseMtime(options.mtime)
            }, controller, options.headers)
        });
        await res.text();
    }
    return write;
});

},{"../lib/mode-to-string":"bLz1C","../lib/parse-mtime":"a8r0t","../lib/configure":"9w0UV","../lib/multipart-request":"bsPTI","../lib/to-url-search-params":"dXrzw","../lib/abort-signal":"gbGf5","native-abort-controller":"8rhv7"}],"frue5":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("./lib/configure");
const toUrlSearchParams = require("./lib/to-url-search-params");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RootAPI["get"]}
   */ async function* get(path, options = {}) {
        /** @type {Record<string, any>} */ const opts = {
            arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,
            ...options
        };
        if (opts.compressionLevel) {
            opts["compression-level"] = opts.compressionLevel;
            delete opts.compressionLevel;
        }
        const res = await api.post("get", {
            signal: options.signal,
            searchParams: toUrlSearchParams(opts),
            headers: options.headers
        });
        yield* res.iterator();
    }
    return get;
});

},{"multiformats/cid":"4uoBU","./lib/configure":"9w0UV","./lib/to-url-search-params":"dXrzw"}],"i9UDu":[function(require,module,exports) {
"use strict";
const configure = require("./lib/configure");
module.exports = configure((api)=>{
    return ()=>{
        const url = new URL(api.opts.base || "");
        return {
            host: url.hostname,
            port: url.port,
            protocol: url.protocol,
            pathname: url.pathname,
            "api-path": url.pathname
        };
    };
});

},{"./lib/configure":"9w0UV"}],"coE1j":[function(require,module,exports) {
"use strict";
const toCamel = require("./lib/object-to-camel");
const { Multiaddr  } = require("multiaddr");
const configure = require("./lib/configure");
const toUrlSearchParams = require("./lib/to-url-search-params");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RootAPI["id"]}
   */ async function id(options = {}) {
        const res = await api.post("id", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: options.peerId ? options.peerId.toString() : undefined,
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        const output = {
            ...toCamel(data)
        };
        if (output.addresses) output.addresses = output.addresses.map((/** @type {string} */ ma)=>new Multiaddr(ma));
        // @ts-ignore server output is not typed
        return output;
    }
    return id;
});

},{"./lib/object-to-camel":"fxBIC","multiaddr":"dOMJu","./lib/configure":"9w0UV","./lib/to-url-search-params":"dXrzw"}],"b3Idv":[function(require,module,exports) {
"use strict";
const callId = require("./id");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ /**
 * @param {import('./types').Options} options
 */ module.exports = (options1)=>{
    const id = callId(options1);
    /**
   * @type {RootAPI["isOnline"]}
   */ async function isOnline(options = {}) {
        const res = await id(options);
        return Boolean(res && res.addresses && res.addresses.length);
    }
    return isOnline;
};

},{"./id":"coE1j"}],"6BJ0X":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        gen: require("./gen")(config),
        list: require("./list")(config),
        rename: require("./rename")(config),
        rm: require("./rm")(config),
        import: require("./import")(config),
        export: require("./export")(config),
        info: require("./info")(config)
    });

},{"./gen":"651io","./list":"1ZAyW","./rename":"5iN9e","./rm":"hxEP2","./import":"5oXzN","./export":"8AbME","./info":"1Mmb3"}],"651io":[function(require,module,exports) {
"use strict";
const toCamel = require("../lib/object-to-camel");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {KeyAPI["gen"]}
   */ async function gen(name, options = {
        type: "rsa",
        size: 2048
    }) {
        const res = await api.post("key/gen", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: name,
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        // @ts-ignore server output is not typed
        return toCamel(data);
    }
    return gen;
});

},{"../lib/object-to-camel":"fxBIC","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"1ZAyW":[function(require,module,exports) {
"use strict";
const toCamel = require("../lib/object-to-camel");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {KeyAPI["list"]}
   */ async function list(options = {}) {
        const res = await api.post("key/list", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        const data = await res.json();
        // @ts-ignore server output is not typed
        return (data.Keys || []).map((/** @type {any} **/ k)=>toCamel(k));
    }
    return list;
});

},{"../lib/object-to-camel":"fxBIC","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"5iN9e":[function(require,module,exports) {
"use strict";
const toCamel = require("../lib/object-to-camel");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {KeyAPI["rename"]}
   */ async function rename(oldName, newName, options = {}) {
        const res = await api.post("key/rename", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: [
                    oldName,
                    newName
                ],
                ...options
            }),
            headers: options.headers
        });
        // @ts-ignore server output is not typed
        return toCamel(await res.json());
    }
    return rename;
});

},{"../lib/object-to-camel":"fxBIC","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"hxEP2":[function(require,module,exports) {
"use strict";
const toCamel = require("../lib/object-to-camel");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {KeyAPI["rm"]}
   */ async function rm(name, options = {}) {
        const res = await api.post("key/rm", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: name,
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        // @ts-ignore server output is not typed
        return toCamel(data.Keys[0]);
    }
    return rm;
});

},{"../lib/object-to-camel":"fxBIC","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"5oXzN":[function(require,module,exports) {
"use strict";
const toCamel = require("../lib/object-to-camel");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {KeyAPI["import"]}
   */ async function importKey(name, pem, password, options = {}) {
        const res = await api.post("key/import", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: name,
                pem,
                password,
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        // @ts-ignore server output is not typed
        return toCamel(data);
    }
    return importKey;
});

},{"../lib/object-to-camel":"fxBIC","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"8AbME":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const errCode = require("err-code");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {KeyAPI["export"]}
   */ const exportKey = async (name, password, options = {})=>{
        throw errCode(new Error("Not implemented"), "ERR_NOT_IMPLEMENTED");
    };
    return exportKey;
});

},{"../lib/configure":"9w0UV","err-code":"dUrrM"}],"1Mmb3":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const errCode = require("err-code");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {KeyAPI["info"]}
   */ const info = async (name, options = {})=>{
        throw errCode(new Error("Not implemented"), "ERR_NOT_IMPLEMENTED");
    };
    return info;
});

},{"../lib/configure":"9w0UV","err-code":"dUrrM"}],"02OpO":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        tail: require("./tail")(config),
        ls: require("./ls")(config),
        level: require("./level")(config)
    });

},{"./tail":"1vnIF","./ls":"kirMA","./level":"amF7T"}],"1vnIF":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {LogAPI["tail"]}
   */ async function* tail(options = {}) {
        const res = await api.post("log/tail", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        yield* res.ndjson();
    }
    return tail;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"kirMA":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {LogAPI["ls"]}
   */ async function ls(options = {}) {
        const res = await api.post("log/ls", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        const data = await res.json();
        return data.Strings;
    }
    return ls;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"amF7T":[function(require,module,exports) {
"use strict";
const toCamel = require("../lib/object-to-camel");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {LogAPI["level"]}
   */ async function level1(subsystem, level, options = {}) {
        const res = await api.post("log/level", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: [
                    subsystem,
                    level
                ],
                ...options
            }),
            headers: options.headers
        });
        return toCamel(await res.json());
    }
    return level1;
});

},{"../lib/object-to-camel":"fxBIC","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"ldnPI":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("./lib/configure");
const toUrlSearchParams = require("./lib/to-url-search-params");
const stat = require("./files/stat");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ module.exports = configure((api, opts)=>{
    /**
   * @type {RootAPI["ls"]}
   */ async function* ls(path, options = {}) {
        const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`;
        /**
     * @param {*} link
     */ async function mapLink(link) {
            let hash = link.Hash;
            if (hash.includes("/")) {
                // the hash is a path, but we need the CID
                const ipfsPath = hash.startsWith("/ipfs/") ? hash : `/ipfs/${hash}`;
                const stats = await stat(opts)(ipfsPath);
                hash = stats.cid;
            } else hash = CID.parse(hash);
            /** @type {import('ipfs-core-types/src/root').IPFSEntry} */ const entry = {
                name: link.Name,
                path: pathStr + (link.Name ? `/${link.Name}` : ""),
                size: link.Size,
                cid: hash,
                type: typeOf(link)
            };
            if (link.Mode) entry.mode = parseInt(link.Mode, 8);
            if (link.Mtime !== undefined && link.Mtime !== null) {
                entry.mtime = {
                    secs: link.Mtime
                };
                if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) entry.mtime.nsecs = link.MtimeNsecs;
            }
            return entry;
        }
        const res = await api.post("ls", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: pathStr,
                ...options
            }),
            headers: options.headers
        });
        for await (let result of res.ndjson()){
            result = result.Objects;
            if (!result) throw new Error("expected .Objects in results");
            result = result[0];
            if (!result) throw new Error("expected one array in results.Objects");
            const links = result.Links;
            if (!Array.isArray(links)) throw new Error("expected one array in results.Objects[0].Links");
            if (!links.length) {
                // no links, this is a file, yield a single result
                yield mapLink(result);
                return;
            }
            yield* links.map(mapLink);
        }
    }
    return ls;
});
/**
 * @param {any} link
 */ function typeOf(link) {
    switch(link.Type){
        case 1:
        case 5:
            return "dir";
        case 2:
            return "file";
        default:
            return "file";
    }
}

},{"multiformats/cid":"4uoBU","./lib/configure":"9w0UV","./lib/to-url-search-params":"dXrzw","./files/stat":"6EQoI"}],"02HLC":[function(require,module,exports) {
"use strict";
const toCamel = require("./lib/object-to-camel");
const configure = require("./lib/configure");
const toUrlSearchParams = require("./lib/to-url-search-params");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RootAPI["mount"]}
   */ async function mount(options = {}) {
        const res = await api.post("dns", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        return toCamel(await res.json());
    }
    return mount;
});

},{"./lib/object-to-camel":"fxBIC","./lib/configure":"9w0UV","./lib/to-url-search-params":"dXrzw"}],"1nq3w":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        publish: require("./publish")(config),
        resolve: require("./resolve")(config),
        pubsub: require("./pubsub")(config)
    });

},{"./publish":"eU8zo","./resolve":"gTFXP","./pubsub":"bpyaQ"}],"eU8zo":[function(require,module,exports) {
"use strict";
const toCamel = require("../lib/object-to-camel");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/name').API<HTTPClientExtraOptions>} NameAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {NameAPI["publish"]}
   */ async function publish(path, options = {}) {
        const res = await api.post("name/publish", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: `${path}`,
                ...options
            }),
            headers: options.headers
        });
        // @ts-ignore server output is not typed
        return toCamel(await res.json());
    }
    return publish;
});

},{"../lib/object-to-camel":"fxBIC","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"gTFXP":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/name').API<HTTPClientExtraOptions>} NameAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {NameAPI["resolve"]}
   */ async function* resolve(path, options = {}) {
        const res = await api.post("name/resolve", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: path,
                stream: true,
                ...options
            }),
            headers: options.headers
        });
        for await (const result of res.ndjson())yield result.Path;
    }
    return resolve;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"bpyaQ":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../../types').Options} config
 */ module.exports = (config)=>({
        cancel: require("./cancel")(config),
        state: require("./state")(config),
        subs: require("./subs")(config)
    });

},{"./cancel":"kmo0Q","./state":"8sxdN","./subs":"fI1CB"}],"kmo0Q":[function(require,module,exports) {
"use strict";
const toCamel = require("../../lib/object-to-camel");
const configure = require("../../lib/configure");
const toUrlSearchParams = require("../../lib/to-url-search-params");
/**
 * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {NamePubsubAPI["cancel"]}
   */ async function cancel(name, options = {}) {
        const res = await api.post("name/pubsub/cancel", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: name,
                ...options
            }),
            headers: options.headers
        });
        // @ts-ignore server output is not typed
        return toCamel(await res.json());
    }
    return cancel;
});

},{"../../lib/object-to-camel":"fxBIC","../../lib/configure":"9w0UV","../../lib/to-url-search-params":"dXrzw"}],"8sxdN":[function(require,module,exports) {
"use strict";
const toCamel = require("../../lib/object-to-camel");
const configure = require("../../lib/configure");
const toUrlSearchParams = require("../../lib/to-url-search-params");
/**
 * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {NamePubsubAPI["state"]}
   */ async function state(options = {}) {
        const res = await api.post("name/pubsub/state", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        // @ts-ignore server output is not typed
        return toCamel(await res.json());
    }
    return state;
});

},{"../../lib/object-to-camel":"fxBIC","../../lib/configure":"9w0UV","../../lib/to-url-search-params":"dXrzw"}],"fI1CB":[function(require,module,exports) {
"use strict";
const configure = require("../../lib/configure");
const toUrlSearchParams = require("../../lib/to-url-search-params");
/**
 * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {NamePubsubAPI["subs"]}
   */ async function subs(options = {}) {
        const res = await api.post("name/pubsub/subs", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        const data = await res.json();
        return data.Strings || [];
    }
    return subs;
});

},{"../../lib/configure":"9w0UV","../../lib/to-url-search-params":"dXrzw"}],"hFzIP":[function(require,module,exports) {
"use strict";
/**
 * @param {import('ipfs-core-utils/src/multicodecs')} codecs
 * @param {import('../types').Options} config
 */ module.exports = (codecs, config)=>({
        data: require("./data")(config),
        get: require("./get")(config),
        links: require("./links")(config),
        new: require("./new")(config),
        patch: require("./patch")(config),
        put: require("./put")(codecs, config),
        stat: require("./stat")(config)
    });

},{"./data":"7x0RX","./get":"dO1E2","./links":"lKPo7","./new":"5GUnQ","./patch":"8XVgg","./put":"jMOnT","./stat":"aBVqq"}],"7x0RX":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ObjectAPI["data"]}
   */ async function data1(cid, options = {}) {
        const res = await api.post("object/data", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,
                ...options
            }),
            headers: options.headers
        });
        const data = await res.arrayBuffer();
        return new Uint8Array(data, 0, data.byteLength);
    }
    return data1;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"dO1E2":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ObjectAPI["get"]}
   */ async function get(cid, options = {}) {
        const res = await api.post("object/get", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,
                dataEncoding: "base64",
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        return {
            Data: uint8ArrayFromString(data.Data, "base64pad"),
            Links: (data.Links || []).map((/** @type {any} */ link)=>({
                    Name: link.Name,
                    Hash: CID.parse(link.Hash),
                    Tsize: link.Size
                }))
        };
    }
    return get;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","uint8arrays/from-string":"7qjkp"}],"lKPo7":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ObjectAPI["links"]}
   */ async function links(cid, options = {}) {
        const res = await api.post("object/links", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,
                ...options
            }),
            headers: options.headers
        });
        const data = await res.json();
        return (data.Links || []).map((/** @type {any} */ l)=>({
                Name: l.Name,
                Tsize: l.Size,
                Hash: CID.parse(l.Hash)
            }));
    }
    return links;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"5GUnQ":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ObjectAPI["new"]}
   */ async function newObject(options = {}) {
        const res = await api.post("object/new", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: options.template,
                ...options
            }),
            headers: options.headers
        });
        const { Hash  } = await res.json();
        return CID.parse(Hash);
    }
    return newObject;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"8XVgg":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../../types').Options} config
 */ module.exports = (config)=>({
        addLink: require("./add-link")(config),
        appendData: require("./append-data")(config),
        rmLink: require("./rm-link")(config),
        setData: require("./set-data")(config)
    });

},{"./add-link":"fwLFH","./append-data":"6XCOl","./rm-link":"gTlcE","./set-data":"hO26H"}],"fwLFH":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../../lib/configure");
const toUrlSearchParams = require("../../lib/to-url-search-params");
/**
 * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ObjectPatchAPI["addLink"]}
   */ async function addLink(cid, dLink, options = {}) {
        const res = await api.post("object/patch/add-link", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: [
                    `${cid}`,
                    // @ts-ignore loose types
                    dLink.Name || dLink.name || "",
                    // @ts-ignore loose types
                    (dLink.Hash || dLink.cid || "").toString() || null
                ],
                ...options
            }),
            headers: options.headers
        });
        const { Hash  } = await res.json();
        return CID.parse(Hash);
    }
    return addLink;
});

},{"multiformats/cid":"4uoBU","../../lib/configure":"9w0UV","../../lib/to-url-search-params":"dXrzw"}],"6XCOl":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const multipartRequest = require("../../lib/multipart-request");
const configure = require("../../lib/configure");
const toUrlSearchParams = require("../../lib/to-url-search-params");
const abortSignal = require("../../lib/abort-signal");
const { AbortController  } = require("native-abort-controller");
/**
 * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ObjectPatchAPI["appendData"]}
   */ async function appendData(cid, data, options = {}) {
        // allow aborting requests on body errors
        const controller = new AbortController();
        const signal = abortSignal(controller.signal, options.signal);
        const res = await api.post("object/patch/append-data", {
            signal,
            searchParams: toUrlSearchParams({
                arg: `${cid}`,
                ...options
            }),
            ...await multipartRequest(data, controller, options.headers)
        });
        const { Hash  } = await res.json();
        return CID.parse(Hash);
    }
    return appendData;
});

},{"multiformats/cid":"4uoBU","../../lib/multipart-request":"bsPTI","../../lib/configure":"9w0UV","../../lib/to-url-search-params":"dXrzw","../../lib/abort-signal":"gbGf5","native-abort-controller":"8rhv7"}],"gTlcE":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../../lib/configure");
const toUrlSearchParams = require("../../lib/to-url-search-params");
/**
 * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ObjectPatchAPI["rmLink"]}
   */ async function rmLink(cid, dLink, options = {}) {
        const res = await api.post("object/patch/rm-link", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: [
                    `${cid}`,
                    // @ts-ignore loose types
                    dLink.Name || dLink.name || null
                ],
                ...options
            }),
            headers: options.headers
        });
        const { Hash  } = await res.json();
        return CID.parse(Hash);
    }
    return rmLink;
});

},{"multiformats/cid":"4uoBU","../../lib/configure":"9w0UV","../../lib/to-url-search-params":"dXrzw"}],"hO26H":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const multipartRequest = require("../../lib/multipart-request");
const configure = require("../../lib/configure");
const toUrlSearchParams = require("../../lib/to-url-search-params");
const abortSignal = require("../../lib/abort-signal");
const { AbortController  } = require("native-abort-controller");
/**
 * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ObjectPatchAPI["setData"]}
   */ async function setData(cid, data, options = {}) {
        // allow aborting requests on body errors
        const controller = new AbortController();
        const signal = abortSignal(controller.signal, options.signal);
        const res = await api.post("object/patch/set-data", {
            signal,
            searchParams: toUrlSearchParams({
                arg: [
                    `${cid}`
                ],
                ...options
            }),
            ...await multipartRequest(data, controller, options.headers)
        });
        const { Hash  } = await res.json();
        return CID.parse(Hash);
    }
    return setData;
});

},{"multiformats/cid":"4uoBU","../../lib/multipart-request":"bsPTI","../../lib/configure":"9w0UV","../../lib/to-url-search-params":"dXrzw","../../lib/abort-signal":"gbGf5","native-abort-controller":"8rhv7"}],"jMOnT":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI
 */ /**
 * @param {import('ipfs-core-utils/src/multicodecs')} codecs
 * @param {import('../types').Options} options
 */ module.exports = (codecs, options1)=>{
    const fn = configure((api)=>{
        const dagPut = require("../dag/put")(codecs, options1);
        /**
     * @type {ObjectAPI["put"]}
     */ async function put(obj, options = {}) {
            return dagPut(obj, {
                ...options,
                format: "dag-pb",
                hashAlg: "sha2-256",
                version: 0
            });
        }
        return put;
    });
    return fn(options1);
};

},{"../lib/configure":"9w0UV","../dag/put":"9EzDj"}],"aBVqq":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {ObjectAPI["stat"]}
   */ async function stat(cid, options = {}) {
        const res = await api.post("object/stat", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: `${cid}`,
                ...options
            }),
            headers: options.headers
        });
        const output = await res.json();
        return {
            ...output,
            Hash: CID.parse(output.Hash)
        };
    }
    return stat;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"bfRBQ":[function(require,module,exports) {
"use strict";
const Remote = require("./remote");
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        add: require("./add")(config),
        addAll: require("./add-all")(config),
        ls: require("./ls")(config),
        rm: require("./rm")(config),
        rmAll: require("./rm-all")(config),
        remote: new Remote(config)
    });

},{"./remote":"ciYDs","./add":"81kfO","./add-all":"3HW7Y","./ls":"ebBid","./rm":"6xW9Y","./rm-all":"2tiIy"}],"ciYDs":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const Client = require("../../lib/core");
const Service = require("./service");
const toUrlSearchParams = require("../../lib/to-url-search-params");
/**
 * @typedef {import('../../types').Options} Options
 * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions
 * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin
 * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions
 * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query
 * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status
 * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI
 */ class Remote {
    /**
   * @param {Options} options
   */ constructor(options){
        this.client = new Client(options);
        /** @readonly */ this.service = new Service(options);
    }
}
/**
 * @type {RemotePiningAPI["add"]}
 */ Remote.prototype.add = async function add(cid, { timeout , signal , headers , ...query }) {
    const response = await this.client.post("pin/remote/add", {
        timeout,
        signal,
        headers,
        searchParams: encodeAddParams({
            cid,
            ...query
        })
    });
    return decodePin(await response.json());
};
/**
 * @type {RemotePiningAPI["ls"]}
 */ Remote.prototype.ls = async function* ls({ timeout , signal , headers , ...query }) {
    const response = await this.client.post("pin/remote/ls", {
        timeout,
        signal,
        headers,
        searchParams: encodeQuery(query)
    });
    for await (const pin of response.ndjson())yield decodePin(pin);
};
/**
 * @type {RemotePiningAPI["rm"]}
 */ Remote.prototype.rm = async function rm({ timeout , signal , headers , ...query }) {
    await this.client.post("pin/remote/rm", {
        timeout,
        signal,
        headers,
        searchParams: encodeQuery({
            ...query,
            all: false
        })
    });
};
/**
 * @type {RemotePiningAPI["rmAll"]}
 */ Remote.prototype.rmAll = async function({ timeout , signal , headers , ...query }) {
    await this.client.post("pin/remote/rm", {
        timeout,
        signal,
        headers,
        searchParams: encodeQuery({
            ...query,
            all: true
        })
    });
};
/**
 * @param {Object} json
 * @param {string} json.Name
 * @param {string} json.Cid
 * @param {Status} json.Status
 * @returns {Pin}
 */ const decodePin = ({ Name: name , Status: status , Cid: cid  })=>{
    return {
        cid: CID.parse(cid),
        name,
        status
    };
};
/**
 * @param {any} service
 * @returns {string}
 */ const encodeService = (service)=>{
    if (typeof service === "string" && service !== "") return service;
    else throw new TypeError("service name must be passed");
};
/**
 * @param {any} cid
 * @returns {string}
 */ const encodeCID = (cid)=>{
    if (CID.asCID(cid)) return cid.toString();
    else throw new TypeError(`CID instance expected instead of ${typeof cid}`);
};
/**
 * @param {Query & { all?: boolean }} query
 * @returns {URLSearchParams}
 */ const encodeQuery = ({ service , cid , name , status , all  })=>{
    const query = toUrlSearchParams({
        service: encodeService(service),
        name,
        force: all ? true : undefined
    });
    if (cid) for (const value of cid)query.append("cid", encodeCID(value));
    if (status) for (const value1 of status)query.append("status", value1);
    return query;
};
/**
 * @param {AddOptions & {cid:CID}} options
 * @returns {URLSearchParams}
 */ const encodeAddParams = ({ cid , service , background , name , origins  })=>{
    const params = toUrlSearchParams({
        arg: encodeCID(cid),
        service: encodeService(service),
        name,
        background: background ? true : undefined
    });
    if (origins) for (const origin of origins)params.append("origin", origin.toString());
    return params;
};
module.exports = Remote;

},{"multiformats/cid":"4uoBU","../../lib/core":"8TIb9","./service":"7SpdP","../../lib/to-url-search-params":"dXrzw"}],"7SpdP":[function(require,module,exports) {
"use strict";
const Client = require("../../lib/core");
const toUrlSearchParams = require("../../lib/to-url-search-params");
/**
 * @typedef {import('../../types').Options} Options
 * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions
 * @typedef {import('ipfs-core-types/src/pin/remote/service').Credentials} Credentials
 * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinService} RemotePinService
 * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat
 * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI
 * @typedef {import('ipfs-core-types/src/pin/remote/service').Stat} Stat
 */ class Service {
    /**
   * @param {Options} options
   */ constructor(options){
        this.client = new Client(options);
    }
    /**
   * @param {URL} url
   */ static encodeEndpoint(url) {
        const href = String(url);
        if (href === "undefined") throw Error("endpoint is required");
        // Workaround trailing `/` issue in go-ipfs
        // @see https://github.com/ipfs/go-ipfs/issues/7826
        return href[href.length - 1] === "/" ? href.slice(0, -1) : href;
    }
    /**
   * @param {any} json
   * @returns {RemotePinServiceWithStat}
   */ static decodeRemoteService(json) {
        return {
            service: json.Service,
            endpoint: new URL(json.ApiEndpoint),
            ...json.Stat && {
                stat: Service.decodeStat(json.Stat)
            }
        };
    }
    /**
   * @param {any} json
   * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}
   */ static decodeStat(json) {
        switch(json.Status){
            case "valid":
                {
                    const { Pinning , Pinned , Queued , Failed  } = json.PinCount;
                    return {
                        status: "valid",
                        pinCount: {
                            queued: Queued,
                            pinning: Pinning,
                            pinned: Pinned,
                            failed: Failed
                        }
                    };
                }
            case "invalid":
                return {
                    status: "invalid"
                };
            default:
                return {
                    status: json.Status
                };
        }
    }
}
/**
 * @type {RemotePiningServiceAPI["add"]}
 */ Service.prototype.add = async function add(name, options) {
    const { endpoint , key , headers , timeout , signal  } = options;
    await this.client.post("pin/remote/service/add", {
        timeout,
        signal,
        searchParams: toUrlSearchParams({
            arg: [
                name,
                Service.encodeEndpoint(endpoint),
                key
            ]
        }),
        headers
    });
};
/**
 * @type {RemotePiningServiceAPI["rm"]}
 */ Service.prototype.rm = async function rm(name, options = {}) {
    await this.client.post("pin/remote/service/rm", {
        signal: options.signal,
        headers: options.headers,
        searchParams: toUrlSearchParams({
            arg: name
        })
    });
};
/**
 * @type {RemotePiningServiceAPI["ls"]}
 */ Service.prototype.ls = async function ls(options = {}) {
    // @ts-ignore cannot derive option type from typedef
    const { stat , headers , timeout , signal  } = options;
    const response = await this.client.post("pin/remote/service/ls", {
        timeout,
        signal,
        headers,
        searchParams: stat === true ? toUrlSearchParams({
            stat
        }) : undefined
    });
    /** @type {{RemoteServices: Object[]}} */ const { RemoteServices  } = await response.json();
    return RemoteServices.map(Service.decodeRemoteService);
};
module.exports = Service;

},{"../../lib/core":"8TIb9","../../lib/to-url-search-params":"dXrzw"}],"81kfO":[function(require,module,exports) {
"use strict";
const addAll = require("./add-all");
const last = require("it-last");
const configure = require("../lib/configure");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI
 */ /**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>{
    const all = addAll(config);
    return configure(()=>{
        /**
     * @type {PinAPI["add"]}
     */ async function add(path, options = {}) {
            // @ts-ignore last can return undefined
            return last(all([
                {
                    path,
                    ...options
                }
            ], options));
        }
        return add;
    })(config);
};

},{"./add-all":"3HW7Y","it-last":"iWUUH","../lib/configure":"9w0UV"}],"3HW7Y":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const { normaliseInput  } = require("ipfs-core-utils/src/pins/normalise-input");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {PinAPI["addAll"]}
   */ async function* addAll(source, options = {}) {
        for await (const { path , recursive , metadata  } of normaliseInput(source)){
            const res = await api.post("pin/add", {
                signal: options.signal,
                searchParams: toUrlSearchParams({
                    ...options,
                    arg: path,
                    recursive,
                    metadata: metadata ? JSON.stringify(metadata) : undefined,
                    stream: true
                }),
                headers: options.headers
            });
            for await (const pin of res.ndjson()){
                if (pin.Pins) {
                    for (const cid of pin.Pins)yield CID.parse(cid);
                    continue;
                }
                yield CID.parse(pin);
            }
        }
    }
    return addAll;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","ipfs-core-utils/src/pins/normalise-input":"6eHk9","../lib/to-url-search-params":"dXrzw"}],"6eHk9":[function(require,module,exports) {
"use strict";
const errCode = require("err-code");
const { CID  } = require("multiformats/cid");
/**
 * @typedef {Object} Pinnable
 * @property {string | InstanceType<typeof window.String> | CID} [path]
 * @property {CID} [cid]
 * @property {boolean} [recursive]
 * @property {any} [metadata]
 *
 * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin
 * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source
 *
 * @typedef {Object} Pin
 * @property {string|CID} path
 * @property {boolean} recursive
 * @property {any} [metadata]
 */ /**
 * Transform one of:
 *
 * ```ts
 * CID
 * String
 * { cid: CID recursive, metadata }
 * { path: String recursive, metadata }
 * Iterable<CID>
 * Iterable<String>
 * Iterable<{ cid: CID recursive, metadata }>
 * Iterable<{ path: String recursive, metadata }>
 * AsyncIterable<CID>
 * AsyncIterable<String>
 * AsyncIterable<{ cid: CID recursive, metadata }>
 * AsyncIterable<{ path: String recursive, metadata }>
 * ```
 * Into:
 *
 * ```ts
 * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>
 * ```
 *
 * @param {Source} input
 * @returns {AsyncIterable<Pin>}
 */ // eslint-disable-next-line complexity
async function* normaliseInput(input) {
    // must give us something
    if (input === null || input === undefined) throw errCode(new Error(`Unexpected input: ${input}`), "ERR_UNEXPECTED_INPUT");
    // CID
    const cid = CID.asCID(input);
    if (cid) {
        yield toPin({
            cid
        });
        return;
    }
    if (input instanceof String || typeof input === "string") {
        yield toPin({
            path: input
        });
        return;
    }
    // { cid: CID recursive, metadata }
    // @ts-ignore - it still could be iterable or async iterable
    if (input.cid != null || input.path != null) // @ts-ignore
    return yield toPin(input);
    // Iterable<?>
    if (Symbol.iterator in input) {
        // @ts-ignore
        const iterator = input[Symbol.iterator]();
        const first = iterator.next();
        if (first.done) return iterator;
        // Iterable<CID|String>
        if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === "string") {
            yield toPin({
                cid: first.value
            });
            for (const cid of iterator)yield toPin({
                cid
            });
            return;
        }
        // Iterable<{ cid: CID recursive, metadata }>
        if (first.value.cid != null || first.value.path != null) {
            yield toPin(first.value);
            for (const obj of iterator)yield toPin(obj);
            return;
        }
        throw errCode(new Error("Unexpected input: " + typeof input), "ERR_UNEXPECTED_INPUT");
    }
    // AsyncIterable<?>
    if (Symbol.asyncIterator in input) {
        // @ts-ignore
        const iterator = input[Symbol.asyncIterator]();
        const first = await iterator.next();
        if (first.done) return iterator;
        // AsyncIterable<CID|String>
        if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === "string") {
            yield toPin({
                cid: first.value
            });
            for await (const cid of iterator)yield toPin({
                cid
            });
            return;
        }
        // AsyncIterable<{ cid: CID|String recursive, metadata }>
        if (first.value.cid != null || first.value.path != null) {
            yield toPin(first.value);
            for await (const obj of iterator)yield toPin(obj);
            return;
        }
        throw errCode(new Error("Unexpected input: " + typeof input), "ERR_UNEXPECTED_INPUT");
    }
    throw errCode(new Error("Unexpected input: " + typeof input), "ERR_UNEXPECTED_INPUT");
}
/**
 * @param {Pinnable} input
 */ function toPin(input) {
    const path = input.cid || `${input.path}`;
    if (!path) throw errCode(new Error("Unexpected input: Please path either a CID or an IPFS path"), "ERR_UNEXPECTED_INPUT");
    /** @type {Pin} */ const pin = {
        path,
        recursive: input.recursive !== false
    };
    if (input.metadata != null) pin.metadata = input.metadata;
    return pin;
}
module.exports = {
    normaliseInput
};

},{"err-code":"dUrrM","multiformats/cid":"4uoBU"}],"ebBid":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI
 */ /**
 * @param {string} type
 * @param {string} cid
 * @param {Record<string, string>} metadata
 */ function toPin(type, cid, metadata) {
    /** @type {import('ipfs-core-types/src/pin').LsResult} */ const pin = {
        type,
        cid: CID.parse(cid)
    };
    if (metadata) pin.metadata = metadata;
    return pin;
}
module.exports = configure((api)=>{
    /**
   * @type {PinAPI["ls"]}
   */ async function* ls(options = {}) {
        /** @type {any[]} */ let paths = [];
        if (options.paths) paths = Array.isArray(options.paths) ? options.paths : [
            options.paths
        ];
        const res = await api.post("pin/ls", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                ...options,
                arg: paths.map((path)=>`${path}`),
                stream: true
            }),
            headers: options.headers
        });
        for await (const pin of res.ndjson()){
            if (pin.Keys) {
                for (const cid of Object.keys(pin.Keys))yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);
                return;
            }
            yield toPin(pin.Type, pin.Cid, pin.Metadata);
        }
    }
    return ls;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"6xW9Y":[function(require,module,exports) {
"use strict";
const rmAll = require("./rm-all");
const last = require("it-last");
const configure = require("../lib/configure");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI
 */ /**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>{
    const all = rmAll(config);
    return configure(()=>{
        /**
     * @type {PinAPI["rm"]}
     */ async function rm(path, options = {}) {
            // @ts-ignore last can return undefined
            return last(all([
                {
                    path,
                    ...options
                }
            ], options));
        }
        return rm;
    })(config);
};

},{"./rm-all":"2tiIy","it-last":"iWUUH","../lib/configure":"9w0UV"}],"2tiIy":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const { normaliseInput  } = require("ipfs-core-utils/src/pins/normalise-input");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {PinAPI["rmAll"]}
   */ async function* rmAll(source, options = {}) {
        for await (const { path , recursive  } of normaliseInput(source)){
            const searchParams = new URLSearchParams(options.searchParams);
            searchParams.append("arg", `${path}`);
            if (recursive != null) searchParams.set("recursive", String(recursive));
            const res = await api.post("pin/rm", {
                signal: options.signal,
                headers: options.headers,
                searchParams: toUrlSearchParams({
                    ...options,
                    arg: `${path}`,
                    recursive
                })
            });
            for await (const pin of res.ndjson()){
                if (pin.Pins) {
                    yield* pin.Pins.map((/** @type {string} */ cid)=>CID.parse(cid));
                    continue;
                }
                yield CID.parse(pin);
            }
        }
    }
    return rmAll;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","ipfs-core-utils/src/pins/normalise-input":"6eHk9","../lib/to-url-search-params":"dXrzw"}],"fwPv1":[function(require,module,exports) {
"use strict";
const toCamel = require("./lib/object-to-camel");
const configure = require("./lib/configure");
const toUrlSearchParams = require("./lib/to-url-search-params");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RootAPI["ping"]}
   */ async function* ping(peerId, options = {}) {
        const res = await api.post("ping", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: `${peerId}`,
                ...options
            }),
            headers: options.headers,
            transform: toCamel
        });
        yield* res.ndjson();
    }
    return ping;
});

},{"./lib/object-to-camel":"fxBIC","./lib/configure":"9w0UV","./lib/to-url-search-params":"dXrzw"}],"fvEgL":[function(require,module,exports) {
"use strict";
const SubscriptionTracker = require("./subscription-tracker");
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>{
    const subscriptionTracker = new SubscriptionTracker();
    return {
        ls: require("./ls")(config),
        peers: require("./peers")(config),
        publish: require("./publish")(config),
        subscribe: require("./subscribe")(config, subscriptionTracker),
        unsubscribe: require("./unsubscribe")(config, subscriptionTracker)
    };
};

},{"./subscription-tracker":"c2vdv","./ls":"9pye4","./peers":"4rBxe","./publish":"dDvCW","./subscribe":"14U1U","./unsubscribe":"dzoY8"}],"c2vdv":[function(require,module,exports) {
"use strict";
const { AbortController  } = require("native-abort-controller");
/**
 * @typedef {import('ipfs-core-types/src/pubsub').MessageHandlerFn} MessageHandlerFn
 *
 * @typedef {Object} Subscription
 * @property {MessageHandlerFn} handler
 * @property {AbortController} controller
 */ class SubscriptionTracker {
    constructor(){
        /** @type {Map<string, Subscription[]>} */ this._subs = new Map();
    }
    /**
   * @param {string} topic
   * @param {MessageHandlerFn} handler
   * @param {AbortSignal} [signal]
   */ subscribe(topic, handler, signal) {
        const topicSubs = this._subs.get(topic) || [];
        if (topicSubs.find((s)=>s.handler === handler)) throw new Error(`Already subscribed to ${topic} with this handler`);
        // Create controller so a call to unsubscribe can cancel the request
        const controller = new AbortController();
        this._subs.set(topic, [
            {
                handler,
                controller
            }
        ].concat(topicSubs));
        // If there is an external signal, forward the abort event
        if (signal) signal.addEventListener("abort", ()=>this.unsubscribe(topic, handler));
        return controller.signal;
    }
    /**
   * @param {string} topic
   * @param {MessageHandlerFn} [handler]
   */ unsubscribe(topic, handler) {
        const subs = this._subs.get(topic) || [];
        let unsubs;
        if (handler) {
            this._subs.set(topic, subs.filter((s)=>s.handler !== handler));
            unsubs = subs.filter((s)=>s.handler === handler);
        } else {
            this._subs.set(topic, []);
            unsubs = subs;
        }
        if (!(this._subs.get(topic) || []).length) this._subs.delete(topic);
        unsubs.forEach((s)=>s.controller.abort());
    }
}
module.exports = SubscriptionTracker;

},{"native-abort-controller":"8rhv7"}],"9pye4":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {PubsubAPI["ls"]}
   */ async function ls(options = {}) {
        const { Strings  } = await (await api.post("pubsub/ls", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        })).json();
        return Strings || [];
    }
    return ls;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"4rBxe":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {PubsubAPI["peers"]}
   */ async function peers(topic, options = {}) {
        const res = await api.post("pubsub/peers", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: topic,
                ...options
            }),
            headers: options.headers
        });
        const { Strings  } = await res.json();
        return Strings || [];
    }
    return peers;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"dDvCW":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
const multipartRequest = require("../lib/multipart-request");
const abortSignal = require("../lib/abort-signal");
const { AbortController  } = require("native-abort-controller");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {PubsubAPI["publish"]}
   */ async function publish(topic, data, options = {}) {
        const searchParams = toUrlSearchParams({
            arg: topic,
            ...options
        });
        // allow aborting requests on body errors
        const controller = new AbortController();
        const signal = abortSignal(controller.signal, options.signal);
        const res = await api.post("pubsub/pub", {
            signal,
            searchParams,
            ...await multipartRequest(data, controller, options.headers)
        });
        await res.text();
    }
    return publish;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","../lib/multipart-request":"bsPTI","../lib/abort-signal":"gbGf5","native-abort-controller":"8rhv7"}],"14U1U":[function(require,module,exports) {
"use strict";
const { fromString: uint8ArrayFromString  } = require("uint8arrays/from-string");
const { toString: uint8ArrayToString  } = require("uint8arrays/to-string");
const log = require("debug")("ipfs-http-client:pubsub:subscribe");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/pubsub').Message} Message
 * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn
 * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI
 * @typedef {import('../types').Options} Options
 */ /**
 * @param {Options} options
 * @param {import('./subscription-tracker')} subsTracker
 */ module.exports = (options1, subsTracker)=>{
    return configure((api)=>{
        /**
     * @type {PubsubAPI["subscribe"]}
     */ async function subscribe(topic, handler, options = {}) {
            options.signal = subsTracker.subscribe(topic, handler, options.signal);
            /** @type {(value?: any) => void} */ let done;
            /** @type {(error: Error) => void} */ let fail;
            const result = new Promise((resolve, reject)=>{
                done = resolve;
                fail = reject;
            });
            // In Firefox, the initial call to fetch does not resolve until some data
            // is received. If this doesn't happen within 1 second assume success
            const ffWorkaround = setTimeout(()=>done(), 1000);
            // Do this async to not block Firefox
            api.post("pubsub/sub", {
                signal: options.signal,
                searchParams: toUrlSearchParams({
                    arg: topic,
                    ...options
                }),
                headers: options.headers
            }).catch((err)=>{
                // Initial subscribe fail, ensure we clean up
                subsTracker.unsubscribe(topic, handler);
                fail(err);
            }).then((response)=>{
                clearTimeout(ffWorkaround);
                if (!response) // if there was no response, the subscribe failed
                return;
                readMessages(response, {
                    onMessage: handler,
                    onEnd: ()=>subsTracker.unsubscribe(topic, handler),
                    onError: options.onError
                });
                done();
            });
            return result;
        }
        return subscribe;
    })(options1);
};
/**
 * @param {import('ipfs-utils/src/types').ExtendedResponse} response
 * @param {object} options
 * @param {(message: Message) => void} options.onMessage
 * @param {() => void} options.onEnd
 * @param {ErrorHandlerFn} [options.onError]
 */ async function readMessages(response, { onMessage , onEnd , onError  }) {
    onError = onError || log;
    try {
        for await (const msg of response.ndjson())try {
            if (!msg.from) continue;
            onMessage({
                from: uint8ArrayToString(uint8ArrayFromString(msg.from, "base64pad"), "base58btc"),
                data: uint8ArrayFromString(msg.data, "base64pad"),
                seqno: uint8ArrayFromString(msg.seqno, "base64pad"),
                topicIDs: msg.topicIDs
            });
        } catch (err) {
            err.message = `Failed to parse pubsub message: ${err.message}`;
            onError(err, false, msg) // Not fatal
            ;
        }
    } catch (err) {
        if (!isAbortError(err)) onError(err, true) // Fatal
        ;
    } finally{
        onEnd();
    }
}
/**
 * @param {Error & {type?:string}} error
 * @returns {boolean}
 */ const isAbortError = (error)=>{
    switch(error.type){
        case "aborted":
            return true;
        // It is `abort` in Electron instead of `aborted`
        case "abort":
            return true;
        default:
            // FIXME: In testing with Chrome, err.type is undefined (should not be!)
            // Temporarily use the name property instead.
            return error.name === "AbortError";
    }
};

},{"uint8arrays/from-string":"7qjkp","uint8arrays/to-string":"w8mvE","debug":"l0oUb","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"dzoY8":[function(require,module,exports) {
"use strict";
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI
 * @typedef {import('../types').Options} Options
 */ /**
 * @param {Options} options
 * @param {import('./subscription-tracker')} subsTracker
 */ module.exports = (options, subsTracker)=>{
    /**
   * @type {PubsubAPI["unsubscribe"]}
   */ async function unsubscribe(topic, handler) {
        subsTracker.unsubscribe(topic, handler);
    }
    return unsubscribe;
};

},{}],"i8u5V":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const toCamel = require("../lib/object-to-camel");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI
 */ module.exports = configure((api, opts)=>{
    /**
   * @type {RefsAPI["refs"]}
   */ const refs = async function*(args, options = {}) {
        /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */ const argsArr = Array.isArray(args) ? args : [
            args
        ];
        const res = await api.post("refs", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: argsArr.map((arg)=>`${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),
                ...options
            }),
            headers: options.headers,
            transform: toCamel
        });
        yield* res.ndjson();
    };
    return Object.assign(refs, {
        local: require("./local")(opts)
    });
});

},{"multiformats/cid":"4uoBU","../lib/object-to-camel":"fxBIC","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw","./local":"l0WZi"}],"l0WZi":[function(require,module,exports) {
"use strict";
const toCamel = require("../lib/object-to-camel");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RefsAPI["local"]}
   */ async function* refsLocal(options = {}) {
        const res = await api.post("refs/local", {
            signal: options.signal,
            transform: toCamel,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        yield* res.ndjson();
    }
    return refsLocal;
});

},{"../lib/object-to-camel":"fxBIC","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"fIMJx":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        gc: require("./gc")(config),
        stat: require("./stat")(config),
        version: require("./version")(config)
    });

},{"./gc":"6qJUp","./stat":"fHY7w","./version":"jnhTv"}],"6qJUp":[function(require,module,exports) {
"use strict";
const { CID  } = require("multiformats/cid");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RepoAPI["gc"]}
   */ async function* gc(options = {}) {
        const res1 = await api.post("repo/gc", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers,
            transform: (res)=>{
                return {
                    err: res.Error ? new Error(res.Error) : null,
                    cid: (res.Key || {})["/"] ? CID.parse(res.Key["/"]) : null
                };
            }
        });
        yield* res1.ndjson();
    }
    return gc;
});

},{"multiformats/cid":"4uoBU","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"fHY7w":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RepoAPI["stat"]}
   */ async function stat(options = {}) {
        const res = await api.post("repo/stat", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        const data = await res.json();
        return {
            numObjects: BigInt(data.NumObjects),
            repoSize: BigInt(data.RepoSize),
            repoPath: data.RepoPath,
            version: data.Version,
            storageMax: BigInt(data.StorageMax)
        };
    }
    return stat;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"jnhTv":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RepoAPI["version"]}
   */ async function version(options = {}) {
        const res = await (await api.post("repo/version", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        })).json();
        return res.Version;
    }
    return version;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"2F7e3":[function(require,module,exports) {
"use strict";
const configure = require("./lib/configure");
const toUrlSearchParams = require("./lib/to-url-search-params");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RootAPI["resolve"]}
   */ async function resolve(path, options = {}) {
        const res = await api.post("resolve", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: path,
                ...options
            }),
            headers: options.headers
        });
        const { Path  } = await res.json();
        return Path;
    }
    return resolve;
});

},{"./lib/configure":"9w0UV","./lib/to-url-search-params":"dXrzw"}],"5SWkB":[function(require,module,exports) {
"use strict";
const configure = require("./lib/configure");
const errCode = require("err-code");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RootAPI["start"]}
   */ const start = async (options = {})=>{
        throw errCode(new Error("Not implemented"), "ERR_NOT_IMPLEMENTED");
    };
    return start;
});

},{"./lib/configure":"9w0UV","err-code":"dUrrM"}],"bdAqS":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        bitswap: require("../bitswap/stat")(config),
        bw: require("./bw")(config),
        repo: require("../repo/stat")(config)
    });

},{"../bitswap/stat":"hTAmV","./bw":"18TPV","../repo/stat":"fHY7w"}],"18TPV":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/stats').API<HTTPClientExtraOptions>} StatsAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {StatsAPI["bw"]}
   */ async function* bw(options = {}) {
        const res = await api.post("stats/bw", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers,
            transform: (stats)=>({
                    totalIn: BigInt(stats.TotalIn),
                    totalOut: BigInt(stats.TotalOut),
                    rateIn: parseFloat(stats.RateIn),
                    rateOut: parseFloat(stats.RateOut)
                })
        });
        yield* res.ndjson();
    }
    return bw;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"dJDuV":[function(require,module,exports) {
"use strict";
const configure = require("./lib/configure");
const toUrlSearchParams = require("./lib/to-url-search-params");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RootAPI["stop"]}
   */ async function stop(options = {}) {
        const res = await api.post("shutdown", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        await res.text();
    }
    return stop;
});

},{"./lib/configure":"9w0UV","./lib/to-url-search-params":"dXrzw"}],"k78Ib":[function(require,module,exports) {
"use strict";
/**
 * @param {import('../types').Options} config
 */ module.exports = (config)=>({
        addrs: require("./addrs")(config),
        connect: require("./connect")(config),
        disconnect: require("./disconnect")(config),
        localAddrs: require("./localAddrs")(config),
        peers: require("./peers")(config)
    });

},{"./addrs":"6zMsj","./connect":"76gHc","./disconnect":"a1y7x","./localAddrs":"delh4","./peers":"ilhdz"}],"6zMsj":[function(require,module,exports) {
"use strict";
const { Multiaddr  } = require("multiaddr");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {SwarmAPI["addrs"]}
   */ async function addrs(options = {}) {
        const res = await api.post("swarm/addrs", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        /** @type {{ Addrs: Record<string, string[]> }} */ const { Addrs  } = await res.json();
        return Object.keys(Addrs).map((id)=>({
                id,
                addrs: (Addrs[id] || []).map((a)=>new Multiaddr(a))
            }));
    }
    return addrs;
});

},{"multiaddr":"dOMJu","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"76gHc":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {SwarmAPI["connect"]}
   */ async function connect(addr, options = {}) {
        const res = await api.post("swarm/connect", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: addr,
                ...options
            }),
            headers: options.headers
        });
        const { Strings  } = await res.json();
        return Strings || [];
    }
    return connect;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"a1y7x":[function(require,module,exports) {
"use strict";
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {SwarmAPI["disconnect"]}
   */ async function disconnect(addr, options = {}) {
        const res = await api.post("swarm/disconnect", {
            signal: options.signal,
            searchParams: toUrlSearchParams({
                arg: addr,
                ...options
            }),
            headers: options.headers
        });
        const { Strings  } = await res.json();
        return Strings || [];
    }
    return disconnect;
});

},{"../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"delh4":[function(require,module,exports) {
"use strict";
const { Multiaddr  } = require("multiaddr");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {SwarmAPI["localAddrs"]}
   */ async function localAddrs(options = {}) {
        const res = await api.post("swarm/addrs/local", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        /** @type {{ Strings: string[] }} */ const { Strings  } = await res.json();
        return (Strings || []).map((a)=>new Multiaddr(a));
    }
    return localAddrs;
});

},{"multiaddr":"dOMJu","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"ilhdz":[function(require,module,exports) {
"use strict";
const { Multiaddr  } = require("multiaddr");
const configure = require("../lib/configure");
const toUrlSearchParams = require("../lib/to-url-search-params");
/**
 * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {SwarmAPI["peers"]}
   */ async function peers(options = {}) {
        const res = await api.post("swarm/peers", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */ const { Peers  } = await res.json();
        return (Peers || []).map((peer)=>{
            return {
                addr: new Multiaddr(peer.Addr),
                peer: peer.Peer,
                muxer: peer.Muxer,
                latency: peer.Latency,
                streams: peer.Streams,
                direction: peer.Direction == null ? undefined : peer.Direction === 0 ? "inbound" : "outbound"
            };
        });
    }
    return peers;
});

},{"multiaddr":"dOMJu","../lib/configure":"9w0UV","../lib/to-url-search-params":"dXrzw"}],"7lUhc":[function(require,module,exports) {
"use strict";
const toCamel = require("./lib/object-to-camel");
const configure = require("./lib/configure");
const toUrlSearchParams = require("./lib/to-url-search-params");
/**
 * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions
 * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI
 */ module.exports = configure((api)=>{
    /**
   * @type {RootAPI["version"]}
   */ async function version(options = {}) {
        const res = await api.post("version", {
            signal: options.signal,
            searchParams: toUrlSearchParams(options),
            headers: options.headers
        });
        // @ts-ignore server output is not typed
        return toCamel(await res.json());
    }
    return version;
});

},{"./lib/object-to-camel":"fxBIC","./lib/configure":"9w0UV","./lib/to-url-search-params":"dXrzw"}]},["dAPVv","c69Lw","5se51"], "5se51", "parcelRequire94c2")

//# sourceMappingURL=airdropUpload.b13a246d.js.map
